
Acoustic Recorder v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a2c8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012c0c  0801a598  0801a598  0002a598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802d1a4  0802d1a4  0003d1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802d1ac  0802d1ac  0003d1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802d1b0  0802d1b0  0003d1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000240  24000000  0802d1b4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000312b0  24000240  0802d3f4  00040240  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  240314f0  0802d3f4  000414f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00040240  2**0
                  CONTENTS, READONLY
 10 .comment      000000b8  00000000  00000000  0004026e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037813  00000000  00000000  00040326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000616b  00000000  00000000  00077b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002180  00000000  00000000  0007dca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000191f  00000000  00000000  0007fe28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b30a  00000000  00000000  00081747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00034561  00000000  00000000  000bca51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016caf9  00000000  00000000  000f0fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a8dc  00000000  00000000  0025daac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  00268388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000066f9  00000000  00000000  00268400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 000007c0  00000000  00000000  0026eaf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000240 	.word	0x24000240
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801a580 	.word	0x0801a580

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000244 	.word	0x24000244
 800030c:	0801a580 	.word	0x0801a580

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_ldivmod>:
 8000758:	b97b      	cbnz	r3, 800077a <__aeabi_ldivmod+0x22>
 800075a:	b972      	cbnz	r2, 800077a <__aeabi_ldivmod+0x22>
 800075c:	2900      	cmp	r1, #0
 800075e:	bfbe      	ittt	lt
 8000760:	2000      	movlt	r0, #0
 8000762:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000766:	e006      	blt.n	8000776 <__aeabi_ldivmod+0x1e>
 8000768:	bf08      	it	eq
 800076a:	2800      	cmpeq	r0, #0
 800076c:	bf1c      	itt	ne
 800076e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000772:	f04f 30ff 	movne.w	r0, #4294967295
 8000776:	f000 b9f3 	b.w	8000b60 <__aeabi_idiv0>
 800077a:	f1ad 0c08 	sub.w	ip, sp, #8
 800077e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000782:	2900      	cmp	r1, #0
 8000784:	db09      	blt.n	800079a <__aeabi_ldivmod+0x42>
 8000786:	2b00      	cmp	r3, #0
 8000788:	db1a      	blt.n	80007c0 <__aeabi_ldivmod+0x68>
 800078a:	f000 f885 	bl	8000898 <__udivmoddi4>
 800078e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000796:	b004      	add	sp, #16
 8000798:	4770      	bx	lr
 800079a:	4240      	negs	r0, r0
 800079c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db1b      	blt.n	80007dc <__aeabi_ldivmod+0x84>
 80007a4:	f000 f878 	bl	8000898 <__udivmoddi4>
 80007a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b0:	b004      	add	sp, #16
 80007b2:	4240      	negs	r0, r0
 80007b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b8:	4252      	negs	r2, r2
 80007ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007be:	4770      	bx	lr
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	f000 f867 	bl	8000898 <__udivmoddi4>
 80007ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d2:	b004      	add	sp, #16
 80007d4:	4240      	negs	r0, r0
 80007d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007da:	4770      	bx	lr
 80007dc:	4252      	negs	r2, r2
 80007de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007e2:	f000 f859 	bl	8000898 <__udivmoddi4>
 80007e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ee:	b004      	add	sp, #16
 80007f0:	4252      	negs	r2, r2
 80007f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_uldivmod>:
 80007f8:	b953      	cbnz	r3, 8000810 <__aeabi_uldivmod+0x18>
 80007fa:	b94a      	cbnz	r2, 8000810 <__aeabi_uldivmod+0x18>
 80007fc:	2900      	cmp	r1, #0
 80007fe:	bf08      	it	eq
 8000800:	2800      	cmpeq	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f04f 31ff 	movne.w	r1, #4294967295
 8000808:	f04f 30ff 	movne.w	r0, #4294967295
 800080c:	f000 b9a8 	b.w	8000b60 <__aeabi_idiv0>
 8000810:	f1ad 0c08 	sub.w	ip, sp, #8
 8000814:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000818:	f000 f83e 	bl	8000898 <__udivmoddi4>
 800081c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000824:	b004      	add	sp, #16
 8000826:	4770      	bx	lr

08000828 <__aeabi_d2lz>:
 8000828:	b508      	push	{r3, lr}
 800082a:	4602      	mov	r2, r0
 800082c:	460b      	mov	r3, r1
 800082e:	ec43 2b17 	vmov	d7, r2, r3
 8000832:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	d403      	bmi.n	8000844 <__aeabi_d2lz+0x1c>
 800083c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000840:	f000 b80a 	b.w	8000858 <__aeabi_d2ulz>
 8000844:	eeb1 7b47 	vneg.f64	d7, d7
 8000848:	ec51 0b17 	vmov	r0, r1, d7
 800084c:	f000 f804 	bl	8000858 <__aeabi_d2ulz>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	bd08      	pop	{r3, pc}

08000858 <__aeabi_d2ulz>:
 8000858:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000888 <__aeabi_d2ulz+0x30>
 800085c:	ec41 0b17 	vmov	d7, r0, r1
 8000860:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000890 <__aeabi_d2ulz+0x38>
 8000864:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000868:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800086c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000870:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000874:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000878:	ee16 1a10 	vmov	r1, s12
 800087c:	ee17 0a90 	vmov	r0, s15
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	f3af 8000 	nop.w
 8000888:	00000000 	.word	0x00000000
 800088c:	3df00000 	.word	0x3df00000
 8000890:	00000000 	.word	0x00000000
 8000894:	41f00000 	.word	0x41f00000

08000898 <__udivmoddi4>:
 8000898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800089c:	9e08      	ldr	r6, [sp, #32]
 800089e:	460d      	mov	r5, r1
 80008a0:	4604      	mov	r4, r0
 80008a2:	460f      	mov	r7, r1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d14a      	bne.n	800093e <__udivmoddi4+0xa6>
 80008a8:	428a      	cmp	r2, r1
 80008aa:	4694      	mov	ip, r2
 80008ac:	d965      	bls.n	800097a <__udivmoddi4+0xe2>
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	b143      	cbz	r3, 80008c6 <__udivmoddi4+0x2e>
 80008b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80008b8:	f1c3 0220 	rsb	r2, r3, #32
 80008bc:	409f      	lsls	r7, r3
 80008be:	fa20 f202 	lsr.w	r2, r0, r2
 80008c2:	4317      	orrs	r7, r2
 80008c4:	409c      	lsls	r4, r3
 80008c6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ca:	fa1f f58c 	uxth.w	r5, ip
 80008ce:	fbb7 f1fe 	udiv	r1, r7, lr
 80008d2:	0c22      	lsrs	r2, r4, #16
 80008d4:	fb0e 7711 	mls	r7, lr, r1, r7
 80008d8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008dc:	fb01 f005 	mul.w	r0, r1, r5
 80008e0:	4290      	cmp	r0, r2
 80008e2:	d90a      	bls.n	80008fa <__udivmoddi4+0x62>
 80008e4:	eb1c 0202 	adds.w	r2, ip, r2
 80008e8:	f101 37ff 	add.w	r7, r1, #4294967295
 80008ec:	f080 811c 	bcs.w	8000b28 <__udivmoddi4+0x290>
 80008f0:	4290      	cmp	r0, r2
 80008f2:	f240 8119 	bls.w	8000b28 <__udivmoddi4+0x290>
 80008f6:	3902      	subs	r1, #2
 80008f8:	4462      	add	r2, ip
 80008fa:	1a12      	subs	r2, r2, r0
 80008fc:	b2a4      	uxth	r4, r4
 80008fe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000902:	fb0e 2210 	mls	r2, lr, r0, r2
 8000906:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090a:	fb00 f505 	mul.w	r5, r0, r5
 800090e:	42a5      	cmp	r5, r4
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x90>
 8000912:	eb1c 0404 	adds.w	r4, ip, r4
 8000916:	f100 32ff 	add.w	r2, r0, #4294967295
 800091a:	f080 8107 	bcs.w	8000b2c <__udivmoddi4+0x294>
 800091e:	42a5      	cmp	r5, r4
 8000920:	f240 8104 	bls.w	8000b2c <__udivmoddi4+0x294>
 8000924:	4464      	add	r4, ip
 8000926:	3802      	subs	r0, #2
 8000928:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800092c:	1b64      	subs	r4, r4, r5
 800092e:	2100      	movs	r1, #0
 8000930:	b11e      	cbz	r6, 800093a <__udivmoddi4+0xa2>
 8000932:	40dc      	lsrs	r4, r3
 8000934:	2300      	movs	r3, #0
 8000936:	e9c6 4300 	strd	r4, r3, [r6]
 800093a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800093e:	428b      	cmp	r3, r1
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0xbc>
 8000942:	2e00      	cmp	r6, #0
 8000944:	f000 80ed 	beq.w	8000b22 <__udivmoddi4+0x28a>
 8000948:	2100      	movs	r1, #0
 800094a:	e9c6 0500 	strd	r0, r5, [r6]
 800094e:	4608      	mov	r0, r1
 8000950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000954:	fab3 f183 	clz	r1, r3
 8000958:	2900      	cmp	r1, #0
 800095a:	d149      	bne.n	80009f0 <__udivmoddi4+0x158>
 800095c:	42ab      	cmp	r3, r5
 800095e:	d302      	bcc.n	8000966 <__udivmoddi4+0xce>
 8000960:	4282      	cmp	r2, r0
 8000962:	f200 80f8 	bhi.w	8000b56 <__udivmoddi4+0x2be>
 8000966:	1a84      	subs	r4, r0, r2
 8000968:	eb65 0203 	sbc.w	r2, r5, r3
 800096c:	2001      	movs	r0, #1
 800096e:	4617      	mov	r7, r2
 8000970:	2e00      	cmp	r6, #0
 8000972:	d0e2      	beq.n	800093a <__udivmoddi4+0xa2>
 8000974:	e9c6 4700 	strd	r4, r7, [r6]
 8000978:	e7df      	b.n	800093a <__udivmoddi4+0xa2>
 800097a:	b902      	cbnz	r2, 800097e <__udivmoddi4+0xe6>
 800097c:	deff      	udf	#255	; 0xff
 800097e:	fab2 f382 	clz	r3, r2
 8000982:	2b00      	cmp	r3, #0
 8000984:	f040 8090 	bne.w	8000aa8 <__udivmoddi4+0x210>
 8000988:	1a8a      	subs	r2, r1, r2
 800098a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800098e:	fa1f fe8c 	uxth.w	lr, ip
 8000992:	2101      	movs	r1, #1
 8000994:	fbb2 f5f7 	udiv	r5, r2, r7
 8000998:	fb07 2015 	mls	r0, r7, r5, r2
 800099c:	0c22      	lsrs	r2, r4, #16
 800099e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009a2:	fb0e f005 	mul.w	r0, lr, r5
 80009a6:	4290      	cmp	r0, r2
 80009a8:	d908      	bls.n	80009bc <__udivmoddi4+0x124>
 80009aa:	eb1c 0202 	adds.w	r2, ip, r2
 80009ae:	f105 38ff 	add.w	r8, r5, #4294967295
 80009b2:	d202      	bcs.n	80009ba <__udivmoddi4+0x122>
 80009b4:	4290      	cmp	r0, r2
 80009b6:	f200 80cb 	bhi.w	8000b50 <__udivmoddi4+0x2b8>
 80009ba:	4645      	mov	r5, r8
 80009bc:	1a12      	subs	r2, r2, r0
 80009be:	b2a4      	uxth	r4, r4
 80009c0:	fbb2 f0f7 	udiv	r0, r2, r7
 80009c4:	fb07 2210 	mls	r2, r7, r0, r2
 80009c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009cc:	fb0e fe00 	mul.w	lr, lr, r0
 80009d0:	45a6      	cmp	lr, r4
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x14e>
 80009d4:	eb1c 0404 	adds.w	r4, ip, r4
 80009d8:	f100 32ff 	add.w	r2, r0, #4294967295
 80009dc:	d202      	bcs.n	80009e4 <__udivmoddi4+0x14c>
 80009de:	45a6      	cmp	lr, r4
 80009e0:	f200 80bb 	bhi.w	8000b5a <__udivmoddi4+0x2c2>
 80009e4:	4610      	mov	r0, r2
 80009e6:	eba4 040e 	sub.w	r4, r4, lr
 80009ea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ee:	e79f      	b.n	8000930 <__udivmoddi4+0x98>
 80009f0:	f1c1 0720 	rsb	r7, r1, #32
 80009f4:	408b      	lsls	r3, r1
 80009f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80009fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80009fe:	fa05 f401 	lsl.w	r4, r5, r1
 8000a02:	fa20 f307 	lsr.w	r3, r0, r7
 8000a06:	40fd      	lsrs	r5, r7
 8000a08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a0c:	4323      	orrs	r3, r4
 8000a0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a12:	fa1f fe8c 	uxth.w	lr, ip
 8000a16:	fb09 5518 	mls	r5, r9, r8, r5
 8000a1a:	0c1c      	lsrs	r4, r3, #16
 8000a1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a20:	fb08 f50e 	mul.w	r5, r8, lr
 8000a24:	42a5      	cmp	r5, r4
 8000a26:	fa02 f201 	lsl.w	r2, r2, r1
 8000a2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000a2e:	d90b      	bls.n	8000a48 <__udivmoddi4+0x1b0>
 8000a30:	eb1c 0404 	adds.w	r4, ip, r4
 8000a34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a38:	f080 8088 	bcs.w	8000b4c <__udivmoddi4+0x2b4>
 8000a3c:	42a5      	cmp	r5, r4
 8000a3e:	f240 8085 	bls.w	8000b4c <__udivmoddi4+0x2b4>
 8000a42:	f1a8 0802 	sub.w	r8, r8, #2
 8000a46:	4464      	add	r4, ip
 8000a48:	1b64      	subs	r4, r4, r5
 8000a4a:	b29d      	uxth	r5, r3
 8000a4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a50:	fb09 4413 	mls	r4, r9, r3, r4
 8000a54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x1da>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a68:	d26c      	bcs.n	8000b44 <__udivmoddi4+0x2ac>
 8000a6a:	45a6      	cmp	lr, r4
 8000a6c:	d96a      	bls.n	8000b44 <__udivmoddi4+0x2ac>
 8000a6e:	3b02      	subs	r3, #2
 8000a70:	4464      	add	r4, ip
 8000a72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a76:	fba3 9502 	umull	r9, r5, r3, r2
 8000a7a:	eba4 040e 	sub.w	r4, r4, lr
 8000a7e:	42ac      	cmp	r4, r5
 8000a80:	46c8      	mov	r8, r9
 8000a82:	46ae      	mov	lr, r5
 8000a84:	d356      	bcc.n	8000b34 <__udivmoddi4+0x29c>
 8000a86:	d053      	beq.n	8000b30 <__udivmoddi4+0x298>
 8000a88:	b156      	cbz	r6, 8000aa0 <__udivmoddi4+0x208>
 8000a8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000a8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000a92:	fa04 f707 	lsl.w	r7, r4, r7
 8000a96:	40ca      	lsrs	r2, r1
 8000a98:	40cc      	lsrs	r4, r1
 8000a9a:	4317      	orrs	r7, r2
 8000a9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa8:	f1c3 0120 	rsb	r1, r3, #32
 8000aac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ab0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ab4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ab8:	409d      	lsls	r5, r3
 8000aba:	432a      	orrs	r2, r5
 8000abc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ac0:	fa1f fe8c 	uxth.w	lr, ip
 8000ac4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ac8:	fb07 1510 	mls	r5, r7, r0, r1
 8000acc:	0c11      	lsrs	r1, r2, #16
 8000ace:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ad2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ad6:	428d      	cmp	r5, r1
 8000ad8:	fa04 f403 	lsl.w	r4, r4, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x258>
 8000ade:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ae6:	d22f      	bcs.n	8000b48 <__udivmoddi4+0x2b0>
 8000ae8:	428d      	cmp	r5, r1
 8000aea:	d92d      	bls.n	8000b48 <__udivmoddi4+0x2b0>
 8000aec:	3802      	subs	r0, #2
 8000aee:	4461      	add	r1, ip
 8000af0:	1b49      	subs	r1, r1, r5
 8000af2:	b292      	uxth	r2, r2
 8000af4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000af8:	fb07 1115 	mls	r1, r7, r5, r1
 8000afc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b00:	fb05 f10e 	mul.w	r1, r5, lr
 8000b04:	4291      	cmp	r1, r2
 8000b06:	d908      	bls.n	8000b1a <__udivmoddi4+0x282>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b10:	d216      	bcs.n	8000b40 <__udivmoddi4+0x2a8>
 8000b12:	4291      	cmp	r1, r2
 8000b14:	d914      	bls.n	8000b40 <__udivmoddi4+0x2a8>
 8000b16:	3d02      	subs	r5, #2
 8000b18:	4462      	add	r2, ip
 8000b1a:	1a52      	subs	r2, r2, r1
 8000b1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b20:	e738      	b.n	8000994 <__udivmoddi4+0xfc>
 8000b22:	4631      	mov	r1, r6
 8000b24:	4630      	mov	r0, r6
 8000b26:	e708      	b.n	800093a <__udivmoddi4+0xa2>
 8000b28:	4639      	mov	r1, r7
 8000b2a:	e6e6      	b.n	80008fa <__udivmoddi4+0x62>
 8000b2c:	4610      	mov	r0, r2
 8000b2e:	e6fb      	b.n	8000928 <__udivmoddi4+0x90>
 8000b30:	4548      	cmp	r0, r9
 8000b32:	d2a9      	bcs.n	8000a88 <__udivmoddi4+0x1f0>
 8000b34:	ebb9 0802 	subs.w	r8, r9, r2
 8000b38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	e7a3      	b.n	8000a88 <__udivmoddi4+0x1f0>
 8000b40:	4645      	mov	r5, r8
 8000b42:	e7ea      	b.n	8000b1a <__udivmoddi4+0x282>
 8000b44:	462b      	mov	r3, r5
 8000b46:	e794      	b.n	8000a72 <__udivmoddi4+0x1da>
 8000b48:	4640      	mov	r0, r8
 8000b4a:	e7d1      	b.n	8000af0 <__udivmoddi4+0x258>
 8000b4c:	46d0      	mov	r8, sl
 8000b4e:	e77b      	b.n	8000a48 <__udivmoddi4+0x1b0>
 8000b50:	3d02      	subs	r5, #2
 8000b52:	4462      	add	r2, ip
 8000b54:	e732      	b.n	80009bc <__udivmoddi4+0x124>
 8000b56:	4608      	mov	r0, r1
 8000b58:	e70a      	b.n	8000970 <__udivmoddi4+0xd8>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	e742      	b.n	80009e6 <__udivmoddi4+0x14e>

08000b60 <__aeabi_idiv0>:
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b70:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d013      	beq.n	8000ba4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b80:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b84:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00b      	beq.n	8000ba4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b8c:	e000      	b.n	8000b90 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b8e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f9      	beq.n	8000b8e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b9a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ba4:	687b      	ldr	r3, [r7, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	0000      	movs	r0, r0
 8000bb4:	0000      	movs	r0, r0
	...

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b092      	sub	sp, #72	; 0x48
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f001 fce3 	bl	8002588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 f92b 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f000 fbef 	bl	80013a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bca:	f000 fbcd 	bl	8001368 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bce:	f000 f9cf 	bl	8000f70 <MX_ADC1_Init>
  MX_SDMMC1_SD_Init();
 8000bd2:	f000 fb2b 	bl	800122c <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8000bd6:	f000 fa43 	bl	8001060 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000bda:	f000 fa81 	bl	80010e0 <MX_I2C2_Init>
  MX_RTC_Init();
 8000bde:	f000 fabf 	bl	8001160 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000be2:	f000 fb41 	bl	8001268 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000be6:	f000 fb8d 	bl	8001304 <MX_USB_OTG_HS_PCD_Init>
  MX_FATFS_Init();
 8000bea:	f00e ffb9 	bl	800fb60 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SetRTCToCompileTime(&hrtc);
 8000bee:	487a      	ldr	r0, [pc, #488]	; (8000dd8 <main+0x220>)
 8000bf0:	f000 fe84 	bl	80018fc <SetRTCToCompileTime>
  Get_RTC_Time();
 8000bf4:	f000 fe52 	bl	800189c <Get_RTC_Time>
  sd_setup();
 8000bf8:	f000 fcea 	bl	80015d0 <sd_setup>
  sd_audio_file();
 8000bfc:	f000 fd0e 	bl	800161c <sd_audio_file>
  sd_data_file();
 8000c00:	f000 fd50 	bl	80016a4 <sd_data_file>

  //(16MHz/x=27MHz). So the sample rate is 27MHz/(56+12)=397KHz.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)pre_analysis_buf, PRE_ANALYSIS_BUF_LEN);
 8000c04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c08:	4974      	ldr	r1, [pc, #464]	; (8000ddc <main+0x224>)
 8000c0a:	4875      	ldr	r0, [pc, #468]	; (8000de0 <main+0x228>)
 8000c0c:	f002 fac2 	bl	8003194 <HAL_ADC_Start_DMA>

  printf("TEST TEST TEST\r\n");
 8000c10:	4874      	ldr	r0, [pc, #464]	; (8000de4 <main+0x22c>)
 8000c12:	f014 fbaf 	bl	8015374 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (app_state == PRE_ANALYSIS_RECORDING) {
 8000c16:	4b74      	ldr	r3, [pc, #464]	; (8000de8 <main+0x230>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d162      	bne.n	8000ce6 <main+0x12e>
	        if (pre_analysis_complete) {
 8000c20:	4b72      	ldr	r3, [pc, #456]	; (8000dec <main+0x234>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f5      	beq.n	8000c16 <main+0x5e>

	        	float dc_offset = 0;
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	647b      	str	r3, [r7, #68]	; 0x44
	        	for (int i = 0; i < PRE_ANALYSIS_BUF_LEN; i++) {
 8000c30:	2300      	movs	r3, #0
 8000c32:	643b      	str	r3, [r7, #64]	; 0x40
 8000c34:	e010      	b.n	8000c58 <main+0xa0>
	        	    dc_offset += pre_analysis_buf[i];
 8000c36:	4a69      	ldr	r2, [pc, #420]	; (8000ddc <main+0x224>)
 8000c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c3e:	ee07 3a90 	vmov	s15, r3
 8000c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c46:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c4e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	        	for (int i = 0; i < PRE_ANALYSIS_BUF_LEN; i++) {
 8000c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c54:	3301      	adds	r3, #1
 8000c56:	643b      	str	r3, [r7, #64]	; 0x40
 8000c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c5e:	dbea      	blt.n	8000c36 <main+0x7e>
	        	}
	        	dc_offset /= PRE_ANALYSIS_BUF_LEN;
 8000c60:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000c64:	eddf 6a62 	vldr	s13, [pc, #392]	; 8000df0 <main+0x238>
 8000c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c6c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	            // Convert the ADC values to float and store them in fft_input
	            for (int i = 0; i < PRE_ANALYSIS_BUF_LEN; i++) {
 8000c70:	2300      	movs	r3, #0
 8000c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c74:	e01c      	b.n	8000cb0 <main+0xf8>
	                fft_input[i] = unsigned_to_q15(pre_analysis_buf[i]- dc_offset);
 8000c76:	4a59      	ldr	r2, [pc, #356]	; (8000ddc <main+0x224>)
 8000c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c86:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c92:	ee17 3a90 	vmov	r3, s15
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 ff51 	bl	8001b40 <unsigned_to_q15>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4a54      	ldr	r2, [pc, #336]	; (8000df4 <main+0x23c>)
 8000ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ca6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	            for (int i = 0; i < PRE_ANALYSIS_BUF_LEN; i++) {
 8000caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cac:	3301      	adds	r3, #1
 8000cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cb6:	dbde      	blt.n	8000c76 <main+0xbe>
	            }

	            // Perform FFT on the pre-analysis data
	            performFFT();
 8000cb8:	f000 fe78 	bl	80019ac <performFFT>

	            // Analyze the FFT output to detect significant frequencies
	            if (detectSignificantFrequency(fft_output, FFT_SIZE, Sample_Rate)) {
 8000cbc:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8000df8 <main+0x240>
 8000cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc4:	484d      	ldr	r0, [pc, #308]	; (8000dfc <main+0x244>)
 8000cc6:	f000 ff01 	bl	8001acc <detectSignificantFrequency>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d006      	beq.n	8000cde <main+0x126>
	                app_state = MAIN_RECORDING; // Start the main recording if significant frequency detected
 8000cd0:	4b45      	ldr	r3, [pc, #276]	; (8000de8 <main+0x230>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
		            pre_analysis_complete = 0; // Reset flag
 8000cd6:	4b45      	ldr	r3, [pc, #276]	; (8000dec <main+0x234>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e79b      	b.n	8000c16 <main+0x5e>

	            } else {
	                //app_state = IDLE; // Or go to IDLE state, adjust as needed
	                app_state = PRE_ANALYSIS_RECORDING;
 8000cde:	4b42      	ldr	r3, [pc, #264]	; (8000de8 <main+0x230>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	e797      	b.n	8000c16 <main+0x5e>

	            }

	            // Re-start pre-analysis recording or handle IDLE state as necessary
	        }
	    } else if (app_state == MAIN_RECORDING) {
 8000ce6:	4b40      	ldr	r3, [pc, #256]	; (8000de8 <main+0x230>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d16b      	bne.n	8000dc8 <main+0x210>

	    	HAL_ADC_Stop_DMA(&hadc1);
 8000cf0:	483b      	ldr	r0, [pc, #236]	; (8000de0 <main+0x228>)
 8000cf2:	f002 fb2b 	bl	800334c <HAL_ADC_Stop_DMA>
	    	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000cf6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cfa:	4941      	ldr	r1, [pc, #260]	; (8000e00 <main+0x248>)
 8000cfc:	4838      	ldr	r0, [pc, #224]	; (8000de0 <main+0x228>)
 8000cfe:	f002 fa49 	bl	8003194 <HAL_ADC_Start_DMA>

	    	header header_actual;
	    		initializeHeader(&header_actual);
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fd49 	bl	800179c <initializeHeader>

	    			  float remaining_duration = duration;
 8000d0a:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <main+0x24c>)
 8000d0c:	63bb      	str	r3, [r7, #56]	; 0x38
	    			  while (remaining_duration > 0) {
 8000d0e:	e04e      	b.n	8000dae <main+0x1f6>
	    				  // Allocate memory for the chunk
	    				  int chunk_samples = remaining_duration >= CHUNK_SIZE_SECONDS ? CHUNK_SIZE_SAMPLES : (int)(remaining_duration * Sample_Rate);
 8000d10:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d18:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8000dd0 <main+0x218>
 8000d1c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d24:	db02      	blt.n	8000d2c <main+0x174>
 8000d26:	f249 639a 	movw	r3, #38554	; 0x969a
 8000d2a:	e00d      	b.n	8000d48 <main+0x190>
 8000d2c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d30:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000df8 <main+0x240>
 8000d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d40:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d44:	ee17 3a90 	vmov	r3, s15
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
	    				  short *data = malloc(chunk_samples * Num_Channels * sizeof(short));
 8000d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f013 faee 	bl	8014330 <malloc>
 8000d54:	4603      	mov	r3, r0
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30

	    				  while (!dma_half_transfer_complete) {
 8000d58:	bf00      	nop
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <main+0x250>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0fa      	beq.n	8000d5a <main+0x1a2>

	    				     }

	    				  dma_half_transfer_complete = 0;
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <main+0x250>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]



	    				  // Write chunk to SD card
	    				  sd_write((short*)adc_half_buf, ADC_BUF_LEN_HALF);
 8000d6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d6e:	4827      	ldr	r0, [pc, #156]	; (8000e0c <main+0x254>)
 8000d70:	f000 fcde 	bl	8001730 <sd_write>

	    				  while (!dma_transfer_complete) {
 8000d74:	bf00      	nop
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <main+0x258>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0fa      	beq.n	8000d76 <main+0x1be>

	    				     }

	    				  dma_transfer_complete = 0;
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <main+0x258>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]

	    				  // Correct call
	    				  sd_write((short*)adc_full_buf, ADC_BUF_LEN_HALF);
 8000d86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8a:	4822      	ldr	r0, [pc, #136]	; (8000e14 <main+0x25c>)
 8000d8c:	f000 fcd0 	bl	8001730 <sd_write>

	    				  // Update remaining duration
	    				  remaining_duration -= CHUNK_SIZE_SECONDS;
 8000d90:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d98:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000dd0 <main+0x218>
 8000d9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000da0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000da4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	    				  // Free memory allocated for the chunk
	    				  free(data);
 8000da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000daa:	f013 fac9 	bl	8014340 <free>
	    			  while (remaining_duration > 0) {
 8000dae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000db2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dba:	dca9      	bgt.n	8000d10 <main+0x158>
	    			          }

	    			  finalizeRecording();
 8000dbc:	f000 fd4c 	bl	8001858 <finalizeRecording>

	    			  printf("Write operation complete\r\n");
 8000dc0:	4815      	ldr	r0, [pc, #84]	; (8000e18 <main+0x260>)
 8000dc2:	f014 fad7 	bl	8015374 <puts>
 8000dc6:	e726      	b.n	8000c16 <main+0x5e>

	    } else if (app_state == IDLE) {
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <main+0x230>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
	  if (app_state == PRE_ANALYSIS_RECORDING) {
 8000dcc:	e723      	b.n	8000c16 <main+0x5e>
 8000dce:	bf00      	nop
 8000dd0:	9999999a 	.word	0x9999999a
 8000dd4:	3fc99999 	.word	0x3fc99999
 8000dd8:	240003ec 	.word	0x240003ec
 8000ddc:	24020edc 	.word	0x24020edc
 8000de0:	2400025c 	.word	0x2400025c
 8000de4:	0801a598 	.word	0x0801a598
 8000de8:	24024edd 	.word	0x24024edd
 8000dec:	24024edc 	.word	0x24024edc
 8000df0:	46000000 	.word	0x46000000
 8000df4:	24024ee0 	.word	0x24024ee0
 8000df8:	483c4080 	.word	0x483c4080
 8000dfc:	24028ee0 	.word	0x24028ee0
 8000e00:	24000a2c 	.word	0x24000a2c
 8000e04:	41f00000 	.word	0x41f00000
 8000e08:	24020a2c 	.word	0x24020a2c
 8000e0c:	24010a2c 	.word	0x24010a2c
 8000e10:	24020a2d 	.word	0x24020a2d
 8000e14:	24018a2c 	.word	0x24018a2c
 8000e18:	0801a5a8 	.word	0x0801a5a8

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0a4      	sub	sp, #144	; 0x90
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e26:	224c      	movs	r2, #76	; 0x4c
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f014 fbd8 	bl	80155e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e34:	2220      	movs	r2, #32
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f014 fbd1 	bl	80155e0 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]
 8000e4e:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f006 ffeb 	bl	8007e2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <SystemClock_Config+0x14c>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e62:	4a41      	ldr	r2, [pc, #260]	; (8000f68 <SystemClock_Config+0x14c>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	6193      	str	r3, [r2, #24]
 8000e6a:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <SystemClock_Config+0x14c>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e76:	bf00      	nop
 8000e78:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <SystemClock_Config+0x14c>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e84:	d1f8      	bne.n	8000e78 <SystemClock_Config+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000e86:	232b      	movs	r3, #43	; 0x2b
 8000e88:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000e94:	2340      	movs	r3, #64	; 0x40
 8000e96:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000eac:	230c      	movs	r3, #12
 8000eae:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 fff3 	bl	8007ec0 <HAL_RCC_OscConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ee0:	f000 fe4c 	bl	8001b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee4:	233f      	movs	r3, #63	; 0x3f
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ef4:	2340      	movs	r3, #64	; 0x40
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ef8:	2340      	movs	r3, #64	; 0x40
 8000efa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f02:	2340      	movs	r3, #64	; 0x40
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f007 fbb1 	bl	8008674 <HAL_RCC_ClockConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000f18:	f000 fe30 	bl	8001b7c <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <SystemClock_Config+0x150>)
 8000f1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <SystemClock_Config+0x150>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <SystemClock_Config+0x150>)
 8000f2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB2;
 8000f3e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000f42:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8000f48:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8000f4c:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000f4e:	2322      	movs	r3, #34	; 0x22
 8000f50:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000f52:	2320      	movs	r3, #32
 8000f54:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f00a f998 	bl	800b290 <HAL_RCCEx_CRSConfig>
}
 8000f60:	bf00      	nop
 8000f62:	3790      	adds	r7, #144	; 0x90
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	58024800 	.word	0x58024800
 8000f6c:	58024400 	.word	0x58024400

08000f70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2224      	movs	r2, #36	; 0x24
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f014 fb29 	bl	80155e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000f90:	4a31      	ldr	r2, [pc, #196]	; (8001058 <MX_ADC1_Init+0xe8>)
 8000f92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f94:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000f96:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000faa:	2208      	movs	r2, #8
 8000fac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fae:	4b29      	ldr	r3, [pc, #164]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fee:	4819      	ldr	r0, [pc, #100]	; (8001054 <MX_ADC1_Init+0xe4>)
 8000ff0:	f001 fec8 	bl	8002d84 <HAL_ADC_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ffa:	f000 fdbf 	bl	8001b7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	4619      	mov	r1, r3
 8001008:	4812      	ldr	r0, [pc, #72]	; (8001054 <MX_ADC1_Init+0xe4>)
 800100a:	f003 fcfb 	bl	8004a04 <HAL_ADCEx_MultiModeConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001014:	f000 fdb2 	bl	8001b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_ADC1_Init+0xec>)
 800101a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101c:	2306      	movs	r3, #6
 800101e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001020:	2303      	movs	r3, #3
 8001022:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001024:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001028:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800102a:	2304      	movs	r3, #4
 800102c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	463b      	mov	r3, r7
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_ADC1_Init+0xe4>)
 800103e:	f002 fc35 	bl	80038ac <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001048:	f000 fd98 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3730      	adds	r7, #48	; 0x30
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2400025c 	.word	0x2400025c
 8001058:	40022000 	.word	0x40022000
 800105c:	08600004 	.word	0x08600004

08001060 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <MX_I2C1_Init+0x78>)
 8001068:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_I2C1_Init+0x74>)
 800106c:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <MX_I2C1_Init+0x7c>)
 800106e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001078:	2201      	movs	r2, #1
 800107a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_I2C1_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800109a:	480e      	ldr	r0, [pc, #56]	; (80010d4 <MX_I2C1_Init+0x74>)
 800109c:	f006 fc56 	bl	800794c <HAL_I2C_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010a6:	f000 fd69 	bl	8001b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010aa:	2100      	movs	r1, #0
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <MX_I2C1_Init+0x74>)
 80010ae:	f006 fcdd 	bl	8007a6c <HAL_I2CEx_ConfigAnalogFilter>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010b8:	f000 fd60 	bl	8001b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010bc:	2100      	movs	r1, #0
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_I2C1_Init+0x74>)
 80010c0:	f006 fd1f 	bl	8007b02 <HAL_I2CEx_ConfigDigitalFilter>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010ca:	f000 fd57 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	24000344 	.word	0x24000344
 80010d8:	40005400 	.word	0x40005400
 80010dc:	00707cbb 	.word	0x00707cbb

080010e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_I2C2_Init+0x74>)
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <MX_I2C2_Init+0x78>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_I2C2_Init+0x74>)
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <MX_I2C2_Init+0x7c>)
 80010ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_I2C2_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_I2C2_Init+0x74>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_I2C2_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_I2C2_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_I2C2_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_I2C2_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_I2C2_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800111a:	480e      	ldr	r0, [pc, #56]	; (8001154 <MX_I2C2_Init+0x74>)
 800111c:	f006 fc16 	bl	800794c <HAL_I2C_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001126:	f000 fd29 	bl	8001b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800112a:	2100      	movs	r1, #0
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <MX_I2C2_Init+0x74>)
 800112e:	f006 fc9d 	bl	8007a6c <HAL_I2CEx_ConfigAnalogFilter>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001138:	f000 fd20 	bl	8001b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800113c:	2100      	movs	r1, #0
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_I2C2_Init+0x74>)
 8001140:	f006 fcdf 	bl	8007b02 <HAL_I2CEx_ConfigDigitalFilter>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800114a:	f000 fd17 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24000398 	.word	0x24000398
 8001158:	40005800 	.word	0x40005800
 800115c:	00707cbb 	.word	0x00707cbb

08001160 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001178:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <MX_RTC_Init+0xc4>)
 800117a:	4a2b      	ldr	r2, [pc, #172]	; (8001228 <MX_RTC_Init+0xc8>)
 800117c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <MX_RTC_Init+0xc4>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <MX_RTC_Init+0xc4>)
 8001186:	227f      	movs	r2, #127	; 0x7f
 8001188:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <MX_RTC_Init+0xc4>)
 800118c:	22ff      	movs	r2, #255	; 0xff
 800118e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <MX_RTC_Init+0xc4>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <MX_RTC_Init+0xc4>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <MX_RTC_Init+0xc4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <MX_RTC_Init+0xc4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011a8:	481e      	ldr	r0, [pc, #120]	; (8001224 <MX_RTC_Init+0xc4>)
 80011aa:	f00a fa2b 	bl	800b604 <HAL_RTC_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80011b4:	f000 fce2 	bl	8001b7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80011bc:	2300      	movs	r3, #0
 80011be:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2201      	movs	r2, #1
 80011d0:	4619      	mov	r1, r3
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <MX_RTC_Init+0xc4>)
 80011d4:	f00a fa98 	bl	800b708 <HAL_RTC_SetTime>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80011de:	f000 fccd 	bl	8001b7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011e2:	2301      	movs	r3, #1
 80011e4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80011e6:	2301      	movs	r3, #1
 80011e8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	2201      	movs	r2, #1
 80011f6:	4619      	mov	r1, r3
 80011f8:	480a      	ldr	r0, [pc, #40]	; (8001224 <MX_RTC_Init+0xc4>)
 80011fa:	f00a fb7f 	bl	800b8fc <HAL_RTC_SetDate>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001204:	f000 fcba 	bl	8001b7c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001208:	2200      	movs	r2, #0
 800120a:	2100      	movs	r1, #0
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_RTC_Init+0xc4>)
 800120e:	f00a fd1b 	bl	800bc48 <HAL_RTCEx_SetWakeUpTimer>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8001218:	f000 fcb0 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	240003ec 	.word	0x240003ec
 8001228:	58004000 	.word	0x58004000

0800122c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_SDMMC1_SD_Init+0x34>)
 8001232:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <MX_SDMMC1_SD_Init+0x38>)
 8001234:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <MX_SDMMC1_SD_Init+0x34>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_SDMMC1_SD_Init+0x34>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <MX_SDMMC1_SD_Init+0x34>)
 8001244:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001248:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <MX_SDMMC1_SD_Init+0x34>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <MX_SDMMC1_SD_Init+0x34>)
 8001252:	2201      	movs	r2, #1
 8001254:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	24000410 	.word	0x24000410
 8001264:	52007000 	.word	0x52007000

08001268 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <MX_USART1_UART_Init+0x94>)
 800126e:	4a24      	ldr	r2, [pc, #144]	; (8001300 <MX_USART1_UART_Init+0x98>)
 8001270:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <MX_USART1_UART_Init+0x94>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <MX_USART1_UART_Init+0x94>)
 800127c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001280:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_USART1_UART_Init+0x94>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_USART1_UART_Init+0x94>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_USART1_UART_Init+0x94>)
 8001290:	220c      	movs	r2, #12
 8001292:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_USART1_UART_Init+0x94>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_USART1_UART_Init+0x94>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_USART1_UART_Init+0x94>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_USART1_UART_Init+0x94>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_USART1_UART_Init+0x94>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <MX_USART1_UART_Init+0x94>)
 80012b4:	f00c f9a6 	bl	800d604 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80012be:	f000 fc5d 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c2:	2100      	movs	r1, #0
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_USART1_UART_Init+0x94>)
 80012c6:	f00d faac 	bl	800e822 <HAL_UARTEx_SetTxFifoThreshold>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80012d0:	f000 fc54 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d4:	2100      	movs	r1, #0
 80012d6:	4809      	ldr	r0, [pc, #36]	; (80012fc <MX_USART1_UART_Init+0x94>)
 80012d8:	f00d fae1 	bl	800e89e <HAL_UARTEx_SetRxFifoThreshold>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80012e2:	f000 fc4b 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_USART1_UART_Init+0x94>)
 80012e8:	f00d fa62 	bl	800e7b0 <HAL_UARTEx_DisableFifoMode>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80012f2:	f000 fc43 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2400048c 	.word	0x2400048c
 8001300:	40011000 	.word	0x40011000

08001304 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800130a:	4a16      	ldr	r2, [pc, #88]	; (8001364 <MX_USB_OTG_HS_PCD_Init+0x60>)
 800130c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001310:	2209      	movs	r2, #9
 8001312:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001316:	2202      	movs	r2, #2
 8001318:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001322:	2202      	movs	r2, #2
 8001324:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001334:	2200      	movs	r2, #0
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800133a:	2201      	movs	r2, #1
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001340:	2200      	movs	r2, #0
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001346:	2200      	movs	r2, #0
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800134c:	f006 fc25 	bl	8007b9a <HAL_PCD_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8001356:	f000 fc11 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	24000520 	.word	0x24000520
 8001364:	40040000 	.word	0x40040000

08001368 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <MX_DMA_Init+0x3c>)
 8001370:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <MX_DMA_Init+0x3c>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_DMA_Init+0x3c>)
 8001380:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	200b      	movs	r0, #11
 8001392:	f003 fcf4 	bl	8004d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001396:	200b      	movs	r0, #11
 8001398:	f003 fd0b 	bl	8004db2 <HAL_NVIC_EnableIRQ>

}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	58024400 	.word	0x58024400

080013a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <MX_GPIO_Init+0x10c>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a3b      	ldr	r2, [pc, #236]	; (80014b4 <MX_GPIO_Init+0x10c>)
 80013c6:	f043 0320 	orr.w	r3, r3, #32
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ce:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <MX_GPIO_Init+0x10c>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	f003 0320 	and.w	r3, r3, #32
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013dc:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <MX_GPIO_Init+0x10c>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e2:	4a34      	ldr	r2, [pc, #208]	; (80014b4 <MX_GPIO_Init+0x10c>)
 80013e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ec:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <MX_GPIO_Init+0x10c>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <MX_GPIO_Init+0x10c>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001400:	4a2c      	ldr	r2, [pc, #176]	; (80014b4 <MX_GPIO_Init+0x10c>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140a:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <MX_GPIO_Init+0x10c>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <MX_GPIO_Init+0x10c>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141e:	4a25      	ldr	r2, [pc, #148]	; (80014b4 <MX_GPIO_Init+0x10c>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <MX_GPIO_Init+0x10c>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <MX_GPIO_Init+0x10c>)
 8001438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143c:	4a1d      	ldr	r2, [pc, #116]	; (80014b4 <MX_GPIO_Init+0x10c>)
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <MX_GPIO_Init+0x10c>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_GPIO_Init+0x10c>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145a:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <MX_GPIO_Init+0x10c>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_GPIO_Init+0x10c>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <MX_GPIO_Init+0x10c>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001478:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <MX_GPIO_Init+0x10c>)
 800147a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800147e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_GPIO_Init+0x10c>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_GPIO_Init+0x110>)
 80014a6:	f006 f891 	bl	80075cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	; 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	58024400 	.word	0x58024400
 80014b8:	58021800 	.word	0x58021800

080014bc <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	if (app_state == PRE_ANALYSIS_RECORDING) {
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d106      	bne.n	80014dc <HAL_ADC_ConvHalfCpltCallback+0x20>
	        // Copy the first half of the ADC data to the first half of the pre_analysis_buf
	        memcpy(pre_analysis_buf, adc_buf, (PRE_ANALYSIS_BUF_LEN / 2) * sizeof(uint16_t));
 80014ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d2:	4916      	ldr	r1, [pc, #88]	; (800152c <HAL_ADC_ConvHalfCpltCallback+0x70>)
 80014d4:	4816      	ldr	r0, [pc, #88]	; (8001530 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80014d6:	f014 fcbe 	bl	8015e56 <memcpy>
 80014da:	e01e      	b.n	800151a <HAL_ADC_ConvHalfCpltCallback+0x5e>
	        // Note: No need to set the pre_analysis_complete flag here as it's only half done
	} else if (app_state == MAIN_RECORDING) {
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d119      	bne.n	800151a <HAL_ADC_ConvHalfCpltCallback+0x5e>
    for (int i = 0; i < 16384; i++) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	e012      	b.n	8001512 <HAL_ADC_ConvHalfCpltCallback+0x56>
    	adc_half_buf[i] = (adc_buf[i]*40) - 1000;
 80014ec:	4a0f      	ldr	r2, [pc, #60]	; (800152c <HAL_ADC_ConvHalfCpltCallback+0x70>)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f4:	461a      	mov	r2, r3
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001502:	b299      	uxth	r1, r3
 8001504:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 16384; i++) {
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3301      	adds	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001518:	dbe8      	blt.n	80014ec <HAL_ADC_ConvHalfCpltCallback+0x30>
    }
	}
	dma_half_transfer_complete = 1;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	24024edd 	.word	0x24024edd
 800152c:	24000a2c 	.word	0x24000a2c
 8001530:	24020edc 	.word	0x24020edc
 8001534:	24010a2c 	.word	0x24010a2c
 8001538:	24020a2c 	.word	0x24020a2c

0800153c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	 if (app_state == PRE_ANALYSIS_RECORDING) {
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_ADC_ConvCpltCallback+0x78>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10a      	bne.n	8001564 <HAL_ADC_ConvCpltCallback+0x28>
	        // Here, copy the data to pre_analysis_buf instead of adc_full_buf
	        memcpy(pre_analysis_buf + (PRE_ANALYSIS_BUF_LEN / 2), adc_buf + (ADC_BUF_LEN / 2), (PRE_ANALYSIS_BUF_LEN / 2) * sizeof(uint16_t));
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001550:	491a      	ldr	r1, [pc, #104]	; (80015bc <HAL_ADC_ConvCpltCallback+0x80>)
 8001552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001556:	4618      	mov	r0, r3
 8001558:	f014 fc7d 	bl	8015e56 <memcpy>
	        pre_analysis_complete = 1; // Indicate that pre-analysis recording is complete
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_ADC_ConvCpltCallback+0x84>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
 8001562:	e020      	b.n	80015a6 <HAL_ADC_ConvCpltCallback+0x6a>
	        //printf("Pre-analysis complete.\r\n"); // Debugging statement
	} else if (app_state == MAIN_RECORDING) {
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_ADC_ConvCpltCallback+0x78>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b01      	cmp	r3, #1
 800156c:	d11b      	bne.n	80015a6 <HAL_ADC_ConvCpltCallback+0x6a>
    for (int i = 0; i < 16384; i++) {
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e014      	b.n	800159e <HAL_ADC_ConvCpltCallback+0x62>
    	adc_full_buf[i] = (adc_buf[i + 16384]*40) - 1000;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_ADC_ConvCpltCallback+0x88>)
 800157c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001580:	461a      	mov	r2, r3
 8001582:	0092      	lsls	r2, r2, #2
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	b29b      	uxth	r3, r3
 800158a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800158e:	b299      	uxth	r1, r3
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 16384; i++) {
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3301      	adds	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015a4:	dbe6      	blt.n	8001574 <HAL_ADC_ConvCpltCallback+0x38>
    }
	}
	dma_transfer_complete = 1;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_ADC_ConvCpltCallback+0x90>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	24024edd 	.word	0x24024edd
 80015b8:	24022edc 	.word	0x24022edc
 80015bc:	24008a2c 	.word	0x24008a2c
 80015c0:	24024edc 	.word	0x24024edc
 80015c4:	24000a2c 	.word	0x24000a2c
 80015c8:	24018a2c 	.word	0x24018a2c
 80015cc:	24020a2d 	.word	0x24020a2d

080015d0 <sd_setup>:


void sd_setup()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af02      	add	r7, sp, #8


	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80015d6:	2200      	movs	r2, #0
 80015d8:	490d      	ldr	r1, [pc, #52]	; (8001610 <sd_setup+0x40>)
 80015da:	480e      	ldr	r0, [pc, #56]	; (8001614 <sd_setup+0x44>)
 80015dc:	f010 fe28 	bl	8012230 <f_mount>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <sd_setup+0x1c>
	{
	  	Error_Handler();
 80015e6:	f000 fac9 	bl	8001b7c <Error_Handler>
	}

	  			//Open file for writing (Create)


}
 80015ea:	e00d      	b.n	8001608 <sd_setup+0x38>
	else if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 80015ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <sd_setup+0x48>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	2107      	movs	r1, #7
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <sd_setup+0x40>)
 80015fa:	f011 fc53 	bl	8012ea4 <f_mkfs>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <sd_setup+0x38>
	  	Error_Handler();
 8001604:	f000 faba 	bl	8001b7c <Error_Handler>
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2403110c 	.word	0x2403110c
 8001614:	24031110 	.word	0x24031110
 8001618:	24030ee4 	.word	0x24030ee4

0800161c <sd_audio_file>:

void sd_audio_file(){
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	b091      	sub	sp, #68	; 0x44
 8001620:	af06      	add	r7, sp, #24

    char filename[40]; // Increase buffer size to accommodate date and time
    snprintf(filename, sizeof(filename), "%02d-%02d-%4d_%02d-%02d-%02d.wav", gDate.Date, gDate.Month, 2000 + gDate.Year,gTime.Hours, gTime.Minutes, gTime.Seconds); // Time part
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <sd_audio_file+0x70>)
 8001624:	789b      	ldrb	r3, [r3, #2]
 8001626:	461e      	mov	r6, r3
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <sd_audio_file+0x70>)
 800162a:	785b      	ldrb	r3, [r3, #1]
 800162c:	4619      	mov	r1, r3
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <sd_audio_file+0x70>)
 8001630:	78db      	ldrb	r3, [r3, #3]
 8001632:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001636:	4a16      	ldr	r2, [pc, #88]	; (8001690 <sd_audio_file+0x74>)
 8001638:	7812      	ldrb	r2, [r2, #0]
 800163a:	4614      	mov	r4, r2
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <sd_audio_file+0x74>)
 800163e:	7852      	ldrb	r2, [r2, #1]
 8001640:	4615      	mov	r5, r2
 8001642:	4a13      	ldr	r2, [pc, #76]	; (8001690 <sd_audio_file+0x74>)
 8001644:	7892      	ldrb	r2, [r2, #2]
 8001646:	4638      	mov	r0, r7
 8001648:	9204      	str	r2, [sp, #16]
 800164a:	9503      	str	r5, [sp, #12]
 800164c:	9402      	str	r4, [sp, #8]
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	9100      	str	r1, [sp, #0]
 8001652:	4633      	mov	r3, r6
 8001654:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <sd_audio_file+0x78>)
 8001656:	2128      	movs	r1, #40	; 0x28
 8001658:	f013 fe94 	bl	8015384 <sniprintf>

	if(f_open(&AudioFile, filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800165c:	463b      	mov	r3, r7
 800165e:	220a      	movs	r2, #10
 8001660:	4619      	mov	r1, r3
 8001662:	480d      	ldr	r0, [pc, #52]	; (8001698 <sd_audio_file+0x7c>)
 8001664:	f010 fe2a 	bl	80122bc <f_open>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <sd_audio_file+0x56>
	{
		Error_Handler();
 800166e:	f000 fa85 	bl	8001b7c <Error_Handler>
	}
    initializeHeader(&header_actual);
 8001672:	480a      	ldr	r0, [pc, #40]	; (800169c <sd_audio_file+0x80>)
 8001674:	f000 f892 	bl	800179c <initializeHeader>
    //Write to the text file
    f_write(&AudioFile, &header_actual, sizeof(header), &byteswritten);
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <sd_audio_file+0x84>)
 800167a:	222c      	movs	r2, #44	; 0x2c
 800167c:	4907      	ldr	r1, [pc, #28]	; (800169c <sd_audio_file+0x80>)
 800167e:	4806      	ldr	r0, [pc, #24]	; (8001698 <sd_audio_file+0x7c>)
 8001680:	f010 ffea 	bl	8012658 <f_write>

}
 8001684:	bf00      	nop
 8001686:	372c      	adds	r7, #44	; 0x2c
 8001688:	46bd      	mov	sp, r7
 800168a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168c:	24020a74 	.word	0x24020a74
 8001690:	24020a60 	.word	0x24020a60
 8001694:	0801a5c4 	.word	0x0801a5c4
 8001698:	24020a7c 	.word	0x24020a7c
 800169c:	24020a34 	.word	0x24020a34
 80016a0:	24030ee0 	.word	0x24030ee0

080016a4 <sd_data_file>:

void sd_data_file(){
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b093      	sub	sp, #76	; 0x4c
 80016a8:	af06      	add	r7, sp, #24
	const char* TextHolder = "This is where environmental data would be stored! e.g Temp,Tilt,CO2";
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <sd_data_file+0x74>)
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c

    char filename[40]; // Increase buffer size to accommodate date and time
    snprintf(filename, sizeof(filename), "%02d-%02d-%4d_%02d-%02d-%02d.txt", gDate.Date, gDate.Month, 2000 + gDate.Year,gTime.Hours, gTime.Minutes, gTime.Seconds); // Time part
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <sd_data_file+0x78>)
 80016b0:	789b      	ldrb	r3, [r3, #2]
 80016b2:	461e      	mov	r6, r3
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <sd_data_file+0x78>)
 80016b6:	785b      	ldrb	r3, [r3, #1]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <sd_data_file+0x78>)
 80016bc:	78db      	ldrb	r3, [r3, #3]
 80016be:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80016c2:	4a17      	ldr	r2, [pc, #92]	; (8001720 <sd_data_file+0x7c>)
 80016c4:	7812      	ldrb	r2, [r2, #0]
 80016c6:	4614      	mov	r4, r2
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <sd_data_file+0x7c>)
 80016ca:	7852      	ldrb	r2, [r2, #1]
 80016cc:	4615      	mov	r5, r2
 80016ce:	4a14      	ldr	r2, [pc, #80]	; (8001720 <sd_data_file+0x7c>)
 80016d0:	7892      	ldrb	r2, [r2, #2]
 80016d2:	1d38      	adds	r0, r7, #4
 80016d4:	9204      	str	r2, [sp, #16]
 80016d6:	9503      	str	r5, [sp, #12]
 80016d8:	9402      	str	r4, [sp, #8]
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	9100      	str	r1, [sp, #0]
 80016de:	4633      	mov	r3, r6
 80016e0:	4a10      	ldr	r2, [pc, #64]	; (8001724 <sd_data_file+0x80>)
 80016e2:	2128      	movs	r1, #40	; 0x28
 80016e4:	f013 fe4e 	bl	8015384 <sniprintf>

	if(f_open(&TextFile, filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	220a      	movs	r2, #10
 80016ec:	4619      	mov	r1, r3
 80016ee:	480e      	ldr	r0, [pc, #56]	; (8001728 <sd_data_file+0x84>)
 80016f0:	f010 fde4 	bl	80122bc <f_open>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <sd_data_file+0x5a>
	{
		Error_Handler();
 80016fa:	f000 fa3f 	bl	8001b7c <Error_Handler>
	}

	f_write(&TextFile, TextHolder, strlen(TextHolder), &bw);
 80016fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001700:	f7fe fe66 	bl	80003d0 <strlen>
 8001704:	4602      	mov	r2, r0
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <sd_data_file+0x88>)
 8001708:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800170a:	4807      	ldr	r0, [pc, #28]	; (8001728 <sd_data_file+0x84>)
 800170c:	f010 ffa4 	bl	8012658 <f_write>

}
 8001710:	bf00      	nop
 8001712:	3734      	adds	r7, #52	; 0x34
 8001714:	46bd      	mov	sp, r7
 8001716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001718:	0801a5e8 	.word	0x0801a5e8
 800171c:	24020a74 	.word	0x24020a74
 8001720:	24020a60 	.word	0x24020a60
 8001724:	0801a62c 	.word	0x0801a62c
 8001728:	24020cac 	.word	0x24020cac
 800172c:	24020a78 	.word	0x24020a78

08001730 <sd_write>:


void sd_write(short *data, int num_samples) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    uint32_t bytesToWrite = num_samples * Num_Channels * sizeof(short);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
    f_write(&AudioFile, data, bytesToWrite, &byteswritten);
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <sd_write+0x34>)
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4808      	ldr	r0, [pc, #32]	; (8001768 <sd_write+0x38>)
 8001748:	f010 ff86 	bl	8012658 <f_write>
    totalDataBytesWritten += byteswritten; // Update the total bytes written here
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <sd_write+0x3c>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <sd_write+0x34>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4413      	add	r3, r2
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <sd_write+0x3c>)
 8001758:	6013      	str	r3, [r2, #0]
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	24030ee0 	.word	0x24030ee0
 8001768:	24020a7c 	.word	0x24020a7c
 800176c:	24020a30 	.word	0x24020a30

08001770 <sd_close>:

void sd_close()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	f_close(&AudioFile);
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <sd_close+0x20>)
 8001776:	f011 f962 	bl	8012a3e <f_close>
	f_close(&TextFile);
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <sd_close+0x24>)
 800177c:	f011 f95f 	bl	8012a3e <f_close>
	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2100      	movs	r1, #0
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <sd_close+0x28>)
 8001786:	f010 fd53 	bl	8012230 <f_mount>

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	24020a7c 	.word	0x24020a7c
 8001794:	24020cac 	.word	0x24020cac
 8001798:	24031110 	.word	0x24031110

0800179c <initializeHeader>:
void initializeHeader(header *header_actual) {
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    header_actual->ChunkID[0] = 'R';
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2252      	movs	r2, #82	; 0x52
 80017a8:	701a      	strb	r2, [r3, #0]
    header_actual->ChunkID[1] = 'I';
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2249      	movs	r2, #73	; 0x49
 80017ae:	705a      	strb	r2, [r3, #1]
    header_actual->ChunkID[2] = 'F';
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2246      	movs	r2, #70	; 0x46
 80017b4:	709a      	strb	r2, [r3, #2]
    header_actual->ChunkID[3] = 'F';
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2246      	movs	r2, #70	; 0x46
 80017ba:	70da      	strb	r2, [r3, #3]

    header_actual->Format[0] = 'W';
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2257      	movs	r2, #87	; 0x57
 80017c0:	721a      	strb	r2, [r3, #8]
    header_actual->Format[1] = 'A';
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2241      	movs	r2, #65	; 0x41
 80017c6:	725a      	strb	r2, [r3, #9]
    header_actual->Format[2] = 'V';
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2256      	movs	r2, #86	; 0x56
 80017cc:	729a      	strb	r2, [r3, #10]
    header_actual->Format[3] = 'E';
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2245      	movs	r2, #69	; 0x45
 80017d2:	72da      	strb	r2, [r3, #11]

    header_actual->Subchunk1ID[0] = 'f';
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2266      	movs	r2, #102	; 0x66
 80017d8:	731a      	strb	r2, [r3, #12]
    header_actual->Subchunk1ID[1] = 'm';
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	226d      	movs	r2, #109	; 0x6d
 80017de:	735a      	strb	r2, [r3, #13]
    header_actual->Subchunk1ID[2] = 't';
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2274      	movs	r2, #116	; 0x74
 80017e4:	739a      	strb	r2, [r3, #14]
    header_actual->Subchunk1ID[3] = ' ';
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2220      	movs	r2, #32
 80017ea:	73da      	strb	r2, [r3, #15]

    header_actual->Subchunk1Size = Sub_chunk1Size;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2210      	movs	r2, #16
 80017f0:	611a      	str	r2, [r3, #16]
    header_actual->AudioFormat = Audio_Format;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	829a      	strh	r2, [r3, #20]
    header_actual->NumChannels = Num_Channels;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	82da      	strh	r2, [r3, #22]
    header_actual->SampleRate = Sample_Rate;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a13      	ldr	r2, [pc, #76]	; (8001850 <initializeHeader+0xb4>)
 8001802:	619a      	str	r2, [r3, #24]
    header_actual->ByteRate = Sample_Rate * Num_Channels * Bitsper_Sample/8;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a13      	ldr	r2, [pc, #76]	; (8001854 <initializeHeader+0xb8>)
 8001808:	61da      	str	r2, [r3, #28]
    header_actual->BlockAlign = Num_Channels * Bitsper_Sample/8;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2202      	movs	r2, #2
 800180e:	841a      	strh	r2, [r3, #32]
    header_actual->BitsPerSample = Bitsper_Sample;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2210      	movs	r2, #16
 8001814:	845a      	strh	r2, [r3, #34]	; 0x22

    header_actual->Subchunk2ID[0] = 'd';
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2264      	movs	r2, #100	; 0x64
 800181a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    header_actual->Subchunk2ID[1] = 'a';
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2261      	movs	r2, #97	; 0x61
 8001822:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    header_actual->Subchunk2ID[2] = 't';
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2274      	movs	r2, #116	; 0x74
 800182a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    header_actual->Subchunk2ID[3] = 'a';
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2261      	movs	r2, #97	; 0x61
 8001832:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

    header_actual->ChunkSize = 0; // Placeholder, to be updated
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	605a      	str	r2, [r3, #4]
    header_actual->Subchunk2Size = 0; // Placeholder, to be updated
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	0002f102 	.word	0x0002f102
 8001854:	0005e204 	.word	0x0005e204

08001858 <finalizeRecording>:
        float phase = 2.0 * M_PI * frequency * i / Sample_Rate;
        data[i] = amplitude * sin(phase) * 32767;
    }
}

void finalizeRecording() {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
    // Calculate actual sizes based on recorded data length
    header_actual.Subchunk2Size = totalDataBytesWritten; // Total bytes of audio data written
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <finalizeRecording+0x34>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <finalizeRecording+0x38>)
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
    header_actual.ChunkSize = 36 + header_actual.Subchunk2Size;
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <finalizeRecording+0x38>)
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	3324      	adds	r3, #36	; 0x24
 800186c:	4a08      	ldr	r2, [pc, #32]	; (8001890 <finalizeRecording+0x38>)
 800186e:	6053      	str	r3, [r2, #4]

    // Seek to the beginning of the file to update the header
    f_lseek(&AudioFile, 0);
 8001870:	2100      	movs	r1, #0
 8001872:	4808      	ldr	r0, [pc, #32]	; (8001894 <finalizeRecording+0x3c>)
 8001874:	f011 f90d 	bl	8012a92 <f_lseek>
    f_write(&AudioFile, &header_actual, sizeof(header), &byteswritten);
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <finalizeRecording+0x40>)
 800187a:	222c      	movs	r2, #44	; 0x2c
 800187c:	4904      	ldr	r1, [pc, #16]	; (8001890 <finalizeRecording+0x38>)
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <finalizeRecording+0x3c>)
 8001880:	f010 feea 	bl	8012658 <f_write>

    // Close the file
    sd_close();
 8001884:	f7ff ff74 	bl	8001770 <sd_close>
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	24020a30 	.word	0x24020a30
 8001890:	24020a34 	.word	0x24020a34
 8001894:	24020a7c 	.word	0x24020a7c
 8001898:	24030ee0 	.word	0x24030ee0

0800189c <Get_RTC_Time>:

void Get_RTC_Time(void) {
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0


    // Get the RTC current Time
    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80018a0:	2200      	movs	r2, #0
 80018a2:	4911      	ldr	r1, [pc, #68]	; (80018e8 <Get_RTC_Time+0x4c>)
 80018a4:	4811      	ldr	r0, [pc, #68]	; (80018ec <Get_RTC_Time+0x50>)
 80018a6:	f009 ffcd 	bl	800b844 <HAL_RTC_GetTime>
    // Get the RTC current Date
    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); // This line is needed to unlock the time read
 80018aa:	2200      	movs	r2, #0
 80018ac:	4910      	ldr	r1, [pc, #64]	; (80018f0 <Get_RTC_Time+0x54>)
 80018ae:	480f      	ldr	r0, [pc, #60]	; (80018ec <Get_RTC_Time+0x50>)
 80018b0:	f00a f8ac 	bl	800ba0c <HAL_RTC_GetDate>

    // Now you can use gTime and gDate
    printf("Current time is %02d:%02d:%02d\r\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <Get_RTC_Time+0x4c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <Get_RTC_Time+0x4c>)
 80018bc:	785b      	ldrb	r3, [r3, #1]
 80018be:	461a      	mov	r2, r3
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <Get_RTC_Time+0x4c>)
 80018c2:	789b      	ldrb	r3, [r3, #2]
 80018c4:	480b      	ldr	r0, [pc, #44]	; (80018f4 <Get_RTC_Time+0x58>)
 80018c6:	f013 fcef 	bl	80152a8 <iprintf>
    printf("Current date is %02d-%02d-%2d\r\n", gDate.Date, gDate.Month, 2000 + gDate.Year);
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <Get_RTC_Time+0x54>)
 80018cc:	789b      	ldrb	r3, [r3, #2]
 80018ce:	4619      	mov	r1, r3
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <Get_RTC_Time+0x54>)
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <Get_RTC_Time+0x54>)
 80018d8:	78db      	ldrb	r3, [r3, #3]
 80018da:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <Get_RTC_Time+0x5c>)
 80018e0:	f013 fce2 	bl	80152a8 <iprintf>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	24020a60 	.word	0x24020a60
 80018ec:	240003ec 	.word	0x240003ec
 80018f0:	24020a74 	.word	0x24020a74
 80018f4:	0801a650 	.word	0x0801a650
 80018f8:	0801a674 	.word	0x0801a674

080018fc <SetRTCToCompileTime>:


void SetRTCToCompileTime(RTC_HandleTypeDef *hrtc) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b092      	sub	sp, #72	; 0x48
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime = {0};
 8001904:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
    struct tm compileTime;

    // Parse the __DATE__ and __TIME__ macros to struct tm
    strptime(__DATE__ " " __TIME__, "%b %d %Y %H:%M:%S", &compileTime);
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	461a      	mov	r2, r3
 800191e:	4921      	ldr	r1, [pc, #132]	; (80019a4 <SetRTCToCompileTime+0xa8>)
 8001920:	4821      	ldr	r0, [pc, #132]	; (80019a8 <SetRTCToCompileTime+0xac>)
 8001922:	f014 fa09 	bl	8015d38 <strptime>

    // Populate the RTC structures
    sTime.Hours = compileTime.tm_hour;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    sTime.Minutes = compileTime.tm_min;
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    sTime.Seconds = compileTime.tm_sec;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    sDate.Year = compileTime.tm_year - 100; // tm_year is years since 1900
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	3b64      	subs	r3, #100	; 0x64
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    sDate.Month = compileTime.tm_mon + 1; // tm_mon is months since January [0-11]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	3301      	adds	r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    sDate.Date = compileTime.tm_mday;
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    sDate.WeekDay = compileTime.tm_wday + 1; // tm_wday is days since Sunday [0-6], RTC_WeekDay is [1-7]
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	b2db      	uxtb	r3, r3
 8001962:	3301      	adds	r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

    // Set the RTC time and date
    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800196a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800196e:	2200      	movs	r2, #0
 8001970:	4619      	mov	r1, r3
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f009 fec8 	bl	800b708 <HAL_RTC_SetTime>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <SetRTCToCompileTime+0x86>
        Error_Handler();
 800197e:	f000 f8fd 	bl	8001b7c <Error_Handler>
    }
    if (HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8001982:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001986:	2200      	movs	r2, #0
 8001988:	4619      	mov	r1, r3
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f009 ffb6 	bl	800b8fc <HAL_RTC_SetDate>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SetRTCToCompileTime+0x9e>
        Error_Handler();
 8001996:	f000 f8f1 	bl	8001b7c <Error_Handler>
    }
}
 800199a:	bf00      	nop
 800199c:	3748      	adds	r7, #72	; 0x48
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	0801a694 	.word	0x0801a694
 80019a8:	0801a6a8 	.word	0x0801a6a8

080019ac <performFFT>:

void performFFT() {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af02      	add	r7, sp, #8
    // Initialize the FFT instance (only needs to be done once)
	arm_rfft_init_q15(&S, FFT_SIZE, 0, 1);
 80019b2:	2301      	movs	r3, #1
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ba:	483d      	ldr	r0, [pc, #244]	; (8001ab0 <performFFT+0x104>)
 80019bc:	f012 f878 	bl	8013ab0 <arm_rfft_init_q15>

    // Convert ADC data to float and apply a window function if necessary
    for (int i = 0; i < FFT_SIZE; i++) {
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	e013      	b.n	80019ee <performFFT+0x42>
        fft_input[i] = (float)pre_analysis_buf[i];
 80019c6:	4a3b      	ldr	r2, [pc, #236]	; (8001ab4 <performFFT+0x108>)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019da:	ee17 3a90 	vmov	r3, s15
 80019de:	b219      	sxth	r1, r3
 80019e0:	4a35      	ldr	r2, [pc, #212]	; (8001ab8 <performFFT+0x10c>)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < FFT_SIZE; i++) {
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3301      	adds	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019f4:	dbe7      	blt.n	80019c6 <performFFT+0x1a>
        // Apply a window here if needed
    }

    // Perform the FFT
    arm_rfft_q15(&S, fft_input, fft_output);
 80019f6:	4a31      	ldr	r2, [pc, #196]	; (8001abc <performFFT+0x110>)
 80019f8:	492f      	ldr	r1, [pc, #188]	; (8001ab8 <performFFT+0x10c>)
 80019fa:	482d      	ldr	r0, [pc, #180]	; (8001ab0 <performFFT+0x104>)
 80019fc:	f011 ffb8 	bl	8013970 <arm_rfft_q15>

    // Compute magnitude of FFT output (complex numbers) for analysis
    // Skipping every other value as they represent complex parts in the output array
    for (int i = 0; i < FFT_SIZE / 2; i++) {
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	e04a      	b.n	8001a9c <performFFT+0xf0>
        float real = fft_output[2*i];
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4a2c      	ldr	r2, [pc, #176]	; (8001abc <performFFT+0x110>)
 8001a0c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a18:	edc7 7a03 	vstr	s15, [r7, #12]
        float imag = fft_output[2*i + 1];
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	3301      	adds	r3, #1
 8001a22:	4a26      	ldr	r2, [pc, #152]	; (8001abc <performFFT+0x110>)
 8001a24:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a30:	edc7 7a02 	vstr	s15, [r7, #8]
        float magnitude = sqrtf(real * real + imag * imag);
 8001a34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a38:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a48:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4c:	f018 fd76 	bl	801a53c <sqrtf>
 8001a50:	ed87 0a01 	vstr	s0, [r7, #4]
        float frequency_bin = ((float)i * Sample_Rate) / FFT_SIZE;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001ac0 <performFFT+0x114>
 8001a62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a66:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001ac4 <performFFT+0x118>
 8001a6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a6e:	edc7 7a00 	vstr	s15, [r7]
        printf("Frequency: %.2f Hz, Intensity: %.2f\n", frequency_bin, magnitude);
 8001a72:	edd7 7a00 	vldr	s15, [r7]
 8001a76:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a82:	ed8d 7b00 	vstr	d7, [sp]
 8001a86:	ec53 2b16 	vmov	r2, r3, d6
 8001a8a:	480f      	ldr	r0, [pc, #60]	; (8001ac8 <performFFT+0x11c>)
 8001a8c:	f013 fc0c 	bl	80152a8 <iprintf>
        HAL_Delay(0.1);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f000 fe0b 	bl	80026ac <HAL_Delay>
    for (int i = 0; i < FFT_SIZE / 2; i++) {
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa2:	dbb0      	blt.n	8001a06 <performFFT+0x5a>

        // Here, analyze magnitude to find frequencies above your threshold
    }
    // Proceed based on the analysis results...
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	240310e4 	.word	0x240310e4
 8001ab4:	24020edc 	.word	0x24020edc
 8001ab8:	24024ee0 	.word	0x24024ee0
 8001abc:	24028ee0 	.word	0x24028ee0
 8001ac0:	483c4080 	.word	0x483c4080
 8001ac4:	46000000 	.word	0x46000000
 8001ac8:	0801a6c0 	.word	0x0801a6c0

08001acc <detectSignificantFrequency>:

int detectSignificantFrequency(float32_t *fftMagnitude, uint32_t fftSize, float sampleRate) {
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t startIndex = FREQUENCY_THRESHOLD / (sampleRate / fftSize);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001ae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aec:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001b3c <detectSignificantFrequency+0x70>
 8001af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af8:	ee17 3a90 	vmov	r3, s15
 8001afc:	613b      	str	r3, [r7, #16]

    for (uint32_t i = startIndex; i < fftSize / 2; i++) { // Only need to check up to Nyquist frequency
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e00f      	b.n	8001b24 <detectSignificantFrequency+0x58>
        if (fftMagnitude[i] > AMPLITUDE_THRESHOLD) {
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	dd01      	ble.n	8001b1e <detectSignificantFrequency+0x52>
            return 1; // Frequency above threshold found
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e008      	b.n	8001b30 <detectSignificantFrequency+0x64>
    for (uint32_t i = startIndex; i < fftSize / 2; i++) { // Only need to check up to Nyquist frequency
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	085b      	lsrs	r3, r3, #1
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d3ea      	bcc.n	8001b04 <detectSignificantFrequency+0x38>
        }
    }
    return 0; // No significant frequency found
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	468ca000 	.word	0x468ca000

08001b40 <unsigned_to_q15>:

q15_t unsigned_to_q15(uint16_t val) {
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
    int32_t temp = val - 32768;  // Center around 0
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001b50:	60fb      	str	r3, [r7, #12]
    return (q15_t)temp;          // Cast and return
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	b21b      	sxth	r3, r3
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <__io_putchar>:

int __io_putchar(int ch)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fff9 	bl	8000b64 <ITM_SendChar>
    return (ch);
 8001b72:	687b      	ldr	r3, [r7, #4]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <Error_Handler+0x8>
	...

08001b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_MspInit+0x30>)
 8001b90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b94:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_MspInit+0x30>)
 8001b96:	f043 0302 	orr.w	r3, r3, #2
 8001b9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_MspInit+0x30>)
 8001ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	58024400 	.word	0x58024400

08001bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a50      	ldr	r2, [pc, #320]	; (8001d1c <HAL_ADC_MspInit+0x160>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	f040 8099 	bne.w	8001d12 <HAL_ADC_MspInit+0x156>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001be0:	4b4f      	ldr	r3, [pc, #316]	; (8001d20 <HAL_ADC_MspInit+0x164>)
 8001be2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001be6:	4a4e      	ldr	r2, [pc, #312]	; (8001d20 <HAL_ADC_MspInit+0x164>)
 8001be8:	f043 0320 	orr.w	r3, r3, #32
 8001bec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <HAL_ADC_MspInit+0x164>)
 8001bf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <HAL_ADC_MspInit+0x164>)
 8001c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c04:	4a46      	ldr	r2, [pc, #280]	; (8001d20 <HAL_ADC_MspInit+0x164>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c0e:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <HAL_ADC_MspInit+0x164>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1c:	4b40      	ldr	r3, [pc, #256]	; (8001d20 <HAL_ADC_MspInit+0x164>)
 8001c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c22:	4a3f      	ldr	r2, [pc, #252]	; (8001d20 <HAL_ADC_MspInit+0x164>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c2c:	4b3c      	ldr	r3, [pc, #240]	; (8001d20 <HAL_ADC_MspInit+0x164>)
 8001c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c3a:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <HAL_ADC_MspInit+0x164>)
 8001c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c40:	4a37      	ldr	r2, [pc, #220]	; (8001d20 <HAL_ADC_MspInit+0x164>)
 8001c42:	f043 0320 	orr.w	r3, r3, #32
 8001c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4a:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <HAL_ADC_MspInit+0x164>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	f003 0320 	and.w	r3, r3, #32
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c58:	2340      	movs	r3, #64	; 0x40
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	4619      	mov	r1, r3
 8001c6a:	482e      	ldr	r0, [pc, #184]	; (8001d24 <HAL_ADC_MspInit+0x168>)
 8001c6c:	f005 fcae 	bl	80075cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c70:	2310      	movs	r3, #16
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c74:	2303      	movs	r3, #3
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	4829      	ldr	r0, [pc, #164]	; (8001d28 <HAL_ADC_MspInit+0x16c>)
 8001c84:	f005 fca2 	bl	80075cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4823      	ldr	r0, [pc, #140]	; (8001d2c <HAL_ADC_MspInit+0x170>)
 8001c9e:	f005 fc95 	bl	80075cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001ca2:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <HAL_ADC_MspInit+0x174>)
 8001ca4:	4a23      	ldr	r2, [pc, #140]	; (8001d34 <HAL_ADC_MspInit+0x178>)
 8001ca6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <HAL_ADC_MspInit+0x174>)
 8001caa:	2209      	movs	r2, #9
 8001cac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_ADC_MspInit+0x174>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_ADC_MspInit+0x174>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cba:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_ADC_MspInit+0x174>)
 8001cbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_ADC_MspInit+0x174>)
 8001cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_ADC_MspInit+0x174>)
 8001ccc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_ADC_MspInit+0x174>)
 8001cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_ADC_MspInit+0x174>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_ADC_MspInit+0x174>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ce6:	4812      	ldr	r0, [pc, #72]	; (8001d30 <HAL_ADC_MspInit+0x174>)
 8001ce8:	f003 f87e 	bl	8004de8 <HAL_DMA_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_ADC_MspInit+0x13a>
    {
      Error_Handler();
 8001cf2:	f7ff ff43 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <HAL_ADC_MspInit+0x174>)
 8001cfa:	659a      	str	r2, [r3, #88]	; 0x58
 8001cfc:	4a0c      	ldr	r2, [pc, #48]	; (8001d30 <HAL_ADC_MspInit+0x174>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2012      	movs	r0, #18
 8001d08:	f003 f839 	bl	8004d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d0c:	2012      	movs	r0, #18
 8001d0e:	f003 f850 	bl	8004db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3730      	adds	r7, #48	; 0x30
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	58024400 	.word	0x58024400
 8001d24:	58020000 	.word	0x58020000
 8001d28:	58020800 	.word	0x58020800
 8001d2c:	58021400 	.word	0x58021400
 8001d30:	240002cc 	.word	0x240002cc
 8001d34:	40020010 	.word	0x40020010

08001d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b0ba      	sub	sp, #232	; 0xe8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d50:	f107 0318 	add.w	r3, r7, #24
 8001d54:	22b8      	movs	r2, #184	; 0xb8
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f013 fc41 	bl	80155e0 <memset>
  if(hi2c->Instance==I2C1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a4d      	ldr	r2, [pc, #308]	; (8001e98 <HAL_I2C_MspInit+0x160>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d147      	bne.n	8001df8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d68:	f04f 0208 	mov.w	r2, #8
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d7a:	f107 0318 	add.w	r3, r7, #24
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f007 f804 	bl	8008d8c <HAL_RCCEx_PeriphCLKConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001d8a:	f7ff fef7 	bl	8001b7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <HAL_I2C_MspInit+0x164>)
 8001d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d94:	4a41      	ldr	r2, [pc, #260]	; (8001e9c <HAL_I2C_MspInit+0x164>)
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9e:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <HAL_I2C_MspInit+0x164>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001db0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db4:	2312      	movs	r3, #18
 8001db6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4833      	ldr	r0, [pc, #204]	; (8001ea0 <HAL_I2C_MspInit+0x168>)
 8001dd4:	f005 fbfa 	bl	80075cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dd8:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <HAL_I2C_MspInit+0x164>)
 8001dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dde:	4a2f      	ldr	r2, [pc, #188]	; (8001e9c <HAL_I2C_MspInit+0x164>)
 8001de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001de4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001de8:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <HAL_I2C_MspInit+0x164>)
 8001dea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001df6:	e04a      	b.n	8001e8e <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a29      	ldr	r2, [pc, #164]	; (8001ea4 <HAL_I2C_MspInit+0x16c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d145      	bne.n	8001e8e <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e02:	f04f 0208 	mov.w	r2, #8
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e14:	f107 0318 	add.w	r3, r7, #24
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f006 ffb7 	bl	8008d8c <HAL_RCCEx_PeriphCLKConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001e24:	f7ff feaa 	bl	8001b7c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <HAL_I2C_MspInit+0x164>)
 8001e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <HAL_I2C_MspInit+0x164>)
 8001e30:	f043 0320 	orr.w	r3, r3, #32
 8001e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e38:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_I2C_MspInit+0x164>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e46:	2303      	movs	r3, #3
 8001e48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e4c:	2312      	movs	r3, #18
 8001e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480f      	ldr	r0, [pc, #60]	; (8001ea8 <HAL_I2C_MspInit+0x170>)
 8001e6c:	f005 fbae 	bl	80075cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_I2C_MspInit+0x164>)
 8001e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <HAL_I2C_MspInit+0x164>)
 8001e78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_I2C_MspInit+0x164>)
 8001e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
}
 8001e8e:	bf00      	nop
 8001e90:	37e8      	adds	r7, #232	; 0xe8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40005400 	.word	0x40005400
 8001e9c:	58024400 	.word	0x58024400
 8001ea0:	58020400 	.word	0x58020400
 8001ea4:	40005800 	.word	0x40005800
 8001ea8:	58021400 	.word	0x58021400

08001eac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0b0      	sub	sp, #192	; 0xc0
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb4:	f107 0308 	add.w	r3, r7, #8
 8001eb8:	22b8      	movs	r2, #184	; 0xb8
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f013 fb8f 	bl	80155e0 <memset>
  if(hrtc->Instance==RTC)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_RTC_MspInit+0x5c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d119      	bne.n	8001f00 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ecc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee0:	f107 0308 	add.w	r3, r7, #8
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f006 ff51 	bl	8008d8c <HAL_RCCEx_PeriphCLKConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001ef0:	f7ff fe44 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RTC_MspInit+0x60>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_RTC_MspInit+0x60>)
 8001efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efe:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f00:	bf00      	nop
 8001f02:	37c0      	adds	r7, #192	; 0xc0
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	58004000 	.word	0x58004000
 8001f0c:	58024400 	.word	0x58024400

08001f10 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b0ba      	sub	sp, #232	; 0xe8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f28:	f107 0318 	add.w	r3, r7, #24
 8001f2c:	22b8      	movs	r2, #184	; 0xb8
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f013 fb55 	bl	80155e0 <memset>
  if(hsd->Instance==SDMMC1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a4f      	ldr	r2, [pc, #316]	; (8002078 <HAL_SD_MspInit+0x168>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	f040 8097 	bne.w	8002070 <HAL_SD_MspInit+0x160>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001f42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f52:	f107 0318 	add.w	r3, r7, #24
 8001f56:	4618      	mov	r0, r3
 8001f58:	f006 ff18 	bl	8008d8c <HAL_RCCEx_PeriphCLKConfig>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001f62:	f7ff fe0b 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f66:	4b45      	ldr	r3, [pc, #276]	; (800207c <HAL_SD_MspInit+0x16c>)
 8001f68:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f6c:	4a43      	ldr	r2, [pc, #268]	; (800207c <HAL_SD_MspInit+0x16c>)
 8001f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f72:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001f76:	4b41      	ldr	r3, [pc, #260]	; (800207c <HAL_SD_MspInit+0x16c>)
 8001f78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f84:	4b3d      	ldr	r3, [pc, #244]	; (800207c <HAL_SD_MspInit+0x16c>)
 8001f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8a:	4a3c      	ldr	r2, [pc, #240]	; (800207c <HAL_SD_MspInit+0x16c>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f94:	4b39      	ldr	r3, [pc, #228]	; (800207c <HAL_SD_MspInit+0x16c>)
 8001f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa2:	4b36      	ldr	r3, [pc, #216]	; (800207c <HAL_SD_MspInit+0x16c>)
 8001fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa8:	4a34      	ldr	r2, [pc, #208]	; (800207c <HAL_SD_MspInit+0x16c>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb2:	4b32      	ldr	r3, [pc, #200]	; (800207c <HAL_SD_MspInit+0x16c>)
 8001fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc0:	4b2e      	ldr	r3, [pc, #184]	; (800207c <HAL_SD_MspInit+0x16c>)
 8001fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc6:	4a2d      	ldr	r2, [pc, #180]	; (800207c <HAL_SD_MspInit+0x16c>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_SD_MspInit+0x16c>)
 8001fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002002:	4619      	mov	r1, r3
 8002004:	481e      	ldr	r0, [pc, #120]	; (8002080 <HAL_SD_MspInit+0x170>)
 8002006:	f005 fae1 	bl	80075cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800200a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800200e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002024:	230c      	movs	r3, #12
 8002026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800202e:	4619      	mov	r1, r3
 8002030:	4814      	ldr	r0, [pc, #80]	; (8002084 <HAL_SD_MspInit+0x174>)
 8002032:	f005 facb 	bl	80075cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002036:	2304      	movs	r3, #4
 8002038:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800204e:	230c      	movs	r3, #12
 8002050:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002054:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002058:	4619      	mov	r1, r3
 800205a:	480b      	ldr	r0, [pc, #44]	; (8002088 <HAL_SD_MspInit+0x178>)
 800205c:	f005 fab6 	bl	80075cc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2100      	movs	r1, #0
 8002064:	2031      	movs	r0, #49	; 0x31
 8002066:	f002 fe8a 	bl	8004d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800206a:	2031      	movs	r0, #49	; 0x31
 800206c:	f002 fea1 	bl	8004db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002070:	bf00      	nop
 8002072:	37e8      	adds	r7, #232	; 0xe8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	52007000 	.word	0x52007000
 800207c:	58024400 	.word	0x58024400
 8002080:	58020400 	.word	0x58020400
 8002084:	58020800 	.word	0x58020800
 8002088:	58020c00 	.word	0x58020c00

0800208c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0b8      	sub	sp, #224	; 0xe0
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a4:	f107 0310 	add.w	r3, r7, #16
 80020a8:	22b8      	movs	r2, #184	; 0xb8
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f013 fa97 	bl	80155e0 <memset>
  if(huart->Instance==USART1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a26      	ldr	r2, [pc, #152]	; (8002150 <HAL_UART_MspInit+0xc4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d145      	bne.n	8002148 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020bc:	f04f 0201 	mov.w	r2, #1
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ce:	f107 0310 	add.w	r3, r7, #16
 80020d2:	4618      	mov	r0, r3
 80020d4:	f006 fe5a 	bl	8008d8c <HAL_RCCEx_PeriphCLKConfig>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80020de:	f7ff fd4d 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_UART_MspInit+0xc8>)
 80020e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020e8:	4a1a      	ldr	r2, [pc, #104]	; (8002154 <HAL_UART_MspInit+0xc8>)
 80020ea:	f043 0310 	orr.w	r3, r3, #16
 80020ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020f2:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_UART_MspInit+0xc8>)
 80020f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_UART_MspInit+0xc8>)
 8002102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002106:	4a13      	ldr	r2, [pc, #76]	; (8002154 <HAL_UART_MspInit+0xc8>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_UART_MspInit+0xc8>)
 8002112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800211e:	23c0      	movs	r3, #192	; 0xc0
 8002120:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002136:	2307      	movs	r3, #7
 8002138:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002140:	4619      	mov	r1, r3
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <HAL_UART_MspInit+0xcc>)
 8002144:	f005 fa42 	bl	80075cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002148:	bf00      	nop
 800214a:	37e0      	adds	r7, #224	; 0xe0
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40011000 	.word	0x40011000
 8002154:	58024400 	.word	0x58024400
 8002158:	58020400 	.word	0x58020400

0800215c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b0b8      	sub	sp, #224	; 0xe0
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	22b8      	movs	r2, #184	; 0xb8
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f013 fa2f 	bl	80155e0 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a25      	ldr	r2, [pc, #148]	; (800221c <HAL_PCD_MspInit+0xc0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d143      	bne.n	8002214 <HAL_PCD_MspInit+0xb8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800218c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002198:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800219c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	4618      	mov	r0, r3
 80021a6:	f006 fdf1 	bl	8008d8c <HAL_RCCEx_PeriphCLKConfig>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80021b0:	f7ff fce4 	bl	8001b7c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80021b4:	f005 fe74 	bl	8007ea0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_PCD_MspInit+0xc4>)
 80021ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <HAL_PCD_MspInit+0xc4>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_PCD_MspInit+0xc4>)
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021ee:	4619      	mov	r1, r3
 80021f0:	480c      	ldr	r0, [pc, #48]	; (8002224 <HAL_PCD_MspInit+0xc8>)
 80021f2:	f005 f9eb 	bl	80075cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_PCD_MspInit+0xc4>)
 80021f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021fc:	4a08      	ldr	r2, [pc, #32]	; (8002220 <HAL_PCD_MspInit+0xc4>)
 80021fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002202:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_PCD_MspInit+0xc4>)
 8002208:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8002214:	bf00      	nop
 8002216:	37e0      	adds	r7, #224	; 0xe0
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40040000 	.word	0x40040000
 8002220:	58024400 	.word	0x58024400
 8002224:	58020000 	.word	0x58020000

08002228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800222c:	e7fe      	b.n	800222c <NMI_Handler+0x4>

0800222e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <HardFault_Handler+0x4>

08002234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <MemManage_Handler+0x4>

0800223a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <UsageFault_Handler+0x4>

08002246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002274:	f000 f9fa 	bl	800266c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <DMA1_Stream0_IRQHandler+0x10>)
 8002282:	f003 fe91 	bl	8005fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	240002cc 	.word	0x240002cc

08002290 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <ADC_IRQHandler+0x10>)
 8002296:	f001 f8bb 	bl	8003410 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2400025c 	.word	0x2400025c

080022a4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <SDMMC1_IRQHandler+0x10>)
 80022aa:	f009 ffb7 	bl	800c21c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	24000410 	.word	0x24000410

080022b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return 1;
 80022bc:	2301      	movs	r3, #1
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <_kill>:

int _kill(int pid, int sig)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022d2:	f013 fd91 	bl	8015df8 <__errno>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2216      	movs	r2, #22
 80022da:	601a      	str	r2, [r3, #0]
  return -1;
 80022dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <_exit>:

void _exit (int status)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ffe7 	bl	80022c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022fa:	e7fe      	b.n	80022fa <_exit+0x12>

080022fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	e00a      	b.n	8002324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800230e:	f3af 8000 	nop.w
 8002312:	4601      	mov	r1, r0
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	60ba      	str	r2, [r7, #8]
 800231a:	b2ca      	uxtb	r2, r1
 800231c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	dbf0      	blt.n	800230e <_read+0x12>
  }

  return len;
 800232c:	687b      	ldr	r3, [r7, #4]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	e009      	b.n	800235c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	60ba      	str	r2, [r7, #8]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fc06 	bl	8001b62 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3301      	adds	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	dbf1      	blt.n	8002348 <_write+0x12>
  }
  return len;
 8002364:	687b      	ldr	r3, [r7, #4]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_close>:

int _close(int file)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002396:	605a      	str	r2, [r3, #4]
  return 0;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <_isatty>:

int _isatty(int file)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023ae:	2301      	movs	r3, #1
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e0:	4a14      	ldr	r2, [pc, #80]	; (8002434 <_sbrk+0x5c>)
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <_sbrk+0x60>)
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023ec:	4b13      	ldr	r3, [pc, #76]	; (800243c <_sbrk+0x64>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <_sbrk+0x64>)
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <_sbrk+0x68>)
 80023f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <_sbrk+0x64>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	429a      	cmp	r2, r3
 8002406:	d207      	bcs.n	8002418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002408:	f013 fcf6 	bl	8015df8 <__errno>
 800240c:	4603      	mov	r3, r0
 800240e:	220c      	movs	r2, #12
 8002410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002412:	f04f 33ff 	mov.w	r3, #4294967295
 8002416:	e009      	b.n	800242c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <_sbrk+0x64>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <_sbrk+0x64>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <_sbrk+0x64>)
 8002428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242a:	68fb      	ldr	r3, [r7, #12]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	24050000 	.word	0x24050000
 8002438:	00004000 	.word	0x00004000
 800243c:	24031100 	.word	0x24031100
 8002440:	240314f0 	.word	0x240314f0

08002444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002448:	4b32      	ldr	r3, [pc, #200]	; (8002514 <SystemInit+0xd0>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	4a31      	ldr	r2, [pc, #196]	; (8002514 <SystemInit+0xd0>)
 8002450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002458:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <SystemInit+0xd4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	2b06      	cmp	r3, #6
 8002462:	d807      	bhi.n	8002474 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002464:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <SystemInit+0xd4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 030f 	bic.w	r3, r3, #15
 800246c:	4a2a      	ldr	r2, [pc, #168]	; (8002518 <SystemInit+0xd4>)
 800246e:	f043 0307 	orr.w	r3, r3, #7
 8002472:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002474:	4b29      	ldr	r3, [pc, #164]	; (800251c <SystemInit+0xd8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a28      	ldr	r2, [pc, #160]	; (800251c <SystemInit+0xd8>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002480:	4b26      	ldr	r3, [pc, #152]	; (800251c <SystemInit+0xd8>)
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002486:	4b25      	ldr	r3, [pc, #148]	; (800251c <SystemInit+0xd8>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4924      	ldr	r1, [pc, #144]	; (800251c <SystemInit+0xd8>)
 800248c:	4b24      	ldr	r3, [pc, #144]	; (8002520 <SystemInit+0xdc>)
 800248e:	4013      	ands	r3, r2
 8002490:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <SystemInit+0xd4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <SystemInit+0xd4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 030f 	bic.w	r3, r3, #15
 80024a6:	4a1c      	ldr	r2, [pc, #112]	; (8002518 <SystemInit+0xd4>)
 80024a8:	f043 0307 	orr.w	r3, r3, #7
 80024ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80024ae:	4b1b      	ldr	r3, [pc, #108]	; (800251c <SystemInit+0xd8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <SystemInit+0xd8>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <SystemInit+0xd8>)
 80024bc:	2200      	movs	r2, #0
 80024be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <SystemInit+0xd8>)
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <SystemInit+0xe0>)
 80024c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <SystemInit+0xd8>)
 80024c8:	4a17      	ldr	r2, [pc, #92]	; (8002528 <SystemInit+0xe4>)
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <SystemInit+0xd8>)
 80024ce:	4a17      	ldr	r2, [pc, #92]	; (800252c <SystemInit+0xe8>)
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <SystemInit+0xd8>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <SystemInit+0xd8>)
 80024da:	4a14      	ldr	r2, [pc, #80]	; (800252c <SystemInit+0xe8>)
 80024dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <SystemInit+0xd8>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <SystemInit+0xd8>)
 80024e6:	4a11      	ldr	r2, [pc, #68]	; (800252c <SystemInit+0xe8>)
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <SystemInit+0xd8>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <SystemInit+0xd8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a09      	ldr	r2, [pc, #36]	; (800251c <SystemInit+0xd8>)
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024fc:	4b07      	ldr	r3, [pc, #28]	; (800251c <SystemInit+0xd8>)
 80024fe:	2200      	movs	r2, #0
 8002500:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <SystemInit+0xec>)
 8002504:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002508:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00
 8002518:	52002000 	.word	0x52002000
 800251c:	58024400 	.word	0x58024400
 8002520:	eaf6ed7f 	.word	0xeaf6ed7f
 8002524:	02020200 	.word	0x02020200
 8002528:	01ff0000 	.word	0x01ff0000
 800252c:	01010280 	.word	0x01010280
 8002530:	52004000 	.word	0x52004000

08002534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800256c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002538:	f7ff ff84 	bl	8002444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800253c:	480c      	ldr	r0, [pc, #48]	; (8002570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800253e:	490d      	ldr	r1, [pc, #52]	; (8002574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002544:	e002      	b.n	800254c <LoopCopyDataInit>

08002546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800254a:	3304      	adds	r3, #4

0800254c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800254c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002550:	d3f9      	bcc.n	8002546 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002554:	4c0a      	ldr	r4, [pc, #40]	; (8002580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002558:	e001      	b.n	800255e <LoopFillZerobss>

0800255a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800255a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800255c:	3204      	adds	r2, #4

0800255e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002560:	d3fb      	bcc.n	800255a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002562:	f013 fc4f 	bl	8015e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002566:	f7fe fb27 	bl	8000bb8 <main>
  bx  lr
 800256a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800256c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002570:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002574:	24000240 	.word	0x24000240
  ldr r2, =_sidata
 8002578:	0802d1b4 	.word	0x0802d1b4
  ldr r2, =_sbss
 800257c:	24000240 	.word	0x24000240
  ldr r4, =_ebss
 8002580:	240314f0 	.word	0x240314f0

08002584 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002584:	e7fe      	b.n	8002584 <ADC3_IRQHandler>
	...

08002588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800258e:	2003      	movs	r0, #3
 8002590:	f002 fbea 	bl	8004d68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002594:	f006 fa24 	bl	80089e0 <HAL_RCC_GetSysClockFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_Init+0x68>)
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	4913      	ldr	r1, [pc, #76]	; (80025f4 <HAL_Init+0x6c>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
 80025b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_Init+0x68>)
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <HAL_Init+0x6c>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
 80025c8:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <HAL_Init+0x70>)
 80025ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025cc:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <HAL_Init+0x74>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025d2:	200f      	movs	r0, #15
 80025d4:	f000 f814 	bl	8002600 <HAL_InitTick>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e002      	b.n	80025e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025e2:	f7ff fad1 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	58024400 	.word	0x58024400
 80025f4:	0801a73c 	.word	0x0801a73c
 80025f8:	24000008 	.word	0x24000008
 80025fc:	24000004 	.word	0x24000004

08002600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_InitTick+0x60>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e021      	b.n	8002658 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <HAL_InitTick+0x64>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_InitTick+0x60>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4619      	mov	r1, r3
 800261e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002622:	fbb3 f3f1 	udiv	r3, r3, r1
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f002 fbcf 	bl	8004dce <HAL_SYSTICK_Config>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e00e      	b.n	8002658 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b0f      	cmp	r3, #15
 800263e:	d80a      	bhi.n	8002656 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002640:	2200      	movs	r2, #0
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f002 fb99 	bl	8004d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <HAL_InitTick+0x68>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e000      	b.n	8002658 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	24000010 	.word	0x24000010
 8002664:	24000004 	.word	0x24000004
 8002668:	2400000c 	.word	0x2400000c

0800266c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_IncTick+0x20>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x24>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4413      	add	r3, r2
 800267c:	4a04      	ldr	r2, [pc, #16]	; (8002690 <HAL_IncTick+0x24>)
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	24000010 	.word	0x24000010
 8002690:	24031104 	.word	0x24031104

08002694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return uwTick;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_GetTick+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	24031104 	.word	0x24031104

080026ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff ffee 	bl	8002694 <HAL_GetTick>
 80026b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d005      	beq.n	80026d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_Delay+0x44>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d2:	bf00      	nop
 80026d4:	f7ff ffde 	bl	8002694 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d8f7      	bhi.n	80026d4 <HAL_Delay+0x28>
  {
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	24000010 	.word	0x24000010

080026f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_GetREVID+0x14>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0c1b      	lsrs	r3, r3, #16
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	5c001000 	.word	0x5c001000

0800270c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	609a      	str	r2, [r3, #8]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	609a      	str	r2, [r3, #8]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3360      	adds	r3, #96	; 0x60
 8002786:	461a      	mov	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <LL_ADC_SetOffset+0x60>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d10b      	bne.n	80027b0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80027ae:	e00b      	b.n	80027c8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	431a      	orrs	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	601a      	str	r2, [r3, #0]
}
 80027c8:	bf00      	nop
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	58026000 	.word	0x58026000

080027d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3360      	adds	r3, #96	; 0x60
 80027e6:	461a      	mov	r2, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	431a      	orrs	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	611a      	str	r2, [r3, #16]
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00e      	beq.n	800286a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3360      	adds	r3, #96	; 0x60
 8002850:	461a      	mov	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	431a      	orrs	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	601a      	str	r2, [r3, #0]
  }
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	58026000 	.word	0x58026000

0800287c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a0c      	ldr	r2, [pc, #48]	; (80028bc <LL_ADC_SetOffsetSaturation+0x40>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d10e      	bne.n	80028ae <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3360      	adds	r3, #96	; 0x60
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	58026000 	.word	0x58026000

080028c0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <LL_ADC_SetOffsetSign+0x40>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d10e      	bne.n	80028f2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3360      	adds	r3, #96	; 0x60
 80028d8:	461a      	mov	r2, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80028f2:	bf00      	nop
 80028f4:	371c      	adds	r7, #28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	58026000 	.word	0x58026000

08002904 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3360      	adds	r3, #96	; 0x60
 8002914:	461a      	mov	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <LL_ADC_SetOffsetState+0x50>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d108      	bne.n	8002938 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	431a      	orrs	r2, r3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002936:	e007      	b.n	8002948 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	431a      	orrs	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	601a      	str	r2, [r3, #0]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	58026000 	.word	0x58026000

08002958 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800297e:	b480      	push	{r7}
 8002980:	b087      	sub	sp, #28
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3330      	adds	r3, #48	; 0x30
 800298e:	461a      	mov	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	4413      	add	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	211f      	movs	r1, #31
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	401a      	ands	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	0e9b      	lsrs	r3, r3, #26
 80029b6:	f003 011f 	and.w	r1, r3, #31
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	431a      	orrs	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f023 0203 	bic.w	r2, r3, #3
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d107      	bne.n	8002a3e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f023 0203 	bic.w	r2, r3, #3
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60da      	str	r2, [r3, #12]
  }
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	58026000 	.word	0x58026000

08002a50 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b087      	sub	sp, #28
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3314      	adds	r3, #20
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	0e5b      	lsrs	r3, r3, #25
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	4413      	add	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	0d1b      	lsrs	r3, r3, #20
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2107      	movs	r1, #7
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	401a      	ands	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	0d1b      	lsrs	r3, r3, #20
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	431a      	orrs	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ac0:	bf00      	nop
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4a1a      	ldr	r2, [pc, #104]	; (8002b44 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d115      	bne.n	8002b0c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aec:	43db      	mvns	r3, r3
 8002aee:	401a      	ands	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0318 	and.w	r3, r3, #24
 8002af6:	4914      	ldr	r1, [pc, #80]	; (8002b48 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002af8:	40d9      	lsrs	r1, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	400b      	ands	r3, r1
 8002afe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b02:	431a      	orrs	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002b0a:	e014      	b.n	8002b36 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0318 	and.w	r3, r3, #24
 8002b22:	4909      	ldr	r1, [pc, #36]	; (8002b48 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002b24:	40d9      	lsrs	r1, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	400b      	ands	r3, r1
 8002b2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	58026000 	.word	0x58026000
 8002b48:	000fffff 	.word	0x000fffff

08002b4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 031f 	and.w	r3, r3, #31
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6093      	str	r3, [r2, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	5fffffc0 	.word	0x5fffffc0

08002ba8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bbc:	d101      	bne.n	8002bc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	6fffffc0 	.word	0x6fffffc0

08002bf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c0c:	d101      	bne.n	8002c12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <LL_ADC_Enable+0x24>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	f043 0201 	orr.w	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	7fffffc0 	.word	0x7fffffc0

08002c48 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <LL_ADC_Disable+0x24>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	f043 0202 	orr.w	r2, r3, #2
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	7fffffc0 	.word	0x7fffffc0

08002c70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <LL_ADC_IsEnabled+0x18>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <LL_ADC_IsEnabled+0x1a>
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d101      	bne.n	8002cae <LL_ADC_IsDisableOngoing+0x18>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_ADC_IsDisableOngoing+0x1a>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <LL_ADC_REG_StartConversion+0x24>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	f043 0204 	orr.w	r2, r3, #4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	7fffffc0 	.word	0x7fffffc0

08002ce4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <LL_ADC_REG_StopConversion+0x24>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	f043 0210 	orr.w	r2, r3, #16
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	7fffffc0 	.word	0x7fffffc0

08002d0c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d101      	bne.n	8002d24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <LL_ADC_INJ_StopConversion+0x24>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	f043 0220 	orr.w	r2, r3, #32
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	7fffffc0 	.word	0x7fffffc0

08002d5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d101      	bne.n	8002d74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e1ee      	b.n	800317c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7fe ff05 	bl	8001bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff feef 	bl	8002ba8 <LL_ADC_IsDeepPowerDownEnabled>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fed5 	bl	8002b84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff0a 	bl	8002bf8 <LL_ADC_IsInternalRegulatorEnabled>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d114      	bne.n	8002e14 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff feee 	bl	8002bd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002df4:	4b8e      	ldr	r3, [pc, #568]	; (8003030 <HAL_ADC_Init+0x2ac>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	4a8e      	ldr	r2, [pc, #568]	; (8003034 <HAL_ADC_Init+0x2b0>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	3301      	adds	r3, #1
 8002e04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e06:	e002      	b.n	8002e0e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f9      	bne.n	8002e08 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff feed 	bl	8002bf8 <LL_ADC_IsInternalRegulatorEnabled>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10d      	bne.n	8002e40 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e28:	f043 0210 	orr.w	r2, r3, #16
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e34:	f043 0201 	orr.w	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff61 	bl	8002d0c <LL_ADC_REG_IsConversionOngoing>
 8002e4a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 8188 	bne.w	800316a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 8184 	bne.w	800316a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e66:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e6a:	f043 0202 	orr.w	r2, r3, #2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fefa 	bl	8002c70 <LL_ADC_IsEnabled>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d136      	bne.n	8002ef0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a6c      	ldr	r2, [pc, #432]	; (8003038 <HAL_ADC_Init+0x2b4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <HAL_ADC_Init+0x112>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a6a      	ldr	r2, [pc, #424]	; (800303c <HAL_ADC_Init+0x2b8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10e      	bne.n	8002eb4 <HAL_ADC_Init+0x130>
 8002e96:	4868      	ldr	r0, [pc, #416]	; (8003038 <HAL_ADC_Init+0x2b4>)
 8002e98:	f7ff feea 	bl	8002c70 <LL_ADC_IsEnabled>
 8002e9c:	4604      	mov	r4, r0
 8002e9e:	4867      	ldr	r0, [pc, #412]	; (800303c <HAL_ADC_Init+0x2b8>)
 8002ea0:	f7ff fee6 	bl	8002c70 <LL_ADC_IsEnabled>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4323      	orrs	r3, r4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e008      	b.n	8002ec6 <HAL_ADC_Init+0x142>
 8002eb4:	4862      	ldr	r0, [pc, #392]	; (8003040 <HAL_ADC_Init+0x2bc>)
 8002eb6:	f7ff fedb 	bl	8002c70 <LL_ADC_IsEnabled>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d012      	beq.n	8002ef0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a5a      	ldr	r2, [pc, #360]	; (8003038 <HAL_ADC_Init+0x2b4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_ADC_Init+0x15a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a58      	ldr	r2, [pc, #352]	; (800303c <HAL_ADC_Init+0x2b8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_Init+0x15e>
 8002ede:	4a59      	ldr	r2, [pc, #356]	; (8003044 <HAL_ADC_Init+0x2c0>)
 8002ee0:	e000      	b.n	8002ee4 <HAL_ADC_Init+0x160>
 8002ee2:	4a59      	ldr	r2, [pc, #356]	; (8003048 <HAL_ADC_Init+0x2c4>)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f7ff fc0e 	bl	800270c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a52      	ldr	r2, [pc, #328]	; (8003040 <HAL_ADC_Init+0x2bc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d129      	bne.n	8002f4e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7e5b      	ldrb	r3, [r3, #25]
 8002efe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002f04:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002f0a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d013      	beq.n	8002f3c <HAL_ADC_Init+0x1b8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b0c      	cmp	r3, #12
 8002f1a:	d00d      	beq.n	8002f38 <HAL_ADC_Init+0x1b4>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b1c      	cmp	r3, #28
 8002f22:	d007      	beq.n	8002f34 <HAL_ADC_Init+0x1b0>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b18      	cmp	r3, #24
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_Init+0x1ac>
 8002f2c:	2318      	movs	r3, #24
 8002f2e:	e006      	b.n	8002f3e <HAL_ADC_Init+0x1ba>
 8002f30:	2300      	movs	r3, #0
 8002f32:	e004      	b.n	8002f3e <HAL_ADC_Init+0x1ba>
 8002f34:	2310      	movs	r3, #16
 8002f36:	e002      	b.n	8002f3e <HAL_ADC_Init+0x1ba>
 8002f38:	2308      	movs	r3, #8
 8002f3a:	e000      	b.n	8002f3e <HAL_ADC_Init+0x1ba>
 8002f3c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002f3e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f46:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e00e      	b.n	8002f6c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7e5b      	ldrb	r3, [r3, #25]
 8002f52:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f58:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f5e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f66:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d106      	bne.n	8002f84 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	045b      	lsls	r3, r3, #17
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d009      	beq.n	8002fa0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a26      	ldr	r2, [pc, #152]	; (8003040 <HAL_ADC_Init+0x2bc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d115      	bne.n	8002fd6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	4b26      	ldr	r3, [pc, #152]	; (800304c <HAL_ADC_Init+0x2c8>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	69b9      	ldr	r1, [r7, #24]
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	611a      	str	r2, [r3, #16]
 8002fd4:	e009      	b.n	8002fea <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_ADC_Init+0x2cc>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	69b9      	ldr	r1, [r7, #24]
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fe8c 	bl	8002d0c <LL_ADC_REG_IsConversionOngoing>
 8002ff4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff feae 	bl	8002d5c <LL_ADC_INJ_IsConversionOngoing>
 8003000:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f040 808e 	bne.w	8003126 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 808a 	bne.w	8003126 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <HAL_ADC_Init+0x2bc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d11b      	bne.n	8003054 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7e1b      	ldrb	r3, [r3, #24]
 8003020:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003028:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	e018      	b.n	8003062 <HAL_ADC_Init+0x2de>
 8003030:	24000004 	.word	0x24000004
 8003034:	053e2d63 	.word	0x053e2d63
 8003038:	40022000 	.word	0x40022000
 800303c:	40022100 	.word	0x40022100
 8003040:	58026000 	.word	0x58026000
 8003044:	40022300 	.word	0x40022300
 8003048:	58026300 	.word	0x58026300
 800304c:	fff04007 	.word	0xfff04007
 8003050:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7e1b      	ldrb	r3, [r3, #24]
 8003058:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	4b46      	ldr	r3, [pc, #280]	; (8003184 <HAL_ADC_Init+0x400>)
 800306a:	4013      	ands	r3, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	69b9      	ldr	r1, [r7, #24]
 8003072:	430b      	orrs	r3, r1
 8003074:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800307c:	2b01      	cmp	r3, #1
 800307e:	d137      	bne.n	80030f0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a3f      	ldr	r2, [pc, #252]	; (8003188 <HAL_ADC_Init+0x404>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d116      	bne.n	80030be <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	4b3d      	ldr	r3, [pc, #244]	; (800318c <HAL_ADC_Init+0x408>)
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030a8:	4311      	orrs	r1, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80030ae:	430a      	orrs	r2, r1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	611a      	str	r2, [r3, #16]
 80030bc:	e020      	b.n	8003100 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <HAL_ADC_Init+0x40c>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030cc:	3a01      	subs	r2, #1
 80030ce:	0411      	lsls	r1, r2, #16
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030d4:	4311      	orrs	r1, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030da:	4311      	orrs	r1, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80030e0:	430a      	orrs	r2, r1
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	611a      	str	r2, [r3, #16]
 80030ee:	e007      	b.n	8003100 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <HAL_ADC_Init+0x404>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d002      	beq.n	8003126 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f001 fb29 	bl	8004778 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10c      	bne.n	8003148 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	f023 010f 	bic.w	r1, r3, #15
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	1e5a      	subs	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
 8003146:	e007      	b.n	8003158 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 020f 	bic.w	r2, r2, #15
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315c:	f023 0303 	bic.w	r3, r3, #3
 8003160:	f043 0201 	orr.w	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	661a      	str	r2, [r3, #96]	; 0x60
 8003168:	e007      	b.n	800317a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316e:	f043 0210 	orr.w	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800317a:	7ffb      	ldrb	r3, [r7, #31]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3724      	adds	r7, #36	; 0x24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}
 8003184:	ffffbffc 	.word	0xffffbffc
 8003188:	58026000 	.word	0x58026000
 800318c:	fc00f81f 	.word	0xfc00f81f
 8003190:	fc00f81e 	.word	0xfc00f81e

08003194 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a60      	ldr	r2, [pc, #384]	; (8003328 <HAL_ADC_Start_DMA+0x194>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_ADC_Start_DMA+0x20>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a5f      	ldr	r2, [pc, #380]	; (800332c <HAL_ADC_Start_DMA+0x198>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_Start_DMA+0x24>
 80031b4:	4b5e      	ldr	r3, [pc, #376]	; (8003330 <HAL_ADC_Start_DMA+0x19c>)
 80031b6:	e000      	b.n	80031ba <HAL_ADC_Start_DMA+0x26>
 80031b8:	4b5e      	ldr	r3, [pc, #376]	; (8003334 <HAL_ADC_Start_DMA+0x1a0>)
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fcc6 	bl	8002b4c <LL_ADC_GetMultimode>
 80031c0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fda0 	bl	8002d0c <LL_ADC_REG_IsConversionOngoing>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 80a2 	bne.w	8003318 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_Start_DMA+0x4e>
 80031de:	2302      	movs	r3, #2
 80031e0:	e09d      	b.n	800331e <HAL_ADC_Start_DMA+0x18a>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d006      	beq.n	80031fe <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d003      	beq.n	80031fe <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b09      	cmp	r3, #9
 80031fa:	f040 8086 	bne.w	800330a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f001 f93c 	bl	800447c <ADC_Enable>
 8003204:	4603      	mov	r3, r0
 8003206:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d178      	bne.n	8003300 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003212:	4b49      	ldr	r3, [pc, #292]	; (8003338 <HAL_ADC_Start_DMA+0x1a4>)
 8003214:	4013      	ands	r3, r2
 8003216:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a42      	ldr	r2, [pc, #264]	; (800332c <HAL_ADC_Start_DMA+0x198>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d002      	beq.n	800322e <HAL_ADC_Start_DMA+0x9a>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	e000      	b.n	8003230 <HAL_ADC_Start_DMA+0x9c>
 800322e:	4b3e      	ldr	r3, [pc, #248]	; (8003328 <HAL_ADC_Start_DMA+0x194>)
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	4293      	cmp	r3, r2
 8003236:	d002      	beq.n	800323e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d105      	bne.n	800324a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003242:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d006      	beq.n	8003264 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800325a:	f023 0206 	bic.w	r2, r3, #6
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	665a      	str	r2, [r3, #100]	; 0x64
 8003262:	e002      	b.n	800326a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	4a33      	ldr	r2, [pc, #204]	; (800333c <HAL_ADC_Start_DMA+0x1a8>)
 8003270:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	4a32      	ldr	r2, [pc, #200]	; (8003340 <HAL_ADC_Start_DMA+0x1ac>)
 8003278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	4a31      	ldr	r2, [pc, #196]	; (8003344 <HAL_ADC_Start_DMA+0x1b0>)
 8003280:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	221c      	movs	r2, #28
 8003288:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0210 	orr.w	r2, r2, #16
 80032a0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a28      	ldr	r2, [pc, #160]	; (8003348 <HAL_ADC_Start_DMA+0x1b4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d10f      	bne.n	80032cc <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f7ff fbae 	bl	8002a1c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fb99 	bl	80029fc <LL_ADC_EnableDMAReq>
 80032ca:	e007      	b.n	80032dc <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f7ff fb7d 	bl	80029d6 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3340      	adds	r3, #64	; 0x40
 80032e6:	4619      	mov	r1, r3
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f002 f8d4 	bl	8005498 <HAL_DMA_Start_IT>
 80032f0:	4603      	mov	r3, r0
 80032f2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fcdf 	bl	8002cbc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032fe:	e00d      	b.n	800331c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8003308:	e008      	b.n	800331c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003316:	e001      	b.n	800331c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003318:	2302      	movs	r3, #2
 800331a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800331c:	7dfb      	ldrb	r3, [r7, #23]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40022000 	.word	0x40022000
 800332c:	40022100 	.word	0x40022100
 8003330:	40022300 	.word	0x40022300
 8003334:	58026300 	.word	0x58026300
 8003338:	fffff0fe 	.word	0xfffff0fe
 800333c:	0800464f 	.word	0x0800464f
 8003340:	08004727 	.word	0x08004727
 8003344:	08004743 	.word	0x08004743
 8003348:	58026000 	.word	0x58026000

0800334c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_ADC_Stop_DMA+0x16>
 800335e:	2302      	movs	r3, #2
 8003360:	e04f      	b.n	8003402 <HAL_ADC_Stop_DMA+0xb6>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800336a:	2103      	movs	r1, #3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 ffc9 	bl	8004304 <ADC_ConversionStop>
 8003372:	4603      	mov	r3, r0
 8003374:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d13d      	bne.n	80033f8 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0203 	bic.w	r2, r2, #3
 800338a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d10f      	bne.n	80033ba <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339e:	4618      	mov	r0, r3
 80033a0:	f002 fae4 	bl	800596c <HAL_DMA_Abort>
 80033a4:	4603      	mov	r3, r0
 80033a6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	661a      	str	r2, [r3, #96]	; 0x60
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0210 	bic.w	r2, r2, #16
 80033c8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f001 f8dd 	bl	8004590 <ADC_Disable>
 80033d6:	4603      	mov	r3, r0
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	e002      	b.n	80033e2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f001 f8d7 	bl	8004590 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d107      	bne.n	80033f8 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <HAL_ADC_Stop_DMA+0xc0>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	661a      	str	r2, [r3, #96]	; 0x60
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	ffffeefe 	.word	0xffffeefe

08003410 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003418:	2300      	movs	r3, #0
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a87      	ldr	r2, [pc, #540]	; (8003650 <HAL_ADC_IRQHandler+0x240>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d004      	beq.n	8003440 <HAL_ADC_IRQHandler+0x30>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a86      	ldr	r2, [pc, #536]	; (8003654 <HAL_ADC_IRQHandler+0x244>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d101      	bne.n	8003444 <HAL_ADC_IRQHandler+0x34>
 8003440:	4b85      	ldr	r3, [pc, #532]	; (8003658 <HAL_ADC_IRQHandler+0x248>)
 8003442:	e000      	b.n	8003446 <HAL_ADC_IRQHandler+0x36>
 8003444:	4b85      	ldr	r3, [pc, #532]	; (800365c <HAL_ADC_IRQHandler+0x24c>)
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fb80 	bl	8002b4c <LL_ADC_GetMultimode>
 800344c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d017      	beq.n	8003488 <HAL_ADC_IRQHandler+0x78>
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d012      	beq.n	8003488 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003472:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f001 fab8 	bl	80049f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2202      	movs	r2, #2
 8003486:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <HAL_ADC_IRQHandler+0x8c>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8083 	beq.w	80035ae <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d07d      	beq.n	80035ae <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fa42 	bl	8002958 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d062      	beq.n	80035a0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a5d      	ldr	r2, [pc, #372]	; (8003654 <HAL_ADC_IRQHandler+0x244>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d002      	beq.n	80034ea <HAL_ADC_IRQHandler+0xda>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	e000      	b.n	80034ec <HAL_ADC_IRQHandler+0xdc>
 80034ea:	4b59      	ldr	r3, [pc, #356]	; (8003650 <HAL_ADC_IRQHandler+0x240>)
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d008      	beq.n	8003506 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d002      	beq.n	8003506 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b09      	cmp	r3, #9
 8003504:	d104      	bne.n	8003510 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	623b      	str	r3, [r7, #32]
 800350e:	e00c      	b.n	800352a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a4f      	ldr	r2, [pc, #316]	; (8003654 <HAL_ADC_IRQHandler+0x244>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d002      	beq.n	8003520 <HAL_ADC_IRQHandler+0x110>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	e000      	b.n	8003522 <HAL_ADC_IRQHandler+0x112>
 8003520:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <HAL_ADC_IRQHandler+0x240>)
 8003522:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d135      	bne.n	80035a0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b08      	cmp	r3, #8
 8003540:	d12e      	bne.n	80035a0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fbe0 	bl	8002d0c <LL_ADC_REG_IsConversionOngoing>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d11a      	bne.n	8003588 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 020c 	bic.w	r2, r2, #12
 8003560:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d112      	bne.n	80035a0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	661a      	str	r2, [r3, #96]	; 0x60
 8003586:	e00b      	b.n	80035a0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358c:	f043 0210 	orr.w	r2, r3, #16
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fd ffcb 	bl	800153c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	220c      	movs	r2, #12
 80035ac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d004      	beq.n	80035c2 <HAL_ADC_IRQHandler+0x1b2>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10b      	bne.n	80035da <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80a0 	beq.w	800370e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 809a 	beq.w	800370e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fa2a 	bl	8002a50 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80035fc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff f9a8 	bl	8002958 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003608:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a11      	ldr	r2, [pc, #68]	; (8003654 <HAL_ADC_IRQHandler+0x244>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d002      	beq.n	800361a <HAL_ADC_IRQHandler+0x20a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	e000      	b.n	800361c <HAL_ADC_IRQHandler+0x20c>
 800361a:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <HAL_ADC_IRQHandler+0x240>)
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	4293      	cmp	r3, r2
 8003622:	d008      	beq.n	8003636 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b06      	cmp	r3, #6
 800362e:	d002      	beq.n	8003636 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b07      	cmp	r3, #7
 8003634:	d104      	bne.n	8003640 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	623b      	str	r3, [r7, #32]
 800363e:	e014      	b.n	800366a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a03      	ldr	r2, [pc, #12]	; (8003654 <HAL_ADC_IRQHandler+0x244>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00a      	beq.n	8003660 <HAL_ADC_IRQHandler+0x250>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	e008      	b.n	8003662 <HAL_ADC_IRQHandler+0x252>
 8003650:	40022000 	.word	0x40022000
 8003654:	40022100 	.word	0x40022100
 8003658:	40022300 	.word	0x40022300
 800365c:	58026300 	.word	0x58026300
 8003660:	4b84      	ldr	r3, [pc, #528]	; (8003874 <HAL_ADC_IRQHandler+0x464>)
 8003662:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d047      	beq.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <HAL_ADC_IRQHandler+0x27a>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d03f      	beq.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003686:	2b00      	cmp	r3, #0
 8003688:	d13a      	bne.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d133      	bne.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d12e      	bne.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fb58 	bl	8002d5c <LL_ADC_INJ_IsConversionOngoing>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11a      	bne.n	80036e8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036c0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d112      	bne.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	661a      	str	r2, [r3, #96]	; 0x60
 80036e6:	e00b      	b.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ec:	f043 0210 	orr.w	r2, r3, #16
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f001 f94d 	bl	80049a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2260      	movs	r2, #96	; 0x60
 800370c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d011      	beq.n	800373c <HAL_ADC_IRQHandler+0x32c>
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8a8 	bl	8003884 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d012      	beq.n	800376c <HAL_ADC_IRQHandler+0x35c>
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003754:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f001 f933 	bl	80049c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800376a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003772:	2b00      	cmp	r3, #0
 8003774:	d012      	beq.n	800379c <HAL_ADC_IRQHandler+0x38c>
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00d      	beq.n	800379c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003784:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f001 f925 	bl	80049dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800379a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d043      	beq.n	800382e <HAL_ADC_IRQHandler+0x41e>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d03e      	beq.n	800382e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80037b8:	2301      	movs	r3, #1
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
 80037bc:	e021      	b.n	8003802 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2a      	ldr	r2, [pc, #168]	; (8003874 <HAL_ADC_IRQHandler+0x464>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_ADC_IRQHandler+0x3c8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a29      	ldr	r2, [pc, #164]	; (8003878 <HAL_ADC_IRQHandler+0x468>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_ADC_IRQHandler+0x3cc>
 80037d8:	4b28      	ldr	r3, [pc, #160]	; (800387c <HAL_ADC_IRQHandler+0x46c>)
 80037da:	e000      	b.n	80037de <HAL_ADC_IRQHandler+0x3ce>
 80037dc:	4b28      	ldr	r3, [pc, #160]	; (8003880 <HAL_ADC_IRQHandler+0x470>)
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff f9c2 	bl	8002b68 <LL_ADC_GetMultiDMATransfer>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80037ea:	2301      	movs	r3, #1
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	e008      	b.n	8003802 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80037fe:	2301      	movs	r3, #1
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	2b01      	cmp	r3, #1
 8003806:	d10e      	bne.n	8003826 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003818:	f043 0202 	orr.w	r2, r3, #2
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f839 	bl	8003898 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2210      	movs	r2, #16
 800382c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d018      	beq.n	800386a <HAL_ADC_IRQHandler+0x45a>
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383e:	2b00      	cmp	r3, #0
 8003840:	d013      	beq.n	800386a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003846:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003852:	f043 0208 	orr.w	r2, r3, #8
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003862:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f001 f8a5 	bl	80049b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800386a:	bf00      	nop
 800386c:	3728      	adds	r7, #40	; 0x28
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40022000 	.word	0x40022000
 8003878:	40022100 	.word	0x40022100
 800387c:	40022300 	.word	0x40022300
 8003880:	58026300 	.word	0x58026300

08003884 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b0b9      	sub	sp, #228	; 0xe4
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038c6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4aa9      	ldr	r2, [pc, #676]	; (8003b74 <HAL_ADC_ConfigChannel+0x2c8>)
 80038ce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d102      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x34>
 80038da:	2302      	movs	r3, #2
 80038dc:	f000 bcfa 	b.w	80042d4 <HAL_ADC_ConfigChannel+0xa28>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fa0d 	bl	8002d0c <LL_ADC_REG_IsConversionOngoing>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f040 84de 	bne.w	80042b6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a9e      	ldr	r2, [pc, #632]	; (8003b78 <HAL_ADC_ConfigChannel+0x2cc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d033      	beq.n	800396c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800390c:	2b00      	cmp	r3, #0
 800390e:	d108      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x76>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	0e9b      	lsrs	r3, r3, #26
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	2201      	movs	r2, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	e01d      	b.n	800395e <HAL_ADC_ConfigChannel+0xb2>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003936:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800393a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800393e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003946:	2320      	movs	r3, #32
 8003948:	e004      	b.n	8003954 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800394a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	2201      	movs	r2, #1
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	69d1      	ldr	r1, [r2, #28]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	430b      	orrs	r3, r1
 800396a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	f7ff f800 	bl	800297e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff f9c2 	bl	8002d0c <LL_ADC_REG_IsConversionOngoing>
 8003988:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff f9e3 	bl	8002d5c <LL_ADC_INJ_IsConversionOngoing>
 8003996:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800399a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f040 8270 	bne.w	8003e84 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f040 826b 	bne.w	8003e84 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6819      	ldr	r1, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f7ff f85b 	bl	8002a76 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a6c      	ldr	r2, [pc, #432]	; (8003b78 <HAL_ADC_ConfigChannel+0x2cc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d10d      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039e4:	e032      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039e6:	4b65      	ldr	r3, [pc, #404]	; (8003b7c <HAL_ADC_ConfigChannel+0x2d0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80039ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f2:	d10b      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x160>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	089b      	lsrs	r3, r3, #2
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	e01d      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x19c>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10b      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x186>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	e00a      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x19c>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d048      	beq.n	8003ae6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	6919      	ldr	r1, [r3, #16]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a64:	f7fe fe86 	bl	8002774 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a42      	ldr	r2, [pc, #264]	; (8003b78 <HAL_ADC_ConfigChannel+0x2cc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d119      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6919      	ldr	r1, [r3, #16]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f7fe ff1e 	bl	80028c0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6919      	ldr	r1, [r3, #16]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d102      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x1f0>
 8003a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a9a:	e000      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x1f2>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f7fe feec 	bl	800287c <LL_ADC_SetOffsetSaturation>
 8003aa4:	e1ee      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	6919      	ldr	r1, [r3, #16]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d102      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x212>
 8003ab8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003abc:	e000      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x214>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f7fe feb9 	bl	8002838 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6919      	ldr	r1, [r3, #16]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	7e1b      	ldrb	r3, [r3, #24]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d102      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x230>
 8003ad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ada:	e000      	b.n	8003ade <HAL_ADC_ConfigChannel+0x232>
 8003adc:	2300      	movs	r3, #0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f7fe fe90 	bl	8002804 <LL_ADC_SetDataRightShift>
 8003ae4:	e1ce      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a23      	ldr	r2, [pc, #140]	; (8003b78 <HAL_ADC_ConfigChannel+0x2cc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	f040 8181 	bne.w	8003df4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe fe6d 	bl	80027d8 <LL_ADC_GetOffsetChannel>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10a      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x272>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe fe62 	bl	80027d8 <LL_ADC_GetOffsetChannel>
 8003b14:	4603      	mov	r3, r0
 8003b16:	0e9b      	lsrs	r3, r3, #26
 8003b18:	f003 021f 	and.w	r2, r3, #31
 8003b1c:	e01e      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x2b0>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe fe57 	bl	80027d8 <LL_ADC_GetOffsetChannel>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b34:	fa93 f3a3 	rbit	r3, r3
 8003b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003b3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003b44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003b4c:	2320      	movs	r3, #32
 8003b4e:	e004      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003b50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b54:	fab3 f383 	clz	r3, r3
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10b      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x2d4>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	0e9b      	lsrs	r3, r3, #26
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	e01e      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x306>
 8003b74:	47ff0000 	.word	0x47ff0000
 8003b78:	58026000 	.word	0x58026000
 8003b7c:	5c001000 	.word	0x5c001000
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003b94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003b9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003ba4:	2320      	movs	r3, #32
 8003ba6:	e004      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003ba8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bac:	fab3 f383 	clz	r3, r3
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d106      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe fea0 	bl	8002904 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fe04 	bl	80027d8 <LL_ADC_GetOffsetChannel>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x344>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2101      	movs	r1, #1
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe fdf9 	bl	80027d8 <LL_ADC_GetOffsetChannel>
 8003be6:	4603      	mov	r3, r0
 8003be8:	0e9b      	lsrs	r3, r3, #26
 8003bea:	f003 021f 	and.w	r2, r3, #31
 8003bee:	e01e      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x382>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fdee 	bl	80027d8 <LL_ADC_GetOffsetChannel>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003c0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003c1e:	2320      	movs	r3, #32
 8003c20:	e004      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003c22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c26:	fab3 f383 	clz	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d105      	bne.n	8003c46 <HAL_ADC_ConfigChannel+0x39a>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	0e9b      	lsrs	r3, r3, #26
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	e018      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x3cc>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c52:	fa93 f3a3 	rbit	r3, r3
 8003c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003c5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003c62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003c6a:	2320      	movs	r3, #32
 8003c6c:	e004      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003c6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d106      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2200      	movs	r2, #0
 8003c82:	2101      	movs	r1, #1
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fe3d 	bl	8002904 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2102      	movs	r1, #2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fe fda1 	bl	80027d8 <LL_ADC_GetOffsetChannel>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10a      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x40a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe fd96 	bl	80027d8 <LL_ADC_GetOffsetChannel>
 8003cac:	4603      	mov	r3, r0
 8003cae:	0e9b      	lsrs	r3, r3, #26
 8003cb0:	f003 021f 	and.w	r2, r3, #31
 8003cb4:	e01e      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x448>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2102      	movs	r1, #2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fd8b 	bl	80027d8 <LL_ADC_GetOffsetChannel>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ccc:	fa93 f3a3 	rbit	r3, r3
 8003cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	e004      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d105      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x460>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	0e9b      	lsrs	r3, r3, #26
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	e014      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x48a>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d14:	fa93 f3a3 	rbit	r3, r3
 8003d18:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003d1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003d20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003d28:	2320      	movs	r3, #32
 8003d2a:	e004      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d30:	fab3 f383 	clz	r3, r3
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d106      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2102      	movs	r1, #2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fdde 	bl	8002904 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2103      	movs	r1, #3
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fd42 	bl	80027d8 <LL_ADC_GetOffsetChannel>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x4c8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2103      	movs	r1, #3
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe fd37 	bl	80027d8 <LL_ADC_GetOffsetChannel>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	0e9b      	lsrs	r3, r3, #26
 8003d6e:	f003 021f 	and.w	r2, r3, #31
 8003d72:	e017      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x4f8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2103      	movs	r1, #3
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fd2c 	bl	80027d8 <LL_ADC_GetOffsetChannel>
 8003d80:	4603      	mov	r3, r0
 8003d82:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d86:	fa93 f3a3 	rbit	r3, r3
 8003d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003d96:	2320      	movs	r3, #32
 8003d98:	e003      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d9c:	fab3 f383 	clz	r3, r3
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x510>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	0e9b      	lsrs	r3, r3, #26
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	e011      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x534>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dc4:	fa93 f3a3 	rbit	r3, r3
 8003dc8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dcc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	e003      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003dd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d14f      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2200      	movs	r2, #0
 8003dea:	2103      	movs	r1, #3
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe fd89 	bl	8002904 <LL_ADC_SetOffsetState>
 8003df2:	e047      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	069b      	lsls	r3, r3, #26
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d107      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e16:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	069b      	lsls	r3, r3, #26
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d107      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e3a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	069b      	lsls	r3, r3, #26
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d107      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e5e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	069b      	lsls	r3, r3, #26
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d107      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e82:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fe fef1 	bl	8002c70 <LL_ADC_IsEnabled>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f040 8219 	bne.w	80042c8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6819      	ldr	r1, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f7fe fe12 	bl	8002acc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4aa1      	ldr	r2, [pc, #644]	; (8004134 <HAL_ADC_ConfigChannel+0x888>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	f040 812e 	bne.w	8004110 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x630>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	0e9b      	lsrs	r3, r3, #26
 8003eca:	3301      	adds	r3, #1
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	bf94      	ite	ls
 8003ed4:	2301      	movls	r3, #1
 8003ed6:	2300      	movhi	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	e019      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x664>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ee4:	fa93 f3a3 	rbit	r3, r3
 8003ee8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003ef4:	2320      	movs	r3, #32
 8003ef6:	e003      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	3301      	adds	r3, #1
 8003f02:	f003 031f 	and.w	r3, r3, #31
 8003f06:	2b09      	cmp	r3, #9
 8003f08:	bf94      	ite	ls
 8003f0a:	2301      	movls	r3, #1
 8003f0c:	2300      	movhi	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d079      	beq.n	8004008 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d107      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x684>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	0e9b      	lsrs	r3, r3, #26
 8003f26:	3301      	adds	r3, #1
 8003f28:	069b      	lsls	r3, r3, #26
 8003f2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f2e:	e015      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x6b0>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f38:	fa93 f3a3 	rbit	r3, r3
 8003f3c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f40:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003f48:	2320      	movs	r3, #32
 8003f4a:	e003      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4e:	fab3 f383 	clz	r3, r3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	3301      	adds	r3, #1
 8003f56:	069b      	lsls	r3, r3, #26
 8003f58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x6d0>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	0e9b      	lsrs	r3, r3, #26
 8003f6e:	3301      	adds	r3, #1
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	2101      	movs	r1, #1
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	e017      	b.n	8003fac <HAL_ADC_ConfigChannel+0x700>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f84:	fa93 f3a3 	rbit	r3, r3
 8003f88:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003f94:	2320      	movs	r3, #32
 8003f96:	e003      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9a:	fab3 f383 	clz	r3, r3
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fac:	ea42 0103 	orr.w	r1, r2, r3
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x726>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	0e9b      	lsrs	r3, r3, #26
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	4613      	mov	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4413      	add	r3, r2
 8003fce:	051b      	lsls	r3, r3, #20
 8003fd0:	e018      	b.n	8004004 <HAL_ADC_ConfigChannel+0x758>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fda:	fa93 f3a3 	rbit	r3, r3
 8003fde:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003fea:	2320      	movs	r3, #32
 8003fec:	e003      	b.n	8003ff6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	fab3 f383 	clz	r3, r3
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f003 021f 	and.w	r2, r3, #31
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	4413      	add	r3, r2
 8004002:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004004:	430b      	orrs	r3, r1
 8004006:	e07e      	b.n	8004106 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004010:	2b00      	cmp	r3, #0
 8004012:	d107      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x778>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	0e9b      	lsrs	r3, r3, #26
 800401a:	3301      	adds	r3, #1
 800401c:	069b      	lsls	r3, r3, #26
 800401e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004022:	e015      	b.n	8004050 <HAL_ADC_ConfigChannel+0x7a4>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	fa93 f3a3 	rbit	r3, r3
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800403c:	2320      	movs	r3, #32
 800403e:	e003      	b.n	8004048 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	3301      	adds	r3, #1
 800404a:	069b      	lsls	r3, r3, #26
 800404c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004058:	2b00      	cmp	r3, #0
 800405a:	d109      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x7c4>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	0e9b      	lsrs	r3, r3, #26
 8004062:	3301      	adds	r3, #1
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	2101      	movs	r1, #1
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	e017      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x7f4>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fa93 f3a3 	rbit	r3, r3
 800407c:	61bb      	str	r3, [r7, #24]
  return result;
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004088:	2320      	movs	r3, #32
 800408a:	e003      	b.n	8004094 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	fab3 f383 	clz	r3, r3
 8004092:	b2db      	uxtb	r3, r3
 8004094:	3301      	adds	r3, #1
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	2101      	movs	r1, #1
 800409c:	fa01 f303 	lsl.w	r3, r1, r3
 80040a0:	ea42 0103 	orr.w	r1, r2, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10d      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x820>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	0e9b      	lsrs	r3, r3, #26
 80040b6:	3301      	adds	r3, #1
 80040b8:	f003 021f 	and.w	r2, r3, #31
 80040bc:	4613      	mov	r3, r2
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	4413      	add	r3, r2
 80040c2:	3b1e      	subs	r3, #30
 80040c4:	051b      	lsls	r3, r3, #20
 80040c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040ca:	e01b      	b.n	8004104 <HAL_ADC_ConfigChannel+0x858>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	fa93 f3a3 	rbit	r3, r3
 80040d8:	60fb      	str	r3, [r7, #12]
  return result;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80040e4:	2320      	movs	r3, #32
 80040e6:	e003      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	fab3 f383 	clz	r3, r3
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	3301      	adds	r3, #1
 80040f2:	f003 021f 	and.w	r2, r3, #31
 80040f6:	4613      	mov	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	4413      	add	r3, r2
 80040fc:	3b1e      	subs	r3, #30
 80040fe:	051b      	lsls	r3, r3, #20
 8004100:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004104:	430b      	orrs	r3, r1
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	6892      	ldr	r2, [r2, #8]
 800410a:	4619      	mov	r1, r3
 800410c:	f7fe fcb3 	bl	8002a76 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	f280 80d7 	bge.w	80042c8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a06      	ldr	r2, [pc, #24]	; (8004138 <HAL_ADC_ConfigChannel+0x88c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_ADC_ConfigChannel+0x882>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a04      	ldr	r2, [pc, #16]	; (800413c <HAL_ADC_ConfigChannel+0x890>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d10a      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x898>
 800412e:	4b04      	ldr	r3, [pc, #16]	; (8004140 <HAL_ADC_ConfigChannel+0x894>)
 8004130:	e009      	b.n	8004146 <HAL_ADC_ConfigChannel+0x89a>
 8004132:	bf00      	nop
 8004134:	47ff0000 	.word	0x47ff0000
 8004138:	40022000 	.word	0x40022000
 800413c:	40022100 	.word	0x40022100
 8004140:	40022300 	.word	0x40022300
 8004144:	4b65      	ldr	r3, [pc, #404]	; (80042dc <HAL_ADC_ConfigChannel+0xa30>)
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe fb06 	bl	8002758 <LL_ADC_GetCommonPathInternalCh>
 800414c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a62      	ldr	r2, [pc, #392]	; (80042e0 <HAL_ADC_ConfigChannel+0xa34>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_ADC_ConfigChannel+0x8b8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a61      	ldr	r2, [pc, #388]	; (80042e4 <HAL_ADC_ConfigChannel+0xa38>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10e      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x8d6>
 8004164:	485e      	ldr	r0, [pc, #376]	; (80042e0 <HAL_ADC_ConfigChannel+0xa34>)
 8004166:	f7fe fd83 	bl	8002c70 <LL_ADC_IsEnabled>
 800416a:	4604      	mov	r4, r0
 800416c:	485d      	ldr	r0, [pc, #372]	; (80042e4 <HAL_ADC_ConfigChannel+0xa38>)
 800416e:	f7fe fd7f 	bl	8002c70 <LL_ADC_IsEnabled>
 8004172:	4603      	mov	r3, r0
 8004174:	4323      	orrs	r3, r4
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf0c      	ite	eq
 800417a:	2301      	moveq	r3, #1
 800417c:	2300      	movne	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	e008      	b.n	8004194 <HAL_ADC_ConfigChannel+0x8e8>
 8004182:	4859      	ldr	r0, [pc, #356]	; (80042e8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004184:	f7fe fd74 	bl	8002c70 <LL_ADC_IsEnabled>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf0c      	ite	eq
 800418e:	2301      	moveq	r3, #1
 8004190:	2300      	movne	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8084 	beq.w	80042a2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a53      	ldr	r2, [pc, #332]	; (80042ec <HAL_ADC_ConfigChannel+0xa40>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d132      	bne.n	800420a <HAL_ADC_ConfigChannel+0x95e>
 80041a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d12c      	bne.n	800420a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a4c      	ldr	r2, [pc, #304]	; (80042e8 <HAL_ADC_ConfigChannel+0xa3c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	f040 8086 	bne.w	80042c8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a47      	ldr	r2, [pc, #284]	; (80042e0 <HAL_ADC_ConfigChannel+0xa34>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <HAL_ADC_ConfigChannel+0x924>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a46      	ldr	r2, [pc, #280]	; (80042e4 <HAL_ADC_ConfigChannel+0xa38>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x928>
 80041d0:	4a47      	ldr	r2, [pc, #284]	; (80042f0 <HAL_ADC_ConfigChannel+0xa44>)
 80041d2:	e000      	b.n	80041d6 <HAL_ADC_ConfigChannel+0x92a>
 80041d4:	4a41      	ldr	r2, [pc, #260]	; (80042dc <HAL_ADC_ConfigChannel+0xa30>)
 80041d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f7fe faa6 	bl	8002732 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041e6:	4b43      	ldr	r3, [pc, #268]	; (80042f4 <HAL_ADC_ConfigChannel+0xa48>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	099b      	lsrs	r3, r3, #6
 80041ec:	4a42      	ldr	r2, [pc, #264]	; (80042f8 <HAL_ADC_ConfigChannel+0xa4c>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	099b      	lsrs	r3, r3, #6
 80041f4:	3301      	adds	r3, #1
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80041fa:	e002      	b.n	8004202 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	3b01      	subs	r3, #1
 8004200:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f9      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004208:	e05e      	b.n	80042c8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a3b      	ldr	r2, [pc, #236]	; (80042fc <HAL_ADC_ConfigChannel+0xa50>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d120      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x9aa>
 8004214:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d11a      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a30      	ldr	r2, [pc, #192]	; (80042e8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d14e      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2c      	ldr	r2, [pc, #176]	; (80042e0 <HAL_ADC_ConfigChannel+0xa34>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_ADC_ConfigChannel+0x992>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2a      	ldr	r2, [pc, #168]	; (80042e4 <HAL_ADC_ConfigChannel+0xa38>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d101      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x996>
 800423e:	4a2c      	ldr	r2, [pc, #176]	; (80042f0 <HAL_ADC_ConfigChannel+0xa44>)
 8004240:	e000      	b.n	8004244 <HAL_ADC_ConfigChannel+0x998>
 8004242:	4a26      	ldr	r2, [pc, #152]	; (80042dc <HAL_ADC_ConfigChannel+0xa30>)
 8004244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004248:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800424c:	4619      	mov	r1, r3
 800424e:	4610      	mov	r0, r2
 8004250:	f7fe fa6f 	bl	8002732 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004254:	e038      	b.n	80042c8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a29      	ldr	r2, [pc, #164]	; (8004300 <HAL_ADC_ConfigChannel+0xa54>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d133      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0xa1c>
 8004260:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d12d      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d128      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <HAL_ADC_ConfigChannel+0xa34>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_ADC_ConfigChannel+0x9de>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a17      	ldr	r2, [pc, #92]	; (80042e4 <HAL_ADC_ConfigChannel+0xa38>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d101      	bne.n	800428e <HAL_ADC_ConfigChannel+0x9e2>
 800428a:	4a19      	ldr	r2, [pc, #100]	; (80042f0 <HAL_ADC_ConfigChannel+0xa44>)
 800428c:	e000      	b.n	8004290 <HAL_ADC_ConfigChannel+0x9e4>
 800428e:	4a13      	ldr	r2, [pc, #76]	; (80042dc <HAL_ADC_ConfigChannel+0xa30>)
 8004290:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004294:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f7fe fa49 	bl	8002732 <LL_ADC_SetCommonPathInternalCh>
 80042a0:	e012      	b.n	80042c8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80042b4:	e008      	b.n	80042c8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ba:	f043 0220 	orr.w	r2, r3, #32
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80042d0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	37e4      	adds	r7, #228	; 0xe4
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd90      	pop	{r4, r7, pc}
 80042dc:	58026300 	.word	0x58026300
 80042e0:	40022000 	.word	0x40022000
 80042e4:	40022100 	.word	0x40022100
 80042e8:	58026000 	.word	0x58026000
 80042ec:	c7520000 	.word	0xc7520000
 80042f0:	40022300 	.word	0x40022300
 80042f4:	24000004 	.word	0x24000004
 80042f8:	053e2d63 	.word	0x053e2d63
 80042fc:	c3210000 	.word	0xc3210000
 8004300:	cb840000 	.word	0xcb840000

08004304 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe fcf6 	bl	8002d0c <LL_ADC_REG_IsConversionOngoing>
 8004320:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe fd18 	bl	8002d5c <LL_ADC_INJ_IsConversionOngoing>
 800432c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d103      	bne.n	800433c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8098 	beq.w	800446c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d02a      	beq.n	80043a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	7e5b      	ldrb	r3, [r3, #25]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d126      	bne.n	80043a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	7e1b      	ldrb	r3, [r3, #24]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d122      	bne.n	80043a0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800435a:	2301      	movs	r3, #1
 800435c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800435e:	e014      	b.n	800438a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	4a45      	ldr	r2, [pc, #276]	; (8004478 <ADC_ConversionStop+0x174>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d90d      	bls.n	8004384 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436c:	f043 0210 	orr.w	r2, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004378:	f043 0201 	orr.w	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e074      	b.n	800446e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	3301      	adds	r3, #1
 8004388:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d1e3      	bne.n	8004360 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2240      	movs	r2, #64	; 0x40
 800439e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d014      	beq.n	80043d0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe fcae 	bl	8002d0c <LL_ADC_REG_IsConversionOngoing>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00c      	beq.n	80043d0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe fc6b 	bl	8002c96 <LL_ADC_IsDisableOngoing>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d104      	bne.n	80043d0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe fc8a 	bl	8002ce4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d014      	beq.n	8004400 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fcbe 	bl	8002d5c <LL_ADC_INJ_IsConversionOngoing>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00c      	beq.n	8004400 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fc53 	bl	8002c96 <LL_ADC_IsDisableOngoing>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d104      	bne.n	8004400 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fc9a 	bl	8002d34 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d005      	beq.n	8004412 <ADC_ConversionStop+0x10e>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d105      	bne.n	8004418 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800440c:	230c      	movs	r3, #12
 800440e:	617b      	str	r3, [r7, #20]
        break;
 8004410:	e005      	b.n	800441e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004412:	2308      	movs	r3, #8
 8004414:	617b      	str	r3, [r7, #20]
        break;
 8004416:	e002      	b.n	800441e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004418:	2304      	movs	r3, #4
 800441a:	617b      	str	r3, [r7, #20]
        break;
 800441c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800441e:	f7fe f939 	bl	8002694 <HAL_GetTick>
 8004422:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004424:	e01b      	b.n	800445e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004426:	f7fe f935 	bl	8002694 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b05      	cmp	r3, #5
 8004432:	d914      	bls.n	800445e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	4013      	ands	r3, r2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00d      	beq.n	800445e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004446:	f043 0210 	orr.w	r2, r3, #16
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004452:	f043 0201 	orr.w	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e007      	b.n	800446e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1dc      	bne.n	8004426 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	000cdbff 	.word	0x000cdbff

0800447c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7fe fbf1 	bl	8002c70 <LL_ADC_IsEnabled>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d16e      	bne.n	8004572 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	4b38      	ldr	r3, [pc, #224]	; (800457c <ADC_Enable+0x100>)
 800449c:	4013      	ands	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00d      	beq.n	80044be <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a6:	f043 0210 	orr.w	r2, r3, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b2:	f043 0201 	orr.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e05a      	b.n	8004574 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fbac 	bl	8002c20 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044c8:	f7fe f8e4 	bl	8002694 <HAL_GetTick>
 80044cc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a2b      	ldr	r2, [pc, #172]	; (8004580 <ADC_Enable+0x104>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <ADC_Enable+0x66>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a29      	ldr	r2, [pc, #164]	; (8004584 <ADC_Enable+0x108>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d101      	bne.n	80044e6 <ADC_Enable+0x6a>
 80044e2:	4b29      	ldr	r3, [pc, #164]	; (8004588 <ADC_Enable+0x10c>)
 80044e4:	e000      	b.n	80044e8 <ADC_Enable+0x6c>
 80044e6:	4b29      	ldr	r3, [pc, #164]	; (800458c <ADC_Enable+0x110>)
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe fb2f 	bl	8002b4c <LL_ADC_GetMultimode>
 80044ee:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a23      	ldr	r2, [pc, #140]	; (8004584 <ADC_Enable+0x108>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d002      	beq.n	8004500 <ADC_Enable+0x84>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	e000      	b.n	8004502 <ADC_Enable+0x86>
 8004500:	4b1f      	ldr	r3, [pc, #124]	; (8004580 <ADC_Enable+0x104>)
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	4293      	cmp	r3, r2
 8004508:	d02c      	beq.n	8004564 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d130      	bne.n	8004572 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004510:	e028      	b.n	8004564 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fbaa 	bl	8002c70 <LL_ADC_IsEnabled>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d104      	bne.n	800452c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fb7a 	bl	8002c20 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800452c:	f7fe f8b2 	bl	8002694 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d914      	bls.n	8004564 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d00d      	beq.n	8004564 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454c:	f043 0210 	orr.w	r2, r3, #16
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004558:	f043 0201 	orr.w	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e007      	b.n	8004574 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b01      	cmp	r3, #1
 8004570:	d1cf      	bne.n	8004512 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	8000003f 	.word	0x8000003f
 8004580:	40022000 	.word	0x40022000
 8004584:	40022100 	.word	0x40022100
 8004588:	40022300 	.word	0x40022300
 800458c:	58026300 	.word	0x58026300

08004590 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe fb7a 	bl	8002c96 <LL_ADC_IsDisableOngoing>
 80045a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe fb61 	bl	8002c70 <LL_ADC_IsEnabled>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d047      	beq.n	8004644 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d144      	bne.n	8004644 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 030d 	and.w	r3, r3, #13
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d10c      	bne.n	80045e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fe fb3b 	bl	8002c48 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2203      	movs	r2, #3
 80045d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045da:	f7fe f85b 	bl	8002694 <HAL_GetTick>
 80045de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045e0:	e029      	b.n	8004636 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e6:	f043 0210 	orr.w	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e023      	b.n	8004646 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045fe:	f7fe f849 	bl	8002694 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d914      	bls.n	8004636 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00d      	beq.n	8004636 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461e:	f043 0210 	orr.w	r2, r3, #16
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800462a:	f043 0201 	orr.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e007      	b.n	8004646 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1dc      	bne.n	80045fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004660:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004664:	2b00      	cmp	r3, #0
 8004666:	d14b      	bne.n	8004700 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d021      	beq.n	80046c6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe f966 	bl	8002958 <LL_ADC_REG_IsTriggerSourceSWStart>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d032      	beq.n	80046f8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d12b      	bne.n	80046f8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d11f      	bne.n	80046f8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046bc:	f043 0201 	orr.w	r2, r3, #1
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	661a      	str	r2, [r3, #96]	; 0x60
 80046c4:	e018      	b.n	80046f8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d111      	bne.n	80046f8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f0:	f043 0201 	orr.w	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f7fc ff1f 	bl	800153c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046fe:	e00e      	b.n	800471e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff f8c3 	bl	8003898 <HAL_ADC_ErrorCallback>
}
 8004712:	e004      	b.n	800471e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7fc fec1 	bl	80014bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004754:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004760:	f043 0204 	orr.w	r2, r3, #4
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff f895 	bl	8003898 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6c      	ldr	r2, [pc, #432]	; (8004938 <ADC_ConfigureBoostMode+0x1c0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <ADC_ConfigureBoostMode+0x1c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a6b      	ldr	r2, [pc, #428]	; (800493c <ADC_ConfigureBoostMode+0x1c4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d109      	bne.n	80047a8 <ADC_ConfigureBoostMode+0x30>
 8004794:	4b6a      	ldr	r3, [pc, #424]	; (8004940 <ADC_ConfigureBoostMode+0x1c8>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf14      	ite	ne
 80047a0:	2301      	movne	r3, #1
 80047a2:	2300      	moveq	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e008      	b.n	80047ba <ADC_ConfigureBoostMode+0x42>
 80047a8:	4b66      	ldr	r3, [pc, #408]	; (8004944 <ADC_ConfigureBoostMode+0x1cc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01c      	beq.n	80047f8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80047be:	f004 fa89 	bl	8008cd4 <HAL_RCC_GetHCLKFreq>
 80047c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047cc:	d010      	beq.n	80047f0 <ADC_ConfigureBoostMode+0x78>
 80047ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047d2:	d873      	bhi.n	80048bc <ADC_ConfigureBoostMode+0x144>
 80047d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d8:	d002      	beq.n	80047e0 <ADC_ConfigureBoostMode+0x68>
 80047da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047de:	d16d      	bne.n	80048bc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	60fb      	str	r3, [r7, #12]
        break;
 80047ee:	e068      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	60fb      	str	r3, [r7, #12]
        break;
 80047f6:	e064      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80047f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80047fc:	f04f 0100 	mov.w	r1, #0
 8004800:	f005 fc64 	bl	800a0cc <HAL_RCCEx_GetPeriphCLKFreq>
 8004804:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800480e:	d051      	beq.n	80048b4 <ADC_ConfigureBoostMode+0x13c>
 8004810:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004814:	d854      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 8004816:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800481a:	d047      	beq.n	80048ac <ADC_ConfigureBoostMode+0x134>
 800481c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004820:	d84e      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 8004822:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004826:	d03d      	beq.n	80048a4 <ADC_ConfigureBoostMode+0x12c>
 8004828:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800482c:	d848      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 800482e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004832:	d033      	beq.n	800489c <ADC_ConfigureBoostMode+0x124>
 8004834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004838:	d842      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 800483a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800483e:	d029      	beq.n	8004894 <ADC_ConfigureBoostMode+0x11c>
 8004840:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004844:	d83c      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 8004846:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800484a:	d01a      	beq.n	8004882 <ADC_ConfigureBoostMode+0x10a>
 800484c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004850:	d836      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 8004852:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004856:	d014      	beq.n	8004882 <ADC_ConfigureBoostMode+0x10a>
 8004858:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800485c:	d830      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 800485e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004862:	d00e      	beq.n	8004882 <ADC_ConfigureBoostMode+0x10a>
 8004864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004868:	d82a      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 800486a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800486e:	d008      	beq.n	8004882 <ADC_ConfigureBoostMode+0x10a>
 8004870:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004874:	d824      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 8004876:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800487a:	d002      	beq.n	8004882 <ADC_ConfigureBoostMode+0x10a>
 800487c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004880:	d11e      	bne.n	80048c0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	0c9b      	lsrs	r3, r3, #18
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	60fb      	str	r3, [r7, #12]
        break;
 8004892:	e016      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	60fb      	str	r3, [r7, #12]
        break;
 800489a:	e012      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	60fb      	str	r3, [r7, #12]
        break;
 80048a2:	e00e      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	099b      	lsrs	r3, r3, #6
 80048a8:	60fb      	str	r3, [r7, #12]
        break;
 80048aa:	e00a      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	09db      	lsrs	r3, r3, #7
 80048b0:	60fb      	str	r3, [r7, #12]
        break;
 80048b2:	e006      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	0a1b      	lsrs	r3, r3, #8
 80048b8:	60fb      	str	r3, [r7, #12]
        break;
 80048ba:	e002      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80048bc:	bf00      	nop
 80048be:	e000      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80048c0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	085b      	lsrs	r3, r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a1f      	ldr	r2, [pc, #124]	; (8004948 <ADC_ConfigureBoostMode+0x1d0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d808      	bhi.n	80048e2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048de:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80048e0:	e025      	b.n	800492e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a19      	ldr	r2, [pc, #100]	; (800494c <ADC_ConfigureBoostMode+0x1d4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d80a      	bhi.n	8004900 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048fc:	609a      	str	r2, [r3, #8]
}
 80048fe:	e016      	b.n	800492e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a13      	ldr	r2, [pc, #76]	; (8004950 <ADC_ConfigureBoostMode+0x1d8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d80a      	bhi.n	800491e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800491a:	609a      	str	r2, [r3, #8]
}
 800491c:	e007      	b.n	800492e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800492c:	609a      	str	r2, [r3, #8]
}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40022000 	.word	0x40022000
 800493c:	40022100 	.word	0x40022100
 8004940:	40022300 	.word	0x40022300
 8004944:	58026300 	.word	0x58026300
 8004948:	005f5e10 	.word	0x005f5e10
 800494c:	00bebc20 	.word	0x00bebc20
 8004950:	017d7840 	.word	0x017d7840

08004954 <LL_ADC_IsEnabled>:
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <LL_ADC_IsEnabled+0x18>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <LL_ADC_IsEnabled+0x1a>
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_ADC_REG_IsConversionOngoing>:
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b04      	cmp	r3, #4
 800498c:	d101      	bne.n	8004992 <LL_ADC_REG_IsConversionOngoing+0x18>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b0a3      	sub	sp, #140	; 0x8c
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e0c1      	b.n	8004ba6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a5e      	ldr	r2, [pc, #376]	; (8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d102      	bne.n	8004a42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004a3c:	4b5d      	ldr	r3, [pc, #372]	; (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	e001      	b.n	8004a46 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a50:	f043 0220 	orr.w	r2, r3, #32
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0a0      	b.n	8004ba6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ff87 	bl	800497a <LL_ADC_REG_IsConversionOngoing>
 8004a6c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff ff80 	bl	800497a <LL_ADC_REG_IsConversionOngoing>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 8081 	bne.w	8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004a82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d17c      	bne.n	8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a48      	ldr	r2, [pc, #288]	; (8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a46      	ldr	r2, [pc, #280]	; (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d101      	bne.n	8004aa2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004a9e:	4b46      	ldr	r3, [pc, #280]	; (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004aa0:	e000      	b.n	8004aa4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004aa2:	4b46      	ldr	r3, [pc, #280]	; (8004bbc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004aa4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d039      	beq.n	8004b22 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004abe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a3a      	ldr	r2, [pc, #232]	; (8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a39      	ldr	r2, [pc, #228]	; (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10e      	bne.n	8004af2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004ad4:	4836      	ldr	r0, [pc, #216]	; (8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ad6:	f7ff ff3d 	bl	8004954 <LL_ADC_IsEnabled>
 8004ada:	4604      	mov	r4, r0
 8004adc:	4835      	ldr	r0, [pc, #212]	; (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ade:	f7ff ff39 	bl	8004954 <LL_ADC_IsEnabled>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4323      	orrs	r3, r4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bf0c      	ite	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	2300      	movne	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	e008      	b.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004af2:	4833      	ldr	r0, [pc, #204]	; (8004bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004af4:	f7ff ff2e 	bl	8004954 <LL_ADC_IsEnabled>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bf0c      	ite	eq
 8004afe:	2301      	moveq	r3, #1
 8004b00:	2300      	movne	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d047      	beq.n	8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004b08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	6811      	ldr	r1, [r2, #0]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	6892      	ldr	r2, [r2, #8]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b1e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b20:	e03a      	b.n	8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004b22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b2c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1f      	ldr	r2, [pc, #124]	; (8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	; (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d10e      	bne.n	8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004b42:	481b      	ldr	r0, [pc, #108]	; (8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b44:	f7ff ff06 	bl	8004954 <LL_ADC_IsEnabled>
 8004b48:	4604      	mov	r4, r0
 8004b4a:	481a      	ldr	r0, [pc, #104]	; (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b4c:	f7ff ff02 	bl	8004954 <LL_ADC_IsEnabled>
 8004b50:	4603      	mov	r3, r0
 8004b52:	4323      	orrs	r3, r4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	e008      	b.n	8004b72 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004b60:	4817      	ldr	r0, [pc, #92]	; (8004bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004b62:	f7ff fef7 	bl	8004954 <LL_ADC_IsEnabled>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d010      	beq.n	8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004b80:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b82:	e009      	b.n	8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004b96:	e000      	b.n	8004b9a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004ba2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	378c      	adds	r7, #140	; 0x8c
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd90      	pop	{r4, r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40022000 	.word	0x40022000
 8004bb4:	40022100 	.word	0x40022100
 8004bb8:	40022300 	.word	0x40022300
 8004bbc:	58026300 	.word	0x58026300
 8004bc0:	58026000 	.word	0x58026000
 8004bc4:	fffff0e0 	.word	0xfffff0e0

08004bc8 <__NVIC_SetPriorityGrouping>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <__NVIC_SetPriorityGrouping+0x40>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004be4:	4013      	ands	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <__NVIC_SetPriorityGrouping+0x44>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bf6:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <__NVIC_SetPriorityGrouping+0x40>)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	60d3      	str	r3, [r2, #12]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	e000ed00 	.word	0xe000ed00
 8004c0c:	05fa0000 	.word	0x05fa0000

08004c10 <__NVIC_GetPriorityGrouping>:
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c14:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <__NVIC_GetPriorityGrouping+0x18>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	0a1b      	lsrs	r3, r3, #8
 8004c1a:	f003 0307 	and.w	r3, r3, #7
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	e000ed00 	.word	0xe000ed00

08004c2c <__NVIC_EnableIRQ>:
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	db0b      	blt.n	8004c56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	f003 021f 	and.w	r2, r3, #31
 8004c44:	4907      	ldr	r1, [pc, #28]	; (8004c64 <__NVIC_EnableIRQ+0x38>)
 8004c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	e000e100 	.word	0xe000e100

08004c68 <__NVIC_SetPriority>:
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	6039      	str	r1, [r7, #0]
 8004c72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	db0a      	blt.n	8004c92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	490c      	ldr	r1, [pc, #48]	; (8004cb4 <__NVIC_SetPriority+0x4c>)
 8004c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c86:	0112      	lsls	r2, r2, #4
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c90:	e00a      	b.n	8004ca8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	4908      	ldr	r1, [pc, #32]	; (8004cb8 <__NVIC_SetPriority+0x50>)
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	3b04      	subs	r3, #4
 8004ca0:	0112      	lsls	r2, r2, #4
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	761a      	strb	r2, [r3, #24]
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	e000e100 	.word	0xe000e100
 8004cb8:	e000ed00 	.word	0xe000ed00

08004cbc <NVIC_EncodePriority>:
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b089      	sub	sp, #36	; 0x24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f1c3 0307 	rsb	r3, r3, #7
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	bf28      	it	cs
 8004cda:	2304      	movcs	r3, #4
 8004cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	2b06      	cmp	r3, #6
 8004ce4:	d902      	bls.n	8004cec <NVIC_EncodePriority+0x30>
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	3b03      	subs	r3, #3
 8004cea:	e000      	b.n	8004cee <NVIC_EncodePriority+0x32>
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43da      	mvns	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	401a      	ands	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d04:	f04f 31ff 	mov.w	r1, #4294967295
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0e:	43d9      	mvns	r1, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d14:	4313      	orrs	r3, r2
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3724      	adds	r7, #36	; 0x24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <SysTick_Config>:
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d34:	d301      	bcc.n	8004d3a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004d36:	2301      	movs	r3, #1
 8004d38:	e00f      	b.n	8004d5a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d3a:	4a0a      	ldr	r2, [pc, #40]	; (8004d64 <SysTick_Config+0x40>)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d42:	210f      	movs	r1, #15
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	f7ff ff8e 	bl	8004c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <SysTick_Config+0x40>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d52:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <SysTick_Config+0x40>)
 8004d54:	2207      	movs	r2, #7
 8004d56:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	e000e010 	.word	0xe000e010

08004d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff ff29 	bl	8004bc8 <__NVIC_SetPriorityGrouping>
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b086      	sub	sp, #24
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	4603      	mov	r3, r0
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d8c:	f7ff ff40 	bl	8004c10 <__NVIC_GetPriorityGrouping>
 8004d90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	6978      	ldr	r0, [r7, #20]
 8004d98:	f7ff ff90 	bl	8004cbc <NVIC_EncodePriority>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004da2:	4611      	mov	r1, r2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff ff5f 	bl	8004c68 <__NVIC_SetPriority>
}
 8004daa:	bf00      	nop
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	4603      	mov	r3, r0
 8004dba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff ff33 	bl	8004c2c <__NVIC_EnableIRQ>
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff ffa4 	bl	8004d24 <SysTick_Config>
 8004ddc:	4603      	mov	r3, r0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004df0:	f7fd fc50 	bl	8002694 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e312      	b.n	8005426 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a66      	ldr	r2, [pc, #408]	; (8004fa0 <HAL_DMA_Init+0x1b8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d04a      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a65      	ldr	r2, [pc, #404]	; (8004fa4 <HAL_DMA_Init+0x1bc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d045      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a63      	ldr	r2, [pc, #396]	; (8004fa8 <HAL_DMA_Init+0x1c0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d040      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a62      	ldr	r2, [pc, #392]	; (8004fac <HAL_DMA_Init+0x1c4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d03b      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a60      	ldr	r2, [pc, #384]	; (8004fb0 <HAL_DMA_Init+0x1c8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d036      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a5f      	ldr	r2, [pc, #380]	; (8004fb4 <HAL_DMA_Init+0x1cc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d031      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a5d      	ldr	r2, [pc, #372]	; (8004fb8 <HAL_DMA_Init+0x1d0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d02c      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a5c      	ldr	r2, [pc, #368]	; (8004fbc <HAL_DMA_Init+0x1d4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d027      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a5a      	ldr	r2, [pc, #360]	; (8004fc0 <HAL_DMA_Init+0x1d8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d022      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a59      	ldr	r2, [pc, #356]	; (8004fc4 <HAL_DMA_Init+0x1dc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d01d      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a57      	ldr	r2, [pc, #348]	; (8004fc8 <HAL_DMA_Init+0x1e0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d018      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a56      	ldr	r2, [pc, #344]	; (8004fcc <HAL_DMA_Init+0x1e4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a54      	ldr	r2, [pc, #336]	; (8004fd0 <HAL_DMA_Init+0x1e8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00e      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a53      	ldr	r2, [pc, #332]	; (8004fd4 <HAL_DMA_Init+0x1ec>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d009      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a51      	ldr	r2, [pc, #324]	; (8004fd8 <HAL_DMA_Init+0x1f0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_DMA_Init+0xb8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a50      	ldr	r2, [pc, #320]	; (8004fdc <HAL_DMA_Init+0x1f4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d101      	bne.n	8004ea4 <HAL_DMA_Init+0xbc>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <HAL_DMA_Init+0xbe>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 813c 	beq.w	8005124 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a37      	ldr	r2, [pc, #220]	; (8004fa0 <HAL_DMA_Init+0x1b8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d04a      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a36      	ldr	r2, [pc, #216]	; (8004fa4 <HAL_DMA_Init+0x1bc>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d045      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a34      	ldr	r2, [pc, #208]	; (8004fa8 <HAL_DMA_Init+0x1c0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d040      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a33      	ldr	r2, [pc, #204]	; (8004fac <HAL_DMA_Init+0x1c4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d03b      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a31      	ldr	r2, [pc, #196]	; (8004fb0 <HAL_DMA_Init+0x1c8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d036      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a30      	ldr	r2, [pc, #192]	; (8004fb4 <HAL_DMA_Init+0x1cc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d031      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a2e      	ldr	r2, [pc, #184]	; (8004fb8 <HAL_DMA_Init+0x1d0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d02c      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a2d      	ldr	r2, [pc, #180]	; (8004fbc <HAL_DMA_Init+0x1d4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d027      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a2b      	ldr	r2, [pc, #172]	; (8004fc0 <HAL_DMA_Init+0x1d8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d022      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a2a      	ldr	r2, [pc, #168]	; (8004fc4 <HAL_DMA_Init+0x1dc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d01d      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a28      	ldr	r2, [pc, #160]	; (8004fc8 <HAL_DMA_Init+0x1e0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d018      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a27      	ldr	r2, [pc, #156]	; (8004fcc <HAL_DMA_Init+0x1e4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d013      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a25      	ldr	r2, [pc, #148]	; (8004fd0 <HAL_DMA_Init+0x1e8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a24      	ldr	r2, [pc, #144]	; (8004fd4 <HAL_DMA_Init+0x1ec>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a22      	ldr	r2, [pc, #136]	; (8004fd8 <HAL_DMA_Init+0x1f0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_DMA_Init+0x174>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a21      	ldr	r2, [pc, #132]	; (8004fdc <HAL_DMA_Init+0x1f4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d108      	bne.n	8004f6e <HAL_DMA_Init+0x186>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0201 	bic.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e007      	b.n	8004f7e <HAL_DMA_Init+0x196>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0201 	bic.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f7e:	e02f      	b.n	8004fe0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f80:	f7fd fb88 	bl	8002694 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d928      	bls.n	8004fe0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2203      	movs	r2, #3
 8004f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e242      	b.n	8005426 <HAL_DMA_Init+0x63e>
 8004fa0:	40020010 	.word	0x40020010
 8004fa4:	40020028 	.word	0x40020028
 8004fa8:	40020040 	.word	0x40020040
 8004fac:	40020058 	.word	0x40020058
 8004fb0:	40020070 	.word	0x40020070
 8004fb4:	40020088 	.word	0x40020088
 8004fb8:	400200a0 	.word	0x400200a0
 8004fbc:	400200b8 	.word	0x400200b8
 8004fc0:	40020410 	.word	0x40020410
 8004fc4:	40020428 	.word	0x40020428
 8004fc8:	40020440 	.word	0x40020440
 8004fcc:	40020458 	.word	0x40020458
 8004fd0:	40020470 	.word	0x40020470
 8004fd4:	40020488 	.word	0x40020488
 8004fd8:	400204a0 	.word	0x400204a0
 8004fdc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1c8      	bne.n	8004f80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4b83      	ldr	r3, [pc, #524]	; (8005208 <HAL_DMA_Init+0x420>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005006:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005012:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800501e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b04      	cmp	r3, #4
 8005032:	d107      	bne.n	8005044 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503c:	4313      	orrs	r3, r2
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b28      	cmp	r3, #40	; 0x28
 800504a:	d903      	bls.n	8005054 <HAL_DMA_Init+0x26c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b2e      	cmp	r3, #46	; 0x2e
 8005052:	d91f      	bls.n	8005094 <HAL_DMA_Init+0x2ac>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b3e      	cmp	r3, #62	; 0x3e
 800505a:	d903      	bls.n	8005064 <HAL_DMA_Init+0x27c>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b42      	cmp	r3, #66	; 0x42
 8005062:	d917      	bls.n	8005094 <HAL_DMA_Init+0x2ac>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b46      	cmp	r3, #70	; 0x46
 800506a:	d903      	bls.n	8005074 <HAL_DMA_Init+0x28c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b48      	cmp	r3, #72	; 0x48
 8005072:	d90f      	bls.n	8005094 <HAL_DMA_Init+0x2ac>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b4e      	cmp	r3, #78	; 0x4e
 800507a:	d903      	bls.n	8005084 <HAL_DMA_Init+0x29c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b52      	cmp	r3, #82	; 0x52
 8005082:	d907      	bls.n	8005094 <HAL_DMA_Init+0x2ac>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b73      	cmp	r3, #115	; 0x73
 800508a:	d905      	bls.n	8005098 <HAL_DMA_Init+0x2b0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b77      	cmp	r3, #119	; 0x77
 8005092:	d801      	bhi.n	8005098 <HAL_DMA_Init+0x2b0>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <HAL_DMA_Init+0x2b2>
 8005098:	2300      	movs	r3, #0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050a4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f023 0307 	bic.w	r3, r3, #7
 80050bc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d117      	bne.n	8005100 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00e      	beq.n	8005100 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f002 f8e8 	bl	80072b8 <DMA_CheckFifoParam>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2240      	movs	r2, #64	; 0x40
 80050f2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e192      	b.n	8005426 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f002 f823 	bl	8007154 <DMA_CalcBaseAndBitshift>
 800510e:	4603      	mov	r3, r0
 8005110:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	223f      	movs	r2, #63	; 0x3f
 800511c:	409a      	lsls	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	609a      	str	r2, [r3, #8]
 8005122:	e0c8      	b.n	80052b6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a38      	ldr	r2, [pc, #224]	; (800520c <HAL_DMA_Init+0x424>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d022      	beq.n	8005174 <HAL_DMA_Init+0x38c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a37      	ldr	r2, [pc, #220]	; (8005210 <HAL_DMA_Init+0x428>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d01d      	beq.n	8005174 <HAL_DMA_Init+0x38c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a35      	ldr	r2, [pc, #212]	; (8005214 <HAL_DMA_Init+0x42c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d018      	beq.n	8005174 <HAL_DMA_Init+0x38c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a34      	ldr	r2, [pc, #208]	; (8005218 <HAL_DMA_Init+0x430>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d013      	beq.n	8005174 <HAL_DMA_Init+0x38c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a32      	ldr	r2, [pc, #200]	; (800521c <HAL_DMA_Init+0x434>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00e      	beq.n	8005174 <HAL_DMA_Init+0x38c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a31      	ldr	r2, [pc, #196]	; (8005220 <HAL_DMA_Init+0x438>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d009      	beq.n	8005174 <HAL_DMA_Init+0x38c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a2f      	ldr	r2, [pc, #188]	; (8005224 <HAL_DMA_Init+0x43c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d004      	beq.n	8005174 <HAL_DMA_Init+0x38c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a2e      	ldr	r2, [pc, #184]	; (8005228 <HAL_DMA_Init+0x440>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d101      	bne.n	8005178 <HAL_DMA_Init+0x390>
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <HAL_DMA_Init+0x392>
 8005178:	2300      	movs	r3, #0
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 8092 	beq.w	80052a4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a21      	ldr	r2, [pc, #132]	; (800520c <HAL_DMA_Init+0x424>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d021      	beq.n	80051ce <HAL_DMA_Init+0x3e6>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a20      	ldr	r2, [pc, #128]	; (8005210 <HAL_DMA_Init+0x428>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d01c      	beq.n	80051ce <HAL_DMA_Init+0x3e6>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1e      	ldr	r2, [pc, #120]	; (8005214 <HAL_DMA_Init+0x42c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d017      	beq.n	80051ce <HAL_DMA_Init+0x3e6>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1d      	ldr	r2, [pc, #116]	; (8005218 <HAL_DMA_Init+0x430>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d012      	beq.n	80051ce <HAL_DMA_Init+0x3e6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a1b      	ldr	r2, [pc, #108]	; (800521c <HAL_DMA_Init+0x434>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00d      	beq.n	80051ce <HAL_DMA_Init+0x3e6>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1a      	ldr	r2, [pc, #104]	; (8005220 <HAL_DMA_Init+0x438>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d008      	beq.n	80051ce <HAL_DMA_Init+0x3e6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a18      	ldr	r2, [pc, #96]	; (8005224 <HAL_DMA_Init+0x43c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d003      	beq.n	80051ce <HAL_DMA_Init+0x3e6>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a17      	ldr	r2, [pc, #92]	; (8005228 <HAL_DMA_Init+0x440>)
 80051cc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4b10      	ldr	r3, [pc, #64]	; (800522c <HAL_DMA_Init+0x444>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b40      	cmp	r3, #64	; 0x40
 80051f4:	d01c      	beq.n	8005230 <HAL_DMA_Init+0x448>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b80      	cmp	r3, #128	; 0x80
 80051fc:	d102      	bne.n	8005204 <HAL_DMA_Init+0x41c>
 80051fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005202:	e016      	b.n	8005232 <HAL_DMA_Init+0x44a>
 8005204:	2300      	movs	r3, #0
 8005206:	e014      	b.n	8005232 <HAL_DMA_Init+0x44a>
 8005208:	fe10803f 	.word	0xfe10803f
 800520c:	58025408 	.word	0x58025408
 8005210:	5802541c 	.word	0x5802541c
 8005214:	58025430 	.word	0x58025430
 8005218:	58025444 	.word	0x58025444
 800521c:	58025458 	.word	0x58025458
 8005220:	5802546c 	.word	0x5802546c
 8005224:	58025480 	.word	0x58025480
 8005228:	58025494 	.word	0x58025494
 800522c:	fffe000f 	.word	0xfffe000f
 8005230:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	68d2      	ldr	r2, [r2, #12]
 8005236:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005238:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005240:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005248:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005250:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005258:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005260:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	461a      	mov	r2, r3
 8005276:	4b6e      	ldr	r3, [pc, #440]	; (8005430 <HAL_DMA_Init+0x648>)
 8005278:	4413      	add	r3, r2
 800527a:	4a6e      	ldr	r2, [pc, #440]	; (8005434 <HAL_DMA_Init+0x64c>)
 800527c:	fba2 2303 	umull	r2, r3, r2, r3
 8005280:	091b      	lsrs	r3, r3, #4
 8005282:	009a      	lsls	r2, r3, #2
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f001 ff63 	bl	8007154 <DMA_CalcBaseAndBitshift>
 800528e:	4603      	mov	r3, r0
 8005290:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	2201      	movs	r2, #1
 800529c:	409a      	lsls	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	e008      	b.n	80052b6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2240      	movs	r2, #64	; 0x40
 80052a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2203      	movs	r2, #3
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0b7      	b.n	8005426 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a5f      	ldr	r2, [pc, #380]	; (8005438 <HAL_DMA_Init+0x650>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d072      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a5d      	ldr	r2, [pc, #372]	; (800543c <HAL_DMA_Init+0x654>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d06d      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a5c      	ldr	r2, [pc, #368]	; (8005440 <HAL_DMA_Init+0x658>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d068      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a5a      	ldr	r2, [pc, #360]	; (8005444 <HAL_DMA_Init+0x65c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d063      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a59      	ldr	r2, [pc, #356]	; (8005448 <HAL_DMA_Init+0x660>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d05e      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a57      	ldr	r2, [pc, #348]	; (800544c <HAL_DMA_Init+0x664>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d059      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a56      	ldr	r2, [pc, #344]	; (8005450 <HAL_DMA_Init+0x668>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d054      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a54      	ldr	r2, [pc, #336]	; (8005454 <HAL_DMA_Init+0x66c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d04f      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a53      	ldr	r2, [pc, #332]	; (8005458 <HAL_DMA_Init+0x670>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d04a      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a51      	ldr	r2, [pc, #324]	; (800545c <HAL_DMA_Init+0x674>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d045      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a50      	ldr	r2, [pc, #320]	; (8005460 <HAL_DMA_Init+0x678>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d040      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a4e      	ldr	r2, [pc, #312]	; (8005464 <HAL_DMA_Init+0x67c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d03b      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a4d      	ldr	r2, [pc, #308]	; (8005468 <HAL_DMA_Init+0x680>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d036      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a4b      	ldr	r2, [pc, #300]	; (800546c <HAL_DMA_Init+0x684>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d031      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a4a      	ldr	r2, [pc, #296]	; (8005470 <HAL_DMA_Init+0x688>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d02c      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a48      	ldr	r2, [pc, #288]	; (8005474 <HAL_DMA_Init+0x68c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d027      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a47      	ldr	r2, [pc, #284]	; (8005478 <HAL_DMA_Init+0x690>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d022      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a45      	ldr	r2, [pc, #276]	; (800547c <HAL_DMA_Init+0x694>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d01d      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a44      	ldr	r2, [pc, #272]	; (8005480 <HAL_DMA_Init+0x698>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d018      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a42      	ldr	r2, [pc, #264]	; (8005484 <HAL_DMA_Init+0x69c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d013      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a41      	ldr	r2, [pc, #260]	; (8005488 <HAL_DMA_Init+0x6a0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00e      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a3f      	ldr	r2, [pc, #252]	; (800548c <HAL_DMA_Init+0x6a4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d009      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a3e      	ldr	r2, [pc, #248]	; (8005490 <HAL_DMA_Init+0x6a8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d004      	beq.n	80053a6 <HAL_DMA_Init+0x5be>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a3c      	ldr	r2, [pc, #240]	; (8005494 <HAL_DMA_Init+0x6ac>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d101      	bne.n	80053aa <HAL_DMA_Init+0x5c2>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <HAL_DMA_Init+0x5c4>
 80053aa:	2300      	movs	r3, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d032      	beq.n	8005416 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f001 fffd 	bl	80073b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b80      	cmp	r3, #128	; 0x80
 80053bc:	d102      	bne.n	80053c4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80053d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d010      	beq.n	8005404 <HAL_DMA_Init+0x61c>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d80c      	bhi.n	8005404 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f002 f87a 	bl	80074e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005400:	605a      	str	r2, [r3, #4]
 8005402:	e008      	b.n	8005416 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	a7fdabf8 	.word	0xa7fdabf8
 8005434:	cccccccd 	.word	0xcccccccd
 8005438:	40020010 	.word	0x40020010
 800543c:	40020028 	.word	0x40020028
 8005440:	40020040 	.word	0x40020040
 8005444:	40020058 	.word	0x40020058
 8005448:	40020070 	.word	0x40020070
 800544c:	40020088 	.word	0x40020088
 8005450:	400200a0 	.word	0x400200a0
 8005454:	400200b8 	.word	0x400200b8
 8005458:	40020410 	.word	0x40020410
 800545c:	40020428 	.word	0x40020428
 8005460:	40020440 	.word	0x40020440
 8005464:	40020458 	.word	0x40020458
 8005468:	40020470 	.word	0x40020470
 800546c:	40020488 	.word	0x40020488
 8005470:	400204a0 	.word	0x400204a0
 8005474:	400204b8 	.word	0x400204b8
 8005478:	58025408 	.word	0x58025408
 800547c:	5802541c 	.word	0x5802541c
 8005480:	58025430 	.word	0x58025430
 8005484:	58025444 	.word	0x58025444
 8005488:	58025458 	.word	0x58025458
 800548c:	5802546c 	.word	0x5802546c
 8005490:	58025480 	.word	0x58025480
 8005494:	58025494 	.word	0x58025494

08005498 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e226      	b.n	8005902 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_DMA_Start_IT+0x2a>
 80054be:	2302      	movs	r3, #2
 80054c0:	e21f      	b.n	8005902 <HAL_DMA_Start_IT+0x46a>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	f040 820a 	bne.w	80058ec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a68      	ldr	r2, [pc, #416]	; (800568c <HAL_DMA_Start_IT+0x1f4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d04a      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a66      	ldr	r2, [pc, #408]	; (8005690 <HAL_DMA_Start_IT+0x1f8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d045      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a65      	ldr	r2, [pc, #404]	; (8005694 <HAL_DMA_Start_IT+0x1fc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d040      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a63      	ldr	r2, [pc, #396]	; (8005698 <HAL_DMA_Start_IT+0x200>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d03b      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a62      	ldr	r2, [pc, #392]	; (800569c <HAL_DMA_Start_IT+0x204>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d036      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a60      	ldr	r2, [pc, #384]	; (80056a0 <HAL_DMA_Start_IT+0x208>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d031      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a5f      	ldr	r2, [pc, #380]	; (80056a4 <HAL_DMA_Start_IT+0x20c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d02c      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a5d      	ldr	r2, [pc, #372]	; (80056a8 <HAL_DMA_Start_IT+0x210>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d027      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a5c      	ldr	r2, [pc, #368]	; (80056ac <HAL_DMA_Start_IT+0x214>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d022      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a5a      	ldr	r2, [pc, #360]	; (80056b0 <HAL_DMA_Start_IT+0x218>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01d      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a59      	ldr	r2, [pc, #356]	; (80056b4 <HAL_DMA_Start_IT+0x21c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d018      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a57      	ldr	r2, [pc, #348]	; (80056b8 <HAL_DMA_Start_IT+0x220>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a56      	ldr	r2, [pc, #344]	; (80056bc <HAL_DMA_Start_IT+0x224>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00e      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a54      	ldr	r2, [pc, #336]	; (80056c0 <HAL_DMA_Start_IT+0x228>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a53      	ldr	r2, [pc, #332]	; (80056c4 <HAL_DMA_Start_IT+0x22c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_DMA_Start_IT+0xee>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a51      	ldr	r2, [pc, #324]	; (80056c8 <HAL_DMA_Start_IT+0x230>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <HAL_DMA_Start_IT+0x100>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0201 	bic.w	r2, r2, #1
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	e007      	b.n	80055a8 <HAL_DMA_Start_IT+0x110>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f001 fc24 	bl	8006dfc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a34      	ldr	r2, [pc, #208]	; (800568c <HAL_DMA_Start_IT+0x1f4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d04a      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a33      	ldr	r2, [pc, #204]	; (8005690 <HAL_DMA_Start_IT+0x1f8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d045      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a31      	ldr	r2, [pc, #196]	; (8005694 <HAL_DMA_Start_IT+0x1fc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d040      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a30      	ldr	r2, [pc, #192]	; (8005698 <HAL_DMA_Start_IT+0x200>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d03b      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2e      	ldr	r2, [pc, #184]	; (800569c <HAL_DMA_Start_IT+0x204>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d036      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2d      	ldr	r2, [pc, #180]	; (80056a0 <HAL_DMA_Start_IT+0x208>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d031      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2b      	ldr	r2, [pc, #172]	; (80056a4 <HAL_DMA_Start_IT+0x20c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d02c      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a2a      	ldr	r2, [pc, #168]	; (80056a8 <HAL_DMA_Start_IT+0x210>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d027      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a28      	ldr	r2, [pc, #160]	; (80056ac <HAL_DMA_Start_IT+0x214>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d022      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a27      	ldr	r2, [pc, #156]	; (80056b0 <HAL_DMA_Start_IT+0x218>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d01d      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a25      	ldr	r2, [pc, #148]	; (80056b4 <HAL_DMA_Start_IT+0x21c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d018      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a24      	ldr	r2, [pc, #144]	; (80056b8 <HAL_DMA_Start_IT+0x220>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a22      	ldr	r2, [pc, #136]	; (80056bc <HAL_DMA_Start_IT+0x224>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00e      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a21      	ldr	r2, [pc, #132]	; (80056c0 <HAL_DMA_Start_IT+0x228>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d009      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1f      	ldr	r2, [pc, #124]	; (80056c4 <HAL_DMA_Start_IT+0x22c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_DMA_Start_IT+0x1bc>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1e      	ldr	r2, [pc, #120]	; (80056c8 <HAL_DMA_Start_IT+0x230>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d101      	bne.n	8005658 <HAL_DMA_Start_IT+0x1c0>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <HAL_DMA_Start_IT+0x1c2>
 8005658:	2300      	movs	r3, #0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d036      	beq.n	80056cc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f023 021e 	bic.w	r2, r3, #30
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0216 	orr.w	r2, r2, #22
 8005670:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d03e      	beq.n	80056f8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0208 	orr.w	r2, r2, #8
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	e035      	b.n	80056f8 <HAL_DMA_Start_IT+0x260>
 800568c:	40020010 	.word	0x40020010
 8005690:	40020028 	.word	0x40020028
 8005694:	40020040 	.word	0x40020040
 8005698:	40020058 	.word	0x40020058
 800569c:	40020070 	.word	0x40020070
 80056a0:	40020088 	.word	0x40020088
 80056a4:	400200a0 	.word	0x400200a0
 80056a8:	400200b8 	.word	0x400200b8
 80056ac:	40020410 	.word	0x40020410
 80056b0:	40020428 	.word	0x40020428
 80056b4:	40020440 	.word	0x40020440
 80056b8:	40020458 	.word	0x40020458
 80056bc:	40020470 	.word	0x40020470
 80056c0:	40020488 	.word	0x40020488
 80056c4:	400204a0 	.word	0x400204a0
 80056c8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f023 020e 	bic.w	r2, r3, #14
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 020a 	orr.w	r2, r2, #10
 80056de:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0204 	orr.w	r2, r2, #4
 80056f6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a83      	ldr	r2, [pc, #524]	; (800590c <HAL_DMA_Start_IT+0x474>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d072      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a82      	ldr	r2, [pc, #520]	; (8005910 <HAL_DMA_Start_IT+0x478>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d06d      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a80      	ldr	r2, [pc, #512]	; (8005914 <HAL_DMA_Start_IT+0x47c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d068      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a7f      	ldr	r2, [pc, #508]	; (8005918 <HAL_DMA_Start_IT+0x480>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d063      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a7d      	ldr	r2, [pc, #500]	; (800591c <HAL_DMA_Start_IT+0x484>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d05e      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a7c      	ldr	r2, [pc, #496]	; (8005920 <HAL_DMA_Start_IT+0x488>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d059      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a7a      	ldr	r2, [pc, #488]	; (8005924 <HAL_DMA_Start_IT+0x48c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d054      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a79      	ldr	r2, [pc, #484]	; (8005928 <HAL_DMA_Start_IT+0x490>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d04f      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a77      	ldr	r2, [pc, #476]	; (800592c <HAL_DMA_Start_IT+0x494>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d04a      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a76      	ldr	r2, [pc, #472]	; (8005930 <HAL_DMA_Start_IT+0x498>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d045      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a74      	ldr	r2, [pc, #464]	; (8005934 <HAL_DMA_Start_IT+0x49c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d040      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a73      	ldr	r2, [pc, #460]	; (8005938 <HAL_DMA_Start_IT+0x4a0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d03b      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a71      	ldr	r2, [pc, #452]	; (800593c <HAL_DMA_Start_IT+0x4a4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d036      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a70      	ldr	r2, [pc, #448]	; (8005940 <HAL_DMA_Start_IT+0x4a8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d031      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a6e      	ldr	r2, [pc, #440]	; (8005944 <HAL_DMA_Start_IT+0x4ac>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d02c      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a6d      	ldr	r2, [pc, #436]	; (8005948 <HAL_DMA_Start_IT+0x4b0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d027      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a6b      	ldr	r2, [pc, #428]	; (800594c <HAL_DMA_Start_IT+0x4b4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d022      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a6a      	ldr	r2, [pc, #424]	; (8005950 <HAL_DMA_Start_IT+0x4b8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d01d      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a68      	ldr	r2, [pc, #416]	; (8005954 <HAL_DMA_Start_IT+0x4bc>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d018      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a67      	ldr	r2, [pc, #412]	; (8005958 <HAL_DMA_Start_IT+0x4c0>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d013      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a65      	ldr	r2, [pc, #404]	; (800595c <HAL_DMA_Start_IT+0x4c4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00e      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a64      	ldr	r2, [pc, #400]	; (8005960 <HAL_DMA_Start_IT+0x4c8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d009      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a62      	ldr	r2, [pc, #392]	; (8005964 <HAL_DMA_Start_IT+0x4cc>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d004      	beq.n	80057e8 <HAL_DMA_Start_IT+0x350>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a61      	ldr	r2, [pc, #388]	; (8005968 <HAL_DMA_Start_IT+0x4d0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d101      	bne.n	80057ec <HAL_DMA_Start_IT+0x354>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <HAL_DMA_Start_IT+0x356>
 80057ec:	2300      	movs	r3, #0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d01a      	beq.n	8005828 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d007      	beq.n	8005810 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800580e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005826:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a37      	ldr	r2, [pc, #220]	; (800590c <HAL_DMA_Start_IT+0x474>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d04a      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a36      	ldr	r2, [pc, #216]	; (8005910 <HAL_DMA_Start_IT+0x478>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d045      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a34      	ldr	r2, [pc, #208]	; (8005914 <HAL_DMA_Start_IT+0x47c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d040      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a33      	ldr	r2, [pc, #204]	; (8005918 <HAL_DMA_Start_IT+0x480>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d03b      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a31      	ldr	r2, [pc, #196]	; (800591c <HAL_DMA_Start_IT+0x484>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d036      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a30      	ldr	r2, [pc, #192]	; (8005920 <HAL_DMA_Start_IT+0x488>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d031      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a2e      	ldr	r2, [pc, #184]	; (8005924 <HAL_DMA_Start_IT+0x48c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d02c      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a2d      	ldr	r2, [pc, #180]	; (8005928 <HAL_DMA_Start_IT+0x490>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d027      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a2b      	ldr	r2, [pc, #172]	; (800592c <HAL_DMA_Start_IT+0x494>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d022      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a2a      	ldr	r2, [pc, #168]	; (8005930 <HAL_DMA_Start_IT+0x498>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d01d      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a28      	ldr	r2, [pc, #160]	; (8005934 <HAL_DMA_Start_IT+0x49c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d018      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a27      	ldr	r2, [pc, #156]	; (8005938 <HAL_DMA_Start_IT+0x4a0>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d013      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a25      	ldr	r2, [pc, #148]	; (800593c <HAL_DMA_Start_IT+0x4a4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00e      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a24      	ldr	r2, [pc, #144]	; (8005940 <HAL_DMA_Start_IT+0x4a8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d009      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a22      	ldr	r2, [pc, #136]	; (8005944 <HAL_DMA_Start_IT+0x4ac>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <HAL_DMA_Start_IT+0x430>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a21      	ldr	r2, [pc, #132]	; (8005948 <HAL_DMA_Start_IT+0x4b0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d108      	bne.n	80058da <HAL_DMA_Start_IT+0x442>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e012      	b.n	8005900 <HAL_DMA_Start_IT+0x468>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e009      	b.n	8005900 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005900:	7dfb      	ldrb	r3, [r7, #23]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40020010 	.word	0x40020010
 8005910:	40020028 	.word	0x40020028
 8005914:	40020040 	.word	0x40020040
 8005918:	40020058 	.word	0x40020058
 800591c:	40020070 	.word	0x40020070
 8005920:	40020088 	.word	0x40020088
 8005924:	400200a0 	.word	0x400200a0
 8005928:	400200b8 	.word	0x400200b8
 800592c:	40020410 	.word	0x40020410
 8005930:	40020428 	.word	0x40020428
 8005934:	40020440 	.word	0x40020440
 8005938:	40020458 	.word	0x40020458
 800593c:	40020470 	.word	0x40020470
 8005940:	40020488 	.word	0x40020488
 8005944:	400204a0 	.word	0x400204a0
 8005948:	400204b8 	.word	0x400204b8
 800594c:	58025408 	.word	0x58025408
 8005950:	5802541c 	.word	0x5802541c
 8005954:	58025430 	.word	0x58025430
 8005958:	58025444 	.word	0x58025444
 800595c:	58025458 	.word	0x58025458
 8005960:	5802546c 	.word	0x5802546c
 8005964:	58025480 	.word	0x58025480
 8005968:	58025494 	.word	0x58025494

0800596c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005974:	f7fc fe8e 	bl	8002694 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e2dc      	b.n	8005f3e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d008      	beq.n	80059a2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2280      	movs	r2, #128	; 0x80
 8005994:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e2cd      	b.n	8005f3e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a76      	ldr	r2, [pc, #472]	; (8005b80 <HAL_DMA_Abort+0x214>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d04a      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a74      	ldr	r2, [pc, #464]	; (8005b84 <HAL_DMA_Abort+0x218>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d045      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a73      	ldr	r2, [pc, #460]	; (8005b88 <HAL_DMA_Abort+0x21c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d040      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a71      	ldr	r2, [pc, #452]	; (8005b8c <HAL_DMA_Abort+0x220>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d03b      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a70      	ldr	r2, [pc, #448]	; (8005b90 <HAL_DMA_Abort+0x224>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d036      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a6e      	ldr	r2, [pc, #440]	; (8005b94 <HAL_DMA_Abort+0x228>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d031      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a6d      	ldr	r2, [pc, #436]	; (8005b98 <HAL_DMA_Abort+0x22c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d02c      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a6b      	ldr	r2, [pc, #428]	; (8005b9c <HAL_DMA_Abort+0x230>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d027      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a6a      	ldr	r2, [pc, #424]	; (8005ba0 <HAL_DMA_Abort+0x234>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d022      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a68      	ldr	r2, [pc, #416]	; (8005ba4 <HAL_DMA_Abort+0x238>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01d      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a67      	ldr	r2, [pc, #412]	; (8005ba8 <HAL_DMA_Abort+0x23c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d018      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a65      	ldr	r2, [pc, #404]	; (8005bac <HAL_DMA_Abort+0x240>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d013      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a64      	ldr	r2, [pc, #400]	; (8005bb0 <HAL_DMA_Abort+0x244>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00e      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a62      	ldr	r2, [pc, #392]	; (8005bb4 <HAL_DMA_Abort+0x248>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d009      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a61      	ldr	r2, [pc, #388]	; (8005bb8 <HAL_DMA_Abort+0x24c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d004      	beq.n	8005a42 <HAL_DMA_Abort+0xd6>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a5f      	ldr	r2, [pc, #380]	; (8005bbc <HAL_DMA_Abort+0x250>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d101      	bne.n	8005a46 <HAL_DMA_Abort+0xda>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <HAL_DMA_Abort+0xdc>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d013      	beq.n	8005a74 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 021e 	bic.w	r2, r2, #30
 8005a5a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695a      	ldr	r2, [r3, #20]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a6a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	e00a      	b.n	8005a8a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 020e 	bic.w	r2, r2, #14
 8005a82:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a3c      	ldr	r2, [pc, #240]	; (8005b80 <HAL_DMA_Abort+0x214>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d072      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a3a      	ldr	r2, [pc, #232]	; (8005b84 <HAL_DMA_Abort+0x218>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d06d      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a39      	ldr	r2, [pc, #228]	; (8005b88 <HAL_DMA_Abort+0x21c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d068      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a37      	ldr	r2, [pc, #220]	; (8005b8c <HAL_DMA_Abort+0x220>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d063      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a36      	ldr	r2, [pc, #216]	; (8005b90 <HAL_DMA_Abort+0x224>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d05e      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a34      	ldr	r2, [pc, #208]	; (8005b94 <HAL_DMA_Abort+0x228>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d059      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a33      	ldr	r2, [pc, #204]	; (8005b98 <HAL_DMA_Abort+0x22c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d054      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a31      	ldr	r2, [pc, #196]	; (8005b9c <HAL_DMA_Abort+0x230>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d04f      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a30      	ldr	r2, [pc, #192]	; (8005ba0 <HAL_DMA_Abort+0x234>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d04a      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a2e      	ldr	r2, [pc, #184]	; (8005ba4 <HAL_DMA_Abort+0x238>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d045      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a2d      	ldr	r2, [pc, #180]	; (8005ba8 <HAL_DMA_Abort+0x23c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d040      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a2b      	ldr	r2, [pc, #172]	; (8005bac <HAL_DMA_Abort+0x240>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d03b      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a2a      	ldr	r2, [pc, #168]	; (8005bb0 <HAL_DMA_Abort+0x244>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d036      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a28      	ldr	r2, [pc, #160]	; (8005bb4 <HAL_DMA_Abort+0x248>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d031      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a27      	ldr	r2, [pc, #156]	; (8005bb8 <HAL_DMA_Abort+0x24c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d02c      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a25      	ldr	r2, [pc, #148]	; (8005bbc <HAL_DMA_Abort+0x250>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d027      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a24      	ldr	r2, [pc, #144]	; (8005bc0 <HAL_DMA_Abort+0x254>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d022      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a22      	ldr	r2, [pc, #136]	; (8005bc4 <HAL_DMA_Abort+0x258>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01d      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a21      	ldr	r2, [pc, #132]	; (8005bc8 <HAL_DMA_Abort+0x25c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d018      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1f      	ldr	r2, [pc, #124]	; (8005bcc <HAL_DMA_Abort+0x260>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a1e      	ldr	r2, [pc, #120]	; (8005bd0 <HAL_DMA_Abort+0x264>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a1c      	ldr	r2, [pc, #112]	; (8005bd4 <HAL_DMA_Abort+0x268>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a1b      	ldr	r2, [pc, #108]	; (8005bd8 <HAL_DMA_Abort+0x26c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_DMA_Abort+0x20e>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a19      	ldr	r2, [pc, #100]	; (8005bdc <HAL_DMA_Abort+0x270>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d132      	bne.n	8005be0 <HAL_DMA_Abort+0x274>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e031      	b.n	8005be2 <HAL_DMA_Abort+0x276>
 8005b7e:	bf00      	nop
 8005b80:	40020010 	.word	0x40020010
 8005b84:	40020028 	.word	0x40020028
 8005b88:	40020040 	.word	0x40020040
 8005b8c:	40020058 	.word	0x40020058
 8005b90:	40020070 	.word	0x40020070
 8005b94:	40020088 	.word	0x40020088
 8005b98:	400200a0 	.word	0x400200a0
 8005b9c:	400200b8 	.word	0x400200b8
 8005ba0:	40020410 	.word	0x40020410
 8005ba4:	40020428 	.word	0x40020428
 8005ba8:	40020440 	.word	0x40020440
 8005bac:	40020458 	.word	0x40020458
 8005bb0:	40020470 	.word	0x40020470
 8005bb4:	40020488 	.word	0x40020488
 8005bb8:	400204a0 	.word	0x400204a0
 8005bbc:	400204b8 	.word	0x400204b8
 8005bc0:	58025408 	.word	0x58025408
 8005bc4:	5802541c 	.word	0x5802541c
 8005bc8:	58025430 	.word	0x58025430
 8005bcc:	58025444 	.word	0x58025444
 8005bd0:	58025458 	.word	0x58025458
 8005bd4:	5802546c 	.word	0x5802546c
 8005bd8:	58025480 	.word	0x58025480
 8005bdc:	58025494 	.word	0x58025494
 8005be0:	2300      	movs	r3, #0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d007      	beq.n	8005bf6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a6d      	ldr	r2, [pc, #436]	; (8005db0 <HAL_DMA_Abort+0x444>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d04a      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a6b      	ldr	r2, [pc, #428]	; (8005db4 <HAL_DMA_Abort+0x448>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d045      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a6a      	ldr	r2, [pc, #424]	; (8005db8 <HAL_DMA_Abort+0x44c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d040      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a68      	ldr	r2, [pc, #416]	; (8005dbc <HAL_DMA_Abort+0x450>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d03b      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a67      	ldr	r2, [pc, #412]	; (8005dc0 <HAL_DMA_Abort+0x454>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d036      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a65      	ldr	r2, [pc, #404]	; (8005dc4 <HAL_DMA_Abort+0x458>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d031      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a64      	ldr	r2, [pc, #400]	; (8005dc8 <HAL_DMA_Abort+0x45c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d02c      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a62      	ldr	r2, [pc, #392]	; (8005dcc <HAL_DMA_Abort+0x460>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d027      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a61      	ldr	r2, [pc, #388]	; (8005dd0 <HAL_DMA_Abort+0x464>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d022      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a5f      	ldr	r2, [pc, #380]	; (8005dd4 <HAL_DMA_Abort+0x468>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01d      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a5e      	ldr	r2, [pc, #376]	; (8005dd8 <HAL_DMA_Abort+0x46c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a5c      	ldr	r2, [pc, #368]	; (8005ddc <HAL_DMA_Abort+0x470>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a5b      	ldr	r2, [pc, #364]	; (8005de0 <HAL_DMA_Abort+0x474>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a59      	ldr	r2, [pc, #356]	; (8005de4 <HAL_DMA_Abort+0x478>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a58      	ldr	r2, [pc, #352]	; (8005de8 <HAL_DMA_Abort+0x47c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_DMA_Abort+0x32a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a56      	ldr	r2, [pc, #344]	; (8005dec <HAL_DMA_Abort+0x480>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d108      	bne.n	8005ca8 <HAL_DMA_Abort+0x33c>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0201 	bic.w	r2, r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	e007      	b.n	8005cb8 <HAL_DMA_Abort+0x34c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0201 	bic.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005cb8:	e013      	b.n	8005ce2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cba:	f7fc fceb 	bl	8002694 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b05      	cmp	r3, #5
 8005cc6:	d90c      	bls.n	8005ce2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e12d      	b.n	8005f3e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e5      	bne.n	8005cba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a2f      	ldr	r2, [pc, #188]	; (8005db0 <HAL_DMA_Abort+0x444>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d04a      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a2d      	ldr	r2, [pc, #180]	; (8005db4 <HAL_DMA_Abort+0x448>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d045      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a2c      	ldr	r2, [pc, #176]	; (8005db8 <HAL_DMA_Abort+0x44c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d040      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2a      	ldr	r2, [pc, #168]	; (8005dbc <HAL_DMA_Abort+0x450>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d03b      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a29      	ldr	r2, [pc, #164]	; (8005dc0 <HAL_DMA_Abort+0x454>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d036      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a27      	ldr	r2, [pc, #156]	; (8005dc4 <HAL_DMA_Abort+0x458>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d031      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a26      	ldr	r2, [pc, #152]	; (8005dc8 <HAL_DMA_Abort+0x45c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d02c      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a24      	ldr	r2, [pc, #144]	; (8005dcc <HAL_DMA_Abort+0x460>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d027      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a23      	ldr	r2, [pc, #140]	; (8005dd0 <HAL_DMA_Abort+0x464>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d022      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a21      	ldr	r2, [pc, #132]	; (8005dd4 <HAL_DMA_Abort+0x468>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d01d      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a20      	ldr	r2, [pc, #128]	; (8005dd8 <HAL_DMA_Abort+0x46c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d018      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <HAL_DMA_Abort+0x470>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d013      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <HAL_DMA_Abort+0x474>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00e      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1b      	ldr	r2, [pc, #108]	; (8005de4 <HAL_DMA_Abort+0x478>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d009      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1a      	ldr	r2, [pc, #104]	; (8005de8 <HAL_DMA_Abort+0x47c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d004      	beq.n	8005d8e <HAL_DMA_Abort+0x422>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a18      	ldr	r2, [pc, #96]	; (8005dec <HAL_DMA_Abort+0x480>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d101      	bne.n	8005d92 <HAL_DMA_Abort+0x426>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <HAL_DMA_Abort+0x428>
 8005d92:	2300      	movs	r3, #0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d02b      	beq.n	8005df0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	223f      	movs	r2, #63	; 0x3f
 8005da8:	409a      	lsls	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	609a      	str	r2, [r3, #8]
 8005dae:	e02a      	b.n	8005e06 <HAL_DMA_Abort+0x49a>
 8005db0:	40020010 	.word	0x40020010
 8005db4:	40020028 	.word	0x40020028
 8005db8:	40020040 	.word	0x40020040
 8005dbc:	40020058 	.word	0x40020058
 8005dc0:	40020070 	.word	0x40020070
 8005dc4:	40020088 	.word	0x40020088
 8005dc8:	400200a0 	.word	0x400200a0
 8005dcc:	400200b8 	.word	0x400200b8
 8005dd0:	40020410 	.word	0x40020410
 8005dd4:	40020428 	.word	0x40020428
 8005dd8:	40020440 	.word	0x40020440
 8005ddc:	40020458 	.word	0x40020458
 8005de0:	40020470 	.word	0x40020470
 8005de4:	40020488 	.word	0x40020488
 8005de8:	400204a0 	.word	0x400204a0
 8005dec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	2201      	movs	r2, #1
 8005e00:	409a      	lsls	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a4f      	ldr	r2, [pc, #316]	; (8005f48 <HAL_DMA_Abort+0x5dc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d072      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a4d      	ldr	r2, [pc, #308]	; (8005f4c <HAL_DMA_Abort+0x5e0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d06d      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a4c      	ldr	r2, [pc, #304]	; (8005f50 <HAL_DMA_Abort+0x5e4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d068      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a4a      	ldr	r2, [pc, #296]	; (8005f54 <HAL_DMA_Abort+0x5e8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d063      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a49      	ldr	r2, [pc, #292]	; (8005f58 <HAL_DMA_Abort+0x5ec>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d05e      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a47      	ldr	r2, [pc, #284]	; (8005f5c <HAL_DMA_Abort+0x5f0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d059      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a46      	ldr	r2, [pc, #280]	; (8005f60 <HAL_DMA_Abort+0x5f4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d054      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a44      	ldr	r2, [pc, #272]	; (8005f64 <HAL_DMA_Abort+0x5f8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d04f      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a43      	ldr	r2, [pc, #268]	; (8005f68 <HAL_DMA_Abort+0x5fc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d04a      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a41      	ldr	r2, [pc, #260]	; (8005f6c <HAL_DMA_Abort+0x600>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d045      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a40      	ldr	r2, [pc, #256]	; (8005f70 <HAL_DMA_Abort+0x604>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d040      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a3e      	ldr	r2, [pc, #248]	; (8005f74 <HAL_DMA_Abort+0x608>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d03b      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a3d      	ldr	r2, [pc, #244]	; (8005f78 <HAL_DMA_Abort+0x60c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d036      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a3b      	ldr	r2, [pc, #236]	; (8005f7c <HAL_DMA_Abort+0x610>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d031      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a3a      	ldr	r2, [pc, #232]	; (8005f80 <HAL_DMA_Abort+0x614>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d02c      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a38      	ldr	r2, [pc, #224]	; (8005f84 <HAL_DMA_Abort+0x618>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d027      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a37      	ldr	r2, [pc, #220]	; (8005f88 <HAL_DMA_Abort+0x61c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d022      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a35      	ldr	r2, [pc, #212]	; (8005f8c <HAL_DMA_Abort+0x620>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01d      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a34      	ldr	r2, [pc, #208]	; (8005f90 <HAL_DMA_Abort+0x624>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d018      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a32      	ldr	r2, [pc, #200]	; (8005f94 <HAL_DMA_Abort+0x628>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a31      	ldr	r2, [pc, #196]	; (8005f98 <HAL_DMA_Abort+0x62c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00e      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a2f      	ldr	r2, [pc, #188]	; (8005f9c <HAL_DMA_Abort+0x630>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d009      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a2e      	ldr	r2, [pc, #184]	; (8005fa0 <HAL_DMA_Abort+0x634>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d004      	beq.n	8005ef6 <HAL_DMA_Abort+0x58a>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a2c      	ldr	r2, [pc, #176]	; (8005fa4 <HAL_DMA_Abort+0x638>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d101      	bne.n	8005efa <HAL_DMA_Abort+0x58e>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <HAL_DMA_Abort+0x590>
 8005efa:	2300      	movs	r3, #0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d015      	beq.n	8005f2c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f08:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00c      	beq.n	8005f2c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f20:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f2a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40020010 	.word	0x40020010
 8005f4c:	40020028 	.word	0x40020028
 8005f50:	40020040 	.word	0x40020040
 8005f54:	40020058 	.word	0x40020058
 8005f58:	40020070 	.word	0x40020070
 8005f5c:	40020088 	.word	0x40020088
 8005f60:	400200a0 	.word	0x400200a0
 8005f64:	400200b8 	.word	0x400200b8
 8005f68:	40020410 	.word	0x40020410
 8005f6c:	40020428 	.word	0x40020428
 8005f70:	40020440 	.word	0x40020440
 8005f74:	40020458 	.word	0x40020458
 8005f78:	40020470 	.word	0x40020470
 8005f7c:	40020488 	.word	0x40020488
 8005f80:	400204a0 	.word	0x400204a0
 8005f84:	400204b8 	.word	0x400204b8
 8005f88:	58025408 	.word	0x58025408
 8005f8c:	5802541c 	.word	0x5802541c
 8005f90:	58025430 	.word	0x58025430
 8005f94:	58025444 	.word	0x58025444
 8005f98:	58025458 	.word	0x58025458
 8005f9c:	5802546c 	.word	0x5802546c
 8005fa0:	58025480 	.word	0x58025480
 8005fa4:	58025494 	.word	0x58025494

08005fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fb4:	4b67      	ldr	r3, [pc, #412]	; (8006154 <HAL_DMA_IRQHandler+0x1ac>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a67      	ldr	r2, [pc, #412]	; (8006158 <HAL_DMA_IRQHandler+0x1b0>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	0a9b      	lsrs	r3, r3, #10
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fcc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a5f      	ldr	r2, [pc, #380]	; (800615c <HAL_DMA_IRQHandler+0x1b4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d04a      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a5d      	ldr	r2, [pc, #372]	; (8006160 <HAL_DMA_IRQHandler+0x1b8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d045      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a5c      	ldr	r2, [pc, #368]	; (8006164 <HAL_DMA_IRQHandler+0x1bc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d040      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a5a      	ldr	r2, [pc, #360]	; (8006168 <HAL_DMA_IRQHandler+0x1c0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d03b      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a59      	ldr	r2, [pc, #356]	; (800616c <HAL_DMA_IRQHandler+0x1c4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d036      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a57      	ldr	r2, [pc, #348]	; (8006170 <HAL_DMA_IRQHandler+0x1c8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d031      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a56      	ldr	r2, [pc, #344]	; (8006174 <HAL_DMA_IRQHandler+0x1cc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d02c      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a54      	ldr	r2, [pc, #336]	; (8006178 <HAL_DMA_IRQHandler+0x1d0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d027      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a53      	ldr	r2, [pc, #332]	; (800617c <HAL_DMA_IRQHandler+0x1d4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d022      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a51      	ldr	r2, [pc, #324]	; (8006180 <HAL_DMA_IRQHandler+0x1d8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d01d      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a50      	ldr	r2, [pc, #320]	; (8006184 <HAL_DMA_IRQHandler+0x1dc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d018      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a4e      	ldr	r2, [pc, #312]	; (8006188 <HAL_DMA_IRQHandler+0x1e0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a4d      	ldr	r2, [pc, #308]	; (800618c <HAL_DMA_IRQHandler+0x1e4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00e      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a4b      	ldr	r2, [pc, #300]	; (8006190 <HAL_DMA_IRQHandler+0x1e8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d009      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a4a      	ldr	r2, [pc, #296]	; (8006194 <HAL_DMA_IRQHandler+0x1ec>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d004      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a48      	ldr	r2, [pc, #288]	; (8006198 <HAL_DMA_IRQHandler+0x1f0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d101      	bne.n	800607e <HAL_DMA_IRQHandler+0xd6>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <HAL_DMA_IRQHandler+0xd8>
 800607e:	2300      	movs	r3, #0
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 842b 	beq.w	80068dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608a:	f003 031f 	and.w	r3, r3, #31
 800608e:	2208      	movs	r2, #8
 8006090:	409a      	lsls	r2, r3
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	4013      	ands	r3, r2
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 80a2 	beq.w	80061e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2e      	ldr	r2, [pc, #184]	; (800615c <HAL_DMA_IRQHandler+0x1b4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d04a      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <HAL_DMA_IRQHandler+0x1b8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d045      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a2b      	ldr	r2, [pc, #172]	; (8006164 <HAL_DMA_IRQHandler+0x1bc>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d040      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a2a      	ldr	r2, [pc, #168]	; (8006168 <HAL_DMA_IRQHandler+0x1c0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d03b      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a28      	ldr	r2, [pc, #160]	; (800616c <HAL_DMA_IRQHandler+0x1c4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d036      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a27      	ldr	r2, [pc, #156]	; (8006170 <HAL_DMA_IRQHandler+0x1c8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d031      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a25      	ldr	r2, [pc, #148]	; (8006174 <HAL_DMA_IRQHandler+0x1cc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d02c      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a24      	ldr	r2, [pc, #144]	; (8006178 <HAL_DMA_IRQHandler+0x1d0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d027      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a22      	ldr	r2, [pc, #136]	; (800617c <HAL_DMA_IRQHandler+0x1d4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d022      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a21      	ldr	r2, [pc, #132]	; (8006180 <HAL_DMA_IRQHandler+0x1d8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d01d      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <HAL_DMA_IRQHandler+0x1dc>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d018      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1e      	ldr	r2, [pc, #120]	; (8006188 <HAL_DMA_IRQHandler+0x1e0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d013      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1c      	ldr	r2, [pc, #112]	; (800618c <HAL_DMA_IRQHandler+0x1e4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00e      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <HAL_DMA_IRQHandler+0x1e8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d009      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a19      	ldr	r2, [pc, #100]	; (8006194 <HAL_DMA_IRQHandler+0x1ec>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a18      	ldr	r2, [pc, #96]	; (8006198 <HAL_DMA_IRQHandler+0x1f0>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d12f      	bne.n	800619c <HAL_DMA_IRQHandler+0x1f4>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	bf14      	ite	ne
 800614a:	2301      	movne	r3, #1
 800614c:	2300      	moveq	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	e02e      	b.n	80061b0 <HAL_DMA_IRQHandler+0x208>
 8006152:	bf00      	nop
 8006154:	24000004 	.word	0x24000004
 8006158:	1b4e81b5 	.word	0x1b4e81b5
 800615c:	40020010 	.word	0x40020010
 8006160:	40020028 	.word	0x40020028
 8006164:	40020040 	.word	0x40020040
 8006168:	40020058 	.word	0x40020058
 800616c:	40020070 	.word	0x40020070
 8006170:	40020088 	.word	0x40020088
 8006174:	400200a0 	.word	0x400200a0
 8006178:	400200b8 	.word	0x400200b8
 800617c:	40020410 	.word	0x40020410
 8006180:	40020428 	.word	0x40020428
 8006184:	40020440 	.word	0x40020440
 8006188:	40020458 	.word	0x40020458
 800618c:	40020470 	.word	0x40020470
 8006190:	40020488 	.word	0x40020488
 8006194:	400204a0 	.word	0x400204a0
 8006198:	400204b8 	.word	0x400204b8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0308 	and.w	r3, r3, #8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bf14      	ite	ne
 80061aa:	2301      	movne	r3, #1
 80061ac:	2300      	moveq	r3, #0
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d015      	beq.n	80061e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0204 	bic.w	r2, r2, #4
 80061c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	2208      	movs	r2, #8
 80061ce:	409a      	lsls	r2, r3
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d8:	f043 0201 	orr.w	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	fa22 f303 	lsr.w	r3, r2, r3
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d06e      	beq.n	80062d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a69      	ldr	r2, [pc, #420]	; (80063a0 <HAL_DMA_IRQHandler+0x3f8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d04a      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a67      	ldr	r2, [pc, #412]	; (80063a4 <HAL_DMA_IRQHandler+0x3fc>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d045      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a66      	ldr	r2, [pc, #408]	; (80063a8 <HAL_DMA_IRQHandler+0x400>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d040      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a64      	ldr	r2, [pc, #400]	; (80063ac <HAL_DMA_IRQHandler+0x404>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d03b      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a63      	ldr	r2, [pc, #396]	; (80063b0 <HAL_DMA_IRQHandler+0x408>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d036      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a61      	ldr	r2, [pc, #388]	; (80063b4 <HAL_DMA_IRQHandler+0x40c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d031      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a60      	ldr	r2, [pc, #384]	; (80063b8 <HAL_DMA_IRQHandler+0x410>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d02c      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a5e      	ldr	r2, [pc, #376]	; (80063bc <HAL_DMA_IRQHandler+0x414>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d027      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a5d      	ldr	r2, [pc, #372]	; (80063c0 <HAL_DMA_IRQHandler+0x418>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d022      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a5b      	ldr	r2, [pc, #364]	; (80063c4 <HAL_DMA_IRQHandler+0x41c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01d      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a5a      	ldr	r2, [pc, #360]	; (80063c8 <HAL_DMA_IRQHandler+0x420>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d018      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a58      	ldr	r2, [pc, #352]	; (80063cc <HAL_DMA_IRQHandler+0x424>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a57      	ldr	r2, [pc, #348]	; (80063d0 <HAL_DMA_IRQHandler+0x428>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a55      	ldr	r2, [pc, #340]	; (80063d4 <HAL_DMA_IRQHandler+0x42c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a54      	ldr	r2, [pc, #336]	; (80063d8 <HAL_DMA_IRQHandler+0x430>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a52      	ldr	r2, [pc, #328]	; (80063dc <HAL_DMA_IRQHandler+0x434>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d10a      	bne.n	80062ac <HAL_DMA_IRQHandler+0x304>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf14      	ite	ne
 80062a4:	2301      	movne	r3, #1
 80062a6:	2300      	moveq	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e003      	b.n	80062b4 <HAL_DMA_IRQHandler+0x30c>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2300      	movs	r3, #0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00d      	beq.n	80062d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062bc:	f003 031f 	and.w	r3, r3, #31
 80062c0:	2201      	movs	r2, #1
 80062c2:	409a      	lsls	r2, r3
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062cc:	f043 0202 	orr.w	r2, r3, #2
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	2204      	movs	r2, #4
 80062de:	409a      	lsls	r2, r3
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	4013      	ands	r3, r2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 808f 	beq.w	8006408 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a2c      	ldr	r2, [pc, #176]	; (80063a0 <HAL_DMA_IRQHandler+0x3f8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d04a      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2a      	ldr	r2, [pc, #168]	; (80063a4 <HAL_DMA_IRQHandler+0x3fc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d045      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a29      	ldr	r2, [pc, #164]	; (80063a8 <HAL_DMA_IRQHandler+0x400>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d040      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a27      	ldr	r2, [pc, #156]	; (80063ac <HAL_DMA_IRQHandler+0x404>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d03b      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a26      	ldr	r2, [pc, #152]	; (80063b0 <HAL_DMA_IRQHandler+0x408>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d036      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a24      	ldr	r2, [pc, #144]	; (80063b4 <HAL_DMA_IRQHandler+0x40c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d031      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a23      	ldr	r2, [pc, #140]	; (80063b8 <HAL_DMA_IRQHandler+0x410>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d02c      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a21      	ldr	r2, [pc, #132]	; (80063bc <HAL_DMA_IRQHandler+0x414>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d027      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a20      	ldr	r2, [pc, #128]	; (80063c0 <HAL_DMA_IRQHandler+0x418>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d022      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1e      	ldr	r2, [pc, #120]	; (80063c4 <HAL_DMA_IRQHandler+0x41c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d01d      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1d      	ldr	r2, [pc, #116]	; (80063c8 <HAL_DMA_IRQHandler+0x420>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d018      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1b      	ldr	r2, [pc, #108]	; (80063cc <HAL_DMA_IRQHandler+0x424>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1a      	ldr	r2, [pc, #104]	; (80063d0 <HAL_DMA_IRQHandler+0x428>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00e      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <HAL_DMA_IRQHandler+0x42c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d009      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <HAL_DMA_IRQHandler+0x430>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d004      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a15      	ldr	r2, [pc, #84]	; (80063dc <HAL_DMA_IRQHandler+0x434>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d12a      	bne.n	80063e0 <HAL_DMA_IRQHandler+0x438>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	bf14      	ite	ne
 8006398:	2301      	movne	r3, #1
 800639a:	2300      	moveq	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	e023      	b.n	80063e8 <HAL_DMA_IRQHandler+0x440>
 80063a0:	40020010 	.word	0x40020010
 80063a4:	40020028 	.word	0x40020028
 80063a8:	40020040 	.word	0x40020040
 80063ac:	40020058 	.word	0x40020058
 80063b0:	40020070 	.word	0x40020070
 80063b4:	40020088 	.word	0x40020088
 80063b8:	400200a0 	.word	0x400200a0
 80063bc:	400200b8 	.word	0x400200b8
 80063c0:	40020410 	.word	0x40020410
 80063c4:	40020428 	.word	0x40020428
 80063c8:	40020440 	.word	0x40020440
 80063cc:	40020458 	.word	0x40020458
 80063d0:	40020470 	.word	0x40020470
 80063d4:	40020488 	.word	0x40020488
 80063d8:	400204a0 	.word	0x400204a0
 80063dc:	400204b8 	.word	0x400204b8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2300      	movs	r3, #0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00d      	beq.n	8006408 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	2204      	movs	r2, #4
 80063f6:	409a      	lsls	r2, r3
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006400:	f043 0204 	orr.w	r2, r3, #4
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2210      	movs	r2, #16
 8006412:	409a      	lsls	r2, r3
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	4013      	ands	r3, r2
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 80a6 	beq.w	800656a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a85      	ldr	r2, [pc, #532]	; (8006638 <HAL_DMA_IRQHandler+0x690>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d04a      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a83      	ldr	r2, [pc, #524]	; (800663c <HAL_DMA_IRQHandler+0x694>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d045      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a82      	ldr	r2, [pc, #520]	; (8006640 <HAL_DMA_IRQHandler+0x698>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d040      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a80      	ldr	r2, [pc, #512]	; (8006644 <HAL_DMA_IRQHandler+0x69c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d03b      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a7f      	ldr	r2, [pc, #508]	; (8006648 <HAL_DMA_IRQHandler+0x6a0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d036      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a7d      	ldr	r2, [pc, #500]	; (800664c <HAL_DMA_IRQHandler+0x6a4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d031      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a7c      	ldr	r2, [pc, #496]	; (8006650 <HAL_DMA_IRQHandler+0x6a8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d02c      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a7a      	ldr	r2, [pc, #488]	; (8006654 <HAL_DMA_IRQHandler+0x6ac>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d027      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a79      	ldr	r2, [pc, #484]	; (8006658 <HAL_DMA_IRQHandler+0x6b0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d022      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a77      	ldr	r2, [pc, #476]	; (800665c <HAL_DMA_IRQHandler+0x6b4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d01d      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a76      	ldr	r2, [pc, #472]	; (8006660 <HAL_DMA_IRQHandler+0x6b8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d018      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a74      	ldr	r2, [pc, #464]	; (8006664 <HAL_DMA_IRQHandler+0x6bc>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d013      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a73      	ldr	r2, [pc, #460]	; (8006668 <HAL_DMA_IRQHandler+0x6c0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00e      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a71      	ldr	r2, [pc, #452]	; (800666c <HAL_DMA_IRQHandler+0x6c4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d009      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a70      	ldr	r2, [pc, #448]	; (8006670 <HAL_DMA_IRQHandler+0x6c8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d004      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a6e      	ldr	r2, [pc, #440]	; (8006674 <HAL_DMA_IRQHandler+0x6cc>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d10a      	bne.n	80064d4 <HAL_DMA_IRQHandler+0x52c>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bf14      	ite	ne
 80064cc:	2301      	movne	r3, #1
 80064ce:	2300      	moveq	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	e009      	b.n	80064e8 <HAL_DMA_IRQHandler+0x540>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bf14      	ite	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	2300      	moveq	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d03e      	beq.n	800656a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	2210      	movs	r2, #16
 80064f6:	409a      	lsls	r2, r3
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d018      	beq.n	800653c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d108      	bne.n	800652a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d024      	beq.n	800656a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	4798      	blx	r3
 8006528:	e01f      	b.n	800656a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01b      	beq.n	800656a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	4798      	blx	r3
 800653a:	e016      	b.n	800656a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006546:	2b00      	cmp	r3, #0
 8006548:	d107      	bne.n	800655a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0208 	bic.w	r2, r2, #8
 8006558:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	2220      	movs	r2, #32
 8006574:	409a      	lsls	r2, r3
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	4013      	ands	r3, r2
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8110 	beq.w	80067a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a2c      	ldr	r2, [pc, #176]	; (8006638 <HAL_DMA_IRQHandler+0x690>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d04a      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2b      	ldr	r2, [pc, #172]	; (800663c <HAL_DMA_IRQHandler+0x694>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d045      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a29      	ldr	r2, [pc, #164]	; (8006640 <HAL_DMA_IRQHandler+0x698>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d040      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a28      	ldr	r2, [pc, #160]	; (8006644 <HAL_DMA_IRQHandler+0x69c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d03b      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a26      	ldr	r2, [pc, #152]	; (8006648 <HAL_DMA_IRQHandler+0x6a0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d036      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a25      	ldr	r2, [pc, #148]	; (800664c <HAL_DMA_IRQHandler+0x6a4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d031      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a23      	ldr	r2, [pc, #140]	; (8006650 <HAL_DMA_IRQHandler+0x6a8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d02c      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a22      	ldr	r2, [pc, #136]	; (8006654 <HAL_DMA_IRQHandler+0x6ac>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d027      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a20      	ldr	r2, [pc, #128]	; (8006658 <HAL_DMA_IRQHandler+0x6b0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d022      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1f      	ldr	r2, [pc, #124]	; (800665c <HAL_DMA_IRQHandler+0x6b4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d01d      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1d      	ldr	r2, [pc, #116]	; (8006660 <HAL_DMA_IRQHandler+0x6b8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d018      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <HAL_DMA_IRQHandler+0x6bc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d013      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1a      	ldr	r2, [pc, #104]	; (8006668 <HAL_DMA_IRQHandler+0x6c0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00e      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a19      	ldr	r2, [pc, #100]	; (800666c <HAL_DMA_IRQHandler+0x6c4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d009      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a17      	ldr	r2, [pc, #92]	; (8006670 <HAL_DMA_IRQHandler+0x6c8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d004      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a16      	ldr	r2, [pc, #88]	; (8006674 <HAL_DMA_IRQHandler+0x6cc>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d12b      	bne.n	8006678 <HAL_DMA_IRQHandler+0x6d0>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0310 	and.w	r3, r3, #16
 800662a:	2b00      	cmp	r3, #0
 800662c:	bf14      	ite	ne
 800662e:	2301      	movne	r3, #1
 8006630:	2300      	moveq	r3, #0
 8006632:	b2db      	uxtb	r3, r3
 8006634:	e02a      	b.n	800668c <HAL_DMA_IRQHandler+0x6e4>
 8006636:	bf00      	nop
 8006638:	40020010 	.word	0x40020010
 800663c:	40020028 	.word	0x40020028
 8006640:	40020040 	.word	0x40020040
 8006644:	40020058 	.word	0x40020058
 8006648:	40020070 	.word	0x40020070
 800664c:	40020088 	.word	0x40020088
 8006650:	400200a0 	.word	0x400200a0
 8006654:	400200b8 	.word	0x400200b8
 8006658:	40020410 	.word	0x40020410
 800665c:	40020428 	.word	0x40020428
 8006660:	40020440 	.word	0x40020440
 8006664:	40020458 	.word	0x40020458
 8006668:	40020470 	.word	0x40020470
 800666c:	40020488 	.word	0x40020488
 8006670:	400204a0 	.word	0x400204a0
 8006674:	400204b8 	.word	0x400204b8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	bf14      	ite	ne
 8006686:	2301      	movne	r3, #1
 8006688:	2300      	moveq	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8087 	beq.w	80067a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006696:	f003 031f 	and.w	r3, r3, #31
 800669a:	2220      	movs	r2, #32
 800669c:	409a      	lsls	r2, r3
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d139      	bne.n	8006722 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0216 	bic.w	r2, r2, #22
 80066bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695a      	ldr	r2, [r3, #20]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <HAL_DMA_IRQHandler+0x736>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0208 	bic.w	r2, r2, #8
 80066ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	223f      	movs	r2, #63	; 0x3f
 80066f8:	409a      	lsls	r2, r3
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 834a 	beq.w	8006dac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	4798      	blx	r3
          }
          return;
 8006720:	e344      	b.n	8006dac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d018      	beq.n	8006762 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d108      	bne.n	8006750 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006742:	2b00      	cmp	r3, #0
 8006744:	d02c      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
 800674e:	e027      	b.n	80067a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d023      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	4798      	blx	r3
 8006760:	e01e      	b.n	80067a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10f      	bne.n	8006790 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0210 	bic.w	r2, r2, #16
 800677e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8306 	beq.w	8006db6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 8088 	beq.w	80068c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2204      	movs	r2, #4
 80067bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a7a      	ldr	r2, [pc, #488]	; (80069b0 <HAL_DMA_IRQHandler+0xa08>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d04a      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a79      	ldr	r2, [pc, #484]	; (80069b4 <HAL_DMA_IRQHandler+0xa0c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d045      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a77      	ldr	r2, [pc, #476]	; (80069b8 <HAL_DMA_IRQHandler+0xa10>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d040      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a76      	ldr	r2, [pc, #472]	; (80069bc <HAL_DMA_IRQHandler+0xa14>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d03b      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a74      	ldr	r2, [pc, #464]	; (80069c0 <HAL_DMA_IRQHandler+0xa18>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d036      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a73      	ldr	r2, [pc, #460]	; (80069c4 <HAL_DMA_IRQHandler+0xa1c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d031      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a71      	ldr	r2, [pc, #452]	; (80069c8 <HAL_DMA_IRQHandler+0xa20>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d02c      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a70      	ldr	r2, [pc, #448]	; (80069cc <HAL_DMA_IRQHandler+0xa24>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d027      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a6e      	ldr	r2, [pc, #440]	; (80069d0 <HAL_DMA_IRQHandler+0xa28>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d022      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a6d      	ldr	r2, [pc, #436]	; (80069d4 <HAL_DMA_IRQHandler+0xa2c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d01d      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a6b      	ldr	r2, [pc, #428]	; (80069d8 <HAL_DMA_IRQHandler+0xa30>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d018      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a6a      	ldr	r2, [pc, #424]	; (80069dc <HAL_DMA_IRQHandler+0xa34>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d013      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a68      	ldr	r2, [pc, #416]	; (80069e0 <HAL_DMA_IRQHandler+0xa38>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00e      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a67      	ldr	r2, [pc, #412]	; (80069e4 <HAL_DMA_IRQHandler+0xa3c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d009      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a65      	ldr	r2, [pc, #404]	; (80069e8 <HAL_DMA_IRQHandler+0xa40>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d004      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a64      	ldr	r2, [pc, #400]	; (80069ec <HAL_DMA_IRQHandler+0xa44>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d108      	bne.n	8006872 <HAL_DMA_IRQHandler+0x8ca>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	e007      	b.n	8006882 <HAL_DMA_IRQHandler+0x8da>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0201 	bic.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3301      	adds	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688a:	429a      	cmp	r2, r3
 800688c:	d307      	bcc.n	800689e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f2      	bne.n	8006882 <HAL_DMA_IRQHandler+0x8da>
 800689c:	e000      	b.n	80068a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800689e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2203      	movs	r2, #3
 80068b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80068b6:	e003      	b.n	80068c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8272 	beq.w	8006db6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
 80068da:	e26c      	b.n	8006db6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a43      	ldr	r2, [pc, #268]	; (80069f0 <HAL_DMA_IRQHandler+0xa48>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d022      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a42      	ldr	r2, [pc, #264]	; (80069f4 <HAL_DMA_IRQHandler+0xa4c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d01d      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a40      	ldr	r2, [pc, #256]	; (80069f8 <HAL_DMA_IRQHandler+0xa50>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d018      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a3f      	ldr	r2, [pc, #252]	; (80069fc <HAL_DMA_IRQHandler+0xa54>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d013      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a3d      	ldr	r2, [pc, #244]	; (8006a00 <HAL_DMA_IRQHandler+0xa58>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00e      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a3c      	ldr	r2, [pc, #240]	; (8006a04 <HAL_DMA_IRQHandler+0xa5c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d009      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a3a      	ldr	r2, [pc, #232]	; (8006a08 <HAL_DMA_IRQHandler+0xa60>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d004      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a39      	ldr	r2, [pc, #228]	; (8006a0c <HAL_DMA_IRQHandler+0xa64>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d101      	bne.n	8006930 <HAL_DMA_IRQHandler+0x988>
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <HAL_DMA_IRQHandler+0x98a>
 8006930:	2300      	movs	r3, #0
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 823f 	beq.w	8006db6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006944:	f003 031f 	and.w	r3, r3, #31
 8006948:	2204      	movs	r2, #4
 800694a:	409a      	lsls	r2, r3
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	4013      	ands	r3, r2
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80cd 	beq.w	8006af0 <HAL_DMA_IRQHandler+0xb48>
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80c7 	beq.w	8006af0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2204      	movs	r2, #4
 800696c:	409a      	lsls	r2, r3
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d049      	beq.n	8006a10 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 8210 	beq.w	8006db0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006998:	e20a      	b.n	8006db0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 8206 	beq.w	8006db0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069ac:	e200      	b.n	8006db0 <HAL_DMA_IRQHandler+0xe08>
 80069ae:	bf00      	nop
 80069b0:	40020010 	.word	0x40020010
 80069b4:	40020028 	.word	0x40020028
 80069b8:	40020040 	.word	0x40020040
 80069bc:	40020058 	.word	0x40020058
 80069c0:	40020070 	.word	0x40020070
 80069c4:	40020088 	.word	0x40020088
 80069c8:	400200a0 	.word	0x400200a0
 80069cc:	400200b8 	.word	0x400200b8
 80069d0:	40020410 	.word	0x40020410
 80069d4:	40020428 	.word	0x40020428
 80069d8:	40020440 	.word	0x40020440
 80069dc:	40020458 	.word	0x40020458
 80069e0:	40020470 	.word	0x40020470
 80069e4:	40020488 	.word	0x40020488
 80069e8:	400204a0 	.word	0x400204a0
 80069ec:	400204b8 	.word	0x400204b8
 80069f0:	58025408 	.word	0x58025408
 80069f4:	5802541c 	.word	0x5802541c
 80069f8:	58025430 	.word	0x58025430
 80069fc:	58025444 	.word	0x58025444
 8006a00:	58025458 	.word	0x58025458
 8006a04:	5802546c 	.word	0x5802546c
 8006a08:	58025480 	.word	0x58025480
 8006a0c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d160      	bne.n	8006adc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a7f      	ldr	r2, [pc, #508]	; (8006c1c <HAL_DMA_IRQHandler+0xc74>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d04a      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a7d      	ldr	r2, [pc, #500]	; (8006c20 <HAL_DMA_IRQHandler+0xc78>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d045      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a7c      	ldr	r2, [pc, #496]	; (8006c24 <HAL_DMA_IRQHandler+0xc7c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d040      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a7a      	ldr	r2, [pc, #488]	; (8006c28 <HAL_DMA_IRQHandler+0xc80>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d03b      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a79      	ldr	r2, [pc, #484]	; (8006c2c <HAL_DMA_IRQHandler+0xc84>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d036      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a77      	ldr	r2, [pc, #476]	; (8006c30 <HAL_DMA_IRQHandler+0xc88>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d031      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a76      	ldr	r2, [pc, #472]	; (8006c34 <HAL_DMA_IRQHandler+0xc8c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d02c      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a74      	ldr	r2, [pc, #464]	; (8006c38 <HAL_DMA_IRQHandler+0xc90>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d027      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a73      	ldr	r2, [pc, #460]	; (8006c3c <HAL_DMA_IRQHandler+0xc94>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a71      	ldr	r2, [pc, #452]	; (8006c40 <HAL_DMA_IRQHandler+0xc98>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01d      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a70      	ldr	r2, [pc, #448]	; (8006c44 <HAL_DMA_IRQHandler+0xc9c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a6e      	ldr	r2, [pc, #440]	; (8006c48 <HAL_DMA_IRQHandler+0xca0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a6d      	ldr	r2, [pc, #436]	; (8006c4c <HAL_DMA_IRQHandler+0xca4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a6b      	ldr	r2, [pc, #428]	; (8006c50 <HAL_DMA_IRQHandler+0xca8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a6a      	ldr	r2, [pc, #424]	; (8006c54 <HAL_DMA_IRQHandler+0xcac>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a68      	ldr	r2, [pc, #416]	; (8006c58 <HAL_DMA_IRQHandler+0xcb0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d108      	bne.n	8006acc <HAL_DMA_IRQHandler+0xb24>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0208 	bic.w	r2, r2, #8
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e007      	b.n	8006adc <HAL_DMA_IRQHandler+0xb34>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0204 	bic.w	r2, r2, #4
 8006ada:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 8165 	beq.w	8006db0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006aee:	e15f      	b.n	8006db0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af4:	f003 031f 	and.w	r3, r3, #31
 8006af8:	2202      	movs	r2, #2
 8006afa:	409a      	lsls	r2, r3
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 80c5 	beq.w	8006c90 <HAL_DMA_IRQHandler+0xce8>
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80bf 	beq.w	8006c90 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	409a      	lsls	r2, r3
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d018      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d109      	bne.n	8006b4a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 813a 	beq.w	8006db4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b48:	e134      	b.n	8006db4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 8130 	beq.w	8006db4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b5c:	e12a      	b.n	8006db4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f040 8089 	bne.w	8006c7c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a2b      	ldr	r2, [pc, #172]	; (8006c1c <HAL_DMA_IRQHandler+0xc74>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d04a      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a29      	ldr	r2, [pc, #164]	; (8006c20 <HAL_DMA_IRQHandler+0xc78>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d045      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a28      	ldr	r2, [pc, #160]	; (8006c24 <HAL_DMA_IRQHandler+0xc7c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d040      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a26      	ldr	r2, [pc, #152]	; (8006c28 <HAL_DMA_IRQHandler+0xc80>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d03b      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a25      	ldr	r2, [pc, #148]	; (8006c2c <HAL_DMA_IRQHandler+0xc84>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d036      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a23      	ldr	r2, [pc, #140]	; (8006c30 <HAL_DMA_IRQHandler+0xc88>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d031      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a22      	ldr	r2, [pc, #136]	; (8006c34 <HAL_DMA_IRQHandler+0xc8c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d02c      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a20      	ldr	r2, [pc, #128]	; (8006c38 <HAL_DMA_IRQHandler+0xc90>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d027      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1f      	ldr	r2, [pc, #124]	; (8006c3c <HAL_DMA_IRQHandler+0xc94>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d022      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <HAL_DMA_IRQHandler+0xc98>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d01d      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a1c      	ldr	r2, [pc, #112]	; (8006c44 <HAL_DMA_IRQHandler+0xc9c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d018      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1a      	ldr	r2, [pc, #104]	; (8006c48 <HAL_DMA_IRQHandler+0xca0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a19      	ldr	r2, [pc, #100]	; (8006c4c <HAL_DMA_IRQHandler+0xca4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00e      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a17      	ldr	r2, [pc, #92]	; (8006c50 <HAL_DMA_IRQHandler+0xca8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d009      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a16      	ldr	r2, [pc, #88]	; (8006c54 <HAL_DMA_IRQHandler+0xcac>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a14      	ldr	r2, [pc, #80]	; (8006c58 <HAL_DMA_IRQHandler+0xcb0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d128      	bne.n	8006c5c <HAL_DMA_IRQHandler+0xcb4>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0214 	bic.w	r2, r2, #20
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	e027      	b.n	8006c6c <HAL_DMA_IRQHandler+0xcc4>
 8006c1c:	40020010 	.word	0x40020010
 8006c20:	40020028 	.word	0x40020028
 8006c24:	40020040 	.word	0x40020040
 8006c28:	40020058 	.word	0x40020058
 8006c2c:	40020070 	.word	0x40020070
 8006c30:	40020088 	.word	0x40020088
 8006c34:	400200a0 	.word	0x400200a0
 8006c38:	400200b8 	.word	0x400200b8
 8006c3c:	40020410 	.word	0x40020410
 8006c40:	40020428 	.word	0x40020428
 8006c44:	40020440 	.word	0x40020440
 8006c48:	40020458 	.word	0x40020458
 8006c4c:	40020470 	.word	0x40020470
 8006c50:	40020488 	.word	0x40020488
 8006c54:	400204a0 	.word	0x400204a0
 8006c58:	400204b8 	.word	0x400204b8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 020a 	bic.w	r2, r2, #10
 8006c6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8097 	beq.w	8006db4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c8e:	e091      	b.n	8006db4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	2208      	movs	r2, #8
 8006c9a:	409a      	lsls	r2, r3
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8088 	beq.w	8006db6 <HAL_DMA_IRQHandler+0xe0e>
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f003 0308 	and.w	r3, r3, #8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8082 	beq.w	8006db6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a41      	ldr	r2, [pc, #260]	; (8006dbc <HAL_DMA_IRQHandler+0xe14>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d04a      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a3f      	ldr	r2, [pc, #252]	; (8006dc0 <HAL_DMA_IRQHandler+0xe18>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d045      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a3e      	ldr	r2, [pc, #248]	; (8006dc4 <HAL_DMA_IRQHandler+0xe1c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d040      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a3c      	ldr	r2, [pc, #240]	; (8006dc8 <HAL_DMA_IRQHandler+0xe20>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d03b      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a3b      	ldr	r2, [pc, #236]	; (8006dcc <HAL_DMA_IRQHandler+0xe24>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d036      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a39      	ldr	r2, [pc, #228]	; (8006dd0 <HAL_DMA_IRQHandler+0xe28>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d031      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a38      	ldr	r2, [pc, #224]	; (8006dd4 <HAL_DMA_IRQHandler+0xe2c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d02c      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a36      	ldr	r2, [pc, #216]	; (8006dd8 <HAL_DMA_IRQHandler+0xe30>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d027      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a35      	ldr	r2, [pc, #212]	; (8006ddc <HAL_DMA_IRQHandler+0xe34>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d022      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a33      	ldr	r2, [pc, #204]	; (8006de0 <HAL_DMA_IRQHandler+0xe38>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d01d      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a32      	ldr	r2, [pc, #200]	; (8006de4 <HAL_DMA_IRQHandler+0xe3c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d018      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a30      	ldr	r2, [pc, #192]	; (8006de8 <HAL_DMA_IRQHandler+0xe40>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d013      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2f      	ldr	r2, [pc, #188]	; (8006dec <HAL_DMA_IRQHandler+0xe44>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00e      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a2d      	ldr	r2, [pc, #180]	; (8006df0 <HAL_DMA_IRQHandler+0xe48>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a2c      	ldr	r2, [pc, #176]	; (8006df4 <HAL_DMA_IRQHandler+0xe4c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d004      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a2a      	ldr	r2, [pc, #168]	; (8006df8 <HAL_DMA_IRQHandler+0xe50>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d108      	bne.n	8006d64 <HAL_DMA_IRQHandler+0xdbc>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 021c 	bic.w	r2, r2, #28
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	e007      	b.n	8006d74 <HAL_DMA_IRQHandler+0xdcc>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 020e 	bic.w	r2, r2, #14
 8006d72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	4798      	blx	r3
 8006daa:	e004      	b.n	8006db6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006dac:	bf00      	nop
 8006dae:	e002      	b.n	8006db6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db0:	bf00      	nop
 8006db2:	e000      	b.n	8006db6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006db6:	3728      	adds	r7, #40	; 0x28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40020010 	.word	0x40020010
 8006dc0:	40020028 	.word	0x40020028
 8006dc4:	40020040 	.word	0x40020040
 8006dc8:	40020058 	.word	0x40020058
 8006dcc:	40020070 	.word	0x40020070
 8006dd0:	40020088 	.word	0x40020088
 8006dd4:	400200a0 	.word	0x400200a0
 8006dd8:	400200b8 	.word	0x400200b8
 8006ddc:	40020410 	.word	0x40020410
 8006de0:	40020428 	.word	0x40020428
 8006de4:	40020440 	.word	0x40020440
 8006de8:	40020458 	.word	0x40020458
 8006dec:	40020470 	.word	0x40020470
 8006df0:	40020488 	.word	0x40020488
 8006df4:	400204a0 	.word	0x400204a0
 8006df8:	400204b8 	.word	0x400204b8

08006dfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e14:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a7f      	ldr	r2, [pc, #508]	; (8007018 <DMA_SetConfig+0x21c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d072      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a7d      	ldr	r2, [pc, #500]	; (800701c <DMA_SetConfig+0x220>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d06d      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a7c      	ldr	r2, [pc, #496]	; (8007020 <DMA_SetConfig+0x224>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d068      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a7a      	ldr	r2, [pc, #488]	; (8007024 <DMA_SetConfig+0x228>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d063      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a79      	ldr	r2, [pc, #484]	; (8007028 <DMA_SetConfig+0x22c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d05e      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a77      	ldr	r2, [pc, #476]	; (800702c <DMA_SetConfig+0x230>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d059      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a76      	ldr	r2, [pc, #472]	; (8007030 <DMA_SetConfig+0x234>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d054      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a74      	ldr	r2, [pc, #464]	; (8007034 <DMA_SetConfig+0x238>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d04f      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a73      	ldr	r2, [pc, #460]	; (8007038 <DMA_SetConfig+0x23c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d04a      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a71      	ldr	r2, [pc, #452]	; (800703c <DMA_SetConfig+0x240>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d045      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a70      	ldr	r2, [pc, #448]	; (8007040 <DMA_SetConfig+0x244>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d040      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a6e      	ldr	r2, [pc, #440]	; (8007044 <DMA_SetConfig+0x248>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d03b      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a6d      	ldr	r2, [pc, #436]	; (8007048 <DMA_SetConfig+0x24c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d036      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a6b      	ldr	r2, [pc, #428]	; (800704c <DMA_SetConfig+0x250>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d031      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a6a      	ldr	r2, [pc, #424]	; (8007050 <DMA_SetConfig+0x254>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d02c      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a68      	ldr	r2, [pc, #416]	; (8007054 <DMA_SetConfig+0x258>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d027      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a67      	ldr	r2, [pc, #412]	; (8007058 <DMA_SetConfig+0x25c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d022      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a65      	ldr	r2, [pc, #404]	; (800705c <DMA_SetConfig+0x260>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d01d      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a64      	ldr	r2, [pc, #400]	; (8007060 <DMA_SetConfig+0x264>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d018      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a62      	ldr	r2, [pc, #392]	; (8007064 <DMA_SetConfig+0x268>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d013      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a61      	ldr	r2, [pc, #388]	; (8007068 <DMA_SetConfig+0x26c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00e      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a5f      	ldr	r2, [pc, #380]	; (800706c <DMA_SetConfig+0x270>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d009      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a5e      	ldr	r2, [pc, #376]	; (8007070 <DMA_SetConfig+0x274>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d004      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a5c      	ldr	r2, [pc, #368]	; (8007074 <DMA_SetConfig+0x278>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d101      	bne.n	8006f0a <DMA_SetConfig+0x10e>
 8006f06:	2301      	movs	r3, #1
 8006f08:	e000      	b.n	8006f0c <DMA_SetConfig+0x110>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00d      	beq.n	8006f2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a39      	ldr	r2, [pc, #228]	; (8007018 <DMA_SetConfig+0x21c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d04a      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a38      	ldr	r2, [pc, #224]	; (800701c <DMA_SetConfig+0x220>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d045      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a36      	ldr	r2, [pc, #216]	; (8007020 <DMA_SetConfig+0x224>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d040      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a35      	ldr	r2, [pc, #212]	; (8007024 <DMA_SetConfig+0x228>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d03b      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a33      	ldr	r2, [pc, #204]	; (8007028 <DMA_SetConfig+0x22c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d036      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a32      	ldr	r2, [pc, #200]	; (800702c <DMA_SetConfig+0x230>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d031      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a30      	ldr	r2, [pc, #192]	; (8007030 <DMA_SetConfig+0x234>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d02c      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a2f      	ldr	r2, [pc, #188]	; (8007034 <DMA_SetConfig+0x238>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d027      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a2d      	ldr	r2, [pc, #180]	; (8007038 <DMA_SetConfig+0x23c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d022      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a2c      	ldr	r2, [pc, #176]	; (800703c <DMA_SetConfig+0x240>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d01d      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a2a      	ldr	r2, [pc, #168]	; (8007040 <DMA_SetConfig+0x244>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d018      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a29      	ldr	r2, [pc, #164]	; (8007044 <DMA_SetConfig+0x248>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d013      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a27      	ldr	r2, [pc, #156]	; (8007048 <DMA_SetConfig+0x24c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00e      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a26      	ldr	r2, [pc, #152]	; (800704c <DMA_SetConfig+0x250>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d009      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a24      	ldr	r2, [pc, #144]	; (8007050 <DMA_SetConfig+0x254>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a23      	ldr	r2, [pc, #140]	; (8007054 <DMA_SetConfig+0x258>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d101      	bne.n	8006fd0 <DMA_SetConfig+0x1d4>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e000      	b.n	8006fd2 <DMA_SetConfig+0x1d6>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d059      	beq.n	800708a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fda:	f003 031f 	and.w	r3, r3, #31
 8006fde:	223f      	movs	r2, #63	; 0x3f
 8006fe0:	409a      	lsls	r2, r3
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ff4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	2b40      	cmp	r3, #64	; 0x40
 8007004:	d138      	bne.n	8007078 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007016:	e086      	b.n	8007126 <DMA_SetConfig+0x32a>
 8007018:	40020010 	.word	0x40020010
 800701c:	40020028 	.word	0x40020028
 8007020:	40020040 	.word	0x40020040
 8007024:	40020058 	.word	0x40020058
 8007028:	40020070 	.word	0x40020070
 800702c:	40020088 	.word	0x40020088
 8007030:	400200a0 	.word	0x400200a0
 8007034:	400200b8 	.word	0x400200b8
 8007038:	40020410 	.word	0x40020410
 800703c:	40020428 	.word	0x40020428
 8007040:	40020440 	.word	0x40020440
 8007044:	40020458 	.word	0x40020458
 8007048:	40020470 	.word	0x40020470
 800704c:	40020488 	.word	0x40020488
 8007050:	400204a0 	.word	0x400204a0
 8007054:	400204b8 	.word	0x400204b8
 8007058:	58025408 	.word	0x58025408
 800705c:	5802541c 	.word	0x5802541c
 8007060:	58025430 	.word	0x58025430
 8007064:	58025444 	.word	0x58025444
 8007068:	58025458 	.word	0x58025458
 800706c:	5802546c 	.word	0x5802546c
 8007070:	58025480 	.word	0x58025480
 8007074:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	60da      	str	r2, [r3, #12]
}
 8007088:	e04d      	b.n	8007126 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a29      	ldr	r2, [pc, #164]	; (8007134 <DMA_SetConfig+0x338>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d022      	beq.n	80070da <DMA_SetConfig+0x2de>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a27      	ldr	r2, [pc, #156]	; (8007138 <DMA_SetConfig+0x33c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d01d      	beq.n	80070da <DMA_SetConfig+0x2de>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a26      	ldr	r2, [pc, #152]	; (800713c <DMA_SetConfig+0x340>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d018      	beq.n	80070da <DMA_SetConfig+0x2de>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a24      	ldr	r2, [pc, #144]	; (8007140 <DMA_SetConfig+0x344>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d013      	beq.n	80070da <DMA_SetConfig+0x2de>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a23      	ldr	r2, [pc, #140]	; (8007144 <DMA_SetConfig+0x348>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00e      	beq.n	80070da <DMA_SetConfig+0x2de>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a21      	ldr	r2, [pc, #132]	; (8007148 <DMA_SetConfig+0x34c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d009      	beq.n	80070da <DMA_SetConfig+0x2de>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a20      	ldr	r2, [pc, #128]	; (800714c <DMA_SetConfig+0x350>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d004      	beq.n	80070da <DMA_SetConfig+0x2de>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1e      	ldr	r2, [pc, #120]	; (8007150 <DMA_SetConfig+0x354>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d101      	bne.n	80070de <DMA_SetConfig+0x2e2>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <DMA_SetConfig+0x2e4>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d020      	beq.n	8007126 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	2201      	movs	r2, #1
 80070ee:	409a      	lsls	r2, r3
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2b40      	cmp	r3, #64	; 0x40
 8007102:	d108      	bne.n	8007116 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	60da      	str	r2, [r3, #12]
}
 8007114:	e007      	b.n	8007126 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	60da      	str	r2, [r3, #12]
}
 8007126:	bf00      	nop
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	58025408 	.word	0x58025408
 8007138:	5802541c 	.word	0x5802541c
 800713c:	58025430 	.word	0x58025430
 8007140:	58025444 	.word	0x58025444
 8007144:	58025458 	.word	0x58025458
 8007148:	5802546c 	.word	0x5802546c
 800714c:	58025480 	.word	0x58025480
 8007150:	58025494 	.word	0x58025494

08007154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a42      	ldr	r2, [pc, #264]	; (800726c <DMA_CalcBaseAndBitshift+0x118>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d04a      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a41      	ldr	r2, [pc, #260]	; (8007270 <DMA_CalcBaseAndBitshift+0x11c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d045      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a3f      	ldr	r2, [pc, #252]	; (8007274 <DMA_CalcBaseAndBitshift+0x120>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d040      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a3e      	ldr	r2, [pc, #248]	; (8007278 <DMA_CalcBaseAndBitshift+0x124>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d03b      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a3c      	ldr	r2, [pc, #240]	; (800727c <DMA_CalcBaseAndBitshift+0x128>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d036      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a3b      	ldr	r2, [pc, #236]	; (8007280 <DMA_CalcBaseAndBitshift+0x12c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d031      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a39      	ldr	r2, [pc, #228]	; (8007284 <DMA_CalcBaseAndBitshift+0x130>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d02c      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a38      	ldr	r2, [pc, #224]	; (8007288 <DMA_CalcBaseAndBitshift+0x134>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d027      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a36      	ldr	r2, [pc, #216]	; (800728c <DMA_CalcBaseAndBitshift+0x138>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d022      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a35      	ldr	r2, [pc, #212]	; (8007290 <DMA_CalcBaseAndBitshift+0x13c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d01d      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a33      	ldr	r2, [pc, #204]	; (8007294 <DMA_CalcBaseAndBitshift+0x140>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d018      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a32      	ldr	r2, [pc, #200]	; (8007298 <DMA_CalcBaseAndBitshift+0x144>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d013      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a30      	ldr	r2, [pc, #192]	; (800729c <DMA_CalcBaseAndBitshift+0x148>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d00e      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a2f      	ldr	r2, [pc, #188]	; (80072a0 <DMA_CalcBaseAndBitshift+0x14c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d009      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a2d      	ldr	r2, [pc, #180]	; (80072a4 <DMA_CalcBaseAndBitshift+0x150>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d004      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a2c      	ldr	r2, [pc, #176]	; (80072a8 <DMA_CalcBaseAndBitshift+0x154>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d101      	bne.n	8007200 <DMA_CalcBaseAndBitshift+0xac>
 80071fc:	2301      	movs	r3, #1
 80071fe:	e000      	b.n	8007202 <DMA_CalcBaseAndBitshift+0xae>
 8007200:	2300      	movs	r3, #0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d024      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	3b10      	subs	r3, #16
 800720e:	4a27      	ldr	r2, [pc, #156]	; (80072ac <DMA_CalcBaseAndBitshift+0x158>)
 8007210:	fba2 2303 	umull	r2, r3, r2, r3
 8007214:	091b      	lsrs	r3, r3, #4
 8007216:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	4a24      	ldr	r2, [pc, #144]	; (80072b0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007220:	5cd3      	ldrb	r3, [r2, r3]
 8007222:	461a      	mov	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b03      	cmp	r3, #3
 800722c:	d908      	bls.n	8007240 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	4b1f      	ldr	r3, [pc, #124]	; (80072b4 <DMA_CalcBaseAndBitshift+0x160>)
 8007236:	4013      	ands	r3, r2
 8007238:	1d1a      	adds	r2, r3, #4
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	659a      	str	r2, [r3, #88]	; 0x58
 800723e:	e00d      	b.n	800725c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	4b1b      	ldr	r3, [pc, #108]	; (80072b4 <DMA_CalcBaseAndBitshift+0x160>)
 8007248:	4013      	ands	r3, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6593      	str	r3, [r2, #88]	; 0x58
 800724e:	e005      	b.n	800725c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007260:	4618      	mov	r0, r3
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	40020010 	.word	0x40020010
 8007270:	40020028 	.word	0x40020028
 8007274:	40020040 	.word	0x40020040
 8007278:	40020058 	.word	0x40020058
 800727c:	40020070 	.word	0x40020070
 8007280:	40020088 	.word	0x40020088
 8007284:	400200a0 	.word	0x400200a0
 8007288:	400200b8 	.word	0x400200b8
 800728c:	40020410 	.word	0x40020410
 8007290:	40020428 	.word	0x40020428
 8007294:	40020440 	.word	0x40020440
 8007298:	40020458 	.word	0x40020458
 800729c:	40020470 	.word	0x40020470
 80072a0:	40020488 	.word	0x40020488
 80072a4:	400204a0 	.word	0x400204a0
 80072a8:	400204b8 	.word	0x400204b8
 80072ac:	aaaaaaab 	.word	0xaaaaaaab
 80072b0:	0801a74c 	.word	0x0801a74c
 80072b4:	fffffc00 	.word	0xfffffc00

080072b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d120      	bne.n	800730e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d858      	bhi.n	8007386 <DMA_CheckFifoParam+0xce>
 80072d4:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <DMA_CheckFifoParam+0x24>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	080072ed 	.word	0x080072ed
 80072e0:	080072ff 	.word	0x080072ff
 80072e4:	080072ed 	.word	0x080072ed
 80072e8:	08007387 	.word	0x08007387
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d048      	beq.n	800738a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072fc:	e045      	b.n	800738a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007302:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007306:	d142      	bne.n	800738e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800730c:	e03f      	b.n	800738e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007316:	d123      	bne.n	8007360 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	2b03      	cmp	r3, #3
 800731e:	d838      	bhi.n	8007392 <DMA_CheckFifoParam+0xda>
 8007320:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <DMA_CheckFifoParam+0x70>)
 8007322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007326:	bf00      	nop
 8007328:	08007339 	.word	0x08007339
 800732c:	0800733f 	.word	0x0800733f
 8007330:	08007339 	.word	0x08007339
 8007334:	08007351 	.word	0x08007351
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	73fb      	strb	r3, [r7, #15]
        break;
 800733c:	e030      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007342:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d025      	beq.n	8007396 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800734e:	e022      	b.n	8007396 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007358:	d11f      	bne.n	800739a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800735e:	e01c      	b.n	800739a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007364:	2b02      	cmp	r3, #2
 8007366:	d902      	bls.n	800736e <DMA_CheckFifoParam+0xb6>
 8007368:	2b03      	cmp	r3, #3
 800736a:	d003      	beq.n	8007374 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800736c:	e018      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	73fb      	strb	r3, [r7, #15]
        break;
 8007372:	e015      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00e      	beq.n	800739e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	73fb      	strb	r3, [r7, #15]
    break;
 8007384:	e00b      	b.n	800739e <DMA_CheckFifoParam+0xe6>
        break;
 8007386:	bf00      	nop
 8007388:	e00a      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        break;
 800738a:	bf00      	nop
 800738c:	e008      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        break;
 800738e:	bf00      	nop
 8007390:	e006      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        break;
 8007392:	bf00      	nop
 8007394:	e004      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        break;
 8007396:	bf00      	nop
 8007398:	e002      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        break;
 800739a:	bf00      	nop
 800739c:	e000      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
    break;
 800739e:	bf00      	nop
    }
  }

  return status;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop

080073b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a38      	ldr	r2, [pc, #224]	; (80074a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d022      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a36      	ldr	r2, [pc, #216]	; (80074a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d01d      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a35      	ldr	r2, [pc, #212]	; (80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d018      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a33      	ldr	r2, [pc, #204]	; (80074b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d013      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a32      	ldr	r2, [pc, #200]	; (80074b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00e      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a30      	ldr	r2, [pc, #192]	; (80074b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d009      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a2f      	ldr	r2, [pc, #188]	; (80074bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d004      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a2d      	ldr	r2, [pc, #180]	; (80074c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d101      	bne.n	8007412 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800740e:	2301      	movs	r3, #1
 8007410:	e000      	b.n	8007414 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007412:	2300      	movs	r3, #0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01a      	beq.n	800744e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	b2db      	uxtb	r3, r3
 800741e:	3b08      	subs	r3, #8
 8007420:	4a28      	ldr	r2, [pc, #160]	; (80074c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007422:	fba2 2303 	umull	r2, r3, r2, r3
 8007426:	091b      	lsrs	r3, r3, #4
 8007428:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4b26      	ldr	r3, [pc, #152]	; (80074c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a24      	ldr	r2, [pc, #144]	; (80074cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800743c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f003 031f 	and.w	r3, r3, #31
 8007444:	2201      	movs	r2, #1
 8007446:	409a      	lsls	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800744c:	e024      	b.n	8007498 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	3b10      	subs	r3, #16
 8007456:	4a1e      	ldr	r2, [pc, #120]	; (80074d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007458:	fba2 2303 	umull	r2, r3, r2, r3
 800745c:	091b      	lsrs	r3, r3, #4
 800745e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	4a1c      	ldr	r2, [pc, #112]	; (80074d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d806      	bhi.n	8007476 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4a1b      	ldr	r2, [pc, #108]	; (80074d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d902      	bls.n	8007476 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3308      	adds	r3, #8
 8007474:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	4b18      	ldr	r3, [pc, #96]	; (80074dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	461a      	mov	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a16      	ldr	r2, [pc, #88]	; (80074e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007488:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f003 031f 	and.w	r3, r3, #31
 8007490:	2201      	movs	r2, #1
 8007492:	409a      	lsls	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007498:	bf00      	nop
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	58025408 	.word	0x58025408
 80074a8:	5802541c 	.word	0x5802541c
 80074ac:	58025430 	.word	0x58025430
 80074b0:	58025444 	.word	0x58025444
 80074b4:	58025458 	.word	0x58025458
 80074b8:	5802546c 	.word	0x5802546c
 80074bc:	58025480 	.word	0x58025480
 80074c0:	58025494 	.word	0x58025494
 80074c4:	cccccccd 	.word	0xcccccccd
 80074c8:	16009600 	.word	0x16009600
 80074cc:	58025880 	.word	0x58025880
 80074d0:	aaaaaaab 	.word	0xaaaaaaab
 80074d4:	400204b8 	.word	0x400204b8
 80074d8:	4002040f 	.word	0x4002040f
 80074dc:	10008200 	.word	0x10008200
 80074e0:	40020880 	.word	0x40020880

080074e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d04a      	beq.n	8007590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d847      	bhi.n	8007590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a25      	ldr	r2, [pc, #148]	; (800759c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d022      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a24      	ldr	r2, [pc, #144]	; (80075a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d01d      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a22      	ldr	r2, [pc, #136]	; (80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d018      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a21      	ldr	r2, [pc, #132]	; (80075a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d013      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1f      	ldr	r2, [pc, #124]	; (80075ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d00e      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1e      	ldr	r2, [pc, #120]	; (80075b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d009      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1c      	ldr	r2, [pc, #112]	; (80075b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d004      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a1b      	ldr	r2, [pc, #108]	; (80075b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d101      	bne.n	8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007550:	2301      	movs	r3, #1
 8007552:	e000      	b.n	8007556 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007554:	2300      	movs	r3, #0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4b17      	ldr	r3, [pc, #92]	; (80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a15      	ldr	r2, [pc, #84]	; (80075c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800756c:	671a      	str	r2, [r3, #112]	; 0x70
 800756e:	e009      	b.n	8007584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4b14      	ldr	r3, [pc, #80]	; (80075c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	461a      	mov	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a11      	ldr	r2, [pc, #68]	; (80075c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007582:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3b01      	subs	r3, #1
 8007588:	2201      	movs	r2, #1
 800758a:	409a      	lsls	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	58025408 	.word	0x58025408
 80075a0:	5802541c 	.word	0x5802541c
 80075a4:	58025430 	.word	0x58025430
 80075a8:	58025444 	.word	0x58025444
 80075ac:	58025458 	.word	0x58025458
 80075b0:	5802546c 	.word	0x5802546c
 80075b4:	58025480 	.word	0x58025480
 80075b8:	58025494 	.word	0x58025494
 80075bc:	1600963f 	.word	0x1600963f
 80075c0:	58025940 	.word	0x58025940
 80075c4:	1000823f 	.word	0x1000823f
 80075c8:	40020940 	.word	0x40020940

080075cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b089      	sub	sp, #36	; 0x24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80075da:	4b86      	ldr	r3, [pc, #536]	; (80077f4 <HAL_GPIO_Init+0x228>)
 80075dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075de:	e18c      	b.n	80078fa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	2101      	movs	r1, #1
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	fa01 f303 	lsl.w	r3, r1, r3
 80075ec:	4013      	ands	r3, r2
 80075ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 817e 	beq.w	80078f4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f003 0303 	and.w	r3, r3, #3
 8007600:	2b01      	cmp	r3, #1
 8007602:	d005      	beq.n	8007610 <HAL_GPIO_Init+0x44>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f003 0303 	and.w	r3, r3, #3
 800760c:	2b02      	cmp	r3, #2
 800760e:	d130      	bne.n	8007672 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	2203      	movs	r2, #3
 800761c:	fa02 f303 	lsl.w	r3, r2, r3
 8007620:	43db      	mvns	r3, r3
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	4013      	ands	r3, r2
 8007626:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	68da      	ldr	r2, [r3, #12]
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	fa02 f303 	lsl.w	r3, r2, r3
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	4313      	orrs	r3, r2
 8007638:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007646:	2201      	movs	r2, #1
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	fa02 f303 	lsl.w	r3, r2, r3
 800764e:	43db      	mvns	r3, r3
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	4013      	ands	r3, r2
 8007654:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	091b      	lsrs	r3, r3, #4
 800765c:	f003 0201 	and.w	r2, r3, #1
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	fa02 f303 	lsl.w	r3, r2, r3
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	4313      	orrs	r3, r2
 800766a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	2b03      	cmp	r3, #3
 800767c:	d017      	beq.n	80076ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	2203      	movs	r2, #3
 800768a:	fa02 f303 	lsl.w	r3, r2, r3
 800768e:	43db      	mvns	r3, r3
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	4013      	ands	r3, r2
 8007694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	689a      	ldr	r2, [r3, #8]
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	fa02 f303 	lsl.w	r3, r2, r3
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d123      	bne.n	8007702 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	08da      	lsrs	r2, r3, #3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	3208      	adds	r2, #8
 80076c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	220f      	movs	r2, #15
 80076d2:	fa02 f303 	lsl.w	r3, r2, r3
 80076d6:	43db      	mvns	r3, r3
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	4013      	ands	r3, r2
 80076dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	691a      	ldr	r2, [r3, #16]
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	fa02 f303 	lsl.w	r3, r2, r3
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	08da      	lsrs	r2, r3, #3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3208      	adds	r2, #8
 80076fc:	69b9      	ldr	r1, [r7, #24]
 80076fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	2203      	movs	r2, #3
 800770e:	fa02 f303 	lsl.w	r3, r2, r3
 8007712:	43db      	mvns	r3, r3
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	4013      	ands	r3, r2
 8007718:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f003 0203 	and.w	r2, r3, #3
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	fa02 f303 	lsl.w	r3, r2, r3
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	4313      	orrs	r3, r2
 800772e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 80d8 	beq.w	80078f4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007744:	4b2c      	ldr	r3, [pc, #176]	; (80077f8 <HAL_GPIO_Init+0x22c>)
 8007746:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800774a:	4a2b      	ldr	r2, [pc, #172]	; (80077f8 <HAL_GPIO_Init+0x22c>)
 800774c:	f043 0302 	orr.w	r3, r3, #2
 8007750:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007754:	4b28      	ldr	r3, [pc, #160]	; (80077f8 <HAL_GPIO_Init+0x22c>)
 8007756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007762:	4a26      	ldr	r2, [pc, #152]	; (80077fc <HAL_GPIO_Init+0x230>)
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	089b      	lsrs	r3, r3, #2
 8007768:	3302      	adds	r3, #2
 800776a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800776e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	220f      	movs	r2, #15
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	43db      	mvns	r3, r3
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	4013      	ands	r3, r2
 8007784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a1d      	ldr	r2, [pc, #116]	; (8007800 <HAL_GPIO_Init+0x234>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d04a      	beq.n	8007824 <HAL_GPIO_Init+0x258>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a1c      	ldr	r2, [pc, #112]	; (8007804 <HAL_GPIO_Init+0x238>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d02b      	beq.n	80077ee <HAL_GPIO_Init+0x222>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a1b      	ldr	r2, [pc, #108]	; (8007808 <HAL_GPIO_Init+0x23c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d025      	beq.n	80077ea <HAL_GPIO_Init+0x21e>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a1a      	ldr	r2, [pc, #104]	; (800780c <HAL_GPIO_Init+0x240>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d01f      	beq.n	80077e6 <HAL_GPIO_Init+0x21a>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a19      	ldr	r2, [pc, #100]	; (8007810 <HAL_GPIO_Init+0x244>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d019      	beq.n	80077e2 <HAL_GPIO_Init+0x216>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a18      	ldr	r2, [pc, #96]	; (8007814 <HAL_GPIO_Init+0x248>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d013      	beq.n	80077de <HAL_GPIO_Init+0x212>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a17      	ldr	r2, [pc, #92]	; (8007818 <HAL_GPIO_Init+0x24c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d00d      	beq.n	80077da <HAL_GPIO_Init+0x20e>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a16      	ldr	r2, [pc, #88]	; (800781c <HAL_GPIO_Init+0x250>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d007      	beq.n	80077d6 <HAL_GPIO_Init+0x20a>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a15      	ldr	r2, [pc, #84]	; (8007820 <HAL_GPIO_Init+0x254>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d101      	bne.n	80077d2 <HAL_GPIO_Init+0x206>
 80077ce:	2309      	movs	r3, #9
 80077d0:	e029      	b.n	8007826 <HAL_GPIO_Init+0x25a>
 80077d2:	230a      	movs	r3, #10
 80077d4:	e027      	b.n	8007826 <HAL_GPIO_Init+0x25a>
 80077d6:	2307      	movs	r3, #7
 80077d8:	e025      	b.n	8007826 <HAL_GPIO_Init+0x25a>
 80077da:	2306      	movs	r3, #6
 80077dc:	e023      	b.n	8007826 <HAL_GPIO_Init+0x25a>
 80077de:	2305      	movs	r3, #5
 80077e0:	e021      	b.n	8007826 <HAL_GPIO_Init+0x25a>
 80077e2:	2304      	movs	r3, #4
 80077e4:	e01f      	b.n	8007826 <HAL_GPIO_Init+0x25a>
 80077e6:	2303      	movs	r3, #3
 80077e8:	e01d      	b.n	8007826 <HAL_GPIO_Init+0x25a>
 80077ea:	2302      	movs	r3, #2
 80077ec:	e01b      	b.n	8007826 <HAL_GPIO_Init+0x25a>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e019      	b.n	8007826 <HAL_GPIO_Init+0x25a>
 80077f2:	bf00      	nop
 80077f4:	58000080 	.word	0x58000080
 80077f8:	58024400 	.word	0x58024400
 80077fc:	58000400 	.word	0x58000400
 8007800:	58020000 	.word	0x58020000
 8007804:	58020400 	.word	0x58020400
 8007808:	58020800 	.word	0x58020800
 800780c:	58020c00 	.word	0x58020c00
 8007810:	58021000 	.word	0x58021000
 8007814:	58021400 	.word	0x58021400
 8007818:	58021800 	.word	0x58021800
 800781c:	58021c00 	.word	0x58021c00
 8007820:	58022400 	.word	0x58022400
 8007824:	2300      	movs	r3, #0
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	f002 0203 	and.w	r2, r2, #3
 800782c:	0092      	lsls	r2, r2, #2
 800782e:	4093      	lsls	r3, r2
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	4313      	orrs	r3, r2
 8007834:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007836:	4938      	ldr	r1, [pc, #224]	; (8007918 <HAL_GPIO_Init+0x34c>)
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	089b      	lsrs	r3, r3, #2
 800783c:	3302      	adds	r3, #2
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	43db      	mvns	r3, r3
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	4013      	ands	r3, r2
 8007854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	4313      	orrs	r3, r2
 8007868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800786a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	43db      	mvns	r3, r3
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	4013      	ands	r3, r2
 8007882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	43db      	mvns	r3, r3
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	4013      	ands	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	43db      	mvns	r3, r3
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	4013      	ands	r3, r2
 80078d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	3301      	adds	r3, #1
 80078f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	fa22 f303 	lsr.w	r3, r2, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	f47f ae6b 	bne.w	80075e0 <HAL_GPIO_Init+0x14>
  }
}
 800790a:	bf00      	nop
 800790c:	bf00      	nop
 800790e:	3724      	adds	r7, #36	; 0x24
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	58000400 	.word	0x58000400

0800791c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691a      	ldr	r2, [r3, #16]
 800792c:	887b      	ldrh	r3, [r7, #2]
 800792e:	4013      	ands	r3, r2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007934:	2301      	movs	r3, #1
 8007936:	73fb      	strb	r3, [r7, #15]
 8007938:	e001      	b.n	800793e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800793e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e07f      	b.n	8007a5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d106      	bne.n	8007978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7fa f9e0 	bl	8001d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2224      	movs	r2, #36	; 0x24
 800797c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0201 	bic.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800799c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d107      	bne.n	80079c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689a      	ldr	r2, [r3, #8]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079c2:	609a      	str	r2, [r3, #8]
 80079c4:	e006      	b.n	80079d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80079d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d104      	bne.n	80079e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6859      	ldr	r1, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	4b1d      	ldr	r3, [pc, #116]	; (8007a68 <HAL_I2C_Init+0x11c>)
 80079f2:	430b      	orrs	r3, r1
 80079f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	691a      	ldr	r2, [r3, #16]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	69d9      	ldr	r1, [r3, #28]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a1a      	ldr	r2, [r3, #32]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0201 	orr.w	r2, r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	02008000 	.word	0x02008000

08007a6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b20      	cmp	r3, #32
 8007a80:	d138      	bne.n	8007af4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e032      	b.n	8007af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2224      	movs	r2, #36	; 0x24
 8007a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0201 	bic.w	r2, r2, #1
 8007aae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007abe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6819      	ldr	r1, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f042 0201 	orr.w	r2, r2, #1
 8007ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	e000      	b.n	8007af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007af4:	2302      	movs	r3, #2
  }
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b085      	sub	sp, #20
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b20      	cmp	r3, #32
 8007b16:	d139      	bne.n	8007b8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d101      	bne.n	8007b26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007b22:	2302      	movs	r3, #2
 8007b24:	e033      	b.n	8007b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2224      	movs	r2, #36	; 0x24
 8007b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0201 	bic.w	r2, r2, #1
 8007b44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007b54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0201 	orr.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e000      	b.n	8007b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007b8c:	2302      	movs	r3, #2
  }
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b9c:	b08f      	sub	sp, #60	; 0x3c
 8007b9e:	af0a      	add	r7, sp, #40	; 0x28
 8007ba0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e116      	b.n	8007dda <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d106      	bne.n	8007bcc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7fa fac8 	bl	800215c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2203      	movs	r2, #3
 8007bd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d102      	bne.n	8007be6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f007 fd1c 	bl	800f628 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	603b      	str	r3, [r7, #0]
 8007bf6:	687e      	ldr	r6, [r7, #4]
 8007bf8:	466d      	mov	r5, sp
 8007bfa:	f106 0410 	add.w	r4, r6, #16
 8007bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007c0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8007c0e:	1d33      	adds	r3, r6, #4
 8007c10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c12:	6838      	ldr	r0, [r7, #0]
 8007c14:	f007 fc9a 	bl	800f54c <USB_CoreInit>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2202      	movs	r2, #2
 8007c22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e0d7      	b.n	8007dda <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f007 fd0a 	bl	800f64a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
 8007c3a:	e04a      	b.n	8007cd2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007c3c:	7bfa      	ldrb	r2, [r7, #15]
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	4613      	mov	r3, r2
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	4413      	add	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	440b      	add	r3, r1
 8007c4a:	333d      	adds	r3, #61	; 0x3d
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007c50:	7bfa      	ldrb	r2, [r7, #15]
 8007c52:	6879      	ldr	r1, [r7, #4]
 8007c54:	4613      	mov	r3, r2
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	440b      	add	r3, r1
 8007c5e:	333c      	adds	r3, #60	; 0x3c
 8007c60:	7bfa      	ldrb	r2, [r7, #15]
 8007c62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007c64:	7bfa      	ldrb	r2, [r7, #15]
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	b298      	uxth	r0, r3
 8007c6a:	6879      	ldr	r1, [r7, #4]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	440b      	add	r3, r1
 8007c76:	3356      	adds	r3, #86	; 0x56
 8007c78:	4602      	mov	r2, r0
 8007c7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007c7c:	7bfa      	ldrb	r2, [r7, #15]
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	4613      	mov	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	3340      	adds	r3, #64	; 0x40
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007c90:	7bfa      	ldrb	r2, [r7, #15]
 8007c92:	6879      	ldr	r1, [r7, #4]
 8007c94:	4613      	mov	r3, r2
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	3344      	adds	r3, #68	; 0x44
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007ca4:	7bfa      	ldrb	r2, [r7, #15]
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	440b      	add	r3, r1
 8007cb2:	3348      	adds	r3, #72	; 0x48
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007cb8:	7bfa      	ldrb	r2, [r7, #15]
 8007cba:	6879      	ldr	r1, [r7, #4]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	440b      	add	r3, r1
 8007cc6:	334c      	adds	r3, #76	; 0x4c
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	73fb      	strb	r3, [r7, #15]
 8007cd2:	7bfa      	ldrb	r2, [r7, #15]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d3af      	bcc.n	8007c3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73fb      	strb	r3, [r7, #15]
 8007ce0:	e044      	b.n	8007d6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007ce2:	7bfa      	ldrb	r2, [r7, #15]
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	00db      	lsls	r3, r3, #3
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	440b      	add	r3, r1
 8007cf0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007cf8:	7bfa      	ldrb	r2, [r7, #15]
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007d0a:	7bfa      	ldrb	r2, [r7, #15]
 8007d0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d0e:	7bfa      	ldrb	r2, [r7, #15]
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	4613      	mov	r3, r2
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007d24:	7bfa      	ldrb	r2, [r7, #15]
 8007d26:	6879      	ldr	r1, [r7, #4]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	4413      	add	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	440b      	add	r3, r1
 8007d32:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007d3a:	7bfa      	ldrb	r2, [r7, #15]
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007d50:	7bfa      	ldrb	r2, [r7, #15]
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	4613      	mov	r3, r2
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	73fb      	strb	r3, [r7, #15]
 8007d6c:	7bfa      	ldrb	r2, [r7, #15]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d3b5      	bcc.n	8007ce2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	687e      	ldr	r6, [r7, #4]
 8007d7e:	466d      	mov	r5, sp
 8007d80:	f106 0410 	add.w	r4, r6, #16
 8007d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007d90:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d94:	1d33      	adds	r3, r6, #4
 8007d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d98:	6838      	ldr	r0, [r7, #0]
 8007d9a:	f007 fca3 	bl	800f6e4 <USB_DevInit>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e014      	b.n	8007dda <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d102      	bne.n	8007dce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f80b 	bl	8007de4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f007 fe61 	bl	800fa9a <USB_DevDisconnect>

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007de4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e12:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <HAL_PCDEx_ActivateLPM+0x44>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	10000003 	.word	0x10000003

08007e2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e34:	4b19      	ldr	r3, [pc, #100]	; (8007e9c <HAL_PWREx_ConfigSupply+0x70>)
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d00a      	beq.n	8007e56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e40:	4b16      	ldr	r3, [pc, #88]	; (8007e9c <HAL_PWREx_ConfigSupply+0x70>)
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d001      	beq.n	8007e52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e01f      	b.n	8007e92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	e01d      	b.n	8007e92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e56:	4b11      	ldr	r3, [pc, #68]	; (8007e9c <HAL_PWREx_ConfigSupply+0x70>)
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f023 0207 	bic.w	r2, r3, #7
 8007e5e:	490f      	ldr	r1, [pc, #60]	; (8007e9c <HAL_PWREx_ConfigSupply+0x70>)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e66:	f7fa fc15 	bl	8002694 <HAL_GetTick>
 8007e6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e6c:	e009      	b.n	8007e82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e6e:	f7fa fc11 	bl	8002694 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e7c:	d901      	bls.n	8007e82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e007      	b.n	8007e92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e82:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <HAL_PWREx_ConfigSupply+0x70>)
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e8e:	d1ee      	bne.n	8007e6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	58024800 	.word	0x58024800

08007ea0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007ea4:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	4a04      	ldr	r2, [pc, #16]	; (8007ebc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007eae:	60d3      	str	r3, [r2, #12]
}
 8007eb0:	bf00      	nop
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	58024800 	.word	0x58024800

08007ec0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08c      	sub	sp, #48	; 0x30
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e3c8      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 8087 	beq.w	8007fee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ee0:	4b88      	ldr	r3, [pc, #544]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007eea:	4b86      	ldr	r3, [pc, #536]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef2:	2b10      	cmp	r3, #16
 8007ef4:	d007      	beq.n	8007f06 <HAL_RCC_OscConfig+0x46>
 8007ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef8:	2b18      	cmp	r3, #24
 8007efa:	d110      	bne.n	8007f1e <HAL_RCC_OscConfig+0x5e>
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d10b      	bne.n	8007f1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f06:	4b7f      	ldr	r3, [pc, #508]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d06c      	beq.n	8007fec <HAL_RCC_OscConfig+0x12c>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d168      	bne.n	8007fec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e3a2      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f26:	d106      	bne.n	8007f36 <HAL_RCC_OscConfig+0x76>
 8007f28:	4b76      	ldr	r3, [pc, #472]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a75      	ldr	r2, [pc, #468]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	e02e      	b.n	8007f94 <HAL_RCC_OscConfig+0xd4>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10c      	bne.n	8007f58 <HAL_RCC_OscConfig+0x98>
 8007f3e:	4b71      	ldr	r3, [pc, #452]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a70      	ldr	r2, [pc, #448]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	4b6e      	ldr	r3, [pc, #440]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a6d      	ldr	r2, [pc, #436]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	e01d      	b.n	8007f94 <HAL_RCC_OscConfig+0xd4>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f60:	d10c      	bne.n	8007f7c <HAL_RCC_OscConfig+0xbc>
 8007f62:	4b68      	ldr	r3, [pc, #416]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a67      	ldr	r2, [pc, #412]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f6c:	6013      	str	r3, [r2, #0]
 8007f6e:	4b65      	ldr	r3, [pc, #404]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a64      	ldr	r2, [pc, #400]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	e00b      	b.n	8007f94 <HAL_RCC_OscConfig+0xd4>
 8007f7c:	4b61      	ldr	r3, [pc, #388]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a60      	ldr	r2, [pc, #384]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	4b5e      	ldr	r3, [pc, #376]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a5d      	ldr	r2, [pc, #372]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d013      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f9c:	f7fa fb7a 	bl	8002694 <HAL_GetTick>
 8007fa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fa2:	e008      	b.n	8007fb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fa4:	f7fa fb76 	bl	8002694 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	2b64      	cmp	r3, #100	; 0x64
 8007fb0:	d901      	bls.n	8007fb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e356      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fb6:	4b53      	ldr	r3, [pc, #332]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0f0      	beq.n	8007fa4 <HAL_RCC_OscConfig+0xe4>
 8007fc2:	e014      	b.n	8007fee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc4:	f7fa fb66 	bl	8002694 <HAL_GetTick>
 8007fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fca:	e008      	b.n	8007fde <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fcc:	f7fa fb62 	bl	8002694 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b64      	cmp	r3, #100	; 0x64
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e342      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fde:	4b49      	ldr	r3, [pc, #292]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1f0      	bne.n	8007fcc <HAL_RCC_OscConfig+0x10c>
 8007fea:	e000      	b.n	8007fee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 808c 	beq.w	8008114 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ffc:	4b41      	ldr	r3, [pc, #260]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008004:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008006:	4b3f      	ldr	r3, [pc, #252]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8008008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <HAL_RCC_OscConfig+0x162>
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	2b18      	cmp	r3, #24
 8008016:	d137      	bne.n	8008088 <HAL_RCC_OscConfig+0x1c8>
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d132      	bne.n	8008088 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008022:	4b38      	ldr	r3, [pc, #224]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <HAL_RCC_OscConfig+0x17a>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e314      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800803a:	4b32      	ldr	r3, [pc, #200]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f023 0219 	bic.w	r2, r3, #25
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	492f      	ldr	r1, [pc, #188]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8008048:	4313      	orrs	r3, r2
 800804a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804c:	f7fa fb22 	bl	8002694 <HAL_GetTick>
 8008050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008052:	e008      	b.n	8008066 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008054:	f7fa fb1e 	bl	8002694 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d901      	bls.n	8008066 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e2fe      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008066:	4b27      	ldr	r3, [pc, #156]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0304 	and.w	r3, r3, #4
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0f0      	beq.n	8008054 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008072:	4b24      	ldr	r3, [pc, #144]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	061b      	lsls	r3, r3, #24
 8008080:	4920      	ldr	r1, [pc, #128]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8008082:	4313      	orrs	r3, r2
 8008084:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008086:	e045      	b.n	8008114 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d026      	beq.n	80080de <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008090:	4b1c      	ldr	r3, [pc, #112]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f023 0219 	bic.w	r2, r3, #25
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	4919      	ldr	r1, [pc, #100]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a2:	f7fa faf7 	bl	8002694 <HAL_GetTick>
 80080a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080a8:	e008      	b.n	80080bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080aa:	f7fa faf3 	bl	8002694 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e2d3      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080bc:	4b11      	ldr	r3, [pc, #68]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0f0      	beq.n	80080aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080c8:	4b0e      	ldr	r3, [pc, #56]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	061b      	lsls	r3, r3, #24
 80080d6:	490b      	ldr	r1, [pc, #44]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	604b      	str	r3, [r1, #4]
 80080dc:	e01a      	b.n	8008114 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a08      	ldr	r2, [pc, #32]	; (8008104 <HAL_RCC_OscConfig+0x244>)
 80080e4:	f023 0301 	bic.w	r3, r3, #1
 80080e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ea:	f7fa fad3 	bl	8002694 <HAL_GetTick>
 80080ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080f0:	e00a      	b.n	8008108 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080f2:	f7fa facf 	bl	8002694 <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d903      	bls.n	8008108 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e2af      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
 8008104:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008108:	4b96      	ldr	r3, [pc, #600]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1ee      	bne.n	80080f2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	2b00      	cmp	r3, #0
 800811e:	d06a      	beq.n	80081f6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008120:	4b90      	ldr	r3, [pc, #576]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008128:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800812a:	4b8e      	ldr	r3, [pc, #568]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 800812c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	2b08      	cmp	r3, #8
 8008134:	d007      	beq.n	8008146 <HAL_RCC_OscConfig+0x286>
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	2b18      	cmp	r3, #24
 800813a:	d11b      	bne.n	8008174 <HAL_RCC_OscConfig+0x2b4>
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f003 0303 	and.w	r3, r3, #3
 8008142:	2b01      	cmp	r3, #1
 8008144:	d116      	bne.n	8008174 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008146:	4b87      	ldr	r3, [pc, #540]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814e:	2b00      	cmp	r3, #0
 8008150:	d005      	beq.n	800815e <HAL_RCC_OscConfig+0x29e>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	2b80      	cmp	r3, #128	; 0x80
 8008158:	d001      	beq.n	800815e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e282      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800815e:	4b81      	ldr	r3, [pc, #516]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	061b      	lsls	r3, r3, #24
 800816c:	497d      	ldr	r1, [pc, #500]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 800816e:	4313      	orrs	r3, r2
 8008170:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008172:	e040      	b.n	80081f6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d023      	beq.n	80081c4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800817c:	4b79      	ldr	r3, [pc, #484]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a78      	ldr	r2, [pc, #480]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 8008182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008188:	f7fa fa84 	bl	8002694 <HAL_GetTick>
 800818c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800818e:	e008      	b.n	80081a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008190:	f7fa fa80 	bl	8002694 <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	2b02      	cmp	r3, #2
 800819c:	d901      	bls.n	80081a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e260      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081a2:	4b70      	ldr	r3, [pc, #448]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0f0      	beq.n	8008190 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081ae:	4b6d      	ldr	r3, [pc, #436]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	061b      	lsls	r3, r3, #24
 80081bc:	4969      	ldr	r1, [pc, #420]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	60cb      	str	r3, [r1, #12]
 80081c2:	e018      	b.n	80081f6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80081c4:	4b67      	ldr	r3, [pc, #412]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a66      	ldr	r2, [pc, #408]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 80081ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d0:	f7fa fa60 	bl	8002694 <HAL_GetTick>
 80081d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081d6:	e008      	b.n	80081ea <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80081d8:	f7fa fa5c 	bl	8002694 <HAL_GetTick>
 80081dc:	4602      	mov	r2, r0
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d901      	bls.n	80081ea <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e23c      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081ea:	4b5e      	ldr	r3, [pc, #376]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1f0      	bne.n	80081d8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0308 	and.w	r3, r3, #8
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d036      	beq.n	8008270 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d019      	beq.n	800823e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800820a:	4b56      	ldr	r3, [pc, #344]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 800820c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800820e:	4a55      	ldr	r2, [pc, #340]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 8008210:	f043 0301 	orr.w	r3, r3, #1
 8008214:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008216:	f7fa fa3d 	bl	8002694 <HAL_GetTick>
 800821a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800821c:	e008      	b.n	8008230 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800821e:	f7fa fa39 	bl	8002694 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d901      	bls.n	8008230 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e219      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008230:	4b4c      	ldr	r3, [pc, #304]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 8008232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0f0      	beq.n	800821e <HAL_RCC_OscConfig+0x35e>
 800823c:	e018      	b.n	8008270 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800823e:	4b49      	ldr	r3, [pc, #292]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 8008240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008242:	4a48      	ldr	r2, [pc, #288]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 8008244:	f023 0301 	bic.w	r3, r3, #1
 8008248:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800824a:	f7fa fa23 	bl	8002694 <HAL_GetTick>
 800824e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008250:	e008      	b.n	8008264 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008252:	f7fa fa1f 	bl	8002694 <HAL_GetTick>
 8008256:	4602      	mov	r2, r0
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	2b02      	cmp	r3, #2
 800825e:	d901      	bls.n	8008264 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e1ff      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008264:	4b3f      	ldr	r3, [pc, #252]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 8008266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f0      	bne.n	8008252 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0320 	and.w	r3, r3, #32
 8008278:	2b00      	cmp	r3, #0
 800827a:	d036      	beq.n	80082ea <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d019      	beq.n	80082b8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008284:	4b37      	ldr	r3, [pc, #220]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a36      	ldr	r2, [pc, #216]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 800828a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800828e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008290:	f7fa fa00 	bl	8002694 <HAL_GetTick>
 8008294:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008296:	e008      	b.n	80082aa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008298:	f7fa f9fc 	bl	8002694 <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d901      	bls.n	80082aa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e1dc      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082aa:	4b2e      	ldr	r3, [pc, #184]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0f0      	beq.n	8008298 <HAL_RCC_OscConfig+0x3d8>
 80082b6:	e018      	b.n	80082ea <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80082b8:	4b2a      	ldr	r3, [pc, #168]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a29      	ldr	r2, [pc, #164]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 80082be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80082c4:	f7fa f9e6 	bl	8002694 <HAL_GetTick>
 80082c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80082ca:	e008      	b.n	80082de <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082cc:	f7fa f9e2 	bl	8002694 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d901      	bls.n	80082de <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e1c2      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80082de:	4b21      	ldr	r3, [pc, #132]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1f0      	bne.n	80082cc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0304 	and.w	r3, r3, #4
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 8086 	beq.w	8008404 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80082f8:	4b1b      	ldr	r3, [pc, #108]	; (8008368 <HAL_RCC_OscConfig+0x4a8>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a1a      	ldr	r2, [pc, #104]	; (8008368 <HAL_RCC_OscConfig+0x4a8>)
 80082fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008302:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008304:	f7fa f9c6 	bl	8002694 <HAL_GetTick>
 8008308:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800830a:	e008      	b.n	800831e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800830c:	f7fa f9c2 	bl	8002694 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	2b64      	cmp	r3, #100	; 0x64
 8008318:	d901      	bls.n	800831e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e1a2      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800831e:	4b12      	ldr	r3, [pc, #72]	; (8008368 <HAL_RCC_OscConfig+0x4a8>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0f0      	beq.n	800830c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d106      	bne.n	8008340 <HAL_RCC_OscConfig+0x480>
 8008332:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 8008334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008336:	4a0b      	ldr	r2, [pc, #44]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 8008338:	f043 0301 	orr.w	r3, r3, #1
 800833c:	6713      	str	r3, [r2, #112]	; 0x70
 800833e:	e032      	b.n	80083a6 <HAL_RCC_OscConfig+0x4e6>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d111      	bne.n	800836c <HAL_RCC_OscConfig+0x4ac>
 8008348:	4b06      	ldr	r3, [pc, #24]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 800834a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834c:	4a05      	ldr	r2, [pc, #20]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 800834e:	f023 0301 	bic.w	r3, r3, #1
 8008352:	6713      	str	r3, [r2, #112]	; 0x70
 8008354:	4b03      	ldr	r3, [pc, #12]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 8008356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008358:	4a02      	ldr	r2, [pc, #8]	; (8008364 <HAL_RCC_OscConfig+0x4a4>)
 800835a:	f023 0304 	bic.w	r3, r3, #4
 800835e:	6713      	str	r3, [r2, #112]	; 0x70
 8008360:	e021      	b.n	80083a6 <HAL_RCC_OscConfig+0x4e6>
 8008362:	bf00      	nop
 8008364:	58024400 	.word	0x58024400
 8008368:	58024800 	.word	0x58024800
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	2b05      	cmp	r3, #5
 8008372:	d10c      	bne.n	800838e <HAL_RCC_OscConfig+0x4ce>
 8008374:	4b83      	ldr	r3, [pc, #524]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008378:	4a82      	ldr	r2, [pc, #520]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 800837a:	f043 0304 	orr.w	r3, r3, #4
 800837e:	6713      	str	r3, [r2, #112]	; 0x70
 8008380:	4b80      	ldr	r3, [pc, #512]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008384:	4a7f      	ldr	r2, [pc, #508]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008386:	f043 0301 	orr.w	r3, r3, #1
 800838a:	6713      	str	r3, [r2, #112]	; 0x70
 800838c:	e00b      	b.n	80083a6 <HAL_RCC_OscConfig+0x4e6>
 800838e:	4b7d      	ldr	r3, [pc, #500]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008392:	4a7c      	ldr	r2, [pc, #496]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008394:	f023 0301 	bic.w	r3, r3, #1
 8008398:	6713      	str	r3, [r2, #112]	; 0x70
 800839a:	4b7a      	ldr	r3, [pc, #488]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 800839c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800839e:	4a79      	ldr	r2, [pc, #484]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80083a0:	f023 0304 	bic.w	r3, r3, #4
 80083a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d015      	beq.n	80083da <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083ae:	f7fa f971 	bl	8002694 <HAL_GetTick>
 80083b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083b4:	e00a      	b.n	80083cc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083b6:	f7fa f96d 	bl	8002694 <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d901      	bls.n	80083cc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e14b      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083cc:	4b6d      	ldr	r3, [pc, #436]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80083ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0ee      	beq.n	80083b6 <HAL_RCC_OscConfig+0x4f6>
 80083d8:	e014      	b.n	8008404 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083da:	f7fa f95b 	bl	8002694 <HAL_GetTick>
 80083de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083e0:	e00a      	b.n	80083f8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083e2:	f7fa f957 	bl	8002694 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d901      	bls.n	80083f8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e135      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083f8:	4b62      	ldr	r3, [pc, #392]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80083fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1ee      	bne.n	80083e2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 812a 	beq.w	8008662 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800840e:	4b5d      	ldr	r3, [pc, #372]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008416:	2b18      	cmp	r3, #24
 8008418:	f000 80ba 	beq.w	8008590 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	2b02      	cmp	r3, #2
 8008422:	f040 8095 	bne.w	8008550 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008426:	4b57      	ldr	r3, [pc, #348]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a56      	ldr	r2, [pc, #344]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 800842c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008432:	f7fa f92f 	bl	8002694 <HAL_GetTick>
 8008436:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008438:	e008      	b.n	800844c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800843a:	f7fa f92b 	bl	8002694 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	2b02      	cmp	r3, #2
 8008446:	d901      	bls.n	800844c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e10b      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800844c:	4b4d      	ldr	r3, [pc, #308]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1f0      	bne.n	800843a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008458:	4b4a      	ldr	r3, [pc, #296]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 800845a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800845c:	4b4a      	ldr	r3, [pc, #296]	; (8008588 <HAL_RCC_OscConfig+0x6c8>)
 800845e:	4013      	ands	r3, r2
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008468:	0112      	lsls	r2, r2, #4
 800846a:	430a      	orrs	r2, r1
 800846c:	4945      	ldr	r1, [pc, #276]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 800846e:	4313      	orrs	r3, r2
 8008470:	628b      	str	r3, [r1, #40]	; 0x28
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008476:	3b01      	subs	r3, #1
 8008478:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008480:	3b01      	subs	r3, #1
 8008482:	025b      	lsls	r3, r3, #9
 8008484:	b29b      	uxth	r3, r3
 8008486:	431a      	orrs	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848c:	3b01      	subs	r3, #1
 800848e:	041b      	lsls	r3, r3, #16
 8008490:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008494:	431a      	orrs	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	3b01      	subs	r3, #1
 800849c:	061b      	lsls	r3, r3, #24
 800849e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084a2:	4938      	ldr	r1, [pc, #224]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80084a8:	4b36      	ldr	r3, [pc, #216]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	4a35      	ldr	r2, [pc, #212]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80084ae:	f023 0301 	bic.w	r3, r3, #1
 80084b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084b4:	4b33      	ldr	r3, [pc, #204]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80084b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084b8:	4b34      	ldr	r3, [pc, #208]	; (800858c <HAL_RCC_OscConfig+0x6cc>)
 80084ba:	4013      	ands	r3, r2
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80084c0:	00d2      	lsls	r2, r2, #3
 80084c2:	4930      	ldr	r1, [pc, #192]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80084c8:	4b2e      	ldr	r3, [pc, #184]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	f023 020c 	bic.w	r2, r3, #12
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d4:	492b      	ldr	r1, [pc, #172]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80084da:	4b2a      	ldr	r3, [pc, #168]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80084dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084de:	f023 0202 	bic.w	r2, r3, #2
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e6:	4927      	ldr	r1, [pc, #156]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80084ec:	4b25      	ldr	r3, [pc, #148]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	4a24      	ldr	r2, [pc, #144]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80084f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084f8:	4b22      	ldr	r3, [pc, #136]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	4a21      	ldr	r2, [pc, #132]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 80084fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008502:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008504:	4b1f      	ldr	r3, [pc, #124]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	4a1e      	ldr	r2, [pc, #120]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 800850a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800850e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008510:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008514:	4a1b      	ldr	r2, [pc, #108]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008516:	f043 0301 	orr.w	r3, r3, #1
 800851a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800851c:	4b19      	ldr	r3, [pc, #100]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a18      	ldr	r2, [pc, #96]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008528:	f7fa f8b4 	bl	8002694 <HAL_GetTick>
 800852c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800852e:	e008      	b.n	8008542 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008530:	f7fa f8b0 	bl	8002694 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b02      	cmp	r3, #2
 800853c:	d901      	bls.n	8008542 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e090      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008542:	4b10      	ldr	r3, [pc, #64]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0f0      	beq.n	8008530 <HAL_RCC_OscConfig+0x670>
 800854e:	e088      	b.n	8008662 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008550:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a0b      	ldr	r2, [pc, #44]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800855a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855c:	f7fa f89a 	bl	8002694 <HAL_GetTick>
 8008560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008562:	e008      	b.n	8008576 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008564:	f7fa f896 	bl	8002694 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b02      	cmp	r3, #2
 8008570:	d901      	bls.n	8008576 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e076      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008576:	4b03      	ldr	r3, [pc, #12]	; (8008584 <HAL_RCC_OscConfig+0x6c4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1f0      	bne.n	8008564 <HAL_RCC_OscConfig+0x6a4>
 8008582:	e06e      	b.n	8008662 <HAL_RCC_OscConfig+0x7a2>
 8008584:	58024400 	.word	0x58024400
 8008588:	fffffc0c 	.word	0xfffffc0c
 800858c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008590:	4b36      	ldr	r3, [pc, #216]	; (800866c <HAL_RCC_OscConfig+0x7ac>)
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008596:	4b35      	ldr	r3, [pc, #212]	; (800866c <HAL_RCC_OscConfig+0x7ac>)
 8008598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d031      	beq.n	8008608 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f003 0203 	and.w	r2, r3, #3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d12a      	bne.n	8008608 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	091b      	lsrs	r3, r3, #4
 80085b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085be:	429a      	cmp	r2, r3
 80085c0:	d122      	bne.n	8008608 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d11a      	bne.n	8008608 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	0a5b      	lsrs	r3, r3, #9
 80085d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d111      	bne.n	8008608 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	0c1b      	lsrs	r3, r3, #16
 80085e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d108      	bne.n	8008608 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	0e1b      	lsrs	r3, r3, #24
 80085fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008602:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008604:	429a      	cmp	r2, r3
 8008606:	d001      	beq.n	800860c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e02b      	b.n	8008664 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800860c:	4b17      	ldr	r3, [pc, #92]	; (800866c <HAL_RCC_OscConfig+0x7ac>)
 800860e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008610:	08db      	lsrs	r3, r3, #3
 8008612:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008616:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	429a      	cmp	r2, r3
 8008620:	d01f      	beq.n	8008662 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008622:	4b12      	ldr	r3, [pc, #72]	; (800866c <HAL_RCC_OscConfig+0x7ac>)
 8008624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008626:	4a11      	ldr	r2, [pc, #68]	; (800866c <HAL_RCC_OscConfig+0x7ac>)
 8008628:	f023 0301 	bic.w	r3, r3, #1
 800862c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800862e:	f7fa f831 	bl	8002694 <HAL_GetTick>
 8008632:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008634:	bf00      	nop
 8008636:	f7fa f82d 	bl	8002694 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	4293      	cmp	r3, r2
 8008640:	d0f9      	beq.n	8008636 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008642:	4b0a      	ldr	r3, [pc, #40]	; (800866c <HAL_RCC_OscConfig+0x7ac>)
 8008644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008646:	4b0a      	ldr	r3, [pc, #40]	; (8008670 <HAL_RCC_OscConfig+0x7b0>)
 8008648:	4013      	ands	r3, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800864e:	00d2      	lsls	r2, r2, #3
 8008650:	4906      	ldr	r1, [pc, #24]	; (800866c <HAL_RCC_OscConfig+0x7ac>)
 8008652:	4313      	orrs	r3, r2
 8008654:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008656:	4b05      	ldr	r3, [pc, #20]	; (800866c <HAL_RCC_OscConfig+0x7ac>)
 8008658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865a:	4a04      	ldr	r2, [pc, #16]	; (800866c <HAL_RCC_OscConfig+0x7ac>)
 800865c:	f043 0301 	orr.w	r3, r3, #1
 8008660:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3730      	adds	r7, #48	; 0x30
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	58024400 	.word	0x58024400
 8008670:	ffff0007 	.word	0xffff0007

08008674 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e19c      	b.n	80089c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008688:	4b8a      	ldr	r3, [pc, #552]	; (80088b4 <HAL_RCC_ClockConfig+0x240>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 030f 	and.w	r3, r3, #15
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d910      	bls.n	80086b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008696:	4b87      	ldr	r3, [pc, #540]	; (80088b4 <HAL_RCC_ClockConfig+0x240>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f023 020f 	bic.w	r2, r3, #15
 800869e:	4985      	ldr	r1, [pc, #532]	; (80088b4 <HAL_RCC_ClockConfig+0x240>)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086a6:	4b83      	ldr	r3, [pc, #524]	; (80088b4 <HAL_RCC_ClockConfig+0x240>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 030f 	and.w	r3, r3, #15
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d001      	beq.n	80086b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e184      	b.n	80089c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0304 	and.w	r3, r3, #4
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d010      	beq.n	80086e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	691a      	ldr	r2, [r3, #16]
 80086c8:	4b7b      	ldr	r3, [pc, #492]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d908      	bls.n	80086e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086d4:	4b78      	ldr	r3, [pc, #480]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	4975      	ldr	r1, [pc, #468]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0308 	and.w	r3, r3, #8
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d010      	beq.n	8008714 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	695a      	ldr	r2, [r3, #20]
 80086f6:	4b70      	ldr	r3, [pc, #448]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086fe:	429a      	cmp	r2, r3
 8008700:	d908      	bls.n	8008714 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008702:	4b6d      	ldr	r3, [pc, #436]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	496a      	ldr	r1, [pc, #424]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008710:	4313      	orrs	r3, r2
 8008712:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0310 	and.w	r3, r3, #16
 800871c:	2b00      	cmp	r3, #0
 800871e:	d010      	beq.n	8008742 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	699a      	ldr	r2, [r3, #24]
 8008724:	4b64      	ldr	r3, [pc, #400]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800872c:	429a      	cmp	r2, r3
 800872e:	d908      	bls.n	8008742 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008730:	4b61      	ldr	r3, [pc, #388]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	495e      	ldr	r1, [pc, #376]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 800873e:	4313      	orrs	r3, r2
 8008740:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0320 	and.w	r3, r3, #32
 800874a:	2b00      	cmp	r3, #0
 800874c:	d010      	beq.n	8008770 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	69da      	ldr	r2, [r3, #28]
 8008752:	4b59      	ldr	r3, [pc, #356]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800875a:	429a      	cmp	r2, r3
 800875c:	d908      	bls.n	8008770 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800875e:	4b56      	ldr	r3, [pc, #344]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	4953      	ldr	r1, [pc, #332]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 800876c:	4313      	orrs	r3, r2
 800876e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d010      	beq.n	800879e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	4b4d      	ldr	r3, [pc, #308]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	f003 030f 	and.w	r3, r3, #15
 8008788:	429a      	cmp	r2, r3
 800878a:	d908      	bls.n	800879e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800878c:	4b4a      	ldr	r3, [pc, #296]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	f023 020f 	bic.w	r2, r3, #15
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	4947      	ldr	r1, [pc, #284]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 800879a:	4313      	orrs	r3, r2
 800879c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d055      	beq.n	8008856 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80087aa:	4b43      	ldr	r3, [pc, #268]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	4940      	ldr	r1, [pc, #256]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d107      	bne.n	80087d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087c4:	4b3c      	ldr	r3, [pc, #240]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d121      	bne.n	8008814 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e0f6      	b.n	80089c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d107      	bne.n	80087ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087dc:	4b36      	ldr	r3, [pc, #216]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d115      	bne.n	8008814 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e0ea      	b.n	80089c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d107      	bne.n	8008804 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087f4:	4b30      	ldr	r3, [pc, #192]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d109      	bne.n	8008814 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e0de      	b.n	80089c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008804:	4b2c      	ldr	r3, [pc, #176]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e0d6      	b.n	80089c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008814:	4b28      	ldr	r3, [pc, #160]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	f023 0207 	bic.w	r2, r3, #7
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	4925      	ldr	r1, [pc, #148]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008822:	4313      	orrs	r3, r2
 8008824:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008826:	f7f9 ff35 	bl	8002694 <HAL_GetTick>
 800882a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800882c:	e00a      	b.n	8008844 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800882e:	f7f9 ff31 	bl	8002694 <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	f241 3288 	movw	r2, #5000	; 0x1388
 800883c:	4293      	cmp	r3, r2
 800883e:	d901      	bls.n	8008844 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e0be      	b.n	80089c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008844:	4b1c      	ldr	r3, [pc, #112]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	00db      	lsls	r3, r3, #3
 8008852:	429a      	cmp	r2, r3
 8008854:	d1eb      	bne.n	800882e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d010      	beq.n	8008884 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	4b14      	ldr	r3, [pc, #80]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	f003 030f 	and.w	r3, r3, #15
 800886e:	429a      	cmp	r2, r3
 8008870:	d208      	bcs.n	8008884 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008872:	4b11      	ldr	r3, [pc, #68]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	f023 020f 	bic.w	r2, r3, #15
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	490e      	ldr	r1, [pc, #56]	; (80088b8 <HAL_RCC_ClockConfig+0x244>)
 8008880:	4313      	orrs	r3, r2
 8008882:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008884:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <HAL_RCC_ClockConfig+0x240>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 030f 	and.w	r3, r3, #15
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	429a      	cmp	r2, r3
 8008890:	d214      	bcs.n	80088bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008892:	4b08      	ldr	r3, [pc, #32]	; (80088b4 <HAL_RCC_ClockConfig+0x240>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f023 020f 	bic.w	r2, r3, #15
 800889a:	4906      	ldr	r1, [pc, #24]	; (80088b4 <HAL_RCC_ClockConfig+0x240>)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	4313      	orrs	r3, r2
 80088a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088a2:	4b04      	ldr	r3, [pc, #16]	; (80088b4 <HAL_RCC_ClockConfig+0x240>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 030f 	and.w	r3, r3, #15
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d005      	beq.n	80088bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e086      	b.n	80089c2 <HAL_RCC_ClockConfig+0x34e>
 80088b4:	52002000 	.word	0x52002000
 80088b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0304 	and.w	r3, r3, #4
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d010      	beq.n	80088ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	691a      	ldr	r2, [r3, #16]
 80088cc:	4b3f      	ldr	r3, [pc, #252]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d208      	bcs.n	80088ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80088d8:	4b3c      	ldr	r3, [pc, #240]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	4939      	ldr	r1, [pc, #228]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0308 	and.w	r3, r3, #8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d010      	beq.n	8008918 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	695a      	ldr	r2, [r3, #20]
 80088fa:	4b34      	ldr	r3, [pc, #208]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008902:	429a      	cmp	r2, r3
 8008904:	d208      	bcs.n	8008918 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008906:	4b31      	ldr	r3, [pc, #196]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	492e      	ldr	r1, [pc, #184]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 8008914:	4313      	orrs	r3, r2
 8008916:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0310 	and.w	r3, r3, #16
 8008920:	2b00      	cmp	r3, #0
 8008922:	d010      	beq.n	8008946 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	4b28      	ldr	r3, [pc, #160]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008930:	429a      	cmp	r2, r3
 8008932:	d208      	bcs.n	8008946 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008934:	4b25      	ldr	r3, [pc, #148]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	4922      	ldr	r1, [pc, #136]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 8008942:	4313      	orrs	r3, r2
 8008944:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	d010      	beq.n	8008974 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	69da      	ldr	r2, [r3, #28]
 8008956:	4b1d      	ldr	r3, [pc, #116]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800895e:	429a      	cmp	r2, r3
 8008960:	d208      	bcs.n	8008974 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008962:	4b1a      	ldr	r3, [pc, #104]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	4917      	ldr	r1, [pc, #92]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 8008970:	4313      	orrs	r3, r2
 8008972:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008974:	f000 f834 	bl	80089e0 <HAL_RCC_GetSysClockFreq>
 8008978:	4602      	mov	r2, r0
 800897a:	4b14      	ldr	r3, [pc, #80]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	0a1b      	lsrs	r3, r3, #8
 8008980:	f003 030f 	and.w	r3, r3, #15
 8008984:	4912      	ldr	r1, [pc, #72]	; (80089d0 <HAL_RCC_ClockConfig+0x35c>)
 8008986:	5ccb      	ldrb	r3, [r1, r3]
 8008988:	f003 031f 	and.w	r3, r3, #31
 800898c:	fa22 f303 	lsr.w	r3, r2, r3
 8008990:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008992:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <HAL_RCC_ClockConfig+0x358>)
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	f003 030f 	and.w	r3, r3, #15
 800899a:	4a0d      	ldr	r2, [pc, #52]	; (80089d0 <HAL_RCC_ClockConfig+0x35c>)
 800899c:	5cd3      	ldrb	r3, [r2, r3]
 800899e:	f003 031f 	and.w	r3, r3, #31
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	fa22 f303 	lsr.w	r3, r2, r3
 80089a8:	4a0a      	ldr	r2, [pc, #40]	; (80089d4 <HAL_RCC_ClockConfig+0x360>)
 80089aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089ac:	4a0a      	ldr	r2, [pc, #40]	; (80089d8 <HAL_RCC_ClockConfig+0x364>)
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80089b2:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <HAL_RCC_ClockConfig+0x368>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7f9 fe22 	bl	8002600 <HAL_InitTick>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	58024400 	.word	0x58024400
 80089d0:	0801a73c 	.word	0x0801a73c
 80089d4:	24000008 	.word	0x24000008
 80089d8:	24000004 	.word	0x24000004
 80089dc:	2400000c 	.word	0x2400000c

080089e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b089      	sub	sp, #36	; 0x24
 80089e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089e6:	4bb3      	ldr	r3, [pc, #716]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089ee:	2b18      	cmp	r3, #24
 80089f0:	f200 8155 	bhi.w	8008c9e <HAL_RCC_GetSysClockFreq+0x2be>
 80089f4:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80089f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fa:	bf00      	nop
 80089fc:	08008a61 	.word	0x08008a61
 8008a00:	08008c9f 	.word	0x08008c9f
 8008a04:	08008c9f 	.word	0x08008c9f
 8008a08:	08008c9f 	.word	0x08008c9f
 8008a0c:	08008c9f 	.word	0x08008c9f
 8008a10:	08008c9f 	.word	0x08008c9f
 8008a14:	08008c9f 	.word	0x08008c9f
 8008a18:	08008c9f 	.word	0x08008c9f
 8008a1c:	08008a87 	.word	0x08008a87
 8008a20:	08008c9f 	.word	0x08008c9f
 8008a24:	08008c9f 	.word	0x08008c9f
 8008a28:	08008c9f 	.word	0x08008c9f
 8008a2c:	08008c9f 	.word	0x08008c9f
 8008a30:	08008c9f 	.word	0x08008c9f
 8008a34:	08008c9f 	.word	0x08008c9f
 8008a38:	08008c9f 	.word	0x08008c9f
 8008a3c:	08008a8d 	.word	0x08008a8d
 8008a40:	08008c9f 	.word	0x08008c9f
 8008a44:	08008c9f 	.word	0x08008c9f
 8008a48:	08008c9f 	.word	0x08008c9f
 8008a4c:	08008c9f 	.word	0x08008c9f
 8008a50:	08008c9f 	.word	0x08008c9f
 8008a54:	08008c9f 	.word	0x08008c9f
 8008a58:	08008c9f 	.word	0x08008c9f
 8008a5c:	08008a93 	.word	0x08008a93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a60:	4b94      	ldr	r3, [pc, #592]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0320 	and.w	r3, r3, #32
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d009      	beq.n	8008a80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a6c:	4b91      	ldr	r3, [pc, #580]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	08db      	lsrs	r3, r3, #3
 8008a72:	f003 0303 	and.w	r3, r3, #3
 8008a76:	4a90      	ldr	r2, [pc, #576]	; (8008cb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a78:	fa22 f303 	lsr.w	r3, r2, r3
 8008a7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008a7e:	e111      	b.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008a80:	4b8d      	ldr	r3, [pc, #564]	; (8008cb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a82:	61bb      	str	r3, [r7, #24]
      break;
 8008a84:	e10e      	b.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008a86:	4b8d      	ldr	r3, [pc, #564]	; (8008cbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a88:	61bb      	str	r3, [r7, #24]
      break;
 8008a8a:	e10b      	b.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008a8c:	4b8c      	ldr	r3, [pc, #560]	; (8008cc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008a8e:	61bb      	str	r3, [r7, #24]
      break;
 8008a90:	e108      	b.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a92:	4b88      	ldr	r3, [pc, #544]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a96:	f003 0303 	and.w	r3, r3, #3
 8008a9a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a9c:	4b85      	ldr	r3, [pc, #532]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa0:	091b      	lsrs	r3, r3, #4
 8008aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aa6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008aa8:	4b82      	ldr	r3, [pc, #520]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ab2:	4b80      	ldr	r3, [pc, #512]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab6:	08db      	lsrs	r3, r3, #3
 8008ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	fb02 f303 	mul.w	r3, r2, r3
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 80e1 	beq.w	8008c98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	f000 8083 	beq.w	8008be4 <HAL_RCC_GetSysClockFreq+0x204>
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	f200 80a1 	bhi.w	8008c28 <HAL_RCC_GetSysClockFreq+0x248>
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <HAL_RCC_GetSysClockFreq+0x114>
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d056      	beq.n	8008ba0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008af2:	e099      	b.n	8008c28 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008af4:	4b6f      	ldr	r3, [pc, #444]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0320 	and.w	r3, r3, #32
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d02d      	beq.n	8008b5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b00:	4b6c      	ldr	r3, [pc, #432]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	08db      	lsrs	r3, r3, #3
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	4a6b      	ldr	r2, [pc, #428]	; (8008cb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	ee07 3a90 	vmov	s15, r3
 8008b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	ee07 3a90 	vmov	s15, r3
 8008b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b2a:	4b62      	ldr	r3, [pc, #392]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008b5a:	e087      	b.n	8008c6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008cc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6e:	4b51      	ldr	r3, [pc, #324]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b76:	ee07 3a90 	vmov	s15, r3
 8008b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b82:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b9e:	e065      	b.n	8008c6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008baa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008ccc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bb2:	4b40      	ldr	r3, [pc, #256]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bc6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008be2:	e043      	b.n	8008c6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008cd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf6:	4b2f      	ldr	r3, [pc, #188]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c26:	e021      	b.n	8008c6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008ccc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c3a:	4b1e      	ldr	r3, [pc, #120]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008c6c:	4b11      	ldr	r3, [pc, #68]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c70:	0a5b      	lsrs	r3, r3, #9
 8008c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c76:	3301      	adds	r3, #1
 8008c78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	ee07 3a90 	vmov	s15, r3
 8008c80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c90:	ee17 3a90 	vmov	r3, s15
 8008c94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008c96:	e005      	b.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	61bb      	str	r3, [r7, #24]
      break;
 8008c9c:	e002      	b.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008c9e:	4b07      	ldr	r3, [pc, #28]	; (8008cbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ca0:	61bb      	str	r3, [r7, #24]
      break;
 8008ca2:	bf00      	nop
  }

  return sysclockfreq;
 8008ca4:	69bb      	ldr	r3, [r7, #24]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3724      	adds	r7, #36	; 0x24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	58024400 	.word	0x58024400
 8008cb8:	03d09000 	.word	0x03d09000
 8008cbc:	003d0900 	.word	0x003d0900
 8008cc0:	00f42400 	.word	0x00f42400
 8008cc4:	46000000 	.word	0x46000000
 8008cc8:	4c742400 	.word	0x4c742400
 8008ccc:	4a742400 	.word	0x4a742400
 8008cd0:	4b742400 	.word	0x4b742400

08008cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008cda:	f7ff fe81 	bl	80089e0 <HAL_RCC_GetSysClockFreq>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	4b10      	ldr	r3, [pc, #64]	; (8008d24 <HAL_RCC_GetHCLKFreq+0x50>)
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	0a1b      	lsrs	r3, r3, #8
 8008ce6:	f003 030f 	and.w	r3, r3, #15
 8008cea:	490f      	ldr	r1, [pc, #60]	; (8008d28 <HAL_RCC_GetHCLKFreq+0x54>)
 8008cec:	5ccb      	ldrb	r3, [r1, r3]
 8008cee:	f003 031f 	and.w	r3, r3, #31
 8008cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008cf8:	4b0a      	ldr	r3, [pc, #40]	; (8008d24 <HAL_RCC_GetHCLKFreq+0x50>)
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	f003 030f 	and.w	r3, r3, #15
 8008d00:	4a09      	ldr	r2, [pc, #36]	; (8008d28 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d02:	5cd3      	ldrb	r3, [r2, r3]
 8008d04:	f003 031f 	and.w	r3, r3, #31
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d0e:	4a07      	ldr	r2, [pc, #28]	; (8008d2c <HAL_RCC_GetHCLKFreq+0x58>)
 8008d10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d12:	4a07      	ldr	r2, [pc, #28]	; (8008d30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008d18:	4b04      	ldr	r3, [pc, #16]	; (8008d2c <HAL_RCC_GetHCLKFreq+0x58>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	58024400 	.word	0x58024400
 8008d28:	0801a73c 	.word	0x0801a73c
 8008d2c:	24000008 	.word	0x24000008
 8008d30:	24000004 	.word	0x24000004

08008d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008d38:	f7ff ffcc 	bl	8008cd4 <HAL_RCC_GetHCLKFreq>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	091b      	lsrs	r3, r3, #4
 8008d44:	f003 0307 	and.w	r3, r3, #7
 8008d48:	4904      	ldr	r1, [pc, #16]	; (8008d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d4a:	5ccb      	ldrb	r3, [r1, r3]
 8008d4c:	f003 031f 	and.w	r3, r3, #31
 8008d50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	58024400 	.word	0x58024400
 8008d5c:	0801a73c 	.word	0x0801a73c

08008d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008d64:	f7ff ffb6 	bl	8008cd4 <HAL_RCC_GetHCLKFreq>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	4b06      	ldr	r3, [pc, #24]	; (8008d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	0a1b      	lsrs	r3, r3, #8
 8008d70:	f003 0307 	and.w	r3, r3, #7
 8008d74:	4904      	ldr	r1, [pc, #16]	; (8008d88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d76:	5ccb      	ldrb	r3, [r1, r3]
 8008d78:	f003 031f 	and.w	r3, r3, #31
 8008d7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	58024400 	.word	0x58024400
 8008d88:	0801a73c 	.word	0x0801a73c

08008d8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d90:	b0c6      	sub	sp, #280	; 0x118
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008db0:	2500      	movs	r5, #0
 8008db2:	ea54 0305 	orrs.w	r3, r4, r5
 8008db6:	d049      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008dc2:	d02f      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008dc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008dc8:	d828      	bhi.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008dca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dce:	d01a      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008dd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dd4:	d822      	bhi.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dde:	d007      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008de0:	e01c      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de2:	4bab      	ldr	r3, [pc, #684]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de6:	4aaa      	ldr	r2, [pc, #680]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008dee:	e01a      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008df4:	3308      	adds	r3, #8
 8008df6:	2102      	movs	r1, #2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f002 fa9f 	bl	800b33c <RCCEx_PLL2_Config>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e04:	e00f      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e0a:	3328      	adds	r3, #40	; 0x28
 8008e0c:	2102      	movs	r1, #2
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f002 fb46 	bl	800b4a0 <RCCEx_PLL3_Config>
 8008e14:	4603      	mov	r3, r0
 8008e16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e1a:	e004      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008e22:	e000      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008e2e:	4b98      	ldr	r3, [pc, #608]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e3c:	4a94      	ldr	r2, [pc, #592]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e3e:	430b      	orrs	r3, r1
 8008e40:	6513      	str	r3, [r2, #80]	; 0x50
 8008e42:	e003      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e54:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008e58:	f04f 0900 	mov.w	r9, #0
 8008e5c:	ea58 0309 	orrs.w	r3, r8, r9
 8008e60:	d047      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d82a      	bhi.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008e6c:	a201      	add	r2, pc, #4	; (adr r2, 8008e74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e72:	bf00      	nop
 8008e74:	08008e89 	.word	0x08008e89
 8008e78:	08008e97 	.word	0x08008e97
 8008e7c:	08008ead 	.word	0x08008ead
 8008e80:	08008ecb 	.word	0x08008ecb
 8008e84:	08008ecb 	.word	0x08008ecb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e88:	4b81      	ldr	r3, [pc, #516]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	4a80      	ldr	r2, [pc, #512]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e94:	e01a      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f002 fa4c 	bl	800b33c <RCCEx_PLL2_Config>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008eaa:	e00f      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb0:	3328      	adds	r3, #40	; 0x28
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f002 faf3 	bl	800b4a0 <RCCEx_PLL3_Config>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ec0:	e004      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ec8:	e000      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10a      	bne.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ed4:	4b6e      	ldr	r3, [pc, #440]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed8:	f023 0107 	bic.w	r1, r3, #7
 8008edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee2:	4a6b      	ldr	r2, [pc, #428]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	6513      	str	r3, [r2, #80]	; 0x50
 8008ee8:	e003      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008eee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8008efe:	f04f 0b00 	mov.w	fp, #0
 8008f02:	ea5a 030b 	orrs.w	r3, sl, fp
 8008f06:	d05b      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f10:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008f14:	d03b      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008f16:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008f1a:	d834      	bhi.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008f1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f20:	d037      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f26:	d82e      	bhi.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008f28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f2c:	d033      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008f2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f32:	d828      	bhi.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f38:	d01a      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f3e:	d822      	bhi.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f48:	d007      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008f4a:	e01c      	b.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f4c:	4b50      	ldr	r3, [pc, #320]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	4a4f      	ldr	r2, [pc, #316]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f58:	e01e      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f5e:	3308      	adds	r3, #8
 8008f60:	2100      	movs	r1, #0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f002 f9ea 	bl	800b33c <RCCEx_PLL2_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f6e:	e013      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f74:	3328      	adds	r3, #40	; 0x28
 8008f76:	2100      	movs	r1, #0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f002 fa91 	bl	800b4a0 <RCCEx_PLL3_Config>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f84:	e008      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008f8c:	e004      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008f8e:	bf00      	nop
 8008f90:	e002      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008f92:	bf00      	nop
 8008f94:	e000      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10b      	bne.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008fa0:	4b3b      	ldr	r3, [pc, #236]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fa4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008fb0:	4a37      	ldr	r2, [pc, #220]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fb2:	430b      	orrs	r3, r1
 8008fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8008fb6:	e003      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008fbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008fd6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	d05d      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008fe8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008fec:	d03b      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008fee:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008ff2:	d834      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ff8:	d037      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008ffa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ffe:	d82e      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009000:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009004:	d033      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009006:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800900a:	d828      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800900c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009010:	d01a      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009016:	d822      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800901c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009020:	d007      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009022:	e01c      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009024:	4b1a      	ldr	r3, [pc, #104]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009028:	4a19      	ldr	r2, [pc, #100]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800902a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800902e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009030:	e01e      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009036:	3308      	adds	r3, #8
 8009038:	2100      	movs	r1, #0
 800903a:	4618      	mov	r0, r3
 800903c:	f002 f97e 	bl	800b33c <RCCEx_PLL2_Config>
 8009040:	4603      	mov	r3, r0
 8009042:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009046:	e013      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800904c:	3328      	adds	r3, #40	; 0x28
 800904e:	2100      	movs	r1, #0
 8009050:	4618      	mov	r0, r3
 8009052:	f002 fa25 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009056:	4603      	mov	r3, r0
 8009058:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800905c:	e008      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009064:	e004      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009066:	bf00      	nop
 8009068:	e002      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800906a:	bf00      	nop
 800906c:	e000      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800906e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009070:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10d      	bne.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009078:	4b05      	ldr	r3, [pc, #20]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800907a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800907c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009084:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009088:	4a01      	ldr	r2, [pc, #4]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800908a:	430b      	orrs	r3, r1
 800908c:	6593      	str	r3, [r2, #88]	; 0x58
 800908e:	e005      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009090:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009094:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009098:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800909c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80090a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80090ac:	2300      	movs	r3, #0
 80090ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090b2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4313      	orrs	r3, r2
 80090ba:	d03a      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80090bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c2:	2b30      	cmp	r3, #48	; 0x30
 80090c4:	d01f      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80090c6:	2b30      	cmp	r3, #48	; 0x30
 80090c8:	d819      	bhi.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x372>
 80090ca:	2b20      	cmp	r3, #32
 80090cc:	d00c      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80090ce:	2b20      	cmp	r3, #32
 80090d0:	d815      	bhi.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x372>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d019      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80090d6:	2b10      	cmp	r3, #16
 80090d8:	d111      	bne.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090da:	4baa      	ldr	r3, [pc, #680]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090de:	4aa9      	ldr	r2, [pc, #676]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80090e6:	e011      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ec:	3308      	adds	r3, #8
 80090ee:	2102      	movs	r1, #2
 80090f0:	4618      	mov	r0, r3
 80090f2:	f002 f923 	bl	800b33c <RCCEx_PLL2_Config>
 80090f6:	4603      	mov	r3, r0
 80090f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80090fc:	e006      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009104:	e002      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009106:	bf00      	nop
 8009108:	e000      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800910a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800910c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10a      	bne.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009114:	4b9b      	ldr	r3, [pc, #620]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009118:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800911c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009122:	4a98      	ldr	r2, [pc, #608]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009124:	430b      	orrs	r3, r1
 8009126:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009128:	e003      	b.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800912a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800912e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800913e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009142:	2300      	movs	r3, #0
 8009144:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009148:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800914c:	460b      	mov	r3, r1
 800914e:	4313      	orrs	r3, r2
 8009150:	d051      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800915c:	d035      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800915e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009162:	d82e      	bhi.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009164:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009168:	d031      	beq.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x442>
 800916a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800916e:	d828      	bhi.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009174:	d01a      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800917a:	d822      	bhi.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009184:	d007      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009186:	e01c      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009188:	4b7e      	ldr	r3, [pc, #504]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918c:	4a7d      	ldr	r2, [pc, #500]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800918e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009194:	e01c      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800919a:	3308      	adds	r3, #8
 800919c:	2100      	movs	r1, #0
 800919e:	4618      	mov	r0, r3
 80091a0:	f002 f8cc 	bl	800b33c <RCCEx_PLL2_Config>
 80091a4:	4603      	mov	r3, r0
 80091a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091aa:	e011      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091b0:	3328      	adds	r3, #40	; 0x28
 80091b2:	2100      	movs	r1, #0
 80091b4:	4618      	mov	r0, r3
 80091b6:	f002 f973 	bl	800b4a0 <RCCEx_PLL3_Config>
 80091ba:	4603      	mov	r3, r0
 80091bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091c0:	e006      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80091c8:	e002      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80091ca:	bf00      	nop
 80091cc:	e000      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80091ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80091d8:	4b6a      	ldr	r3, [pc, #424]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091dc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80091e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091e6:	4a67      	ldr	r2, [pc, #412]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091e8:	430b      	orrs	r3, r1
 80091ea:	6513      	str	r3, [r2, #80]	; 0x50
 80091ec:	e003      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80091f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009202:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009206:	2300      	movs	r3, #0
 8009208:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800920c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009210:	460b      	mov	r3, r1
 8009212:	4313      	orrs	r3, r2
 8009214:	d053      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800921a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800921c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009220:	d033      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009222:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009226:	d82c      	bhi.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009228:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800922c:	d02f      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800922e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009232:	d826      	bhi.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009234:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009238:	d02b      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800923a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800923e:	d820      	bhi.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009244:	d012      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800924a:	d81a      	bhi.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800924c:	2b00      	cmp	r3, #0
 800924e:	d022      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009254:	d115      	bne.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800925a:	3308      	adds	r3, #8
 800925c:	2101      	movs	r1, #1
 800925e:	4618      	mov	r0, r3
 8009260:	f002 f86c 	bl	800b33c <RCCEx_PLL2_Config>
 8009264:	4603      	mov	r3, r0
 8009266:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800926a:	e015      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800926c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009270:	3328      	adds	r3, #40	; 0x28
 8009272:	2101      	movs	r1, #1
 8009274:	4618      	mov	r0, r3
 8009276:	f002 f913 	bl	800b4a0 <RCCEx_PLL3_Config>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009280:	e00a      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009288:	e006      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800928a:	bf00      	nop
 800928c:	e004      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800928e:	bf00      	nop
 8009290:	e002      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009292:	bf00      	nop
 8009294:	e000      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009298:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10a      	bne.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80092a0:	4b38      	ldr	r3, [pc, #224]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092a4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80092a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ae:	4a35      	ldr	r2, [pc, #212]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092b0:	430b      	orrs	r3, r1
 80092b2:	6513      	str	r3, [r2, #80]	; 0x50
 80092b4:	e003      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80092be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80092ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80092ce:	2300      	movs	r3, #0
 80092d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80092d4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80092d8:	460b      	mov	r3, r1
 80092da:	4313      	orrs	r3, r2
 80092dc:	d058      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80092de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092ea:	d033      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80092ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092f0:	d82c      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80092f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f6:	d02f      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80092f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092fc:	d826      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80092fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009302:	d02b      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009304:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009308:	d820      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800930a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800930e:	d012      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009314:	d81a      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009316:	2b00      	cmp	r3, #0
 8009318:	d022      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800931a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800931e:	d115      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009324:	3308      	adds	r3, #8
 8009326:	2101      	movs	r1, #1
 8009328:	4618      	mov	r0, r3
 800932a:	f002 f807 	bl	800b33c <RCCEx_PLL2_Config>
 800932e:	4603      	mov	r3, r0
 8009330:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009334:	e015      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800933a:	3328      	adds	r3, #40	; 0x28
 800933c:	2101      	movs	r1, #1
 800933e:	4618      	mov	r0, r3
 8009340:	f002 f8ae 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009344:	4603      	mov	r3, r0
 8009346:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800934a:	e00a      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009352:	e006      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009354:	bf00      	nop
 8009356:	e004      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009358:	bf00      	nop
 800935a:	e002      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800935c:	bf00      	nop
 800935e:	e000      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009362:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10e      	bne.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800936a:	4b06      	ldr	r3, [pc, #24]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800936c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800936e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009376:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800937a:	4a02      	ldr	r2, [pc, #8]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800937c:	430b      	orrs	r3, r1
 800937e:	6593      	str	r3, [r2, #88]	; 0x58
 8009380:	e006      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009382:	bf00      	nop
 8009384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009388:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800938c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800939c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093a0:	2300      	movs	r3, #0
 80093a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80093a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4313      	orrs	r3, r2
 80093ae:	d037      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80093b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ba:	d00e      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80093bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c0:	d816      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d018      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80093c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093ca:	d111      	bne.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093cc:	4bc4      	ldr	r3, [pc, #784]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d0:	4ac3      	ldr	r2, [pc, #780]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80093d8:	e00f      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093de:	3308      	adds	r3, #8
 80093e0:	2101      	movs	r1, #1
 80093e2:	4618      	mov	r0, r3
 80093e4:	f001 ffaa 	bl	800b33c <RCCEx_PLL2_Config>
 80093e8:	4603      	mov	r3, r0
 80093ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80093ee:	e004      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80093f6:	e000      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80093f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10a      	bne.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009402:	4bb7      	ldr	r3, [pc, #732]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009406:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800940a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800940e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009410:	4ab3      	ldr	r2, [pc, #716]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009412:	430b      	orrs	r3, r1
 8009414:	6513      	str	r3, [r2, #80]	; 0x50
 8009416:	e003      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009418:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800941c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800942c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009430:	2300      	movs	r3, #0
 8009432:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009436:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800943a:	460b      	mov	r3, r1
 800943c:	4313      	orrs	r3, r2
 800943e:	d039      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009446:	2b03      	cmp	r3, #3
 8009448:	d81c      	bhi.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800944a:	a201      	add	r2, pc, #4	; (adr r2, 8009450 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800944c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009450:	0800948d 	.word	0x0800948d
 8009454:	08009461 	.word	0x08009461
 8009458:	0800946f 	.word	0x0800946f
 800945c:	0800948d 	.word	0x0800948d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009460:	4b9f      	ldr	r3, [pc, #636]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009464:	4a9e      	ldr	r2, [pc, #632]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800946a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800946c:	e00f      	b.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800946e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009472:	3308      	adds	r3, #8
 8009474:	2102      	movs	r1, #2
 8009476:	4618      	mov	r0, r3
 8009478:	f001 ff60 	bl	800b33c <RCCEx_PLL2_Config>
 800947c:	4603      	mov	r3, r0
 800947e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009482:	e004      	b.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800948a:	e000      	b.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800948c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800948e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10a      	bne.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009496:	4b92      	ldr	r3, [pc, #584]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800949a:	f023 0103 	bic.w	r1, r3, #3
 800949e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a4:	4a8e      	ldr	r2, [pc, #568]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094a6:	430b      	orrs	r3, r1
 80094a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80094aa:	e003      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094bc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80094c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094c4:	2300      	movs	r3, #0
 80094c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80094ce:	460b      	mov	r3, r1
 80094d0:	4313      	orrs	r3, r2
 80094d2:	f000 8099 	beq.w	8009608 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094d6:	4b83      	ldr	r3, [pc, #524]	; (80096e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a82      	ldr	r2, [pc, #520]	; (80096e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80094dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094e2:	f7f9 f8d7 	bl	8002694 <HAL_GetTick>
 80094e6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094ea:	e00b      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094ec:	f7f9 f8d2 	bl	8002694 <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	2b64      	cmp	r3, #100	; 0x64
 80094fa:	d903      	bls.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009502:	e005      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009504:	4b77      	ldr	r3, [pc, #476]	; (80096e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0ed      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009510:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009514:	2b00      	cmp	r3, #0
 8009516:	d173      	bne.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009518:	4b71      	ldr	r3, [pc, #452]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800951a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800951c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009520:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009524:	4053      	eors	r3, r2
 8009526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800952a:	2b00      	cmp	r3, #0
 800952c:	d015      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800952e:	4b6c      	ldr	r3, [pc, #432]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009536:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800953a:	4b69      	ldr	r3, [pc, #420]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800953c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953e:	4a68      	ldr	r2, [pc, #416]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009544:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009546:	4b66      	ldr	r3, [pc, #408]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954a:	4a65      	ldr	r2, [pc, #404]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800954c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009550:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009552:	4a63      	ldr	r2, [pc, #396]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009558:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800955a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800955e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009566:	d118      	bne.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009568:	f7f9 f894 	bl	8002694 <HAL_GetTick>
 800956c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009570:	e00d      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009572:	f7f9 f88f 	bl	8002694 <HAL_GetTick>
 8009576:	4602      	mov	r2, r0
 8009578:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800957c:	1ad2      	subs	r2, r2, r3
 800957e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009582:	429a      	cmp	r2, r3
 8009584:	d903      	bls.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800958c:	e005      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800958e:	4b54      	ldr	r3, [pc, #336]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009592:	f003 0302 	and.w	r3, r3, #2
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0eb      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800959a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d129      	bne.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095b2:	d10e      	bne.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80095b4:	4b4a      	ldr	r3, [pc, #296]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80095bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095c4:	091a      	lsrs	r2, r3, #4
 80095c6:	4b48      	ldr	r3, [pc, #288]	; (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80095c8:	4013      	ands	r3, r2
 80095ca:	4a45      	ldr	r2, [pc, #276]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095cc:	430b      	orrs	r3, r1
 80095ce:	6113      	str	r3, [r2, #16]
 80095d0:	e005      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x852>
 80095d2:	4b43      	ldr	r3, [pc, #268]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	4a42      	ldr	r2, [pc, #264]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80095dc:	6113      	str	r3, [r2, #16]
 80095de:	4b40      	ldr	r3, [pc, #256]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80095e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095ee:	4a3c      	ldr	r2, [pc, #240]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095f0:	430b      	orrs	r3, r1
 80095f2:	6713      	str	r3, [r2, #112]	; 0x70
 80095f4:	e008      	b.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80095fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80095fe:	e003      	b.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009600:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009604:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	f002 0301 	and.w	r3, r2, #1
 8009614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009618:	2300      	movs	r3, #0
 800961a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800961e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009622:	460b      	mov	r3, r1
 8009624:	4313      	orrs	r3, r2
 8009626:	f000 808f 	beq.w	8009748 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800962a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800962e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009630:	2b28      	cmp	r3, #40	; 0x28
 8009632:	d871      	bhi.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009634:	a201      	add	r2, pc, #4	; (adr r2, 800963c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963a:	bf00      	nop
 800963c:	08009721 	.word	0x08009721
 8009640:	08009719 	.word	0x08009719
 8009644:	08009719 	.word	0x08009719
 8009648:	08009719 	.word	0x08009719
 800964c:	08009719 	.word	0x08009719
 8009650:	08009719 	.word	0x08009719
 8009654:	08009719 	.word	0x08009719
 8009658:	08009719 	.word	0x08009719
 800965c:	080096ed 	.word	0x080096ed
 8009660:	08009719 	.word	0x08009719
 8009664:	08009719 	.word	0x08009719
 8009668:	08009719 	.word	0x08009719
 800966c:	08009719 	.word	0x08009719
 8009670:	08009719 	.word	0x08009719
 8009674:	08009719 	.word	0x08009719
 8009678:	08009719 	.word	0x08009719
 800967c:	08009703 	.word	0x08009703
 8009680:	08009719 	.word	0x08009719
 8009684:	08009719 	.word	0x08009719
 8009688:	08009719 	.word	0x08009719
 800968c:	08009719 	.word	0x08009719
 8009690:	08009719 	.word	0x08009719
 8009694:	08009719 	.word	0x08009719
 8009698:	08009719 	.word	0x08009719
 800969c:	08009721 	.word	0x08009721
 80096a0:	08009719 	.word	0x08009719
 80096a4:	08009719 	.word	0x08009719
 80096a8:	08009719 	.word	0x08009719
 80096ac:	08009719 	.word	0x08009719
 80096b0:	08009719 	.word	0x08009719
 80096b4:	08009719 	.word	0x08009719
 80096b8:	08009719 	.word	0x08009719
 80096bc:	08009721 	.word	0x08009721
 80096c0:	08009719 	.word	0x08009719
 80096c4:	08009719 	.word	0x08009719
 80096c8:	08009719 	.word	0x08009719
 80096cc:	08009719 	.word	0x08009719
 80096d0:	08009719 	.word	0x08009719
 80096d4:	08009719 	.word	0x08009719
 80096d8:	08009719 	.word	0x08009719
 80096dc:	08009721 	.word	0x08009721
 80096e0:	58024400 	.word	0x58024400
 80096e4:	58024800 	.word	0x58024800
 80096e8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f0:	3308      	adds	r3, #8
 80096f2:	2101      	movs	r1, #1
 80096f4:	4618      	mov	r0, r3
 80096f6:	f001 fe21 	bl	800b33c <RCCEx_PLL2_Config>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009700:	e00f      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009706:	3328      	adds	r3, #40	; 0x28
 8009708:	2101      	movs	r1, #1
 800970a:	4618      	mov	r0, r3
 800970c:	f001 fec8 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009710:	4603      	mov	r3, r0
 8009712:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009716:	e004      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800971e:	e000      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009722:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10a      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800972a:	4bbf      	ldr	r3, [pc, #764]	; (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800972c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800972e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009738:	4abb      	ldr	r2, [pc, #748]	; (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800973a:	430b      	orrs	r3, r1
 800973c:	6553      	str	r3, [r2, #84]	; 0x54
 800973e:	e003      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009740:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009744:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	f002 0302 	and.w	r3, r2, #2
 8009754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009758:	2300      	movs	r3, #0
 800975a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800975e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009762:	460b      	mov	r3, r1
 8009764:	4313      	orrs	r3, r2
 8009766:	d041      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800976e:	2b05      	cmp	r3, #5
 8009770:	d824      	bhi.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009772:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009778:	080097c5 	.word	0x080097c5
 800977c:	08009791 	.word	0x08009791
 8009780:	080097a7 	.word	0x080097a7
 8009784:	080097c5 	.word	0x080097c5
 8009788:	080097c5 	.word	0x080097c5
 800978c:	080097c5 	.word	0x080097c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009794:	3308      	adds	r3, #8
 8009796:	2101      	movs	r1, #1
 8009798:	4618      	mov	r0, r3
 800979a:	f001 fdcf 	bl	800b33c <RCCEx_PLL2_Config>
 800979e:	4603      	mov	r3, r0
 80097a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80097a4:	e00f      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097aa:	3328      	adds	r3, #40	; 0x28
 80097ac:	2101      	movs	r1, #1
 80097ae:	4618      	mov	r0, r3
 80097b0:	f001 fe76 	bl	800b4a0 <RCCEx_PLL3_Config>
 80097b4:	4603      	mov	r3, r0
 80097b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80097ba:	e004      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80097c2:	e000      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80097c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10a      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80097ce:	4b96      	ldr	r3, [pc, #600]	; (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d2:	f023 0107 	bic.w	r1, r3, #7
 80097d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097dc:	4a92      	ldr	r2, [pc, #584]	; (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097de:	430b      	orrs	r3, r1
 80097e0:	6553      	str	r3, [r2, #84]	; 0x54
 80097e2:	e003      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80097ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	f002 0304 	and.w	r3, r2, #4
 80097f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80097fc:	2300      	movs	r3, #0
 80097fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009802:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009806:	460b      	mov	r3, r1
 8009808:	4313      	orrs	r3, r2
 800980a:	d044      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800980c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009814:	2b05      	cmp	r3, #5
 8009816:	d825      	bhi.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009818:	a201      	add	r2, pc, #4	; (adr r2, 8009820 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800981a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981e:	bf00      	nop
 8009820:	0800986d 	.word	0x0800986d
 8009824:	08009839 	.word	0x08009839
 8009828:	0800984f 	.word	0x0800984f
 800982c:	0800986d 	.word	0x0800986d
 8009830:	0800986d 	.word	0x0800986d
 8009834:	0800986d 	.word	0x0800986d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800983c:	3308      	adds	r3, #8
 800983e:	2101      	movs	r1, #1
 8009840:	4618      	mov	r0, r3
 8009842:	f001 fd7b 	bl	800b33c <RCCEx_PLL2_Config>
 8009846:	4603      	mov	r3, r0
 8009848:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800984c:	e00f      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800984e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009852:	3328      	adds	r3, #40	; 0x28
 8009854:	2101      	movs	r1, #1
 8009856:	4618      	mov	r0, r3
 8009858:	f001 fe22 	bl	800b4a0 <RCCEx_PLL3_Config>
 800985c:	4603      	mov	r3, r0
 800985e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009862:	e004      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800986a:	e000      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800986c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800986e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10b      	bne.n	800988e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009876:	4b6c      	ldr	r3, [pc, #432]	; (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800987a:	f023 0107 	bic.w	r1, r3, #7
 800987e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009886:	4a68      	ldr	r2, [pc, #416]	; (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009888:	430b      	orrs	r3, r1
 800988a:	6593      	str	r3, [r2, #88]	; 0x58
 800988c:	e003      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800988e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009892:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f002 0320 	and.w	r3, r2, #32
 80098a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80098a6:	2300      	movs	r3, #0
 80098a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80098ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4313      	orrs	r3, r2
 80098b4:	d055      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80098b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098c2:	d033      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80098c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098c8:	d82c      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80098ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ce:	d02f      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80098d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d4:	d826      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80098d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098da:	d02b      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80098dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098e0:	d820      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80098e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e6:	d012      	beq.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80098e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098ec:	d81a      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d022      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80098f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098f6:	d115      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098fc:	3308      	adds	r3, #8
 80098fe:	2100      	movs	r1, #0
 8009900:	4618      	mov	r0, r3
 8009902:	f001 fd1b 	bl	800b33c <RCCEx_PLL2_Config>
 8009906:	4603      	mov	r3, r0
 8009908:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800990c:	e015      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800990e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009912:	3328      	adds	r3, #40	; 0x28
 8009914:	2102      	movs	r1, #2
 8009916:	4618      	mov	r0, r3
 8009918:	f001 fdc2 	bl	800b4a0 <RCCEx_PLL3_Config>
 800991c:	4603      	mov	r3, r0
 800991e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009922:	e00a      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800992a:	e006      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800992c:	bf00      	nop
 800992e:	e004      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009930:	bf00      	nop
 8009932:	e002      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009934:	bf00      	nop
 8009936:	e000      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800993a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10b      	bne.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009942:	4b39      	ldr	r3, [pc, #228]	; (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009946:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800994a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800994e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009952:	4a35      	ldr	r2, [pc, #212]	; (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009954:	430b      	orrs	r3, r1
 8009956:	6553      	str	r3, [r2, #84]	; 0x54
 8009958:	e003      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800995a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800995e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800996e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009972:	2300      	movs	r3, #0
 8009974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009978:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800997c:	460b      	mov	r3, r1
 800997e:	4313      	orrs	r3, r2
 8009980:	d058      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800998a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800998e:	d033      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009990:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009994:	d82c      	bhi.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800999a:	d02f      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800999c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a0:	d826      	bhi.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80099a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099a6:	d02b      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80099a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099ac:	d820      	bhi.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80099ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099b2:	d012      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80099b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099b8:	d81a      	bhi.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d022      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80099be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099c2:	d115      	bne.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099c8:	3308      	adds	r3, #8
 80099ca:	2100      	movs	r1, #0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f001 fcb5 	bl	800b33c <RCCEx_PLL2_Config>
 80099d2:	4603      	mov	r3, r0
 80099d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80099d8:	e015      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099de:	3328      	adds	r3, #40	; 0x28
 80099e0:	2102      	movs	r1, #2
 80099e2:	4618      	mov	r0, r3
 80099e4:	f001 fd5c 	bl	800b4a0 <RCCEx_PLL3_Config>
 80099e8:	4603      	mov	r3, r0
 80099ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80099ee:	e00a      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80099f6:	e006      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80099f8:	bf00      	nop
 80099fa:	e004      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80099fc:	bf00      	nop
 80099fe:	e002      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009a00:	bf00      	nop
 8009a02:	e000      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10e      	bne.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a0e:	4b06      	ldr	r3, [pc, #24]	; (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a12:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a1e:	4a02      	ldr	r2, [pc, #8]	; (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a20:	430b      	orrs	r3, r1
 8009a22:	6593      	str	r3, [r2, #88]	; 0x58
 8009a24:	e006      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009a26:	bf00      	nop
 8009a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009a40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a44:	2300      	movs	r3, #0
 8009a46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4313      	orrs	r3, r2
 8009a52:	d055      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009a60:	d033      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009a62:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009a66:	d82c      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a6c:	d02f      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a72:	d826      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009a74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009a78:	d02b      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009a7a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009a7e:	d820      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a84:	d012      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a8a:	d81a      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d022      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a94:	d115      	bne.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a9a:	3308      	adds	r3, #8
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f001 fc4c 	bl	800b33c <RCCEx_PLL2_Config>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009aaa:	e015      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ab0:	3328      	adds	r3, #40	; 0x28
 8009ab2:	2102      	movs	r1, #2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f001 fcf3 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009ac0:	e00a      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009ac8:	e006      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009aca:	bf00      	nop
 8009acc:	e004      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009ace:	bf00      	nop
 8009ad0:	e002      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009ad2:	bf00      	nop
 8009ad4:	e000      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10b      	bne.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ae0:	4ba0      	ldr	r3, [pc, #640]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009af0:	4a9c      	ldr	r2, [pc, #624]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009af2:	430b      	orrs	r3, r1
 8009af4:	6593      	str	r3, [r2, #88]	; 0x58
 8009af6:	e003      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009afc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	f002 0308 	and.w	r3, r2, #8
 8009b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b10:	2300      	movs	r3, #0
 8009b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b16:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	d01e      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b2c:	d10c      	bne.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b32:	3328      	adds	r3, #40	; 0x28
 8009b34:	2102      	movs	r1, #2
 8009b36:	4618      	mov	r0, r3
 8009b38:	f001 fcb2 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d002      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009b48:	4b86      	ldr	r3, [pc, #536]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b58:	4a82      	ldr	r2, [pc, #520]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b5a:	430b      	orrs	r3, r1
 8009b5c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f002 0310 	and.w	r3, r2, #16
 8009b6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b74:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	d01e      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b8a:	d10c      	bne.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b90:	3328      	adds	r3, #40	; 0x28
 8009b92:	2102      	movs	r1, #2
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 fc83 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ba6:	4b6f      	ldr	r3, [pc, #444]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009baa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009bb6:	4a6b      	ldr	r2, [pc, #428]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bb8:	430b      	orrs	r3, r1
 8009bba:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009bc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bca:	2300      	movs	r3, #0
 8009bcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bce:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	d03e      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009be4:	d022      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009be6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bea:	d81b      	bhi.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d003      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bf4:	d00b      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009bf6:	e015      	b.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	2100      	movs	r1, #0
 8009c00:	4618      	mov	r0, r3
 8009c02:	f001 fb9b 	bl	800b33c <RCCEx_PLL2_Config>
 8009c06:	4603      	mov	r3, r0
 8009c08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c0c:	e00f      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c12:	3328      	adds	r3, #40	; 0x28
 8009c14:	2102      	movs	r1, #2
 8009c16:	4618      	mov	r0, r3
 8009c18:	f001 fc42 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c22:	e004      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c2a:	e000      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10b      	bne.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c36:	4b4b      	ldr	r3, [pc, #300]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c46:	4a47      	ldr	r2, [pc, #284]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c48:	430b      	orrs	r3, r1
 8009c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8009c4c:	e003      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009c62:	673b      	str	r3, [r7, #112]	; 0x70
 8009c64:	2300      	movs	r3, #0
 8009c66:	677b      	str	r3, [r7, #116]	; 0x74
 8009c68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	d03b      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c7e:	d01f      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009c80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c84:	d818      	bhi.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c8a:	d003      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c90:	d007      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009c92:	e011      	b.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c94:	4b33      	ldr	r3, [pc, #204]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c98:	4a32      	ldr	r2, [pc, #200]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ca0:	e00f      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ca6:	3328      	adds	r3, #40	; 0x28
 8009ca8:	2101      	movs	r1, #1
 8009caa:	4618      	mov	r0, r3
 8009cac:	f001 fbf8 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009cb6:	e004      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009cbe:	e000      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cc2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10b      	bne.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cca:	4b26      	ldr	r3, [pc, #152]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cda:	4a22      	ldr	r2, [pc, #136]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cdc:	430b      	orrs	r3, r1
 8009cde:	6553      	str	r3, [r2, #84]	; 0x54
 8009ce0:	e003      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ce6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cfc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009d00:	460b      	mov	r3, r1
 8009d02:	4313      	orrs	r3, r2
 8009d04:	d034      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d003      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d14:	d007      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009d16:	e011      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d18:	4b12      	ldr	r3, [pc, #72]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1c:	4a11      	ldr	r2, [pc, #68]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d24:	e00e      	b.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	2102      	movs	r1, #2
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f001 fb04 	bl	800b33c <RCCEx_PLL2_Config>
 8009d34:	4603      	mov	r3, r0
 8009d36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d3a:	e003      	b.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10d      	bne.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009d4c:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d5a:	4a02      	ldr	r2, [pc, #8]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d5c:	430b      	orrs	r3, r1
 8009d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d60:	e006      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009d62:	bf00      	nop
 8009d64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8009d7e:	2300      	movs	r3, #0
 8009d80:	667b      	str	r3, [r7, #100]	; 0x64
 8009d82:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009d86:	460b      	mov	r3, r1
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	d00c      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d90:	3328      	adds	r3, #40	; 0x28
 8009d92:	2102      	movs	r1, #2
 8009d94:	4618      	mov	r0, r3
 8009d96:	f001 fb83 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009db2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009db4:	2300      	movs	r3, #0
 8009db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009db8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	d036      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dcc:	d018      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dd2:	d811      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dd8:	d014      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009dda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dde:	d80b      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d011      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009de8:	d106      	bne.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dea:	4bb7      	ldr	r3, [pc, #732]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dee:	4ab6      	ldr	r2, [pc, #728]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009df4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009df6:	e008      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009dfe:	e004      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009e00:	bf00      	nop
 8009e02:	e002      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009e04:	bf00      	nop
 8009e06:	e000      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10a      	bne.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e12:	4bad      	ldr	r3, [pc, #692]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e20:	4aa9      	ldr	r2, [pc, #676]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e22:	430b      	orrs	r3, r1
 8009e24:	6553      	str	r3, [r2, #84]	; 0x54
 8009e26:	e003      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009e3c:	653b      	str	r3, [r7, #80]	; 0x50
 8009e3e:	2300      	movs	r3, #0
 8009e40:	657b      	str	r3, [r7, #84]	; 0x54
 8009e42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009e46:	460b      	mov	r3, r1
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	d009      	beq.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e4c:	4b9e      	ldr	r3, [pc, #632]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e5a:	4a9b      	ldr	r2, [pc, #620]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e6e:	2300      	movs	r3, #0
 8009e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e72:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009e76:	460b      	mov	r3, r1
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	d009      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e7c:	4b92      	ldr	r3, [pc, #584]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e80:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e8a:	4a8f      	ldr	r2, [pc, #572]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e8c:	430b      	orrs	r3, r1
 8009e8e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8009ea2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	d00e      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009eac:	4b86      	ldr	r3, [pc, #536]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	4a85      	ldr	r2, [pc, #532]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009eb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009eb6:	6113      	str	r3, [r2, #16]
 8009eb8:	4b83      	ldr	r3, [pc, #524]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009eba:	6919      	ldr	r1, [r3, #16]
 8009ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ec4:	4a80      	ldr	r2, [pc, #512]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ec6:	430b      	orrs	r3, r1
 8009ec8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ed8:	2300      	movs	r3, #0
 8009eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009edc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	d009      	beq.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ee6:	4b78      	ldr	r3, [pc, #480]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef4:	4a74      	ldr	r2, [pc, #464]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ef6:	430b      	orrs	r3, r1
 8009ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f02:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009f06:	633b      	str	r3, [r7, #48]	; 0x30
 8009f08:	2300      	movs	r3, #0
 8009f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f0c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009f10:	460b      	mov	r3, r1
 8009f12:	4313      	orrs	r3, r2
 8009f14:	d00a      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009f16:	4b6c      	ldr	r3, [pc, #432]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f1a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f26:	4a68      	ldr	r2, [pc, #416]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f28:	430b      	orrs	r3, r1
 8009f2a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	2100      	movs	r1, #0
 8009f36:	62b9      	str	r1, [r7, #40]	; 0x28
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f3e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009f42:	460b      	mov	r3, r1
 8009f44:	4313      	orrs	r3, r2
 8009f46:	d011      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f4c:	3308      	adds	r3, #8
 8009f4e:	2100      	movs	r1, #0
 8009f50:	4618      	mov	r0, r3
 8009f52:	f001 f9f3 	bl	800b33c <RCCEx_PLL2_Config>
 8009f56:	4603      	mov	r3, r0
 8009f58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d003      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	2100      	movs	r1, #0
 8009f76:	6239      	str	r1, [r7, #32]
 8009f78:	f003 0302 	and.w	r3, r3, #2
 8009f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f7e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009f82:	460b      	mov	r3, r1
 8009f84:	4313      	orrs	r3, r2
 8009f86:	d011      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f8c:	3308      	adds	r3, #8
 8009f8e:	2101      	movs	r1, #1
 8009f90:	4618      	mov	r0, r3
 8009f92:	f001 f9d3 	bl	800b33c <RCCEx_PLL2_Config>
 8009f96:	4603      	mov	r3, r0
 8009f98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d003      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fa8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	61b9      	str	r1, [r7, #24]
 8009fb8:	f003 0304 	and.w	r3, r3, #4
 8009fbc:	61fb      	str	r3, [r7, #28]
 8009fbe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	d011      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fcc:	3308      	adds	r3, #8
 8009fce:	2102      	movs	r1, #2
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f001 f9b3 	bl	800b33c <RCCEx_PLL2_Config>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fe8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	6139      	str	r1, [r7, #16]
 8009ff8:	f003 0308 	and.w	r3, r3, #8
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a002:	460b      	mov	r3, r1
 800a004:	4313      	orrs	r3, r2
 800a006:	d011      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a00c:	3328      	adds	r3, #40	; 0x28
 800a00e:	2100      	movs	r1, #0
 800a010:	4618      	mov	r0, r3
 800a012:	f001 fa45 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a016:	4603      	mov	r3, r0
 800a018:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800a01c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a020:	2b00      	cmp	r3, #0
 800a022:	d003      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a024:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a028:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a034:	2100      	movs	r1, #0
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	f003 0310 	and.w	r3, r3, #16
 800a03c:	60fb      	str	r3, [r7, #12]
 800a03e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a042:	460b      	mov	r3, r1
 800a044:	4313      	orrs	r3, r2
 800a046:	d011      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04c:	3328      	adds	r3, #40	; 0x28
 800a04e:	2101      	movs	r1, #1
 800a050:	4618      	mov	r0, r3
 800a052:	f001 fa25 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a056:	4603      	mov	r3, r0
 800a058:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a05c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a060:	2b00      	cmp	r3, #0
 800a062:	d003      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a064:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a068:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	2100      	movs	r1, #0
 800a076:	6039      	str	r1, [r7, #0]
 800a078:	f003 0320 	and.w	r3, r3, #32
 800a07c:	607b      	str	r3, [r7, #4]
 800a07e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a082:	460b      	mov	r3, r1
 800a084:	4313      	orrs	r3, r2
 800a086:	d011      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a08c:	3328      	adds	r3, #40	; 0x28
 800a08e:	2102      	movs	r1, #2
 800a090:	4618      	mov	r0, r3
 800a092:	f001 fa05 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a096:	4603      	mov	r3, r0
 800a098:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a09c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d003      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800a0ac:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d101      	bne.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	e000      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0c6:	bf00      	nop
 800a0c8:	58024400 	.word	0x58024400

0800a0cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b090      	sub	sp, #64	; 0x40
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a0d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0da:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a0de:	430b      	orrs	r3, r1
 800a0e0:	f040 8094 	bne.w	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a0e4:	4b9b      	ldr	r3, [pc, #620]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0e8:	f003 0307 	and.w	r3, r3, #7
 800a0ec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	2b04      	cmp	r3, #4
 800a0f2:	f200 8087 	bhi.w	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a0f6:	a201      	add	r2, pc, #4	; (adr r2, 800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fc:	0800a111 	.word	0x0800a111
 800a100:	0800a139 	.word	0x0800a139
 800a104:	0800a161 	.word	0x0800a161
 800a108:	0800a1fd 	.word	0x0800a1fd
 800a10c:	0800a189 	.word	0x0800a189
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a110:	4b90      	ldr	r3, [pc, #576]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a11c:	d108      	bne.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a11e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a122:	4618      	mov	r0, r3
 800a124:	f000 ff62 	bl	800afec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a12c:	f000 bc93 	b.w	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a134:	f000 bc8f 	b.w	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a138:	4b86      	ldr	r3, [pc, #536]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a140:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a144:	d108      	bne.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a146:	f107 0318 	add.w	r3, r7, #24
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 fca6 	bl	800aa9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a154:	f000 bc7f 	b.w	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a158:	2300      	movs	r3, #0
 800a15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a15c:	f000 bc7b 	b.w	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a160:	4b7c      	ldr	r3, [pc, #496]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a16c:	d108      	bne.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a16e:	f107 030c 	add.w	r3, r7, #12
 800a172:	4618      	mov	r0, r3
 800a174:	f000 fde6 	bl	800ad44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a17c:	f000 bc6b 	b.w	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a184:	f000 bc67 	b.w	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a188:	4b72      	ldr	r3, [pc, #456]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a18a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a18c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a190:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a192:	4b70      	ldr	r3, [pc, #448]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 0304 	and.w	r3, r3, #4
 800a19a:	2b04      	cmp	r3, #4
 800a19c:	d10c      	bne.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d109      	bne.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1a4:	4b6b      	ldr	r3, [pc, #428]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	08db      	lsrs	r3, r3, #3
 800a1aa:	f003 0303 	and.w	r3, r3, #3
 800a1ae:	4a6a      	ldr	r2, [pc, #424]	; (800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a1b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1b6:	e01f      	b.n	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1b8:	4b66      	ldr	r3, [pc, #408]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1c4:	d106      	bne.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1cc:	d102      	bne.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1ce:	4b63      	ldr	r3, [pc, #396]	; (800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1d2:	e011      	b.n	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1d4:	4b5f      	ldr	r3, [pc, #380]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1e0:	d106      	bne.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1e8:	d102      	bne.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1ea:	4b5d      	ldr	r3, [pc, #372]	; (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1ee:	e003      	b.n	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a1f4:	f000 bc2f 	b.w	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a1f8:	f000 bc2d 	b.w	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a1fc:	4b59      	ldr	r3, [pc, #356]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a200:	f000 bc29 	b.w	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a208:	f000 bc25 	b.w	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a20c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a210:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a214:	430b      	orrs	r3, r1
 800a216:	f040 80a7 	bne.w	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a21a:	4b4e      	ldr	r3, [pc, #312]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a222:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a22a:	d054      	beq.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a232:	f200 808b 	bhi.w	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a23c:	f000 8083 	beq.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a242:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a246:	f200 8081 	bhi.w	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a250:	d02f      	beq.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a258:	d878      	bhi.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d004      	beq.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a262:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a266:	d012      	beq.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a268:	e070      	b.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a26a:	4b3a      	ldr	r3, [pc, #232]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a276:	d107      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 feb5 	bl	800afec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a284:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a286:	e3e6      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a28c:	e3e3      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a28e:	4b31      	ldr	r3, [pc, #196]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a29a:	d107      	bne.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a29c:	f107 0318 	add.w	r3, r7, #24
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 fbfb 	bl	800aa9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2aa:	e3d4      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2b0:	e3d1      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2b2:	4b28      	ldr	r3, [pc, #160]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2be:	d107      	bne.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2c0:	f107 030c 	add.w	r3, r7, #12
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f000 fd3d 	bl	800ad44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2ce:	e3c2      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2d4:	e3bf      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2d6:	4b1f      	ldr	r3, [pc, #124]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a2de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2e0:	4b1c      	ldr	r3, [pc, #112]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 0304 	and.w	r3, r3, #4
 800a2e8:	2b04      	cmp	r3, #4
 800a2ea:	d10c      	bne.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d109      	bne.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2f2:	4b18      	ldr	r3, [pc, #96]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	08db      	lsrs	r3, r3, #3
 800a2f8:	f003 0303 	and.w	r3, r3, #3
 800a2fc:	4a16      	ldr	r2, [pc, #88]	; (800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a2fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a302:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a304:	e01e      	b.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a306:	4b13      	ldr	r3, [pc, #76]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a30e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a312:	d106      	bne.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a31a:	d102      	bne.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a31c:	4b0f      	ldr	r3, [pc, #60]	; (800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a31e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a320:	e010      	b.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a322:	4b0c      	ldr	r3, [pc, #48]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a32a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a32e:	d106      	bne.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a336:	d102      	bne.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a338:	4b09      	ldr	r3, [pc, #36]	; (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a33a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a33c:	e002      	b.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a342:	e388      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a344:	e387      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a346:	4b07      	ldr	r3, [pc, #28]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a348:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a34a:	e384      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a34c:	2300      	movs	r3, #0
 800a34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a350:	e381      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a352:	bf00      	nop
 800a354:	58024400 	.word	0x58024400
 800a358:	03d09000 	.word	0x03d09000
 800a35c:	003d0900 	.word	0x003d0900
 800a360:	00f42400 	.word	0x00f42400
 800a364:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a36c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a370:	430b      	orrs	r3, r1
 800a372:	f040 809c 	bne.w	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a376:	4b9e      	ldr	r3, [pc, #632]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a37a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a37e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a386:	d054      	beq.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a38e:	f200 808b 	bhi.w	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a394:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a398:	f000 8083 	beq.w	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a3a2:	f200 8081 	bhi.w	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3ac:	d02f      	beq.n	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3b4:	d878      	bhi.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d004      	beq.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a3c2:	d012      	beq.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a3c4:	e070      	b.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3c6:	4b8a      	ldr	r3, [pc, #552]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3d2:	d107      	bne.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 fe07 	bl	800afec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3e2:	e338      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3e8:	e335      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3ea:	4b81      	ldr	r3, [pc, #516]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3f6:	d107      	bne.n	800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3f8:	f107 0318 	add.w	r3, r7, #24
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 fb4d 	bl	800aa9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a406:	e326      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a408:	2300      	movs	r3, #0
 800a40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a40c:	e323      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a40e:	4b78      	ldr	r3, [pc, #480]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a41a:	d107      	bne.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a41c:	f107 030c 	add.w	r3, r7, #12
 800a420:	4618      	mov	r0, r3
 800a422:	f000 fc8f 	bl	800ad44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a42a:	e314      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a430:	e311      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a432:	4b6f      	ldr	r3, [pc, #444]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a436:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a43a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a43c:	4b6c      	ldr	r3, [pc, #432]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 0304 	and.w	r3, r3, #4
 800a444:	2b04      	cmp	r3, #4
 800a446:	d10c      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d109      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a44e:	4b68      	ldr	r3, [pc, #416]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	08db      	lsrs	r3, r3, #3
 800a454:	f003 0303 	and.w	r3, r3, #3
 800a458:	4a66      	ldr	r2, [pc, #408]	; (800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a45a:	fa22 f303 	lsr.w	r3, r2, r3
 800a45e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a460:	e01e      	b.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a462:	4b63      	ldr	r3, [pc, #396]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a46a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a46e:	d106      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a476:	d102      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a478:	4b5f      	ldr	r3, [pc, #380]	; (800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a47a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a47c:	e010      	b.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a47e:	4b5c      	ldr	r3, [pc, #368]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a48a:	d106      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a492:	d102      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a494:	4b59      	ldr	r3, [pc, #356]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a496:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a498:	e002      	b.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a49e:	e2da      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a4a0:	e2d9      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4a2:	4b57      	ldr	r3, [pc, #348]	; (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4a6:	e2d6      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4ac:	e2d3      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a4ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4b2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a4b6:	430b      	orrs	r3, r1
 800a4b8:	f040 80a7 	bne.w	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a4bc:	4b4c      	ldr	r3, [pc, #304]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a4c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4cc:	d055      	beq.n	800a57a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4d4:	f200 8096 	bhi.w	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4de:	f000 8084 	beq.w	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4e8:	f200 808c 	bhi.w	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4f2:	d030      	beq.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4fa:	f200 8083 	bhi.w	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a500:	2b00      	cmp	r3, #0
 800a502:	d004      	beq.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a50a:	d012      	beq.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a50c:	e07a      	b.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a50e:	4b38      	ldr	r3, [pc, #224]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a51a:	d107      	bne.n	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a51c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a520:	4618      	mov	r0, r3
 800a522:	f000 fd63 	bl	800afec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a52a:	e294      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a52c:	2300      	movs	r3, #0
 800a52e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a530:	e291      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a532:	4b2f      	ldr	r3, [pc, #188]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a53a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a53e:	d107      	bne.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a540:	f107 0318 	add.w	r3, r7, #24
 800a544:	4618      	mov	r0, r3
 800a546:	f000 faa9 	bl	800aa9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a54e:	e282      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a554:	e27f      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a556:	4b26      	ldr	r3, [pc, #152]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a55e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a562:	d107      	bne.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a564:	f107 030c 	add.w	r3, r7, #12
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 fbeb 	bl	800ad44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a572:	e270      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a578:	e26d      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a57a:	4b1d      	ldr	r3, [pc, #116]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a57c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a57e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a582:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a584:	4b1a      	ldr	r3, [pc, #104]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	2b04      	cmp	r3, #4
 800a58e:	d10c      	bne.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a592:	2b00      	cmp	r3, #0
 800a594:	d109      	bne.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a596:	4b16      	ldr	r3, [pc, #88]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	08db      	lsrs	r3, r3, #3
 800a59c:	f003 0303 	and.w	r3, r3, #3
 800a5a0:	4a14      	ldr	r2, [pc, #80]	; (800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a5a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5a8:	e01e      	b.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5aa:	4b11      	ldr	r3, [pc, #68]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5b6:	d106      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5be:	d102      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5c0:	4b0d      	ldr	r3, [pc, #52]	; (800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5c4:	e010      	b.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5c6:	4b0a      	ldr	r3, [pc, #40]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5d2:	d106      	bne.n	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5da:	d102      	bne.n	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5dc:	4b07      	ldr	r3, [pc, #28]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5e0:	e002      	b.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a5e6:	e236      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a5e8:	e235      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5ea:	4b05      	ldr	r3, [pc, #20]	; (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5ee:	e232      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a5f0:	58024400 	.word	0x58024400
 800a5f4:	03d09000 	.word	0x03d09000
 800a5f8:	003d0900 	.word	0x003d0900
 800a5fc:	00f42400 	.word	0x00f42400
 800a600:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a608:	e225      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a60a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a60e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a612:	430b      	orrs	r3, r1
 800a614:	f040 8085 	bne.w	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a618:	4b9c      	ldr	r3, [pc, #624]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a61a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a61c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a620:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a628:	d06b      	beq.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a630:	d874      	bhi.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a634:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a638:	d056      	beq.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a640:	d86c      	bhi.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a644:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a648:	d03b      	beq.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a650:	d864      	bhi.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a658:	d021      	beq.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a660:	d85c      	bhi.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a664:	2b00      	cmp	r3, #0
 800a666:	d004      	beq.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a66e:	d004      	beq.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a670:	e054      	b.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a672:	f7fe fb5f 	bl	8008d34 <HAL_RCC_GetPCLK1Freq>
 800a676:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a678:	e1ed      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a67a:	4b84      	ldr	r3, [pc, #528]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a686:	d107      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a688:	f107 0318 	add.w	r3, r7, #24
 800a68c:	4618      	mov	r0, r3
 800a68e:	f000 fa05 	bl	800aa9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a696:	e1de      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a698:	2300      	movs	r3, #0
 800a69a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a69c:	e1db      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a69e:	4b7b      	ldr	r3, [pc, #492]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6aa:	d107      	bne.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ac:	f107 030c 	add.w	r3, r7, #12
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f000 fb47 	bl	800ad44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ba:	e1cc      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6c0:	e1c9      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a6c2:	4b72      	ldr	r3, [pc, #456]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 0304 	and.w	r3, r3, #4
 800a6ca:	2b04      	cmp	r3, #4
 800a6cc:	d109      	bne.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6ce:	4b6f      	ldr	r3, [pc, #444]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	08db      	lsrs	r3, r3, #3
 800a6d4:	f003 0303 	and.w	r3, r3, #3
 800a6d8:	4a6d      	ldr	r2, [pc, #436]	; (800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a6da:	fa22 f303 	lsr.w	r3, r2, r3
 800a6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6e0:	e1b9      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6e6:	e1b6      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a6e8:	4b68      	ldr	r3, [pc, #416]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6f4:	d102      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a6f6:	4b67      	ldr	r3, [pc, #412]	; (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6fa:	e1ac      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a700:	e1a9      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a702:	4b62      	ldr	r3, [pc, #392]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a70a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a70e:	d102      	bne.n	800a716 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a710:	4b61      	ldr	r3, [pc, #388]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a714:	e19f      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a71a:	e19c      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a720:	e199      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a722:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a726:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a72a:	430b      	orrs	r3, r1
 800a72c:	d173      	bne.n	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a72e:	4b57      	ldr	r3, [pc, #348]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a732:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a736:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a73e:	d02f      	beq.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a746:	d863      	bhi.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d004      	beq.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a754:	d012      	beq.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a756:	e05b      	b.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a758:	4b4c      	ldr	r3, [pc, #304]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a764:	d107      	bne.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a766:	f107 0318 	add.w	r3, r7, #24
 800a76a:	4618      	mov	r0, r3
 800a76c:	f000 f996 	bl	800aa9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a774:	e16f      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a776:	2300      	movs	r3, #0
 800a778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a77a:	e16c      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a77c:	4b43      	ldr	r3, [pc, #268]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a788:	d107      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a78a:	f107 030c 	add.w	r3, r7, #12
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 fad8 	bl	800ad44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a798:	e15d      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a79e:	e15a      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7a0:	4b3a      	ldr	r3, [pc, #232]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7a8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7aa:	4b38      	ldr	r3, [pc, #224]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 0304 	and.w	r3, r3, #4
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	d10c      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d109      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7bc:	4b33      	ldr	r3, [pc, #204]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	08db      	lsrs	r3, r3, #3
 800a7c2:	f003 0303 	and.w	r3, r3, #3
 800a7c6:	4a32      	ldr	r2, [pc, #200]	; (800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a7c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7ce:	e01e      	b.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7d0:	4b2e      	ldr	r3, [pc, #184]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7dc:	d106      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7e4:	d102      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7e6:	4b2b      	ldr	r3, [pc, #172]	; (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7ea:	e010      	b.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7ec:	4b27      	ldr	r3, [pc, #156]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7f8:	d106      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a800:	d102      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a802:	4b25      	ldr	r3, [pc, #148]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a804:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a806:	e002      	b.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a80c:	e123      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a80e:	e122      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a810:	2300      	movs	r3, #0
 800a812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a814:	e11f      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a81a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a81e:	430b      	orrs	r3, r1
 800a820:	d13c      	bne.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a822:	4b1a      	ldr	r3, [pc, #104]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a82a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d004      	beq.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a838:	d012      	beq.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a83a:	e023      	b.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a83c:	4b13      	ldr	r3, [pc, #76]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a848:	d107      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a84a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 fbcc 	bl	800afec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a858:	e0fd      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a85e:	e0fa      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a860:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a86c:	d107      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a86e:	f107 0318 	add.w	r3, r7, #24
 800a872:	4618      	mov	r0, r3
 800a874:	f000 f912 	bl	800aa9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a87c:	e0eb      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a882:	e0e8      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a888:	e0e5      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a88a:	bf00      	nop
 800a88c:	58024400 	.word	0x58024400
 800a890:	03d09000 	.word	0x03d09000
 800a894:	003d0900 	.word	0x003d0900
 800a898:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a89c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8a0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a8a4:	430b      	orrs	r3, r1
 800a8a6:	f040 8085 	bne.w	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a8aa:	4b6d      	ldr	r3, [pc, #436]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a8b2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8ba:	d06b      	beq.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8c2:	d874      	bhi.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ca:	d056      	beq.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8d2:	d86c      	bhi.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a8da:	d03b      	beq.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a8e2:	d864      	bhi.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8ea:	d021      	beq.n	800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8f2:	d85c      	bhi.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d004      	beq.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a900:	d004      	beq.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a902:	e054      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a904:	f000 f8b4 	bl	800aa70 <HAL_RCCEx_GetD3PCLK1Freq>
 800a908:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a90a:	e0a4      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a90c:	4b54      	ldr	r3, [pc, #336]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a918:	d107      	bne.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a91a:	f107 0318 	add.w	r3, r7, #24
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 f8bc 	bl	800aa9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a928:	e095      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a92e:	e092      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a930:	4b4b      	ldr	r3, [pc, #300]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a93c:	d107      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a93e:	f107 030c 	add.w	r3, r7, #12
 800a942:	4618      	mov	r0, r3
 800a944:	f000 f9fe 	bl	800ad44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a94c:	e083      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a952:	e080      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a954:	4b42      	ldr	r3, [pc, #264]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	d109      	bne.n	800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a960:	4b3f      	ldr	r3, [pc, #252]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	08db      	lsrs	r3, r3, #3
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	4a3e      	ldr	r2, [pc, #248]	; (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a96c:	fa22 f303 	lsr.w	r3, r2, r3
 800a970:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a972:	e070      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a974:	2300      	movs	r3, #0
 800a976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a978:	e06d      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a97a:	4b39      	ldr	r3, [pc, #228]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a986:	d102      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a988:	4b37      	ldr	r3, [pc, #220]	; (800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a98c:	e063      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a992:	e060      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a994:	4b32      	ldr	r3, [pc, #200]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a99c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9a0:	d102      	bne.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a9a2:	4b32      	ldr	r3, [pc, #200]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9a6:	e056      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9ac:	e053      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9b2:	e050      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a9b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9b8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a9bc:	430b      	orrs	r3, r1
 800a9be:	d148      	bne.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a9c0:	4b27      	ldr	r3, [pc, #156]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9d0:	d02a      	beq.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9d8:	d838      	bhi.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d004      	beq.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9e6:	d00d      	beq.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a9e8:	e030      	b.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a9ea:	4b1d      	ldr	r3, [pc, #116]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9f6:	d102      	bne.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a9f8:	4b1c      	ldr	r3, [pc, #112]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9fc:	e02b      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa02:	e028      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa04:	4b16      	ldr	r3, [pc, #88]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa10:	d107      	bne.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fae8 	bl	800afec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa20:	e019      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa26:	e016      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa28:	4b0d      	ldr	r3, [pc, #52]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa34:	d107      	bne.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa36:	f107 0318 	add.w	r3, r7, #24
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 f82e 	bl	800aa9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa44:	e007      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa4a:	e004      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa50:	e001      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800aa56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3740      	adds	r7, #64	; 0x40
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	58024400 	.word	0x58024400
 800aa64:	03d09000 	.word	0x03d09000
 800aa68:	003d0900 	.word	0x003d0900
 800aa6c:	00f42400 	.word	0x00f42400

0800aa70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aa74:	f7fe f92e 	bl	8008cd4 <HAL_RCC_GetHCLKFreq>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	4b06      	ldr	r3, [pc, #24]	; (800aa94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	091b      	lsrs	r3, r3, #4
 800aa80:	f003 0307 	and.w	r3, r3, #7
 800aa84:	4904      	ldr	r1, [pc, #16]	; (800aa98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aa86:	5ccb      	ldrb	r3, [r1, r3]
 800aa88:	f003 031f 	and.w	r3, r3, #31
 800aa8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	58024400 	.word	0x58024400
 800aa98:	0801a73c 	.word	0x0801a73c

0800aa9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b089      	sub	sp, #36	; 0x24
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aaa4:	4ba1      	ldr	r3, [pc, #644]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa8:	f003 0303 	and.w	r3, r3, #3
 800aaac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aaae:	4b9f      	ldr	r3, [pc, #636]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab2:	0b1b      	lsrs	r3, r3, #12
 800aab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aab8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aaba:	4b9c      	ldr	r3, [pc, #624]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aabe:	091b      	lsrs	r3, r3, #4
 800aac0:	f003 0301 	and.w	r3, r3, #1
 800aac4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aac6:	4b99      	ldr	r3, [pc, #612]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaca:	08db      	lsrs	r3, r3, #3
 800aacc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aad0:	693a      	ldr	r2, [r7, #16]
 800aad2:	fb02 f303 	mul.w	r3, r2, r3
 800aad6:	ee07 3a90 	vmov	s15, r3
 800aada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aade:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 8111 	beq.w	800ad0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	f000 8083 	beq.w	800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	f200 80a1 	bhi.w	800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d003      	beq.n	800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d056      	beq.n	800abb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ab06:	e099      	b.n	800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab08:	4b88      	ldr	r3, [pc, #544]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0320 	and.w	r3, r3, #32
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d02d      	beq.n	800ab70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab14:	4b85      	ldr	r3, [pc, #532]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	08db      	lsrs	r3, r3, #3
 800ab1a:	f003 0303 	and.w	r3, r3, #3
 800ab1e:	4a84      	ldr	r2, [pc, #528]	; (800ad30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ab20:	fa22 f303 	lsr.w	r3, r2, r3
 800ab24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	ee07 3a90 	vmov	s15, r3
 800ab2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab3e:	4b7b      	ldr	r3, [pc, #492]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab46:	ee07 3a90 	vmov	s15, r3
 800ab4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab52:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ab6e:	e087      	b.n	800ac80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ad38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ab7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab82:	4b6a      	ldr	r3, [pc, #424]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8a:	ee07 3a90 	vmov	s15, r3
 800ab8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab96:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abb2:	e065      	b.n	800ac80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	ee07 3a90 	vmov	s15, r3
 800abba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ad3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc6:	4b59      	ldr	r3, [pc, #356]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abda:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abf6:	e043      	b.n	800ac80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	ee07 3a90 	vmov	s15, r3
 800abfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ad40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ac06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac0a:	4b48      	ldr	r3, [pc, #288]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac12:	ee07 3a90 	vmov	s15, r3
 800ac16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac3a:	e021      	b.n	800ac80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ad3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4e:	4b37      	ldr	r3, [pc, #220]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac62:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ac80:	4b2a      	ldr	r3, [pc, #168]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac84:	0a5b      	lsrs	r3, r3, #9
 800ac86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac8a:	ee07 3a90 	vmov	s15, r3
 800ac8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aca6:	ee17 2a90 	vmov	r2, s15
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800acae:	4b1f      	ldr	r3, [pc, #124]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb2:	0c1b      	lsrs	r3, r3, #16
 800acb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb8:	ee07 3a90 	vmov	s15, r3
 800acbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800accc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acd4:	ee17 2a90 	vmov	r2, s15
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800acdc:	4b13      	ldr	r3, [pc, #76]	; (800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace0:	0e1b      	lsrs	r3, r3, #24
 800ace2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace6:	ee07 3a90 	vmov	s15, r3
 800acea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800acfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad02:	ee17 2a90 	vmov	r2, s15
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ad0a:	e008      	b.n	800ad1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	609a      	str	r2, [r3, #8]
}
 800ad1e:	bf00      	nop
 800ad20:	3724      	adds	r7, #36	; 0x24
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	58024400 	.word	0x58024400
 800ad30:	03d09000 	.word	0x03d09000
 800ad34:	46000000 	.word	0x46000000
 800ad38:	4c742400 	.word	0x4c742400
 800ad3c:	4a742400 	.word	0x4a742400
 800ad40:	4b742400 	.word	0x4b742400

0800ad44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b089      	sub	sp, #36	; 0x24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad4c:	4ba1      	ldr	r3, [pc, #644]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad50:	f003 0303 	and.w	r3, r3, #3
 800ad54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ad56:	4b9f      	ldr	r3, [pc, #636]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad5a:	0d1b      	lsrs	r3, r3, #20
 800ad5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ad62:	4b9c      	ldr	r3, [pc, #624]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad66:	0a1b      	lsrs	r3, r3, #8
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ad6e:	4b99      	ldr	r3, [pc, #612]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad72:	08db      	lsrs	r3, r3, #3
 800ad74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad78:	693a      	ldr	r2, [r7, #16]
 800ad7a:	fb02 f303 	mul.w	r3, r2, r3
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f000 8111 	beq.w	800afb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	f000 8083 	beq.w	800aea0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	f200 80a1 	bhi.w	800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d003      	beq.n	800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d056      	beq.n	800ae5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800adae:	e099      	b.n	800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adb0:	4b88      	ldr	r3, [pc, #544]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 0320 	and.w	r3, r3, #32
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d02d      	beq.n	800ae18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adbc:	4b85      	ldr	r3, [pc, #532]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	08db      	lsrs	r3, r3, #3
 800adc2:	f003 0303 	and.w	r3, r3, #3
 800adc6:	4a84      	ldr	r2, [pc, #528]	; (800afd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800adc8:	fa22 f303 	lsr.w	r3, r2, r3
 800adcc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	ee07 3a90 	vmov	s15, r3
 800add4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ade6:	4b7b      	ldr	r3, [pc, #492]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ade8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adee:	ee07 3a90 	vmov	s15, r3
 800adf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae16:	e087      	b.n	800af28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	ee07 3a90 	vmov	s15, r3
 800ae1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800afe0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ae26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae2a:	4b6a      	ldr	r3, [pc, #424]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae32:	ee07 3a90 	vmov	s15, r3
 800ae36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae5a:	e065      	b.n	800af28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	ee07 3a90 	vmov	s15, r3
 800ae62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800afe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae6e:	4b59      	ldr	r3, [pc, #356]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae76:	ee07 3a90 	vmov	s15, r3
 800ae7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae82:	eddf 5a56 	vldr	s11, [pc, #344]	; 800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae9e:	e043      	b.n	800af28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	ee07 3a90 	vmov	s15, r3
 800aea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800afe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aeae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeb2:	4b48      	ldr	r3, [pc, #288]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeba:	ee07 3a90 	vmov	s15, r3
 800aebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aec2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aec6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aeca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aee2:	e021      	b.n	800af28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	ee07 3a90 	vmov	s15, r3
 800aeea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800afe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aef6:	4b37      	ldr	r3, [pc, #220]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefe:	ee07 3a90 	vmov	s15, r3
 800af02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af06:	ed97 6a03 	vldr	s12, [r7, #12]
 800af0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800af28:	4b2a      	ldr	r3, [pc, #168]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2c:	0a5b      	lsrs	r3, r3, #9
 800af2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af42:	edd7 6a07 	vldr	s13, [r7, #28]
 800af46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af4e:	ee17 2a90 	vmov	r2, s15
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800af56:	4b1f      	ldr	r3, [pc, #124]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5a:	0c1b      	lsrs	r3, r3, #16
 800af5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af60:	ee07 3a90 	vmov	s15, r3
 800af64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af70:	edd7 6a07 	vldr	s13, [r7, #28]
 800af74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af7c:	ee17 2a90 	vmov	r2, s15
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800af84:	4b13      	ldr	r3, [pc, #76]	; (800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af88:	0e1b      	lsrs	r3, r3, #24
 800af8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af8e:	ee07 3a90 	vmov	s15, r3
 800af92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800afa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afaa:	ee17 2a90 	vmov	r2, s15
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800afb2:	e008      	b.n	800afc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	609a      	str	r2, [r3, #8]
}
 800afc6:	bf00      	nop
 800afc8:	3724      	adds	r7, #36	; 0x24
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	58024400 	.word	0x58024400
 800afd8:	03d09000 	.word	0x03d09000
 800afdc:	46000000 	.word	0x46000000
 800afe0:	4c742400 	.word	0x4c742400
 800afe4:	4a742400 	.word	0x4a742400
 800afe8:	4b742400 	.word	0x4b742400

0800afec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800afec:	b480      	push	{r7}
 800afee:	b089      	sub	sp, #36	; 0x24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aff4:	4ba0      	ldr	r3, [pc, #640]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff8:	f003 0303 	and.w	r3, r3, #3
 800affc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800affe:	4b9e      	ldr	r3, [pc, #632]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b002:	091b      	lsrs	r3, r3, #4
 800b004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b008:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b00a:	4b9b      	ldr	r3, [pc, #620]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b014:	4b98      	ldr	r3, [pc, #608]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b018:	08db      	lsrs	r3, r3, #3
 800b01a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b01e:	693a      	ldr	r2, [r7, #16]
 800b020:	fb02 f303 	mul.w	r3, r2, r3
 800b024:	ee07 3a90 	vmov	s15, r3
 800b028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	2b00      	cmp	r3, #0
 800b034:	f000 8111 	beq.w	800b25a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	f000 8083 	beq.w	800b146 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	2b02      	cmp	r3, #2
 800b044:	f200 80a1 	bhi.w	800b18a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d056      	beq.n	800b102 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b054:	e099      	b.n	800b18a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b056:	4b88      	ldr	r3, [pc, #544]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 0320 	and.w	r3, r3, #32
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d02d      	beq.n	800b0be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b062:	4b85      	ldr	r3, [pc, #532]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	08db      	lsrs	r3, r3, #3
 800b068:	f003 0303 	and.w	r3, r3, #3
 800b06c:	4a83      	ldr	r2, [pc, #524]	; (800b27c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b06e:	fa22 f303 	lsr.w	r3, r2, r3
 800b072:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	ee07 3a90 	vmov	s15, r3
 800b07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	ee07 3a90 	vmov	s15, r3
 800b084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b08c:	4b7a      	ldr	r3, [pc, #488]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b094:	ee07 3a90 	vmov	s15, r3
 800b098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b09c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b280 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b0bc:	e087      	b.n	800b1ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	ee07 3a90 	vmov	s15, r3
 800b0c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b284 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b0cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0d0:	4b69      	ldr	r3, [pc, #420]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d8:	ee07 3a90 	vmov	s15, r3
 800b0dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b280 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b100:	e065      	b.n	800b1ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	ee07 3a90 	vmov	s15, r3
 800b108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b10c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b288 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b114:	4b58      	ldr	r3, [pc, #352]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b11c:	ee07 3a90 	vmov	s15, r3
 800b120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b124:	ed97 6a03 	vldr	s12, [r7, #12]
 800b128:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b280 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b12c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b13c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b140:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b144:	e043      	b.n	800b1ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	ee07 3a90 	vmov	s15, r3
 800b14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b150:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b28c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b158:	4b47      	ldr	r3, [pc, #284]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b160:	ee07 3a90 	vmov	s15, r3
 800b164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b168:	ed97 6a03 	vldr	s12, [r7, #12]
 800b16c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b280 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b17c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b180:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b184:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b188:	e021      	b.n	800b1ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	ee07 3a90 	vmov	s15, r3
 800b190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b194:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b284 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b19c:	4b36      	ldr	r3, [pc, #216]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1a4:	ee07 3a90 	vmov	s15, r3
 800b1a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b280 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b1ce:	4b2a      	ldr	r3, [pc, #168]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d2:	0a5b      	lsrs	r3, r3, #9
 800b1d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1d8:	ee07 3a90 	vmov	s15, r3
 800b1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1f4:	ee17 2a90 	vmov	r2, s15
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b1fc:	4b1e      	ldr	r3, [pc, #120]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b200:	0c1b      	lsrs	r3, r3, #16
 800b202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b206:	ee07 3a90 	vmov	s15, r3
 800b20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b20e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b212:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b216:	edd7 6a07 	vldr	s13, [r7, #28]
 800b21a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b21e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b222:	ee17 2a90 	vmov	r2, s15
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b22a:	4b13      	ldr	r3, [pc, #76]	; (800b278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b22e:	0e1b      	lsrs	r3, r3, #24
 800b230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b234:	ee07 3a90 	vmov	s15, r3
 800b238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b23c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b240:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b244:	edd7 6a07 	vldr	s13, [r7, #28]
 800b248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b24c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b250:	ee17 2a90 	vmov	r2, s15
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b258:	e008      	b.n	800b26c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	609a      	str	r2, [r3, #8]
}
 800b26c:	bf00      	nop
 800b26e:	3724      	adds	r7, #36	; 0x24
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr
 800b278:	58024400 	.word	0x58024400
 800b27c:	03d09000 	.word	0x03d09000
 800b280:	46000000 	.word	0x46000000
 800b284:	4c742400 	.word	0x4c742400
 800b288:	4a742400 	.word	0x4a742400
 800b28c:	4b742400 	.word	0x4b742400

0800b290 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800b298:	4b26      	ldr	r3, [pc, #152]	; (800b334 <HAL_RCCEx_CRSConfig+0xa4>)
 800b29a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b29e:	4a25      	ldr	r2, [pc, #148]	; (800b334 <HAL_RCCEx_CRSConfig+0xa4>)
 800b2a0:	f043 0302 	orr.w	r3, r3, #2
 800b2a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800b2a8:	4b22      	ldr	r3, [pc, #136]	; (800b334 <HAL_RCCEx_CRSConfig+0xa4>)
 800b2aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2ae:	4a21      	ldr	r2, [pc, #132]	; (800b334 <HAL_RCCEx_CRSConfig+0xa4>)
 800b2b0:	f023 0302 	bic.w	r3, r3, #2
 800b2b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800b2b8:	f7f7 fa1c 	bl	80026f4 <HAL_GetREVID>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	f241 0203 	movw	r2, #4099	; 0x1003
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d80b      	bhi.n	800b2de <HAL_RCCEx_CRSConfig+0x4e>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2ce:	d106      	bne.n	800b2de <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	60fb      	str	r3, [r7, #12]
 800b2dc:	e008      	b.n	800b2f0 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	041b      	lsls	r3, r3, #16
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	4313      	orrs	r3, r2
 800b304:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800b306:	4a0c      	ldr	r2, [pc, #48]	; (800b338 <HAL_RCCEx_CRSConfig+0xa8>)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800b30c:	4b0a      	ldr	r3, [pc, #40]	; (800b338 <HAL_RCCEx_CRSConfig+0xa8>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	021b      	lsls	r3, r3, #8
 800b31a:	4907      	ldr	r1, [pc, #28]	; (800b338 <HAL_RCCEx_CRSConfig+0xa8>)
 800b31c:	4313      	orrs	r3, r2
 800b31e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800b320:	4b05      	ldr	r3, [pc, #20]	; (800b338 <HAL_RCCEx_CRSConfig+0xa8>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a04      	ldr	r2, [pc, #16]	; (800b338 <HAL_RCCEx_CRSConfig+0xa8>)
 800b326:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b32a:	6013      	str	r3, [r2, #0]
}
 800b32c:	bf00      	nop
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	58024400 	.word	0x58024400
 800b338:	40008400 	.word	0x40008400

0800b33c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b34a:	4b53      	ldr	r3, [pc, #332]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34e:	f003 0303 	and.w	r3, r3, #3
 800b352:	2b03      	cmp	r3, #3
 800b354:	d101      	bne.n	800b35a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	e099      	b.n	800b48e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b35a:	4b4f      	ldr	r3, [pc, #316]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a4e      	ldr	r2, [pc, #312]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b360:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b366:	f7f7 f995 	bl	8002694 <HAL_GetTick>
 800b36a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b36c:	e008      	b.n	800b380 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b36e:	f7f7 f991 	bl	8002694 <HAL_GetTick>
 800b372:	4602      	mov	r2, r0
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d901      	bls.n	800b380 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e086      	b.n	800b48e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b380:	4b45      	ldr	r3, [pc, #276]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1f0      	bne.n	800b36e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b38c:	4b42      	ldr	r3, [pc, #264]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b390:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	031b      	lsls	r3, r3, #12
 800b39a:	493f      	ldr	r1, [pc, #252]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b39c:	4313      	orrs	r3, r2
 800b39e:	628b      	str	r3, [r1, #40]	; 0x28
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	025b      	lsls	r3, r3, #9
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	431a      	orrs	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	041b      	lsls	r3, r3, #16
 800b3be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3c2:	431a      	orrs	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	061b      	lsls	r3, r3, #24
 800b3cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3d0:	4931      	ldr	r1, [pc, #196]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3d6:	4b30      	ldr	r3, [pc, #192]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	492d      	ldr	r1, [pc, #180]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3e8:	4b2b      	ldr	r3, [pc, #172]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ec:	f023 0220 	bic.w	r2, r3, #32
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	699b      	ldr	r3, [r3, #24]
 800b3f4:	4928      	ldr	r1, [pc, #160]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3fa:	4b27      	ldr	r3, [pc, #156]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fe:	4a26      	ldr	r2, [pc, #152]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b400:	f023 0310 	bic.w	r3, r3, #16
 800b404:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b406:	4b24      	ldr	r3, [pc, #144]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b40a:	4b24      	ldr	r3, [pc, #144]	; (800b49c <RCCEx_PLL2_Config+0x160>)
 800b40c:	4013      	ands	r3, r2
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	69d2      	ldr	r2, [r2, #28]
 800b412:	00d2      	lsls	r2, r2, #3
 800b414:	4920      	ldr	r1, [pc, #128]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b416:	4313      	orrs	r3, r2
 800b418:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b41a:	4b1f      	ldr	r3, [pc, #124]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41e:	4a1e      	ldr	r2, [pc, #120]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b420:	f043 0310 	orr.w	r3, r3, #16
 800b424:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d106      	bne.n	800b43a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b42c:	4b1a      	ldr	r3, [pc, #104]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b430:	4a19      	ldr	r2, [pc, #100]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b432:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b436:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b438:	e00f      	b.n	800b45a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d106      	bne.n	800b44e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b440:	4b15      	ldr	r3, [pc, #84]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b444:	4a14      	ldr	r2, [pc, #80]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b44a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b44c:	e005      	b.n	800b45a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b44e:	4b12      	ldr	r3, [pc, #72]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	4a11      	ldr	r2, [pc, #68]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b458:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b45a:	4b0f      	ldr	r3, [pc, #60]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a0e      	ldr	r2, [pc, #56]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b460:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b466:	f7f7 f915 	bl	8002694 <HAL_GetTick>
 800b46a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b46c:	e008      	b.n	800b480 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b46e:	f7f7 f911 	bl	8002694 <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d901      	bls.n	800b480 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e006      	b.n	800b48e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b480:	4b05      	ldr	r3, [pc, #20]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0f0      	beq.n	800b46e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	58024400 	.word	0x58024400
 800b49c:	ffff0007 	.word	0xffff0007

0800b4a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4ae:	4b53      	ldr	r3, [pc, #332]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b2:	f003 0303 	and.w	r3, r3, #3
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d101      	bne.n	800b4be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e099      	b.n	800b5f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b4be:	4b4f      	ldr	r3, [pc, #316]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a4e      	ldr	r2, [pc, #312]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4ca:	f7f7 f8e3 	bl	8002694 <HAL_GetTick>
 800b4ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4d0:	e008      	b.n	800b4e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b4d2:	f7f7 f8df 	bl	8002694 <HAL_GetTick>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	1ad3      	subs	r3, r2, r3
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d901      	bls.n	800b4e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	e086      	b.n	800b5f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4e4:	4b45      	ldr	r3, [pc, #276]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1f0      	bne.n	800b4d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4f0:	4b42      	ldr	r3, [pc, #264]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	051b      	lsls	r3, r3, #20
 800b4fe:	493f      	ldr	r1, [pc, #252]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b500:	4313      	orrs	r3, r2
 800b502:	628b      	str	r3, [r1, #40]	; 0x28
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	3b01      	subs	r3, #1
 800b50a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	3b01      	subs	r3, #1
 800b514:	025b      	lsls	r3, r3, #9
 800b516:	b29b      	uxth	r3, r3
 800b518:	431a      	orrs	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	3b01      	subs	r3, #1
 800b520:	041b      	lsls	r3, r3, #16
 800b522:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b526:	431a      	orrs	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	3b01      	subs	r3, #1
 800b52e:	061b      	lsls	r3, r3, #24
 800b530:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b534:	4931      	ldr	r1, [pc, #196]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b536:	4313      	orrs	r3, r2
 800b538:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b53a:	4b30      	ldr	r3, [pc, #192]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	492d      	ldr	r1, [pc, #180]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b548:	4313      	orrs	r3, r2
 800b54a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b54c:	4b2b      	ldr	r3, [pc, #172]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b550:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	4928      	ldr	r1, [pc, #160]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b55a:	4313      	orrs	r3, r2
 800b55c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b55e:	4b27      	ldr	r3, [pc, #156]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b562:	4a26      	ldr	r2, [pc, #152]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b568:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b56a:	4b24      	ldr	r3, [pc, #144]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b56c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b56e:	4b24      	ldr	r3, [pc, #144]	; (800b600 <RCCEx_PLL3_Config+0x160>)
 800b570:	4013      	ands	r3, r2
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	69d2      	ldr	r2, [r2, #28]
 800b576:	00d2      	lsls	r2, r2, #3
 800b578:	4920      	ldr	r1, [pc, #128]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b57a:	4313      	orrs	r3, r2
 800b57c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b57e:	4b1f      	ldr	r3, [pc, #124]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b582:	4a1e      	ldr	r2, [pc, #120]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b588:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d106      	bne.n	800b59e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b590:	4b1a      	ldr	r3, [pc, #104]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b594:	4a19      	ldr	r2, [pc, #100]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b59a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b59c:	e00f      	b.n	800b5be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d106      	bne.n	800b5b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b5a4:	4b15      	ldr	r3, [pc, #84]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a8:	4a14      	ldr	r2, [pc, #80]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b5ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5b0:	e005      	b.n	800b5be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b5b2:	4b12      	ldr	r3, [pc, #72]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b6:	4a11      	ldr	r2, [pc, #68]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b5be:	4b0f      	ldr	r3, [pc, #60]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4a0e      	ldr	r2, [pc, #56]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5ca:	f7f7 f863 	bl	8002694 <HAL_GetTick>
 800b5ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5d0:	e008      	b.n	800b5e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b5d2:	f7f7 f85f 	bl	8002694 <HAL_GetTick>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d901      	bls.n	800b5e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e006      	b.n	800b5f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5e4:	4b05      	ldr	r3, [pc, #20]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d0f0      	beq.n	800b5d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	58024400 	.word	0x58024400
 800b600:	ffff0007 	.word	0xffff0007

0800b604 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d071      	beq.n	800b6fa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d106      	bne.n	800b630 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7f6 fc3e 	bl	8001eac <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2202      	movs	r2, #2
 800b634:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	f003 0310 	and.w	r3, r3, #16
 800b642:	2b10      	cmp	r3, #16
 800b644:	d050      	beq.n	800b6e8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	22ca      	movs	r2, #202	; 0xca
 800b64c:	625a      	str	r2, [r3, #36]	; 0x24
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2253      	movs	r2, #83	; 0x53
 800b654:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 fa4a 	bl	800baf0 <RTC_EnterInitMode>
 800b65c:	4603      	mov	r3, r0
 800b65e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800b660:	7bfb      	ldrb	r3, [r7, #15]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d124      	bne.n	800b6b0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6899      	ldr	r1, [r3, #8]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	4b24      	ldr	r3, [pc, #144]	; (800b704 <HAL_RTC_Init+0x100>)
 800b672:	400b      	ands	r3, r1
 800b674:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	6899      	ldr	r1, [r3, #8]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685a      	ldr	r2, [r3, #4]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	431a      	orrs	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	431a      	orrs	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	430a      	orrs	r2, r1
 800b692:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	0419      	lsls	r1, r3, #16
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68da      	ldr	r2, [r3, #12]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	430a      	orrs	r2, r1
 800b6a4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fa56 	bl	800bb58 <RTC_ExitInitMode>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d113      	bne.n	800b6de <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f022 0203 	bic.w	r2, r2, #3
 800b6c4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	69da      	ldr	r2, [r3, #28]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	431a      	orrs	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	430a      	orrs	r2, r1
 800b6dc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	22ff      	movs	r2, #255	; 0xff
 800b6e4:	625a      	str	r2, [r3, #36]	; 0x24
 800b6e6:	e001      	b.n	800b6ec <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d103      	bne.n	800b6fa <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800b6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	ff8fffbf 	.word	0xff8fffbf

0800b708 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b708:	b590      	push	{r4, r7, lr}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d101      	bne.n	800b722 <HAL_RTC_SetTime+0x1a>
 800b71e:	2302      	movs	r3, #2
 800b720:	e089      	b.n	800b836 <HAL_RTC_SetTime+0x12e>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2202      	movs	r2, #2
 800b72e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	22ca      	movs	r2, #202	; 0xca
 800b738:	625a      	str	r2, [r3, #36]	; 0x24
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2253      	movs	r2, #83	; 0x53
 800b740:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f000 f9d4 	bl	800baf0 <RTC_EnterInitMode>
 800b748:	4603      	mov	r3, r0
 800b74a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b74c:	7cfb      	ldrb	r3, [r7, #19]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d161      	bne.n	800b816 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d126      	bne.n	800b7a6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b762:	2b00      	cmp	r3, #0
 800b764:	d102      	bne.n	800b76c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	2200      	movs	r2, #0
 800b76a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	4618      	mov	r0, r3
 800b772:	f000 fa2f 	bl	800bbd4 <RTC_ByteToBcd2>
 800b776:	4603      	mov	r3, r0
 800b778:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	785b      	ldrb	r3, [r3, #1]
 800b77e:	4618      	mov	r0, r3
 800b780:	f000 fa28 	bl	800bbd4 <RTC_ByteToBcd2>
 800b784:	4603      	mov	r3, r0
 800b786:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b788:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	789b      	ldrb	r3, [r3, #2]
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 fa20 	bl	800bbd4 <RTC_ByteToBcd2>
 800b794:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b796:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	78db      	ldrb	r3, [r3, #3]
 800b79e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	e018      	b.n	800b7d8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d102      	bne.n	800b7ba <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	785b      	ldrb	r3, [r3, #1]
 800b7c4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b7c6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b7cc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	78db      	ldrb	r3, [r3, #3]
 800b7d2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	6979      	ldr	r1, [r7, #20]
 800b7de:	4b18      	ldr	r3, [pc, #96]	; (800b840 <HAL_RTC_SetTime+0x138>)
 800b7e0:	400b      	ands	r3, r1
 800b7e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	689a      	ldr	r2, [r3, #8]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b7f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6899      	ldr	r1, [r3, #8]
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	68da      	ldr	r2, [r3, #12]
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	431a      	orrs	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	430a      	orrs	r2, r1
 800b80a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f000 f9a3 	bl	800bb58 <RTC_ExitInitMode>
 800b812:	4603      	mov	r3, r0
 800b814:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	22ff      	movs	r2, #255	; 0xff
 800b81c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b81e:	7cfb      	ldrb	r3, [r7, #19]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d103      	bne.n	800b82c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b834:	7cfb      	ldrb	r3, [r7, #19]
}
 800b836:	4618      	mov	r0, r3
 800b838:	371c      	adds	r7, #28
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd90      	pop	{r4, r7, pc}
 800b83e:	bf00      	nop
 800b840:	007f7f7f 	.word	0x007f7f7f

0800b844 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	4b22      	ldr	r3, [pc, #136]	; (800b8f8 <HAL_RTC_GetTime+0xb4>)
 800b870:	4013      	ands	r3, r2
 800b872:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	0c1b      	lsrs	r3, r3, #16
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	0a1b      	lsrs	r3, r3, #8
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b88e:	b2da      	uxtb	r2, r3
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	b2db      	uxtb	r3, r3
 800b898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b89c:	b2da      	uxtb	r2, r3
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	0d9b      	lsrs	r3, r3, #22
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	b2da      	uxtb	r2, r3
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d11a      	bne.n	800b8ee <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f000 f9a9 	bl	800bc14 <RTC_Bcd2ToByte>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	785b      	ldrb	r3, [r3, #1]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f000 f9a0 	bl	800bc14 <RTC_Bcd2ToByte>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	789b      	ldrb	r3, [r3, #2]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f000 f997 	bl	800bc14 <RTC_Bcd2ToByte>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3718      	adds	r7, #24
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	007f7f7f 	.word	0x007f7f7f

0800b8fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b8fc:	b590      	push	{r4, r7, lr}
 800b8fe:	b087      	sub	sp, #28
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d101      	bne.n	800b916 <HAL_RTC_SetDate+0x1a>
 800b912:	2302      	movs	r3, #2
 800b914:	e073      	b.n	800b9fe <HAL_RTC_SetDate+0x102>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2202      	movs	r2, #2
 800b922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10e      	bne.n	800b94a <HAL_RTC_SetDate+0x4e>
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	785b      	ldrb	r3, [r3, #1]
 800b930:	f003 0310 	and.w	r3, r3, #16
 800b934:	2b00      	cmp	r3, #0
 800b936:	d008      	beq.n	800b94a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	785b      	ldrb	r3, [r3, #1]
 800b93c:	f023 0310 	bic.w	r3, r3, #16
 800b940:	b2db      	uxtb	r3, r3
 800b942:	330a      	adds	r3, #10
 800b944:	b2da      	uxtb	r2, r3
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d11c      	bne.n	800b98a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	78db      	ldrb	r3, [r3, #3]
 800b954:	4618      	mov	r0, r3
 800b956:	f000 f93d 	bl	800bbd4 <RTC_ByteToBcd2>
 800b95a:	4603      	mov	r3, r0
 800b95c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	785b      	ldrb	r3, [r3, #1]
 800b962:	4618      	mov	r0, r3
 800b964:	f000 f936 	bl	800bbd4 <RTC_ByteToBcd2>
 800b968:	4603      	mov	r3, r0
 800b96a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b96c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	789b      	ldrb	r3, [r3, #2]
 800b972:	4618      	mov	r0, r3
 800b974:	f000 f92e 	bl	800bbd4 <RTC_ByteToBcd2>
 800b978:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b97a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b984:	4313      	orrs	r3, r2
 800b986:	617b      	str	r3, [r7, #20]
 800b988:	e00e      	b.n	800b9a8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	78db      	ldrb	r3, [r3, #3]
 800b98e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	785b      	ldrb	r3, [r3, #1]
 800b994:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b996:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b99c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	22ca      	movs	r2, #202	; 0xca
 800b9ae:	625a      	str	r2, [r3, #36]	; 0x24
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2253      	movs	r2, #83	; 0x53
 800b9b6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f000 f899 	bl	800baf0 <RTC_EnterInitMode>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b9c2:	7cfb      	ldrb	r3, [r7, #19]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10a      	bne.n	800b9de <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	6979      	ldr	r1, [r7, #20]
 800b9ce:	4b0e      	ldr	r3, [pc, #56]	; (800ba08 <HAL_RTC_SetDate+0x10c>)
 800b9d0:	400b      	ands	r3, r1
 800b9d2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f000 f8bf 	bl	800bb58 <RTC_ExitInitMode>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	22ff      	movs	r2, #255	; 0xff
 800b9e4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b9e6:	7cfb      	ldrb	r3, [r7, #19]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d103      	bne.n	800b9f4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b9fc:	7cfb      	ldrb	r3, [r7, #19]


}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	371c      	adds	r7, #28
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd90      	pop	{r4, r7, pc}
 800ba06:	bf00      	nop
 800ba08:	00ffff3f 	.word	0x00ffff3f

0800ba0c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	685a      	ldr	r2, [r3, #4]
 800ba1e:	4b21      	ldr	r3, [pc, #132]	; (800baa4 <HAL_RTC_GetDate+0x98>)
 800ba20:	4013      	ands	r3, r2
 800ba22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	0c1b      	lsrs	r3, r3, #16
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	0a1b      	lsrs	r3, r3, #8
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	f003 031f 	and.w	r3, r3, #31
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba46:	b2da      	uxtb	r2, r3
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	0b5b      	lsrs	r3, r3, #13
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	f003 0307 	and.w	r3, r3, #7
 800ba56:	b2da      	uxtb	r2, r3
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d11a      	bne.n	800ba98 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	78db      	ldrb	r3, [r3, #3]
 800ba66:	4618      	mov	r0, r3
 800ba68:	f000 f8d4 	bl	800bc14 <RTC_Bcd2ToByte>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	461a      	mov	r2, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	785b      	ldrb	r3, [r3, #1]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f000 f8cb 	bl	800bc14 <RTC_Bcd2ToByte>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	461a      	mov	r2, r3
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	789b      	ldrb	r3, [r3, #2]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f000 f8c2 	bl	800bc14 <RTC_Bcd2ToByte>
 800ba90:	4603      	mov	r3, r0
 800ba92:	461a      	mov	r2, r3
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3718      	adds	r7, #24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	00ffff3f 	.word	0x00ffff3f

0800baa8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a0d      	ldr	r2, [pc, #52]	; (800baec <HAL_RTC_WaitForSynchro+0x44>)
 800bab6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800bab8:	f7f6 fdec 	bl	8002694 <HAL_GetTick>
 800babc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800babe:	e009      	b.n	800bad4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bac0:	f7f6 fde8 	bl	8002694 <HAL_GetTick>
 800bac4:	4602      	mov	r2, r0
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bace:	d901      	bls.n	800bad4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e007      	b.n	800bae4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	f003 0320 	and.w	r3, r3, #32
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d0ee      	beq.n	800bac0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	0003ff5f 	.word	0x0003ff5f

0800baf0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d120      	bne.n	800bb4c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb12:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800bb14:	f7f6 fdbe 	bl	8002694 <HAL_GetTick>
 800bb18:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bb1a:	e00d      	b.n	800bb38 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bb1c:	f7f6 fdba 	bl	8002694 <HAL_GetTick>
 800bb20:	4602      	mov	r2, r0
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb2a:	d905      	bls.n	800bb38 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2203      	movs	r2, #3
 800bb34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d102      	bne.n	800bb4c <RTC_EnterInitMode+0x5c>
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d1e7      	bne.n	800bb1c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
	...

0800bb58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800bb64:	4b1a      	ldr	r3, [pc, #104]	; (800bbd0 <RTC_ExitInitMode+0x78>)
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	4a19      	ldr	r2, [pc, #100]	; (800bbd0 <RTC_ExitInitMode+0x78>)
 800bb6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb6e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800bb70:	4b17      	ldr	r3, [pc, #92]	; (800bbd0 <RTC_ExitInitMode+0x78>)
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	f003 0320 	and.w	r3, r3, #32
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d10c      	bne.n	800bb96 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f7ff ff93 	bl	800baa8 <HAL_RTC_WaitForSynchro>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d01e      	beq.n	800bbc6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2203      	movs	r2, #3
 800bb8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bb90:	2303      	movs	r3, #3
 800bb92:	73fb      	strb	r3, [r7, #15]
 800bb94:	e017      	b.n	800bbc6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bb96:	4b0e      	ldr	r3, [pc, #56]	; (800bbd0 <RTC_ExitInitMode+0x78>)
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	4a0d      	ldr	r2, [pc, #52]	; (800bbd0 <RTC_ExitInitMode+0x78>)
 800bb9c:	f023 0320 	bic.w	r3, r3, #32
 800bba0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7ff ff80 	bl	800baa8 <HAL_RTC_WaitForSynchro>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d005      	beq.n	800bbba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2203      	movs	r2, #3
 800bbb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bbba:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <RTC_ExitInitMode+0x78>)
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	4a04      	ldr	r2, [pc, #16]	; (800bbd0 <RTC_ExitInitMode+0x78>)
 800bbc0:	f043 0320 	orr.w	r3, r3, #32
 800bbc4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800bbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	58004000 	.word	0x58004000

0800bbd4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800bbe2:	79fb      	ldrb	r3, [r7, #7]
 800bbe4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800bbe6:	e005      	b.n	800bbf4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	3301      	adds	r3, #1
 800bbec:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800bbee:	7afb      	ldrb	r3, [r7, #11]
 800bbf0:	3b0a      	subs	r3, #10
 800bbf2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800bbf4:	7afb      	ldrb	r3, [r7, #11]
 800bbf6:	2b09      	cmp	r3, #9
 800bbf8:	d8f6      	bhi.n	800bbe8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	011b      	lsls	r3, r3, #4
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	7afb      	ldrb	r3, [r7, #11]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	b2db      	uxtb	r3, r3
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3714      	adds	r7, #20
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800bc1e:	79fb      	ldrb	r3, [r7, #7]
 800bc20:	091b      	lsrs	r3, r3, #4
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	461a      	mov	r2, r3
 800bc26:	0092      	lsls	r2, r2, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	005b      	lsls	r3, r3, #1
 800bc2c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800bc2e:	79fb      	ldrb	r3, [r7, #7]
 800bc30:	f003 030f 	and.w	r3, r3, #15
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
 800bc38:	4413      	add	r3, r2
 800bc3a:	b2db      	uxtb	r3, r3
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3714      	adds	r7, #20
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d101      	bne.n	800bc62 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800bc5e:	2302      	movs	r3, #2
 800bc60:	e065      	b.n	800bd2e <HAL_RTCEx_SetWakeUpTimer+0xe6>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2201      	movs	r2, #1
 800bc66:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2202      	movs	r2, #2
 800bc6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	22ca      	movs	r2, #202	; 0xca
 800bc78:	625a      	str	r2, [r3, #36]	; 0x24
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2253      	movs	r2, #83	; 0x53
 800bc80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 800bc82:	4b2d      	ldr	r3, [pc, #180]	; (800bd38 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	4a2c      	ldr	r2, [pc, #176]	; (800bd38 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 800bc88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc8c:	6093      	str	r3, [r2, #8]
  {
    tickstart = HAL_GetTick();

    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#else
  if (READ_BIT(RTC->ISR, RTC_ISR_INITF) == 0U)
 800bc8e:	4b2a      	ldr	r3, [pc, #168]	; (800bd38 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d120      	bne.n	800bcdc <HAL_RTCEx_SetWakeUpTimer+0x94>
  {
    tickstart = HAL_GetTick();
 800bc9a:	f7f6 fcfb 	bl	8002694 <HAL_GetTick>
 800bc9e:	6178      	str	r0, [r7, #20]

    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800bca0:	e015      	b.n	800bcce <HAL_RTCEx_SetWakeUpTimer+0x86>
#endif /* TAMP */
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bca2:	f7f6 fcf7 	bl	8002694 <HAL_GetTick>
 800bca6:	4602      	mov	r2, r0
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcb0:	d90d      	bls.n	800bcce <HAL_RTCEx_SetWakeUpTimer+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	22ff      	movs	r2, #255	; 0xff
 800bcb8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2203      	movs	r2, #3
 800bcbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800bcca:	2303      	movs	r3, #3
 800bccc:	e02f      	b.n	800bd2e <HAL_RTCEx_SetWakeUpTimer+0xe6>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	f003 0304 	and.w	r3, r3, #4
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d0e2      	beq.n	800bca2 <HAL_RTCEx_SetWakeUpTimer+0x5a>
      }
    }
  }

  /* Clear the Wakeup Timer clock source bits and configure the clock source in CR register */
  uint32_t CR_tmp = hrtc->Instance->CR;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	613b      	str	r3, [r7, #16]
  CR_tmp &= (uint32_t)~RTC_CR_WUCKSEL;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	f023 0307 	bic.w	r3, r3, #7
 800bcea:	613b      	str	r3, [r7, #16]
  CR_tmp |= (uint32_t)WakeUpClock;
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	613b      	str	r3, [r7, #16]
  hrtc->Instance->CR = CR_tmp;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	693a      	ldr	r2, [r7, #16]
 800bcfa:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	689a      	ldr	r2, [r3, #8]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd12:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	22ff      	movs	r2, #255	; 0xff
 800bd1a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	58004000 	.word	0x58004000

0800bd3c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b08a      	sub	sp, #40	; 0x28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d101      	bne.n	800bd4e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e075      	b.n	800be3a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d105      	bne.n	800bd66 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f7f6 f8d5 	bl	8001f10 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2204      	movs	r2, #4
 800bd6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 f868 	bl	800be44 <HAL_SD_InitCard>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d001      	beq.n	800bd7e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e05d      	b.n	800be3a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bd7e:	f107 0308 	add.w	r3, r7, #8
 800bd82:	4619      	mov	r1, r3
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fdaf 	bl	800c8e8 <HAL_SD_GetCardStatus>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d001      	beq.n	800bd94 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	e052      	b.n	800be3a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800bd94:	7e3b      	ldrb	r3, [r7, #24]
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bd9a:	7e7b      	ldrb	r3, [r7, #25]
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d10a      	bne.n	800bdbe <HAL_SD_Init+0x82>
 800bda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d102      	bne.n	800bdb4 <HAL_SD_Init+0x78>
 800bdae:	6a3b      	ldr	r3, [r7, #32]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d004      	beq.n	800bdbe <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdba:	659a      	str	r2, [r3, #88]	; 0x58
 800bdbc:	e00b      	b.n	800bdd6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d104      	bne.n	800bdd0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdcc:	659a      	str	r2, [r3, #88]	; 0x58
 800bdce:	e002      	b.n	800bdd6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	4619      	mov	r1, r3
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 fe6d 	bl	800cabc <HAL_SD_ConfigWideBusOperation>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d001      	beq.n	800bdec <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e026      	b.n	800be3a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bdec:	f7f6 fc52 	bl	8002694 <HAL_GetTick>
 800bdf0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bdf2:	e011      	b.n	800be18 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bdf4:	f7f6 fc4e 	bl	8002694 <HAL_GetTick>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	1ad3      	subs	r3, r2, r3
 800bdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be02:	d109      	bne.n	800be18 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800be0a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800be14:	2303      	movs	r3, #3
 800be16:	e010      	b.n	800be3a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 ff61 	bl	800cce0 <HAL_SD_GetCardState>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b04      	cmp	r3, #4
 800be22:	d1e7      	bne.n	800bdf4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3728      	adds	r7, #40	; 0x28
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
	...

0800be44 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800be44:	b590      	push	{r4, r7, lr}
 800be46:	b08d      	sub	sp, #52	; 0x34
 800be48:	af02      	add	r7, sp, #8
 800be4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800be4c:	2300      	movs	r3, #0
 800be4e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800be50:	2300      	movs	r3, #0
 800be52:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800be54:	2300      	movs	r3, #0
 800be56:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800be58:	2300      	movs	r3, #0
 800be5a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800be5c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800be60:	f04f 0100 	mov.w	r1, #0
 800be64:	f7fe f932 	bl	800a0cc <HAL_RCCEx_GetPeriphCLKFreq>
 800be68:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800be6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d109      	bne.n	800be84 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800be7e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e070      	b.n	800bf66 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be86:	0a1b      	lsrs	r3, r3, #8
 800be88:	4a39      	ldr	r2, [pc, #228]	; (800bf70 <HAL_SD_InitCard+0x12c>)
 800be8a:	fba2 2303 	umull	r2, r3, r2, r3
 800be8e:	091b      	lsrs	r3, r3, #4
 800be90:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681c      	ldr	r4, [r3, #0]
 800be96:	466a      	mov	r2, sp
 800be98:	f107 0318 	add.w	r3, r7, #24
 800be9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bea0:	e882 0003 	stmia.w	r2, {r0, r1}
 800bea4:	f107 030c 	add.w	r3, r7, #12
 800bea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800beaa:	4620      	mov	r0, r4
 800beac:	f002 fd84 	bl	800e9b8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4618      	mov	r0, r3
 800beb6:	f002 fdc7 	bl	800ea48 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d005      	beq.n	800becc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beca:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d007      	beq.n	800bee2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800bed2:	4a28      	ldr	r2, [pc, #160]	; (800bf74 <HAL_SD_InitCard+0x130>)
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beda:	3301      	adds	r3, #1
 800bedc:	4618      	mov	r0, r3
 800bede:	f7f6 fbe5 	bl	80026ac <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 ffea 	bl	800cebc <SD_PowerON>
 800bee8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800beea:	6a3b      	ldr	r3, [r7, #32]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00b      	beq.n	800bf08 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800befc:	6a3b      	ldr	r3, [r7, #32]
 800befe:	431a      	orrs	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bf04:	2301      	movs	r3, #1
 800bf06:	e02e      	b.n	800bf66 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 ff09 	bl	800cd20 <SD_InitCard>
 800bf0e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf10:	6a3b      	ldr	r3, [r7, #32]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00b      	beq.n	800bf2e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2201      	movs	r2, #1
 800bf1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	431a      	orrs	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e01b      	b.n	800bf66 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf36:	4618      	mov	r0, r3
 800bf38:	f002 fe1c 	bl	800eb74 <SDMMC_CmdBlockLength>
 800bf3c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf3e:	6a3b      	ldr	r3, [r7, #32]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00f      	beq.n	800bf64 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a0b      	ldr	r2, [pc, #44]	; (800bf78 <HAL_SD_InitCard+0x134>)
 800bf4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf50:	6a3b      	ldr	r3, [r7, #32]
 800bf52:	431a      	orrs	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	e000      	b.n	800bf66 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	372c      	adds	r7, #44	; 0x2c
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd90      	pop	{r4, r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	014f8b59 	.word	0x014f8b59
 800bf74:	00012110 	.word	0x00012110
 800bf78:	1fe00fff 	.word	0x1fe00fff

0800bf7c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b08c      	sub	sp, #48	; 0x30
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
 800bf88:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d107      	bne.n	800bfa4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf98:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e08d      	b.n	800c0c0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	f040 8086 	bne.w	800c0be <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bfb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	441a      	add	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d907      	bls.n	800bfd6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e074      	b.n	800c0c0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2203      	movs	r2, #3
 800bfda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	025a      	lsls	r2, r3, #9
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d002      	beq.n	800c002 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800bffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffe:	025b      	lsls	r3, r3, #9
 800c000:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c002:	f04f 33ff 	mov.w	r3, #4294967295
 800c006:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	025b      	lsls	r3, r3, #9
 800c00c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c00e:	2390      	movs	r3, #144	; 0x90
 800c010:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c012:	2302      	movs	r3, #2
 800c014:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c016:	2300      	movs	r3, #0
 800c018:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c01a:	2300      	movs	r3, #0
 800c01c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f107 0210 	add.w	r2, r7, #16
 800c026:	4611      	mov	r1, r2
 800c028:	4618      	mov	r0, r3
 800c02a:	f002 fd77 	bl	800eb1c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68da      	ldr	r2, [r3, #12]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c03c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2201      	movs	r2, #1
 800c04c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b01      	cmp	r3, #1
 800c052:	d90a      	bls.n	800c06a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2282      	movs	r2, #130	; 0x82
 800c058:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c060:	4618      	mov	r0, r3
 800c062:	f002 fdcd 	bl	800ec00 <SDMMC_CmdReadMultiBlock>
 800c066:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c068:	e009      	b.n	800c07e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2281      	movs	r2, #129	; 0x81
 800c06e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c076:	4618      	mov	r0, r3
 800c078:	f002 fd9f 	bl	800ebba <SDMMC_CmdReadSingleBlock>
 800c07c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c080:	2b00      	cmp	r3, #0
 800c082:	d012      	beq.n	800c0aa <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a0f      	ldr	r2, [pc, #60]	; (800c0c8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c08a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c092:	431a      	orrs	r2, r3
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e00a      	b.n	800c0c0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c0b8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	e000      	b.n	800c0c0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c0be:	2302      	movs	r3, #2
  }
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3730      	adds	r7, #48	; 0x30
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	1fe00fff 	.word	0x1fe00fff

0800c0cc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b08c      	sub	sp, #48	; 0x30
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
 800c0d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d107      	bne.n	800c0f4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	e08d      	b.n	800c210 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	f040 8086 	bne.w	800c20e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2200      	movs	r2, #0
 800c106:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	441a      	add	r2, r3
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c112:	429a      	cmp	r2, r3
 800c114:	d907      	bls.n	800c126 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c11a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c122:	2301      	movs	r3, #1
 800c124:	e074      	b.n	800c210 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2203      	movs	r2, #3
 800c12a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2200      	movs	r2, #0
 800c134:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	68ba      	ldr	r2, [r7, #8]
 800c13a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	025a      	lsls	r2, r3, #9
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d002      	beq.n	800c152 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14e:	025b      	lsls	r3, r3, #9
 800c150:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c152:	f04f 33ff 	mov.w	r3, #4294967295
 800c156:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	025b      	lsls	r3, r3, #9
 800c15c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c15e:	2390      	movs	r3, #144	; 0x90
 800c160:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c162:	2300      	movs	r3, #0
 800c164:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c166:	2300      	movs	r3, #0
 800c168:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c16a:	2300      	movs	r3, #0
 800c16c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f107 0210 	add.w	r2, r7, #16
 800c176:	4611      	mov	r1, r2
 800c178:	4618      	mov	r0, r3
 800c17a:	f002 fccf 	bl	800eb1c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	68da      	ldr	r2, [r3, #12]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c18c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2201      	movs	r2, #1
 800c19c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d90a      	bls.n	800c1ba <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	22a0      	movs	r2, #160	; 0xa0
 800c1a8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f002 fd6b 	bl	800ec8c <SDMMC_CmdWriteMultiBlock>
 800c1b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c1b8:	e009      	b.n	800c1ce <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2290      	movs	r2, #144	; 0x90
 800c1be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f002 fd3d 	bl	800ec46 <SDMMC_CmdWriteSingleBlock>
 800c1cc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d012      	beq.n	800c1fa <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a0f      	ldr	r2, [pc, #60]	; (800c218 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c1da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e2:	431a      	orrs	r2, r3
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e00a      	b.n	800c210 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800c208:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c20a:	2300      	movs	r3, #0
 800c20c:	e000      	b.n	800c210 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c20e:	2302      	movs	r3, #2
  }
}
 800c210:	4618      	mov	r0, r3
 800c212:	3730      	adds	r7, #48	; 0x30
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	1fe00fff 	.word	0x1fe00fff

0800c21c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c228:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c234:	2b00      	cmp	r3, #0
 800c236:	d008      	beq.n	800c24a <HAL_SD_IRQHandler+0x2e>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f003 0308 	and.w	r3, r3, #8
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d003      	beq.n	800c24a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f001 f926 	bl	800d494 <SD_Read_IT>
 800c248:	e19a      	b.n	800c580 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c254:	2b00      	cmp	r3, #0
 800c256:	f000 80ac 	beq.w	800c3b2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c262:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	4b59      	ldr	r3, [pc, #356]	; (800c3d4 <HAL_SD_IRQHandler+0x1b8>)
 800c270:	400b      	ands	r3, r1
 800c272:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c282:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	68da      	ldr	r2, [r3, #12]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c292:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f003 0308 	and.w	r3, r3, #8
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d038      	beq.n	800c310 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f003 0302 	and.w	r3, r3, #2
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d104      	bne.n	800c2b2 <HAL_SD_IRQHandler+0x96>
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f003 0320 	and.w	r3, r3, #32
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d011      	beq.n	800c2d6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f002 fd0c 	bl	800ecd4 <SDMMC_CmdStopTransfer>
 800c2bc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d008      	beq.n	800c2d6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	431a      	orrs	r2, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f95b 	bl	800c58c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a3f      	ldr	r2, [pc, #252]	; (800c3d8 <HAL_SD_IRQHandler+0x1bc>)
 800c2dc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f003 0301 	and.w	r3, r3, #1
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d104      	bne.n	800c300 <HAL_SD_IRQHandler+0xe4>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f003 0302 	and.w	r3, r3, #2
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d003      	beq.n	800c308 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f003 fcc9 	bl	800fc98 <HAL_SD_RxCpltCallback>
 800c306:	e13b      	b.n	800c580 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f003 fcbb 	bl	800fc84 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c30e:	e137      	b.n	800c580 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c316:	2b00      	cmp	r3, #0
 800c318:	f000 8132 	beq.w	800c580 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2200      	movs	r2, #0
 800c322:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2200      	movs	r2, #0
 800c32a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2200      	movs	r2, #0
 800c332:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f003 0302 	and.w	r3, r3, #2
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d104      	bne.n	800c348 <HAL_SD_IRQHandler+0x12c>
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f003 0320 	and.w	r3, r3, #32
 800c344:	2b00      	cmp	r3, #0
 800c346:	d011      	beq.n	800c36c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f002 fcc1 	bl	800ecd4 <SDMMC_CmdStopTransfer>
 800c352:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d008      	beq.n	800c36c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	431a      	orrs	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 f910 	bl	800c58c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2201      	movs	r2, #1
 800c370:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f003 0310 	and.w	r3, r3, #16
 800c380:	2b00      	cmp	r3, #0
 800c382:	d104      	bne.n	800c38e <HAL_SD_IRQHandler+0x172>
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f003 0320 	and.w	r3, r3, #32
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d002      	beq.n	800c394 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f003 fc78 	bl	800fc84 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f003 0301 	and.w	r3, r3, #1
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d105      	bne.n	800c3aa <HAL_SD_IRQHandler+0x18e>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f003 0302 	and.w	r3, r3, #2
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f000 80eb 	beq.w	800c580 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f003 fc74 	bl	800fc98 <HAL_SD_RxCpltCallback>
}
 800c3b0:	e0e6      	b.n	800c580 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00d      	beq.n	800c3dc <HAL_SD_IRQHandler+0x1c0>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f003 0308 	and.w	r3, r3, #8
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d008      	beq.n	800c3dc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f001 f8a8 	bl	800d520 <SD_Write_IT>
 800c3d0:	e0d6      	b.n	800c580 <HAL_SD_IRQHandler+0x364>
 800c3d2:	bf00      	nop
 800c3d4:	ffff3ec5 	.word	0xffff3ec5
 800c3d8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3e2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f000 809d 	beq.w	800c526 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3f2:	f003 0302 	and.w	r3, r3, #2
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d005      	beq.n	800c406 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3fe:	f043 0202 	orr.w	r2, r3, #2
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c40c:	f003 0308 	and.w	r3, r3, #8
 800c410:	2b00      	cmp	r3, #0
 800c412:	d005      	beq.n	800c420 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c418:	f043 0208 	orr.w	r2, r3, #8
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c426:	f003 0320 	and.w	r3, r3, #32
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d005      	beq.n	800c43a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c432:	f043 0220 	orr.w	r2, r3, #32
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c440:	f003 0310 	and.w	r3, r3, #16
 800c444:	2b00      	cmp	r3, #0
 800c446:	d005      	beq.n	800c454 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c44c:	f043 0210 	orr.w	r2, r3, #16
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a4b      	ldr	r2, [pc, #300]	; (800c588 <HAL_SD_IRQHandler+0x36c>)
 800c45a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c46a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68da      	ldr	r2, [r3, #12]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c47a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c48a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68da      	ldr	r2, [r3, #12]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c49a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f002 fc17 	bl	800ecd4 <SDMMC_CmdStopTransfer>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ac:	431a      	orrs	r2, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	68da      	ldr	r2, [r3, #12]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c4c0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4ca:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f003 0308 	and.w	r3, r3, #8
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00a      	beq.n	800c4ec <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 f851 	bl	800c58c <HAL_SD_ErrorCallback>
}
 800c4ea:	e049      	b.n	800c580 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d044      	beq.n	800c580 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d040      	beq.n	800c580 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c50c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2200      	movs	r2, #0
 800c514:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2201      	movs	r2, #1
 800c51a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 f834 	bl	800c58c <HAL_SD_ErrorCallback>
}
 800c524:	e02c      	b.n	800c580 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c52c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c530:	2b00      	cmp	r3, #0
 800c532:	d025      	beq.n	800c580 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c544:	f003 0304 	and.w	r3, r3, #4
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10c      	bne.n	800c566 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f003 0320 	and.w	r3, r3, #32
 800c552:	2b00      	cmp	r3, #0
 800c554:	d003      	beq.n	800c55e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f001 f84a 	bl	800d5f0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c55c:	e010      	b.n	800c580 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f001 f832 	bl	800d5c8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c564:	e00c      	b.n	800c580 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f003 0320 	and.w	r3, r3, #32
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d003      	beq.n	800c578 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f001 f833 	bl	800d5dc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c576:	e003      	b.n	800c580 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f001 f81b 	bl	800d5b4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c57e:	e7ff      	b.n	800c580 <HAL_SD_IRQHandler+0x364>
 800c580:	bf00      	nop
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	18000f3a 	.word	0x18000f3a

0800c58c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c594:	bf00      	nop
 800c596:	370c      	adds	r7, #12
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr

0800c5a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5ae:	0f9b      	lsrs	r3, r3, #30
 800c5b0:	b2da      	uxtb	r2, r3
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5ba:	0e9b      	lsrs	r3, r3, #26
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	f003 030f 	and.w	r3, r3, #15
 800c5c2:	b2da      	uxtb	r2, r3
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5cc:	0e1b      	lsrs	r3, r3, #24
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	f003 0303 	and.w	r3, r3, #3
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5de:	0c1b      	lsrs	r3, r3, #16
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5ea:	0a1b      	lsrs	r3, r3, #8
 800c5ec:	b2da      	uxtb	r2, r3
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c600:	0d1b      	lsrs	r3, r3, #20
 800c602:	b29a      	uxth	r2, r3
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c60c:	0c1b      	lsrs	r3, r3, #16
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	f003 030f 	and.w	r3, r3, #15
 800c614:	b2da      	uxtb	r2, r3
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c61e:	0bdb      	lsrs	r3, r3, #15
 800c620:	b2db      	uxtb	r3, r3
 800c622:	f003 0301 	and.w	r3, r3, #1
 800c626:	b2da      	uxtb	r2, r3
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c630:	0b9b      	lsrs	r3, r3, #14
 800c632:	b2db      	uxtb	r3, r3
 800c634:	f003 0301 	and.w	r3, r3, #1
 800c638:	b2da      	uxtb	r2, r3
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c642:	0b5b      	lsrs	r3, r3, #13
 800c644:	b2db      	uxtb	r3, r3
 800c646:	f003 0301 	and.w	r3, r3, #1
 800c64a:	b2da      	uxtb	r2, r3
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c654:	0b1b      	lsrs	r3, r3, #12
 800c656:	b2db      	uxtb	r3, r3
 800c658:	f003 0301 	and.w	r3, r3, #1
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	2200      	movs	r2, #0
 800c666:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d163      	bne.n	800c738 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c674:	009a      	lsls	r2, r3, #2
 800c676:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c67a:	4013      	ands	r3, r2
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800c680:	0f92      	lsrs	r2, r2, #30
 800c682:	431a      	orrs	r2, r3
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c68c:	0edb      	lsrs	r3, r3, #27
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	f003 0307 	and.w	r3, r3, #7
 800c694:	b2da      	uxtb	r2, r3
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c69e:	0e1b      	lsrs	r3, r3, #24
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	f003 0307 	and.w	r3, r3, #7
 800c6a6:	b2da      	uxtb	r2, r3
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6b0:	0d5b      	lsrs	r3, r3, #21
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	f003 0307 	and.w	r3, r3, #7
 800c6b8:	b2da      	uxtb	r2, r3
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6c2:	0c9b      	lsrs	r3, r3, #18
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	f003 0307 	and.w	r3, r3, #7
 800c6ca:	b2da      	uxtb	r2, r3
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6d4:	0bdb      	lsrs	r3, r3, #15
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	f003 0307 	and.w	r3, r3, #7
 800c6dc:	b2da      	uxtb	r2, r3
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	1c5a      	adds	r2, r3, #1
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	7e1b      	ldrb	r3, [r3, #24]
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	f003 0307 	and.w	r3, r3, #7
 800c6f6:	3302      	adds	r3, #2
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c702:	fb03 f202 	mul.w	r2, r3, r2
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	7a1b      	ldrb	r3, [r3, #8]
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	f003 030f 	and.w	r3, r3, #15
 800c714:	2201      	movs	r2, #1
 800c716:	409a      	lsls	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c724:	0a52      	lsrs	r2, r2, #9
 800c726:	fb03 f202 	mul.w	r2, r3, r2
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c734:	655a      	str	r2, [r3, #84]	; 0x54
 800c736:	e031      	b.n	800c79c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d11d      	bne.n	800c77c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c744:	041b      	lsls	r3, r3, #16
 800c746:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c74e:	0c1b      	lsrs	r3, r3, #16
 800c750:	431a      	orrs	r2, r3
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	691b      	ldr	r3, [r3, #16]
 800c75a:	3301      	adds	r3, #1
 800c75c:	029a      	lsls	r2, r3, #10
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c770:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	655a      	str	r2, [r3, #84]	; 0x54
 800c77a:	e00f      	b.n	800c79c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a58      	ldr	r2, [pc, #352]	; (800c8e4 <HAL_SD_GetCardCSD+0x344>)
 800c782:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c788:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	e09d      	b.n	800c8d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7a0:	0b9b      	lsrs	r3, r3, #14
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	f003 0301 	and.w	r3, r3, #1
 800c7a8:	b2da      	uxtb	r2, r3
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7b2:	09db      	lsrs	r3, r3, #7
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7d4:	0fdb      	lsrs	r3, r3, #31
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7e0:	0f5b      	lsrs	r3, r3, #29
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	f003 0303 	and.w	r3, r3, #3
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7f2:	0e9b      	lsrs	r3, r3, #26
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	f003 0307 	and.w	r3, r3, #7
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c804:	0d9b      	lsrs	r3, r3, #22
 800c806:	b2db      	uxtb	r3, r3
 800c808:	f003 030f 	and.w	r3, r3, #15
 800c80c:	b2da      	uxtb	r2, r3
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c816:	0d5b      	lsrs	r3, r3, #21
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	f003 0301 	and.w	r3, r3, #1
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c832:	0c1b      	lsrs	r3, r3, #16
 800c834:	b2db      	uxtb	r3, r3
 800c836:	f003 0301 	and.w	r3, r3, #1
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c846:	0bdb      	lsrs	r3, r3, #15
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	f003 0301 	and.w	r3, r3, #1
 800c84e:	b2da      	uxtb	r2, r3
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c85a:	0b9b      	lsrs	r3, r3, #14
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	f003 0301 	and.w	r3, r3, #1
 800c862:	b2da      	uxtb	r2, r3
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c86e:	0b5b      	lsrs	r3, r3, #13
 800c870:	b2db      	uxtb	r3, r3
 800c872:	f003 0301 	and.w	r3, r3, #1
 800c876:	b2da      	uxtb	r2, r3
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c882:	0b1b      	lsrs	r3, r3, #12
 800c884:	b2db      	uxtb	r3, r3
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c896:	0a9b      	lsrs	r3, r3, #10
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	f003 0303 	and.w	r3, r3, #3
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8aa:	0a1b      	lsrs	r3, r3, #8
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	f003 0303 	and.w	r3, r3, #3
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8be:	085b      	lsrs	r3, r3, #1
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c8d6:	2300      	movs	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr
 800c8e4:	1fe00fff 	.word	0x1fe00fff

0800c8e8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b094      	sub	sp, #80	; 0x50
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	2b03      	cmp	r3, #3
 800c902:	d101      	bne.n	800c908 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	e0a7      	b.n	800ca58 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c908:	f107 0308 	add.w	r3, r7, #8
 800c90c:	4619      	mov	r1, r3
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 fb62 	bl	800cfd8 <SD_SendSDStatus>
 800c914:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d011      	beq.n	800c940 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a4f      	ldr	r2, [pc, #316]	; (800ca60 <HAL_SD_GetCardStatus+0x178>)
 800c922:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c92a:	431a      	orrs	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800c938:	2301      	movs	r3, #1
 800c93a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c93e:	e070      	b.n	800ca22 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	099b      	lsrs	r3, r3, #6
 800c944:	b2db      	uxtb	r3, r3
 800c946:	f003 0303 	and.w	r3, r3, #3
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	095b      	lsrs	r3, r3, #5
 800c954:	b2db      	uxtb	r3, r3
 800c956:	f003 0301 	and.w	r3, r3, #1
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	0a1b      	lsrs	r3, r3, #8
 800c964:	b29b      	uxth	r3, r3
 800c966:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	0e1b      	lsrs	r3, r3, #24
 800c970:	b29b      	uxth	r3, r3
 800c972:	4313      	orrs	r3, r2
 800c974:	b29a      	uxth	r2, r3
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	061a      	lsls	r2, r3, #24
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	021b      	lsls	r3, r3, #8
 800c982:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c986:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	0a1b      	lsrs	r3, r3, #8
 800c98c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c990:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	0e1b      	lsrs	r3, r3, #24
 800c996:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	0a1b      	lsrs	r3, r3, #8
 800c9a8:	b2da      	uxtb	r2, r3
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	0d1b      	lsrs	r3, r3, #20
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	f003 030f 	and.w	r3, r3, #15
 800c9b8:	b2da      	uxtb	r2, r3
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	0c1b      	lsrs	r3, r3, #16
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	0a9b      	lsrs	r3, r3, #10
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	0a1b      	lsrs	r3, r3, #8
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	f003 0303 	and.w	r3, r3, #3
 800c9f4:	b2da      	uxtb	r2, r3
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	091b      	lsrs	r3, r3, #4
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	f003 030f 	and.w	r3, r3, #15
 800ca04:	b2da      	uxtb	r2, r3
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	f003 030f 	and.w	r3, r3, #15
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	0e1b      	lsrs	r3, r3, #24
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f002 f8a2 	bl	800eb74 <SDMMC_CmdBlockLength>
 800ca30:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d00d      	beq.n	800ca54 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a08      	ldr	r2, [pc, #32]	; (800ca60 <HAL_SD_GetCardStatus+0x178>)
 800ca3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca44:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800ca54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3750      	adds	r7, #80	; 0x50
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	1fe00fff 	.word	0x1fe00fff

0800ca64 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cabc:	b590      	push	{r4, r7, lr}
 800cabe:	b08d      	sub	sp, #52	; 0x34
 800cac0:	af02      	add	r7, sp, #8
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2203      	movs	r2, #3
 800cad0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad8:	2b03      	cmp	r3, #3
 800cada:	d02e      	beq.n	800cb3a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cae2:	d106      	bne.n	800caf2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cae8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	635a      	str	r2, [r3, #52]	; 0x34
 800caf0:	e029      	b.n	800cb46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800caf8:	d10a      	bne.n	800cb10 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 fb64 	bl	800d1c8 <SD_WideBus_Enable>
 800cb00:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb06:	6a3b      	ldr	r3, [r7, #32]
 800cb08:	431a      	orrs	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	635a      	str	r2, [r3, #52]	; 0x34
 800cb0e:	e01a      	b.n	800cb46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d10a      	bne.n	800cb2c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 fba1 	bl	800d25e <SD_WideBus_Disable>
 800cb1c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb22:	6a3b      	ldr	r3, [r7, #32]
 800cb24:	431a      	orrs	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	635a      	str	r2, [r3, #52]	; 0x34
 800cb2a:	e00c      	b.n	800cb46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	635a      	str	r2, [r3, #52]	; 0x34
 800cb38:	e005      	b.n	800cb46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb3e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d007      	beq.n	800cb5e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a5f      	ldr	r2, [pc, #380]	; (800ccd0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cb54:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb5c:	e096      	b.n	800cc8c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cb5e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cb62:	f04f 0100 	mov.w	r1, #0
 800cb66:	f7fd fab1 	bl	800a0cc <HAL_RCCEx_GetPeriphCLKFreq>
 800cb6a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f000 8083 	beq.w	800cc7a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	691b      	ldr	r3, [r3, #16]
 800cb88:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	695a      	ldr	r2, [r3, #20]
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	4950      	ldr	r1, [pc, #320]	; (800ccd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cb92:	fba1 1303 	umull	r1, r3, r1, r3
 800cb96:	0e1b      	lsrs	r3, r3, #24
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d303      	bcc.n	800cba4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	695b      	ldr	r3, [r3, #20]
 800cba0:	61bb      	str	r3, [r7, #24]
 800cba2:	e05a      	b.n	800cc5a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbac:	d103      	bne.n	800cbb6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	695b      	ldr	r3, [r3, #20]
 800cbb2:	61bb      	str	r3, [r7, #24]
 800cbb4:	e051      	b.n	800cc5a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbbe:	d126      	bne.n	800cc0e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	695b      	ldr	r3, [r3, #20]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10e      	bne.n	800cbe6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	4a43      	ldr	r2, [pc, #268]	; (800ccd8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d906      	bls.n	800cbde <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	4a40      	ldr	r2, [pc, #256]	; (800ccd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cbd4:	fba2 2303 	umull	r2, r3, r2, r3
 800cbd8:	0e5b      	lsrs	r3, r3, #25
 800cbda:	61bb      	str	r3, [r7, #24]
 800cbdc:	e03d      	b.n	800cc5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	61bb      	str	r3, [r7, #24]
 800cbe4:	e039      	b.n	800cc5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	695b      	ldr	r3, [r3, #20]
 800cbea:	005b      	lsls	r3, r3, #1
 800cbec:	69fa      	ldr	r2, [r7, #28]
 800cbee:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbf2:	4a39      	ldr	r2, [pc, #228]	; (800ccd8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d906      	bls.n	800cc06 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	4a36      	ldr	r2, [pc, #216]	; (800ccd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cbfc:	fba2 2303 	umull	r2, r3, r2, r3
 800cc00:	0e5b      	lsrs	r3, r3, #25
 800cc02:	61bb      	str	r3, [r7, #24]
 800cc04:	e029      	b.n	800cc5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	695b      	ldr	r3, [r3, #20]
 800cc0a:	61bb      	str	r3, [r7, #24]
 800cc0c:	e025      	b.n	800cc5a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	695b      	ldr	r3, [r3, #20]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10e      	bne.n	800cc34 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	4a30      	ldr	r2, [pc, #192]	; (800ccdc <HAL_SD_ConfigWideBusOperation+0x220>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d906      	bls.n	800cc2c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	4a2c      	ldr	r2, [pc, #176]	; (800ccd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc22:	fba2 2303 	umull	r2, r3, r2, r3
 800cc26:	0e1b      	lsrs	r3, r3, #24
 800cc28:	61bb      	str	r3, [r7, #24]
 800cc2a:	e016      	b.n	800cc5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	695b      	ldr	r3, [r3, #20]
 800cc30:	61bb      	str	r3, [r7, #24]
 800cc32:	e012      	b.n	800cc5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	695b      	ldr	r3, [r3, #20]
 800cc38:	005b      	lsls	r3, r3, #1
 800cc3a:	69fa      	ldr	r2, [r7, #28]
 800cc3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc40:	4a26      	ldr	r2, [pc, #152]	; (800ccdc <HAL_SD_ConfigWideBusOperation+0x220>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d906      	bls.n	800cc54 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	4a22      	ldr	r2, [pc, #136]	; (800ccd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc4a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc4e:	0e1b      	lsrs	r3, r3, #24
 800cc50:	61bb      	str	r3, [r7, #24]
 800cc52:	e002      	b.n	800cc5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	695b      	ldr	r3, [r3, #20]
 800cc58:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681c      	ldr	r4, [r3, #0]
 800cc5e:	466a      	mov	r2, sp
 800cc60:	f107 0314 	add.w	r3, r7, #20
 800cc64:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cc68:	e882 0003 	stmia.w	r2, {r0, r1}
 800cc6c:	f107 0308 	add.w	r3, r7, #8
 800cc70:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc72:	4620      	mov	r0, r4
 800cc74:	f001 fea0 	bl	800e9b8 <SDMMC_Init>
 800cc78:	e008      	b.n	800cc8c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800cc86:	2301      	movs	r3, #1
 800cc88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cc94:	4618      	mov	r0, r3
 800cc96:	f001 ff6d 	bl	800eb74 <SDMMC_CmdBlockLength>
 800cc9a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc9c:	6a3b      	ldr	r3, [r7, #32]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d00c      	beq.n	800ccbc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a0a      	ldr	r2, [pc, #40]	; (800ccd0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cca8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccae:	6a3b      	ldr	r3, [r7, #32]
 800ccb0:	431a      	orrs	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ccc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	372c      	adds	r7, #44	; 0x2c
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd90      	pop	{r4, r7, pc}
 800ccd0:	1fe00fff 	.word	0x1fe00fff
 800ccd4:	55e63b89 	.word	0x55e63b89
 800ccd8:	02faf080 	.word	0x02faf080
 800ccdc:	017d7840 	.word	0x017d7840

0800cce0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b086      	sub	sp, #24
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cce8:	2300      	movs	r3, #0
 800ccea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ccec:	f107 030c 	add.w	r3, r7, #12
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fa40 	bl	800d178 <SD_SendStatus>
 800ccf8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d005      	beq.n	800cd0c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	431a      	orrs	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	0a5b      	lsrs	r3, r3, #9
 800cd10:	f003 030f 	and.w	r3, r3, #15
 800cd14:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cd16:	693b      	ldr	r3, [r7, #16]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3718      	adds	r7, #24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b090      	sub	sp, #64	; 0x40
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cd2c:	f7f5 fcb2 	bl	8002694 <HAL_GetTick>
 800cd30:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f001 fe97 	bl	800ea6a <SDMMC_GetPowerState>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d102      	bne.n	800cd48 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cd42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cd46:	e0b5      	b.n	800ceb4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd4c:	2b03      	cmp	r3, #3
 800cd4e:	d02e      	beq.n	800cdae <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4618      	mov	r0, r3
 800cd56:	f002 f8e2 	bl	800ef1e <SDMMC_CmdSendCID>
 800cd5a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d001      	beq.n	800cd66 <SD_InitCard+0x46>
    {
      return errorstate;
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	e0a6      	b.n	800ceb4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f001 fec2 	bl	800eaf6 <SDMMC_GetResponse>
 800cd72:	4602      	mov	r2, r0
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2104      	movs	r1, #4
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f001 feb9 	bl	800eaf6 <SDMMC_GetResponse>
 800cd84:	4602      	mov	r2, r0
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2108      	movs	r1, #8
 800cd90:	4618      	mov	r0, r3
 800cd92:	f001 feb0 	bl	800eaf6 <SDMMC_GetResponse>
 800cd96:	4602      	mov	r2, r0
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	210c      	movs	r1, #12
 800cda2:	4618      	mov	r0, r3
 800cda4:	f001 fea7 	bl	800eaf6 <SDMMC_GetResponse>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb2:	2b03      	cmp	r3, #3
 800cdb4:	d01d      	beq.n	800cdf2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800cdb6:	e019      	b.n	800cdec <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f107 020a 	add.w	r2, r7, #10
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f002 f8ea 	bl	800ef9c <SDMMC_CmdSetRelAdd>
 800cdc8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d001      	beq.n	800cdd4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd2:	e06f      	b.n	800ceb4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800cdd4:	f7f5 fc5e 	bl	8002694 <HAL_GetTick>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	f241 3287 	movw	r2, #4999	; 0x1387
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d902      	bls.n	800cdec <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800cde6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdea:	e063      	b.n	800ceb4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800cdec:	897b      	ldrh	r3, [r7, #10]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d0e2      	beq.n	800cdb8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	d036      	beq.n	800ce68 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cdfa:	897b      	ldrh	r3, [r7, #10]
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce0a:	041b      	lsls	r3, r3, #16
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	4610      	mov	r0, r2
 800ce10:	f002 f8a4 	bl	800ef5c <SDMMC_CmdSendCSD>
 800ce14:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d001      	beq.n	800ce20 <SD_InitCard+0x100>
    {
      return errorstate;
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1e:	e049      	b.n	800ceb4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2100      	movs	r1, #0
 800ce26:	4618      	mov	r0, r3
 800ce28:	f001 fe65 	bl	800eaf6 <SDMMC_GetResponse>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2104      	movs	r1, #4
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f001 fe5c 	bl	800eaf6 <SDMMC_GetResponse>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2108      	movs	r1, #8
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f001 fe53 	bl	800eaf6 <SDMMC_GetResponse>
 800ce50:	4602      	mov	r2, r0
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	210c      	movs	r1, #12
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f001 fe4a 	bl	800eaf6 <SDMMC_GetResponse>
 800ce62:	4602      	mov	r2, r0
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2104      	movs	r1, #4
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f001 fe41 	bl	800eaf6 <SDMMC_GetResponse>
 800ce74:	4603      	mov	r3, r0
 800ce76:	0d1a      	lsrs	r2, r3, #20
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ce7c:	f107 030c 	add.w	r3, r7, #12
 800ce80:	4619      	mov	r1, r3
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f7ff fb8c 	bl	800c5a0 <HAL_SD_GetCardCSD>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d002      	beq.n	800ce94 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ce92:	e00f      	b.n	800ceb4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce9c:	041b      	lsls	r3, r3, #16
 800ce9e:	4619      	mov	r1, r3
 800cea0:	4610      	mov	r0, r2
 800cea2:	f001 ff53 	bl	800ed4c <SDMMC_CmdSelDesel>
 800cea6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800cea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d001      	beq.n	800ceb2 <SD_InitCard+0x192>
  {
    return errorstate;
 800ceae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb0:	e000      	b.n	800ceb4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3740      	adds	r7, #64	; 0x40
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cec4:	2300      	movs	r3, #0
 800cec6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800cec8:	2300      	movs	r3, #0
 800ceca:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800cecc:	2300      	movs	r3, #0
 800cece:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f001 ff5c 	bl	800ed92 <SDMMC_CmdGoIdleState>
 800ceda:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d001      	beq.n	800cee6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	e072      	b.n	800cfcc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4618      	mov	r0, r3
 800ceec:	f001 ff6f 	bl	800edce <SDMMC_CmdOperCond>
 800cef0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cef8:	d10d      	bne.n	800cf16 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2200      	movs	r2, #0
 800cefe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f001 ff44 	bl	800ed92 <SDMMC_CmdGoIdleState>
 800cf0a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d004      	beq.n	800cf1c <SD_PowerON+0x60>
    {
      return errorstate;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	e05a      	b.n	800cfcc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d137      	bne.n	800cf94 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2100      	movs	r1, #0
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f001 ff6f 	bl	800ee0e <SDMMC_CmdAppCommand>
 800cf30:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d02d      	beq.n	800cf94 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cf3c:	e046      	b.n	800cfcc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2100      	movs	r1, #0
 800cf44:	4618      	mov	r0, r3
 800cf46:	f001 ff62 	bl	800ee0e <SDMMC_CmdAppCommand>
 800cf4a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d001      	beq.n	800cf56 <SD_PowerON+0x9a>
    {
      return errorstate;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	e03a      	b.n	800cfcc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	491e      	ldr	r1, [pc, #120]	; (800cfd4 <SD_PowerON+0x118>)
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f001 ff79 	bl	800ee54 <SDMMC_CmdAppOperCommand>
 800cf62:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d002      	beq.n	800cf70 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cf6e:	e02d      	b.n	800cfcc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2100      	movs	r1, #0
 800cf76:	4618      	mov	r0, r3
 800cf78:	f001 fdbd 	bl	800eaf6 <SDMMC_GetResponse>
 800cf7c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	0fdb      	lsrs	r3, r3, #31
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d101      	bne.n	800cf8a <SD_PowerON+0xce>
 800cf86:	2301      	movs	r3, #1
 800cf88:	e000      	b.n	800cf8c <SD_PowerON+0xd0>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	613b      	str	r3, [r7, #16]

    count++;
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	3301      	adds	r3, #1
 800cf92:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d802      	bhi.n	800cfa4 <SD_PowerON+0xe8>
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d0cc      	beq.n	800cf3e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d902      	bls.n	800cfb4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cfae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cfb2:	e00b      	b.n	800cfcc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d002      	beq.n	800cfca <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800cfca:	2300      	movs	r3, #0
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3718      	adds	r7, #24
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	c1100000 	.word	0xc1100000

0800cfd8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08c      	sub	sp, #48	; 0x30
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cfe2:	f7f5 fb57 	bl	8002694 <HAL_GetTick>
 800cfe6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2100      	movs	r1, #0
 800cff2:	4618      	mov	r0, r3
 800cff4:	f001 fd7f 	bl	800eaf6 <SDMMC_GetResponse>
 800cff8:	4603      	mov	r3, r0
 800cffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cffe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d002:	d102      	bne.n	800d00a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d008:	e0b0      	b.n	800d16c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2140      	movs	r1, #64	; 0x40
 800d010:	4618      	mov	r0, r3
 800d012:	f001 fdaf 	bl	800eb74 <SDMMC_CmdBlockLength>
 800d016:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d005      	beq.n	800d02a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d026:	6a3b      	ldr	r3, [r7, #32]
 800d028:	e0a0      	b.n	800d16c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d032:	041b      	lsls	r3, r3, #16
 800d034:	4619      	mov	r1, r3
 800d036:	4610      	mov	r0, r2
 800d038:	f001 fee9 	bl	800ee0e <SDMMC_CmdAppCommand>
 800d03c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d005      	beq.n	800d050 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d04c:	6a3b      	ldr	r3, [r7, #32]
 800d04e:	e08d      	b.n	800d16c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d050:	f04f 33ff 	mov.w	r3, #4294967295
 800d054:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d056:	2340      	movs	r3, #64	; 0x40
 800d058:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d05a:	2360      	movs	r3, #96	; 0x60
 800d05c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d05e:	2302      	movs	r3, #2
 800d060:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d062:	2300      	movs	r3, #0
 800d064:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d066:	2301      	movs	r3, #1
 800d068:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f107 0208 	add.w	r2, r7, #8
 800d072:	4611      	mov	r1, r2
 800d074:	4618      	mov	r0, r3
 800d076:	f001 fd51 	bl	800eb1c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4618      	mov	r0, r3
 800d080:	f001 ffd1 	bl	800f026 <SDMMC_CmdStatusRegister>
 800d084:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d02b      	beq.n	800d0e4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d094:	6a3b      	ldr	r3, [r7, #32]
 800d096:	e069      	b.n	800d16c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d09e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d013      	beq.n	800d0ce <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0aa:	e00d      	b.n	800d0c8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f001 fcab 	bl	800ea0c <SDMMC_ReadFIFO>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	601a      	str	r2, [r3, #0]
        pData++;
 800d0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0be:	3304      	adds	r3, #4
 800d0c0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800d0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	2b07      	cmp	r3, #7
 800d0cc:	d9ee      	bls.n	800d0ac <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d0ce:	f7f5 fae1 	bl	8002694 <HAL_GetTick>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	1ad3      	subs	r3, r2, r3
 800d0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0dc:	d102      	bne.n	800d0e4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d0de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0e2:	e043      	b.n	800d16c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ea:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d0d2      	beq.n	800d098 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0f8:	f003 0308 	and.w	r3, r3, #8
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d001      	beq.n	800d104 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d100:	2308      	movs	r3, #8
 800d102:	e033      	b.n	800d16c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d10a:	f003 0302 	and.w	r3, r3, #2
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d001      	beq.n	800d116 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d112:	2302      	movs	r3, #2
 800d114:	e02a      	b.n	800d16c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d11c:	f003 0320 	and.w	r3, r3, #32
 800d120:	2b00      	cmp	r3, #0
 800d122:	d017      	beq.n	800d154 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d124:	2320      	movs	r3, #32
 800d126:	e021      	b.n	800d16c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f001 fc6d 	bl	800ea0c <SDMMC_ReadFIFO>
 800d132:	4602      	mov	r2, r0
 800d134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d136:	601a      	str	r2, [r3, #0]
    pData++;
 800d138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13a:	3304      	adds	r3, #4
 800d13c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d13e:	f7f5 faa9 	bl	8002694 <HAL_GetTick>
 800d142:	4602      	mov	r2, r0
 800d144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d146:	1ad3      	subs	r3, r2, r3
 800d148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d14c:	d102      	bne.n	800d154 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d14e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d152:	e00b      	b.n	800d16c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d15a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1e2      	bne.n	800d128 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4a03      	ldr	r2, [pc, #12]	; (800d174 <SD_SendSDStatus+0x19c>)
 800d168:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3730      	adds	r7, #48	; 0x30
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	18000f3a 	.word	0x18000f3a

0800d178 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d102      	bne.n	800d18e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d18c:	e018      	b.n	800d1c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681a      	ldr	r2, [r3, #0]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d196:	041b      	lsls	r3, r3, #16
 800d198:	4619      	mov	r1, r3
 800d19a:	4610      	mov	r0, r2
 800d19c:	f001 ff20 	bl	800efe0 <SDMMC_CmdSendStatus>
 800d1a0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <SD_SendStatus+0x34>
  {
    return errorstate;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	e009      	b.n	800d1c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2100      	movs	r1, #0
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f001 fc9f 	bl	800eaf6 <SDMMC_GetResponse>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d1be:	2300      	movs	r3, #0
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b086      	sub	sp, #24
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2100      	movs	r1, #0
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f001 fc89 	bl	800eaf6 <SDMMC_GetResponse>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1ee:	d102      	bne.n	800d1f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d1f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1f4:	e02f      	b.n	800d256 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d1f6:	f107 030c 	add.w	r3, r7, #12
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 f879 	bl	800d2f4 <SD_FindSCR>
 800d202:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d001      	beq.n	800d20e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	e023      	b.n	800d256 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d01c      	beq.n	800d252 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d220:	041b      	lsls	r3, r3, #16
 800d222:	4619      	mov	r1, r3
 800d224:	4610      	mov	r0, r2
 800d226:	f001 fdf2 	bl	800ee0e <SDMMC_CmdAppCommand>
 800d22a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d001      	beq.n	800d236 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	e00f      	b.n	800d256 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2102      	movs	r1, #2
 800d23c:	4618      	mov	r0, r3
 800d23e:	f001 fe29 	bl	800ee94 <SDMMC_CmdBusWidth>
 800d242:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	e003      	b.n	800d256 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d24e:	2300      	movs	r3, #0
 800d250:	e001      	b.n	800d256 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d252:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d256:	4618      	mov	r0, r3
 800d258:	3718      	adds	r7, #24
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b086      	sub	sp, #24
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d266:	2300      	movs	r3, #0
 800d268:	60fb      	str	r3, [r7, #12]
 800d26a:	2300      	movs	r3, #0
 800d26c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2100      	movs	r1, #0
 800d274:	4618      	mov	r0, r3
 800d276:	f001 fc3e 	bl	800eaf6 <SDMMC_GetResponse>
 800d27a:	4603      	mov	r3, r0
 800d27c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d280:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d284:	d102      	bne.n	800d28c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d286:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d28a:	e02f      	b.n	800d2ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d28c:	f107 030c 	add.w	r3, r7, #12
 800d290:	4619      	mov	r1, r3
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 f82e 	bl	800d2f4 <SD_FindSCR>
 800d298:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d001      	beq.n	800d2a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	e023      	b.n	800d2ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d01c      	beq.n	800d2e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2b6:	041b      	lsls	r3, r3, #16
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	4610      	mov	r0, r2
 800d2bc:	f001 fda7 	bl	800ee0e <SDMMC_CmdAppCommand>
 800d2c0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d001      	beq.n	800d2cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	e00f      	b.n	800d2ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f001 fdde 	bl	800ee94 <SDMMC_CmdBusWidth>
 800d2d8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	e003      	b.n	800d2ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	e001      	b.n	800d2ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d2e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3718      	adds	r7, #24
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b08e      	sub	sp, #56	; 0x38
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d2fe:	f7f5 f9c9 	bl	8002694 <HAL_GetTick>
 800d302:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d304:	2300      	movs	r3, #0
 800d306:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d308:	2300      	movs	r3, #0
 800d30a:	60bb      	str	r3, [r7, #8]
 800d30c:	2300      	movs	r3, #0
 800d30e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2108      	movs	r1, #8
 800d31a:	4618      	mov	r0, r3
 800d31c:	f001 fc2a 	bl	800eb74 <SDMMC_CmdBlockLength>
 800d320:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d324:	2b00      	cmp	r3, #0
 800d326:	d001      	beq.n	800d32c <SD_FindSCR+0x38>
  {
    return errorstate;
 800d328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32a:	e0ad      	b.n	800d488 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d334:	041b      	lsls	r3, r3, #16
 800d336:	4619      	mov	r1, r3
 800d338:	4610      	mov	r0, r2
 800d33a:	f001 fd68 	bl	800ee0e <SDMMC_CmdAppCommand>
 800d33e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d342:	2b00      	cmp	r3, #0
 800d344:	d001      	beq.n	800d34a <SD_FindSCR+0x56>
  {
    return errorstate;
 800d346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d348:	e09e      	b.n	800d488 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d34a:	f04f 33ff 	mov.w	r3, #4294967295
 800d34e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d350:	2308      	movs	r3, #8
 800d352:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d354:	2330      	movs	r3, #48	; 0x30
 800d356:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d358:	2302      	movs	r3, #2
 800d35a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d35c:	2300      	movs	r3, #0
 800d35e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d360:	2301      	movs	r3, #1
 800d362:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f107 0210 	add.w	r2, r7, #16
 800d36c:	4611      	mov	r1, r2
 800d36e:	4618      	mov	r0, r3
 800d370:	f001 fbd4 	bl	800eb1c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4618      	mov	r0, r3
 800d37a:	f001 fdae 	bl	800eeda <SDMMC_CmdSendSCR>
 800d37e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d382:	2b00      	cmp	r3, #0
 800d384:	d027      	beq.n	800d3d6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d388:	e07e      	b.n	800d488 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d394:	2b00      	cmp	r3, #0
 800d396:	d113      	bne.n	800d3c0 <SD_FindSCR+0xcc>
 800d398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d110      	bne.n	800d3c0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f001 fb32 	bl	800ea0c <SDMMC_ReadFIFO>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f001 fb2b 	bl	800ea0c <SDMMC_ReadFIFO>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	60fb      	str	r3, [r7, #12]
      index++;
 800d3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3bc:	3301      	adds	r3, #1
 800d3be:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d3c0:	f7f5 f968 	bl	8002694 <HAL_GetTick>
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c8:	1ad3      	subs	r3, r2, r3
 800d3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ce:	d102      	bne.n	800d3d6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d3d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3d4:	e058      	b.n	800d488 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3dc:	f240 532a 	movw	r3, #1322	; 0x52a
 800d3e0:	4013      	ands	r3, r2
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d0d1      	beq.n	800d38a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ec:	f003 0308 	and.w	r3, r3, #8
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d005      	beq.n	800d400 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2208      	movs	r2, #8
 800d3fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d3fc:	2308      	movs	r3, #8
 800d3fe:	e043      	b.n	800d488 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d406:	f003 0302 	and.w	r3, r3, #2
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d005      	beq.n	800d41a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2202      	movs	r2, #2
 800d414:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d416:	2302      	movs	r3, #2
 800d418:	e036      	b.n	800d488 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d420:	f003 0320 	and.w	r3, r3, #32
 800d424:	2b00      	cmp	r3, #0
 800d426:	d005      	beq.n	800d434 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2220      	movs	r2, #32
 800d42e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d430:	2320      	movs	r3, #32
 800d432:	e029      	b.n	800d488 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a15      	ldr	r2, [pc, #84]	; (800d490 <SD_FindSCR+0x19c>)
 800d43a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	061a      	lsls	r2, r3, #24
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	021b      	lsls	r3, r3, #8
 800d444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d448:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	0a1b      	lsrs	r3, r3, #8
 800d44e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d452:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	0e1b      	lsrs	r3, r3, #24
 800d458:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45c:	601a      	str	r2, [r3, #0]
    scr++;
 800d45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d460:	3304      	adds	r3, #4
 800d462:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	061a      	lsls	r2, r3, #24
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	021b      	lsls	r3, r3, #8
 800d46c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d470:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	0a1b      	lsrs	r3, r3, #8
 800d476:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d47a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	0e1b      	lsrs	r3, r3, #24
 800d480:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d484:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d486:	2300      	movs	r3, #0
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3738      	adds	r7, #56	; 0x38
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	18000f3a 	.word	0x18000f3a

0800d494 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a6:	2b1f      	cmp	r3, #31
 800d4a8:	d936      	bls.n	800d518 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	617b      	str	r3, [r7, #20]
 800d4ae:	e027      	b.n	800d500 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f001 faa9 	bl	800ea0c <SDMMC_ReadFIFO>
 800d4ba:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	b2da      	uxtb	r2, r3
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	0a1b      	lsrs	r3, r3, #8
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	0c1b      	lsrs	r3, r3, #16
 800d4de:	b2da      	uxtb	r2, r3
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	0e1b      	lsrs	r3, r3, #24
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	617b      	str	r3, [r7, #20]
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	2b07      	cmp	r3, #7
 800d504:	d9d4      	bls.n	800d4b0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	693a      	ldr	r2, [r7, #16]
 800d50a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d510:	f1a3 0220 	sub.w	r2, r3, #32
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800d518:	bf00      	nop
 800d51a:	3718      	adds	r7, #24
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	69db      	ldr	r3, [r3, #28]
 800d52c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a1b      	ldr	r3, [r3, #32]
 800d532:	2b1f      	cmp	r3, #31
 800d534:	d93a      	bls.n	800d5ac <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d536:	2300      	movs	r3, #0
 800d538:	617b      	str	r3, [r7, #20]
 800d53a:	e02b      	b.n	800d594 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	3301      	adds	r3, #1
 800d546:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	021a      	lsls	r2, r3, #8
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	4313      	orrs	r3, r2
 800d552:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	3301      	adds	r3, #1
 800d558:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	041a      	lsls	r2, r3, #16
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	4313      	orrs	r3, r2
 800d564:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	3301      	adds	r3, #1
 800d56a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	061a      	lsls	r2, r3, #24
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	4313      	orrs	r3, r2
 800d576:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	3301      	adds	r3, #1
 800d57c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f107 020c 	add.w	r2, r7, #12
 800d586:	4611      	mov	r1, r2
 800d588:	4618      	mov	r0, r3
 800d58a:	f001 fa4c 	bl	800ea26 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	3301      	adds	r3, #1
 800d592:	617b      	str	r3, [r7, #20]
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	2b07      	cmp	r3, #7
 800d598:	d9d0      	bls.n	800d53c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	693a      	ldr	r2, [r7, #16]
 800d59e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6a1b      	ldr	r3, [r3, #32]
 800d5a4:	f1a3 0220 	sub.w	r2, r3, #32
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	621a      	str	r2, [r3, #32]
  }
}
 800d5ac:	bf00      	nop
 800d5ae:	3718      	adds	r7, #24
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d5bc:	bf00      	nop
 800d5be:	370c      	adds	r7, #12
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d5d0:	bf00      	nop
 800d5d2:	370c      	adds	r7, #12
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d5e4:	bf00      	nop
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d5f8:	bf00      	nop
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d101      	bne.n	800d616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d612:	2301      	movs	r3, #1
 800d614:	e042      	b.n	800d69c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d106      	bne.n	800d62e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f7f4 fd2f 	bl	800208c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2224      	movs	r2, #36	; 0x24
 800d632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f022 0201 	bic.w	r2, r2, #1
 800d644:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 f82c 	bl	800d6a4 <UART_SetConfig>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d101      	bne.n	800d656 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d652:	2301      	movs	r3, #1
 800d654:	e022      	b.n	800d69c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d002      	beq.n	800d664 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 fe8c 	bl	800e37c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	685a      	ldr	r2, [r3, #4]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d672:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	689a      	ldr	r2, [r3, #8]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d682:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f042 0201 	orr.w	r2, r2, #1
 800d692:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 ff13 	bl	800e4c0 <UART_CheckIdleState>
 800d69a:	4603      	mov	r3, r0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d6a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d6a8:	b092      	sub	sp, #72	; 0x48
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	689a      	ldr	r2, [r3, #8]
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	691b      	ldr	r3, [r3, #16]
 800d6bc:	431a      	orrs	r2, r3
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	695b      	ldr	r3, [r3, #20]
 800d6c2:	431a      	orrs	r2, r3
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	69db      	ldr	r3, [r3, #28]
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	4bbe      	ldr	r3, [pc, #760]	; (800d9cc <UART_SetConfig+0x328>)
 800d6d4:	4013      	ands	r3, r2
 800d6d6:	697a      	ldr	r2, [r7, #20]
 800d6d8:	6812      	ldr	r2, [r2, #0]
 800d6da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6dc:	430b      	orrs	r3, r1
 800d6de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	68da      	ldr	r2, [r3, #12]
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	430a      	orrs	r2, r1
 800d6f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	699b      	ldr	r3, [r3, #24]
 800d6fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4ab3      	ldr	r2, [pc, #716]	; (800d9d0 <UART_SetConfig+0x32c>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d004      	beq.n	800d710 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	6a1b      	ldr	r3, [r3, #32]
 800d70a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d70c:	4313      	orrs	r3, r2
 800d70e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	689a      	ldr	r2, [r3, #8]
 800d716:	4baf      	ldr	r3, [pc, #700]	; (800d9d4 <UART_SetConfig+0x330>)
 800d718:	4013      	ands	r3, r2
 800d71a:	697a      	ldr	r2, [r7, #20]
 800d71c:	6812      	ldr	r2, [r2, #0]
 800d71e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d720:	430b      	orrs	r3, r1
 800d722:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d72a:	f023 010f 	bic.w	r1, r3, #15
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	430a      	orrs	r2, r1
 800d738:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4aa6      	ldr	r2, [pc, #664]	; (800d9d8 <UART_SetConfig+0x334>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d177      	bne.n	800d834 <UART_SetConfig+0x190>
 800d744:	4ba5      	ldr	r3, [pc, #660]	; (800d9dc <UART_SetConfig+0x338>)
 800d746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d748:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d74c:	2b28      	cmp	r3, #40	; 0x28
 800d74e:	d86d      	bhi.n	800d82c <UART_SetConfig+0x188>
 800d750:	a201      	add	r2, pc, #4	; (adr r2, 800d758 <UART_SetConfig+0xb4>)
 800d752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d756:	bf00      	nop
 800d758:	0800d7fd 	.word	0x0800d7fd
 800d75c:	0800d82d 	.word	0x0800d82d
 800d760:	0800d82d 	.word	0x0800d82d
 800d764:	0800d82d 	.word	0x0800d82d
 800d768:	0800d82d 	.word	0x0800d82d
 800d76c:	0800d82d 	.word	0x0800d82d
 800d770:	0800d82d 	.word	0x0800d82d
 800d774:	0800d82d 	.word	0x0800d82d
 800d778:	0800d805 	.word	0x0800d805
 800d77c:	0800d82d 	.word	0x0800d82d
 800d780:	0800d82d 	.word	0x0800d82d
 800d784:	0800d82d 	.word	0x0800d82d
 800d788:	0800d82d 	.word	0x0800d82d
 800d78c:	0800d82d 	.word	0x0800d82d
 800d790:	0800d82d 	.word	0x0800d82d
 800d794:	0800d82d 	.word	0x0800d82d
 800d798:	0800d80d 	.word	0x0800d80d
 800d79c:	0800d82d 	.word	0x0800d82d
 800d7a0:	0800d82d 	.word	0x0800d82d
 800d7a4:	0800d82d 	.word	0x0800d82d
 800d7a8:	0800d82d 	.word	0x0800d82d
 800d7ac:	0800d82d 	.word	0x0800d82d
 800d7b0:	0800d82d 	.word	0x0800d82d
 800d7b4:	0800d82d 	.word	0x0800d82d
 800d7b8:	0800d815 	.word	0x0800d815
 800d7bc:	0800d82d 	.word	0x0800d82d
 800d7c0:	0800d82d 	.word	0x0800d82d
 800d7c4:	0800d82d 	.word	0x0800d82d
 800d7c8:	0800d82d 	.word	0x0800d82d
 800d7cc:	0800d82d 	.word	0x0800d82d
 800d7d0:	0800d82d 	.word	0x0800d82d
 800d7d4:	0800d82d 	.word	0x0800d82d
 800d7d8:	0800d81d 	.word	0x0800d81d
 800d7dc:	0800d82d 	.word	0x0800d82d
 800d7e0:	0800d82d 	.word	0x0800d82d
 800d7e4:	0800d82d 	.word	0x0800d82d
 800d7e8:	0800d82d 	.word	0x0800d82d
 800d7ec:	0800d82d 	.word	0x0800d82d
 800d7f0:	0800d82d 	.word	0x0800d82d
 800d7f4:	0800d82d 	.word	0x0800d82d
 800d7f8:	0800d825 	.word	0x0800d825
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d802:	e326      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d804:	2304      	movs	r3, #4
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80a:	e322      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d80c:	2308      	movs	r3, #8
 800d80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d812:	e31e      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d814:	2310      	movs	r3, #16
 800d816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d81a:	e31a      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d81c:	2320      	movs	r3, #32
 800d81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d822:	e316      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d824:	2340      	movs	r3, #64	; 0x40
 800d826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d82a:	e312      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d82c:	2380      	movs	r3, #128	; 0x80
 800d82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d832:	e30e      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a69      	ldr	r2, [pc, #420]	; (800d9e0 <UART_SetConfig+0x33c>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d130      	bne.n	800d8a0 <UART_SetConfig+0x1fc>
 800d83e:	4b67      	ldr	r3, [pc, #412]	; (800d9dc <UART_SetConfig+0x338>)
 800d840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d842:	f003 0307 	and.w	r3, r3, #7
 800d846:	2b05      	cmp	r3, #5
 800d848:	d826      	bhi.n	800d898 <UART_SetConfig+0x1f4>
 800d84a:	a201      	add	r2, pc, #4	; (adr r2, 800d850 <UART_SetConfig+0x1ac>)
 800d84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d850:	0800d869 	.word	0x0800d869
 800d854:	0800d871 	.word	0x0800d871
 800d858:	0800d879 	.word	0x0800d879
 800d85c:	0800d881 	.word	0x0800d881
 800d860:	0800d889 	.word	0x0800d889
 800d864:	0800d891 	.word	0x0800d891
 800d868:	2300      	movs	r3, #0
 800d86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d86e:	e2f0      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d870:	2304      	movs	r3, #4
 800d872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d876:	e2ec      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d878:	2308      	movs	r3, #8
 800d87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d87e:	e2e8      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d880:	2310      	movs	r3, #16
 800d882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d886:	e2e4      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d888:	2320      	movs	r3, #32
 800d88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d88e:	e2e0      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d890:	2340      	movs	r3, #64	; 0x40
 800d892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d896:	e2dc      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d898:	2380      	movs	r3, #128	; 0x80
 800d89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d89e:	e2d8      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4a4f      	ldr	r2, [pc, #316]	; (800d9e4 <UART_SetConfig+0x340>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d130      	bne.n	800d90c <UART_SetConfig+0x268>
 800d8aa:	4b4c      	ldr	r3, [pc, #304]	; (800d9dc <UART_SetConfig+0x338>)
 800d8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ae:	f003 0307 	and.w	r3, r3, #7
 800d8b2:	2b05      	cmp	r3, #5
 800d8b4:	d826      	bhi.n	800d904 <UART_SetConfig+0x260>
 800d8b6:	a201      	add	r2, pc, #4	; (adr r2, 800d8bc <UART_SetConfig+0x218>)
 800d8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8bc:	0800d8d5 	.word	0x0800d8d5
 800d8c0:	0800d8dd 	.word	0x0800d8dd
 800d8c4:	0800d8e5 	.word	0x0800d8e5
 800d8c8:	0800d8ed 	.word	0x0800d8ed
 800d8cc:	0800d8f5 	.word	0x0800d8f5
 800d8d0:	0800d8fd 	.word	0x0800d8fd
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8da:	e2ba      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d8dc:	2304      	movs	r3, #4
 800d8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8e2:	e2b6      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d8e4:	2308      	movs	r3, #8
 800d8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ea:	e2b2      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d8ec:	2310      	movs	r3, #16
 800d8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8f2:	e2ae      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d8f4:	2320      	movs	r3, #32
 800d8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8fa:	e2aa      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d8fc:	2340      	movs	r3, #64	; 0x40
 800d8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d902:	e2a6      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d904:	2380      	movs	r3, #128	; 0x80
 800d906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90a:	e2a2      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a35      	ldr	r2, [pc, #212]	; (800d9e8 <UART_SetConfig+0x344>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d130      	bne.n	800d978 <UART_SetConfig+0x2d4>
 800d916:	4b31      	ldr	r3, [pc, #196]	; (800d9dc <UART_SetConfig+0x338>)
 800d918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d91a:	f003 0307 	and.w	r3, r3, #7
 800d91e:	2b05      	cmp	r3, #5
 800d920:	d826      	bhi.n	800d970 <UART_SetConfig+0x2cc>
 800d922:	a201      	add	r2, pc, #4	; (adr r2, 800d928 <UART_SetConfig+0x284>)
 800d924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d928:	0800d941 	.word	0x0800d941
 800d92c:	0800d949 	.word	0x0800d949
 800d930:	0800d951 	.word	0x0800d951
 800d934:	0800d959 	.word	0x0800d959
 800d938:	0800d961 	.word	0x0800d961
 800d93c:	0800d969 	.word	0x0800d969
 800d940:	2300      	movs	r3, #0
 800d942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d946:	e284      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d948:	2304      	movs	r3, #4
 800d94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d94e:	e280      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d950:	2308      	movs	r3, #8
 800d952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d956:	e27c      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d958:	2310      	movs	r3, #16
 800d95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d95e:	e278      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d960:	2320      	movs	r3, #32
 800d962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d966:	e274      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d968:	2340      	movs	r3, #64	; 0x40
 800d96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d96e:	e270      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d970:	2380      	movs	r3, #128	; 0x80
 800d972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d976:	e26c      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a1b      	ldr	r2, [pc, #108]	; (800d9ec <UART_SetConfig+0x348>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d142      	bne.n	800da08 <UART_SetConfig+0x364>
 800d982:	4b16      	ldr	r3, [pc, #88]	; (800d9dc <UART_SetConfig+0x338>)
 800d984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d986:	f003 0307 	and.w	r3, r3, #7
 800d98a:	2b05      	cmp	r3, #5
 800d98c:	d838      	bhi.n	800da00 <UART_SetConfig+0x35c>
 800d98e:	a201      	add	r2, pc, #4	; (adr r2, 800d994 <UART_SetConfig+0x2f0>)
 800d990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d994:	0800d9ad 	.word	0x0800d9ad
 800d998:	0800d9b5 	.word	0x0800d9b5
 800d99c:	0800d9bd 	.word	0x0800d9bd
 800d9a0:	0800d9c5 	.word	0x0800d9c5
 800d9a4:	0800d9f1 	.word	0x0800d9f1
 800d9a8:	0800d9f9 	.word	0x0800d9f9
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9b2:	e24e      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d9b4:	2304      	movs	r3, #4
 800d9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ba:	e24a      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d9bc:	2308      	movs	r3, #8
 800d9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9c2:	e246      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d9c4:	2310      	movs	r3, #16
 800d9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ca:	e242      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d9cc:	cfff69f3 	.word	0xcfff69f3
 800d9d0:	58000c00 	.word	0x58000c00
 800d9d4:	11fff4ff 	.word	0x11fff4ff
 800d9d8:	40011000 	.word	0x40011000
 800d9dc:	58024400 	.word	0x58024400
 800d9e0:	40004400 	.word	0x40004400
 800d9e4:	40004800 	.word	0x40004800
 800d9e8:	40004c00 	.word	0x40004c00
 800d9ec:	40005000 	.word	0x40005000
 800d9f0:	2320      	movs	r3, #32
 800d9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f6:	e22c      	b.n	800de52 <UART_SetConfig+0x7ae>
 800d9f8:	2340      	movs	r3, #64	; 0x40
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fe:	e228      	b.n	800de52 <UART_SetConfig+0x7ae>
 800da00:	2380      	movs	r3, #128	; 0x80
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da06:	e224      	b.n	800de52 <UART_SetConfig+0x7ae>
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4ab1      	ldr	r2, [pc, #708]	; (800dcd4 <UART_SetConfig+0x630>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d176      	bne.n	800db00 <UART_SetConfig+0x45c>
 800da12:	4bb1      	ldr	r3, [pc, #708]	; (800dcd8 <UART_SetConfig+0x634>)
 800da14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da1a:	2b28      	cmp	r3, #40	; 0x28
 800da1c:	d86c      	bhi.n	800daf8 <UART_SetConfig+0x454>
 800da1e:	a201      	add	r2, pc, #4	; (adr r2, 800da24 <UART_SetConfig+0x380>)
 800da20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da24:	0800dac9 	.word	0x0800dac9
 800da28:	0800daf9 	.word	0x0800daf9
 800da2c:	0800daf9 	.word	0x0800daf9
 800da30:	0800daf9 	.word	0x0800daf9
 800da34:	0800daf9 	.word	0x0800daf9
 800da38:	0800daf9 	.word	0x0800daf9
 800da3c:	0800daf9 	.word	0x0800daf9
 800da40:	0800daf9 	.word	0x0800daf9
 800da44:	0800dad1 	.word	0x0800dad1
 800da48:	0800daf9 	.word	0x0800daf9
 800da4c:	0800daf9 	.word	0x0800daf9
 800da50:	0800daf9 	.word	0x0800daf9
 800da54:	0800daf9 	.word	0x0800daf9
 800da58:	0800daf9 	.word	0x0800daf9
 800da5c:	0800daf9 	.word	0x0800daf9
 800da60:	0800daf9 	.word	0x0800daf9
 800da64:	0800dad9 	.word	0x0800dad9
 800da68:	0800daf9 	.word	0x0800daf9
 800da6c:	0800daf9 	.word	0x0800daf9
 800da70:	0800daf9 	.word	0x0800daf9
 800da74:	0800daf9 	.word	0x0800daf9
 800da78:	0800daf9 	.word	0x0800daf9
 800da7c:	0800daf9 	.word	0x0800daf9
 800da80:	0800daf9 	.word	0x0800daf9
 800da84:	0800dae1 	.word	0x0800dae1
 800da88:	0800daf9 	.word	0x0800daf9
 800da8c:	0800daf9 	.word	0x0800daf9
 800da90:	0800daf9 	.word	0x0800daf9
 800da94:	0800daf9 	.word	0x0800daf9
 800da98:	0800daf9 	.word	0x0800daf9
 800da9c:	0800daf9 	.word	0x0800daf9
 800daa0:	0800daf9 	.word	0x0800daf9
 800daa4:	0800dae9 	.word	0x0800dae9
 800daa8:	0800daf9 	.word	0x0800daf9
 800daac:	0800daf9 	.word	0x0800daf9
 800dab0:	0800daf9 	.word	0x0800daf9
 800dab4:	0800daf9 	.word	0x0800daf9
 800dab8:	0800daf9 	.word	0x0800daf9
 800dabc:	0800daf9 	.word	0x0800daf9
 800dac0:	0800daf9 	.word	0x0800daf9
 800dac4:	0800daf1 	.word	0x0800daf1
 800dac8:	2301      	movs	r3, #1
 800daca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dace:	e1c0      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dad0:	2304      	movs	r3, #4
 800dad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad6:	e1bc      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dad8:	2308      	movs	r3, #8
 800dada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dade:	e1b8      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dae0:	2310      	movs	r3, #16
 800dae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dae6:	e1b4      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dae8:	2320      	movs	r3, #32
 800daea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daee:	e1b0      	b.n	800de52 <UART_SetConfig+0x7ae>
 800daf0:	2340      	movs	r3, #64	; 0x40
 800daf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf6:	e1ac      	b.n	800de52 <UART_SetConfig+0x7ae>
 800daf8:	2380      	movs	r3, #128	; 0x80
 800dafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafe:	e1a8      	b.n	800de52 <UART_SetConfig+0x7ae>
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	4a75      	ldr	r2, [pc, #468]	; (800dcdc <UART_SetConfig+0x638>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d130      	bne.n	800db6c <UART_SetConfig+0x4c8>
 800db0a:	4b73      	ldr	r3, [pc, #460]	; (800dcd8 <UART_SetConfig+0x634>)
 800db0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db0e:	f003 0307 	and.w	r3, r3, #7
 800db12:	2b05      	cmp	r3, #5
 800db14:	d826      	bhi.n	800db64 <UART_SetConfig+0x4c0>
 800db16:	a201      	add	r2, pc, #4	; (adr r2, 800db1c <UART_SetConfig+0x478>)
 800db18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db1c:	0800db35 	.word	0x0800db35
 800db20:	0800db3d 	.word	0x0800db3d
 800db24:	0800db45 	.word	0x0800db45
 800db28:	0800db4d 	.word	0x0800db4d
 800db2c:	0800db55 	.word	0x0800db55
 800db30:	0800db5d 	.word	0x0800db5d
 800db34:	2300      	movs	r3, #0
 800db36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db3a:	e18a      	b.n	800de52 <UART_SetConfig+0x7ae>
 800db3c:	2304      	movs	r3, #4
 800db3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db42:	e186      	b.n	800de52 <UART_SetConfig+0x7ae>
 800db44:	2308      	movs	r3, #8
 800db46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db4a:	e182      	b.n	800de52 <UART_SetConfig+0x7ae>
 800db4c:	2310      	movs	r3, #16
 800db4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db52:	e17e      	b.n	800de52 <UART_SetConfig+0x7ae>
 800db54:	2320      	movs	r3, #32
 800db56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db5a:	e17a      	b.n	800de52 <UART_SetConfig+0x7ae>
 800db5c:	2340      	movs	r3, #64	; 0x40
 800db5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db62:	e176      	b.n	800de52 <UART_SetConfig+0x7ae>
 800db64:	2380      	movs	r3, #128	; 0x80
 800db66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db6a:	e172      	b.n	800de52 <UART_SetConfig+0x7ae>
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a5b      	ldr	r2, [pc, #364]	; (800dce0 <UART_SetConfig+0x63c>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d130      	bne.n	800dbd8 <UART_SetConfig+0x534>
 800db76:	4b58      	ldr	r3, [pc, #352]	; (800dcd8 <UART_SetConfig+0x634>)
 800db78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db7a:	f003 0307 	and.w	r3, r3, #7
 800db7e:	2b05      	cmp	r3, #5
 800db80:	d826      	bhi.n	800dbd0 <UART_SetConfig+0x52c>
 800db82:	a201      	add	r2, pc, #4	; (adr r2, 800db88 <UART_SetConfig+0x4e4>)
 800db84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db88:	0800dba1 	.word	0x0800dba1
 800db8c:	0800dba9 	.word	0x0800dba9
 800db90:	0800dbb1 	.word	0x0800dbb1
 800db94:	0800dbb9 	.word	0x0800dbb9
 800db98:	0800dbc1 	.word	0x0800dbc1
 800db9c:	0800dbc9 	.word	0x0800dbc9
 800dba0:	2300      	movs	r3, #0
 800dba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dba6:	e154      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dba8:	2304      	movs	r3, #4
 800dbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbae:	e150      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dbb0:	2308      	movs	r3, #8
 800dbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbb6:	e14c      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dbb8:	2310      	movs	r3, #16
 800dbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbbe:	e148      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dbc0:	2320      	movs	r3, #32
 800dbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbc6:	e144      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dbc8:	2340      	movs	r3, #64	; 0x40
 800dbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbce:	e140      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dbd0:	2380      	movs	r3, #128	; 0x80
 800dbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd6:	e13c      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a41      	ldr	r2, [pc, #260]	; (800dce4 <UART_SetConfig+0x640>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	f040 8082 	bne.w	800dce8 <UART_SetConfig+0x644>
 800dbe4:	4b3c      	ldr	r3, [pc, #240]	; (800dcd8 <UART_SetConfig+0x634>)
 800dbe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dbec:	2b28      	cmp	r3, #40	; 0x28
 800dbee:	d86d      	bhi.n	800dccc <UART_SetConfig+0x628>
 800dbf0:	a201      	add	r2, pc, #4	; (adr r2, 800dbf8 <UART_SetConfig+0x554>)
 800dbf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf6:	bf00      	nop
 800dbf8:	0800dc9d 	.word	0x0800dc9d
 800dbfc:	0800dccd 	.word	0x0800dccd
 800dc00:	0800dccd 	.word	0x0800dccd
 800dc04:	0800dccd 	.word	0x0800dccd
 800dc08:	0800dccd 	.word	0x0800dccd
 800dc0c:	0800dccd 	.word	0x0800dccd
 800dc10:	0800dccd 	.word	0x0800dccd
 800dc14:	0800dccd 	.word	0x0800dccd
 800dc18:	0800dca5 	.word	0x0800dca5
 800dc1c:	0800dccd 	.word	0x0800dccd
 800dc20:	0800dccd 	.word	0x0800dccd
 800dc24:	0800dccd 	.word	0x0800dccd
 800dc28:	0800dccd 	.word	0x0800dccd
 800dc2c:	0800dccd 	.word	0x0800dccd
 800dc30:	0800dccd 	.word	0x0800dccd
 800dc34:	0800dccd 	.word	0x0800dccd
 800dc38:	0800dcad 	.word	0x0800dcad
 800dc3c:	0800dccd 	.word	0x0800dccd
 800dc40:	0800dccd 	.word	0x0800dccd
 800dc44:	0800dccd 	.word	0x0800dccd
 800dc48:	0800dccd 	.word	0x0800dccd
 800dc4c:	0800dccd 	.word	0x0800dccd
 800dc50:	0800dccd 	.word	0x0800dccd
 800dc54:	0800dccd 	.word	0x0800dccd
 800dc58:	0800dcb5 	.word	0x0800dcb5
 800dc5c:	0800dccd 	.word	0x0800dccd
 800dc60:	0800dccd 	.word	0x0800dccd
 800dc64:	0800dccd 	.word	0x0800dccd
 800dc68:	0800dccd 	.word	0x0800dccd
 800dc6c:	0800dccd 	.word	0x0800dccd
 800dc70:	0800dccd 	.word	0x0800dccd
 800dc74:	0800dccd 	.word	0x0800dccd
 800dc78:	0800dcbd 	.word	0x0800dcbd
 800dc7c:	0800dccd 	.word	0x0800dccd
 800dc80:	0800dccd 	.word	0x0800dccd
 800dc84:	0800dccd 	.word	0x0800dccd
 800dc88:	0800dccd 	.word	0x0800dccd
 800dc8c:	0800dccd 	.word	0x0800dccd
 800dc90:	0800dccd 	.word	0x0800dccd
 800dc94:	0800dccd 	.word	0x0800dccd
 800dc98:	0800dcc5 	.word	0x0800dcc5
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dca2:	e0d6      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dca4:	2304      	movs	r3, #4
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcaa:	e0d2      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dcac:	2308      	movs	r3, #8
 800dcae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb2:	e0ce      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dcb4:	2310      	movs	r3, #16
 800dcb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcba:	e0ca      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dcbc:	2320      	movs	r3, #32
 800dcbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc2:	e0c6      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dcc4:	2340      	movs	r3, #64	; 0x40
 800dcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcca:	e0c2      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dccc:	2380      	movs	r3, #128	; 0x80
 800dcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd2:	e0be      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dcd4:	40011400 	.word	0x40011400
 800dcd8:	58024400 	.word	0x58024400
 800dcdc:	40007800 	.word	0x40007800
 800dce0:	40007c00 	.word	0x40007c00
 800dce4:	40011800 	.word	0x40011800
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4aad      	ldr	r2, [pc, #692]	; (800dfa4 <UART_SetConfig+0x900>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d176      	bne.n	800dde0 <UART_SetConfig+0x73c>
 800dcf2:	4bad      	ldr	r3, [pc, #692]	; (800dfa8 <UART_SetConfig+0x904>)
 800dcf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dcfa:	2b28      	cmp	r3, #40	; 0x28
 800dcfc:	d86c      	bhi.n	800ddd8 <UART_SetConfig+0x734>
 800dcfe:	a201      	add	r2, pc, #4	; (adr r2, 800dd04 <UART_SetConfig+0x660>)
 800dd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd04:	0800dda9 	.word	0x0800dda9
 800dd08:	0800ddd9 	.word	0x0800ddd9
 800dd0c:	0800ddd9 	.word	0x0800ddd9
 800dd10:	0800ddd9 	.word	0x0800ddd9
 800dd14:	0800ddd9 	.word	0x0800ddd9
 800dd18:	0800ddd9 	.word	0x0800ddd9
 800dd1c:	0800ddd9 	.word	0x0800ddd9
 800dd20:	0800ddd9 	.word	0x0800ddd9
 800dd24:	0800ddb1 	.word	0x0800ddb1
 800dd28:	0800ddd9 	.word	0x0800ddd9
 800dd2c:	0800ddd9 	.word	0x0800ddd9
 800dd30:	0800ddd9 	.word	0x0800ddd9
 800dd34:	0800ddd9 	.word	0x0800ddd9
 800dd38:	0800ddd9 	.word	0x0800ddd9
 800dd3c:	0800ddd9 	.word	0x0800ddd9
 800dd40:	0800ddd9 	.word	0x0800ddd9
 800dd44:	0800ddb9 	.word	0x0800ddb9
 800dd48:	0800ddd9 	.word	0x0800ddd9
 800dd4c:	0800ddd9 	.word	0x0800ddd9
 800dd50:	0800ddd9 	.word	0x0800ddd9
 800dd54:	0800ddd9 	.word	0x0800ddd9
 800dd58:	0800ddd9 	.word	0x0800ddd9
 800dd5c:	0800ddd9 	.word	0x0800ddd9
 800dd60:	0800ddd9 	.word	0x0800ddd9
 800dd64:	0800ddc1 	.word	0x0800ddc1
 800dd68:	0800ddd9 	.word	0x0800ddd9
 800dd6c:	0800ddd9 	.word	0x0800ddd9
 800dd70:	0800ddd9 	.word	0x0800ddd9
 800dd74:	0800ddd9 	.word	0x0800ddd9
 800dd78:	0800ddd9 	.word	0x0800ddd9
 800dd7c:	0800ddd9 	.word	0x0800ddd9
 800dd80:	0800ddd9 	.word	0x0800ddd9
 800dd84:	0800ddc9 	.word	0x0800ddc9
 800dd88:	0800ddd9 	.word	0x0800ddd9
 800dd8c:	0800ddd9 	.word	0x0800ddd9
 800dd90:	0800ddd9 	.word	0x0800ddd9
 800dd94:	0800ddd9 	.word	0x0800ddd9
 800dd98:	0800ddd9 	.word	0x0800ddd9
 800dd9c:	0800ddd9 	.word	0x0800ddd9
 800dda0:	0800ddd9 	.word	0x0800ddd9
 800dda4:	0800ddd1 	.word	0x0800ddd1
 800dda8:	2301      	movs	r3, #1
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddae:	e050      	b.n	800de52 <UART_SetConfig+0x7ae>
 800ddb0:	2304      	movs	r3, #4
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddb6:	e04c      	b.n	800de52 <UART_SetConfig+0x7ae>
 800ddb8:	2308      	movs	r3, #8
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddbe:	e048      	b.n	800de52 <UART_SetConfig+0x7ae>
 800ddc0:	2310      	movs	r3, #16
 800ddc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddc6:	e044      	b.n	800de52 <UART_SetConfig+0x7ae>
 800ddc8:	2320      	movs	r3, #32
 800ddca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddce:	e040      	b.n	800de52 <UART_SetConfig+0x7ae>
 800ddd0:	2340      	movs	r3, #64	; 0x40
 800ddd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd6:	e03c      	b.n	800de52 <UART_SetConfig+0x7ae>
 800ddd8:	2380      	movs	r3, #128	; 0x80
 800ddda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddde:	e038      	b.n	800de52 <UART_SetConfig+0x7ae>
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4a71      	ldr	r2, [pc, #452]	; (800dfac <UART_SetConfig+0x908>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d130      	bne.n	800de4c <UART_SetConfig+0x7a8>
 800ddea:	4b6f      	ldr	r3, [pc, #444]	; (800dfa8 <UART_SetConfig+0x904>)
 800ddec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddee:	f003 0307 	and.w	r3, r3, #7
 800ddf2:	2b05      	cmp	r3, #5
 800ddf4:	d826      	bhi.n	800de44 <UART_SetConfig+0x7a0>
 800ddf6:	a201      	add	r2, pc, #4	; (adr r2, 800ddfc <UART_SetConfig+0x758>)
 800ddf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddfc:	0800de15 	.word	0x0800de15
 800de00:	0800de1d 	.word	0x0800de1d
 800de04:	0800de25 	.word	0x0800de25
 800de08:	0800de2d 	.word	0x0800de2d
 800de0c:	0800de35 	.word	0x0800de35
 800de10:	0800de3d 	.word	0x0800de3d
 800de14:	2302      	movs	r3, #2
 800de16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de1a:	e01a      	b.n	800de52 <UART_SetConfig+0x7ae>
 800de1c:	2304      	movs	r3, #4
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de22:	e016      	b.n	800de52 <UART_SetConfig+0x7ae>
 800de24:	2308      	movs	r3, #8
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de2a:	e012      	b.n	800de52 <UART_SetConfig+0x7ae>
 800de2c:	2310      	movs	r3, #16
 800de2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de32:	e00e      	b.n	800de52 <UART_SetConfig+0x7ae>
 800de34:	2320      	movs	r3, #32
 800de36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3a:	e00a      	b.n	800de52 <UART_SetConfig+0x7ae>
 800de3c:	2340      	movs	r3, #64	; 0x40
 800de3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de42:	e006      	b.n	800de52 <UART_SetConfig+0x7ae>
 800de44:	2380      	movs	r3, #128	; 0x80
 800de46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4a:	e002      	b.n	800de52 <UART_SetConfig+0x7ae>
 800de4c:	2380      	movs	r3, #128	; 0x80
 800de4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a55      	ldr	r2, [pc, #340]	; (800dfac <UART_SetConfig+0x908>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	f040 80f8 	bne.w	800e04e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800de5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de62:	2b20      	cmp	r3, #32
 800de64:	dc46      	bgt.n	800def4 <UART_SetConfig+0x850>
 800de66:	2b02      	cmp	r3, #2
 800de68:	db75      	blt.n	800df56 <UART_SetConfig+0x8b2>
 800de6a:	3b02      	subs	r3, #2
 800de6c:	2b1e      	cmp	r3, #30
 800de6e:	d872      	bhi.n	800df56 <UART_SetConfig+0x8b2>
 800de70:	a201      	add	r2, pc, #4	; (adr r2, 800de78 <UART_SetConfig+0x7d4>)
 800de72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de76:	bf00      	nop
 800de78:	0800defb 	.word	0x0800defb
 800de7c:	0800df57 	.word	0x0800df57
 800de80:	0800df03 	.word	0x0800df03
 800de84:	0800df57 	.word	0x0800df57
 800de88:	0800df57 	.word	0x0800df57
 800de8c:	0800df57 	.word	0x0800df57
 800de90:	0800df13 	.word	0x0800df13
 800de94:	0800df57 	.word	0x0800df57
 800de98:	0800df57 	.word	0x0800df57
 800de9c:	0800df57 	.word	0x0800df57
 800dea0:	0800df57 	.word	0x0800df57
 800dea4:	0800df57 	.word	0x0800df57
 800dea8:	0800df57 	.word	0x0800df57
 800deac:	0800df57 	.word	0x0800df57
 800deb0:	0800df23 	.word	0x0800df23
 800deb4:	0800df57 	.word	0x0800df57
 800deb8:	0800df57 	.word	0x0800df57
 800debc:	0800df57 	.word	0x0800df57
 800dec0:	0800df57 	.word	0x0800df57
 800dec4:	0800df57 	.word	0x0800df57
 800dec8:	0800df57 	.word	0x0800df57
 800decc:	0800df57 	.word	0x0800df57
 800ded0:	0800df57 	.word	0x0800df57
 800ded4:	0800df57 	.word	0x0800df57
 800ded8:	0800df57 	.word	0x0800df57
 800dedc:	0800df57 	.word	0x0800df57
 800dee0:	0800df57 	.word	0x0800df57
 800dee4:	0800df57 	.word	0x0800df57
 800dee8:	0800df57 	.word	0x0800df57
 800deec:	0800df57 	.word	0x0800df57
 800def0:	0800df49 	.word	0x0800df49
 800def4:	2b40      	cmp	r3, #64	; 0x40
 800def6:	d02a      	beq.n	800df4e <UART_SetConfig+0x8aa>
 800def8:	e02d      	b.n	800df56 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800defa:	f7fc fdb9 	bl	800aa70 <HAL_RCCEx_GetD3PCLK1Freq>
 800defe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df00:	e02f      	b.n	800df62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df06:	4618      	mov	r0, r3
 800df08:	f7fc fdc8 	bl	800aa9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df10:	e027      	b.n	800df62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df12:	f107 0318 	add.w	r3, r7, #24
 800df16:	4618      	mov	r0, r3
 800df18:	f7fc ff14 	bl	800ad44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df20:	e01f      	b.n	800df62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df22:	4b21      	ldr	r3, [pc, #132]	; (800dfa8 <UART_SetConfig+0x904>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f003 0320 	and.w	r3, r3, #32
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d009      	beq.n	800df42 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df2e:	4b1e      	ldr	r3, [pc, #120]	; (800dfa8 <UART_SetConfig+0x904>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	08db      	lsrs	r3, r3, #3
 800df34:	f003 0303 	and.w	r3, r3, #3
 800df38:	4a1d      	ldr	r2, [pc, #116]	; (800dfb0 <UART_SetConfig+0x90c>)
 800df3a:	fa22 f303 	lsr.w	r3, r2, r3
 800df3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df40:	e00f      	b.n	800df62 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800df42:	4b1b      	ldr	r3, [pc, #108]	; (800dfb0 <UART_SetConfig+0x90c>)
 800df44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df46:	e00c      	b.n	800df62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df48:	4b1a      	ldr	r3, [pc, #104]	; (800dfb4 <UART_SetConfig+0x910>)
 800df4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df4c:	e009      	b.n	800df62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df54:	e005      	b.n	800df62 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800df56:	2300      	movs	r3, #0
 800df58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800df5a:	2301      	movs	r3, #1
 800df5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800df60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800df62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df64:	2b00      	cmp	r3, #0
 800df66:	f000 81ee 	beq.w	800e346 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df6e:	4a12      	ldr	r2, [pc, #72]	; (800dfb8 <UART_SetConfig+0x914>)
 800df70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df74:	461a      	mov	r2, r3
 800df76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df78:	fbb3 f3f2 	udiv	r3, r3, r2
 800df7c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	685a      	ldr	r2, [r3, #4]
 800df82:	4613      	mov	r3, r2
 800df84:	005b      	lsls	r3, r3, #1
 800df86:	4413      	add	r3, r2
 800df88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d305      	bcc.n	800df9a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df96:	429a      	cmp	r2, r3
 800df98:	d910      	bls.n	800dfbc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800df9a:	2301      	movs	r3, #1
 800df9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dfa0:	e1d1      	b.n	800e346 <UART_SetConfig+0xca2>
 800dfa2:	bf00      	nop
 800dfa4:	40011c00 	.word	0x40011c00
 800dfa8:	58024400 	.word	0x58024400
 800dfac:	58000c00 	.word	0x58000c00
 800dfb0:	03d09000 	.word	0x03d09000
 800dfb4:	003d0900 	.word	0x003d0900
 800dfb8:	0801a754 	.word	0x0801a754
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	60bb      	str	r3, [r7, #8]
 800dfc2:	60fa      	str	r2, [r7, #12]
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc8:	4ac0      	ldr	r2, [pc, #768]	; (800e2cc <UART_SetConfig+0xc28>)
 800dfca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	603b      	str	r3, [r7, #0]
 800dfd4:	607a      	str	r2, [r7, #4]
 800dfd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dfde:	f7f2 fc0b 	bl	80007f8 <__aeabi_uldivmod>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	4610      	mov	r0, r2
 800dfe8:	4619      	mov	r1, r3
 800dfea:	f04f 0200 	mov.w	r2, #0
 800dfee:	f04f 0300 	mov.w	r3, #0
 800dff2:	020b      	lsls	r3, r1, #8
 800dff4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dff8:	0202      	lsls	r2, r0, #8
 800dffa:	6979      	ldr	r1, [r7, #20]
 800dffc:	6849      	ldr	r1, [r1, #4]
 800dffe:	0849      	lsrs	r1, r1, #1
 800e000:	2000      	movs	r0, #0
 800e002:	460c      	mov	r4, r1
 800e004:	4605      	mov	r5, r0
 800e006:	eb12 0804 	adds.w	r8, r2, r4
 800e00a:	eb43 0905 	adc.w	r9, r3, r5
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	469a      	mov	sl, r3
 800e016:	4693      	mov	fp, r2
 800e018:	4652      	mov	r2, sl
 800e01a:	465b      	mov	r3, fp
 800e01c:	4640      	mov	r0, r8
 800e01e:	4649      	mov	r1, r9
 800e020:	f7f2 fbea 	bl	80007f8 <__aeabi_uldivmod>
 800e024:	4602      	mov	r2, r0
 800e026:	460b      	mov	r3, r1
 800e028:	4613      	mov	r3, r2
 800e02a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e032:	d308      	bcc.n	800e046 <UART_SetConfig+0x9a2>
 800e034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e03a:	d204      	bcs.n	800e046 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e042:	60da      	str	r2, [r3, #12]
 800e044:	e17f      	b.n	800e346 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e046:	2301      	movs	r3, #1
 800e048:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e04c:	e17b      	b.n	800e346 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	69db      	ldr	r3, [r3, #28]
 800e052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e056:	f040 80bd 	bne.w	800e1d4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e05a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e05e:	2b20      	cmp	r3, #32
 800e060:	dc48      	bgt.n	800e0f4 <UART_SetConfig+0xa50>
 800e062:	2b00      	cmp	r3, #0
 800e064:	db7b      	blt.n	800e15e <UART_SetConfig+0xaba>
 800e066:	2b20      	cmp	r3, #32
 800e068:	d879      	bhi.n	800e15e <UART_SetConfig+0xaba>
 800e06a:	a201      	add	r2, pc, #4	; (adr r2, 800e070 <UART_SetConfig+0x9cc>)
 800e06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e070:	0800e0fb 	.word	0x0800e0fb
 800e074:	0800e103 	.word	0x0800e103
 800e078:	0800e15f 	.word	0x0800e15f
 800e07c:	0800e15f 	.word	0x0800e15f
 800e080:	0800e10b 	.word	0x0800e10b
 800e084:	0800e15f 	.word	0x0800e15f
 800e088:	0800e15f 	.word	0x0800e15f
 800e08c:	0800e15f 	.word	0x0800e15f
 800e090:	0800e11b 	.word	0x0800e11b
 800e094:	0800e15f 	.word	0x0800e15f
 800e098:	0800e15f 	.word	0x0800e15f
 800e09c:	0800e15f 	.word	0x0800e15f
 800e0a0:	0800e15f 	.word	0x0800e15f
 800e0a4:	0800e15f 	.word	0x0800e15f
 800e0a8:	0800e15f 	.word	0x0800e15f
 800e0ac:	0800e15f 	.word	0x0800e15f
 800e0b0:	0800e12b 	.word	0x0800e12b
 800e0b4:	0800e15f 	.word	0x0800e15f
 800e0b8:	0800e15f 	.word	0x0800e15f
 800e0bc:	0800e15f 	.word	0x0800e15f
 800e0c0:	0800e15f 	.word	0x0800e15f
 800e0c4:	0800e15f 	.word	0x0800e15f
 800e0c8:	0800e15f 	.word	0x0800e15f
 800e0cc:	0800e15f 	.word	0x0800e15f
 800e0d0:	0800e15f 	.word	0x0800e15f
 800e0d4:	0800e15f 	.word	0x0800e15f
 800e0d8:	0800e15f 	.word	0x0800e15f
 800e0dc:	0800e15f 	.word	0x0800e15f
 800e0e0:	0800e15f 	.word	0x0800e15f
 800e0e4:	0800e15f 	.word	0x0800e15f
 800e0e8:	0800e15f 	.word	0x0800e15f
 800e0ec:	0800e15f 	.word	0x0800e15f
 800e0f0:	0800e151 	.word	0x0800e151
 800e0f4:	2b40      	cmp	r3, #64	; 0x40
 800e0f6:	d02e      	beq.n	800e156 <UART_SetConfig+0xab2>
 800e0f8:	e031      	b.n	800e15e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0fa:	f7fa fe1b 	bl	8008d34 <HAL_RCC_GetPCLK1Freq>
 800e0fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e100:	e033      	b.n	800e16a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e102:	f7fa fe2d 	bl	8008d60 <HAL_RCC_GetPCLK2Freq>
 800e106:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e108:	e02f      	b.n	800e16a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e10a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fc fcc4 	bl	800aa9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e118:	e027      	b.n	800e16a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e11a:	f107 0318 	add.w	r3, r7, #24
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fc fe10 	bl	800ad44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e128:	e01f      	b.n	800e16a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e12a:	4b69      	ldr	r3, [pc, #420]	; (800e2d0 <UART_SetConfig+0xc2c>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f003 0320 	and.w	r3, r3, #32
 800e132:	2b00      	cmp	r3, #0
 800e134:	d009      	beq.n	800e14a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e136:	4b66      	ldr	r3, [pc, #408]	; (800e2d0 <UART_SetConfig+0xc2c>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	08db      	lsrs	r3, r3, #3
 800e13c:	f003 0303 	and.w	r3, r3, #3
 800e140:	4a64      	ldr	r2, [pc, #400]	; (800e2d4 <UART_SetConfig+0xc30>)
 800e142:	fa22 f303 	lsr.w	r3, r2, r3
 800e146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e148:	e00f      	b.n	800e16a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e14a:	4b62      	ldr	r3, [pc, #392]	; (800e2d4 <UART_SetConfig+0xc30>)
 800e14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e14e:	e00c      	b.n	800e16a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e150:	4b61      	ldr	r3, [pc, #388]	; (800e2d8 <UART_SetConfig+0xc34>)
 800e152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e154:	e009      	b.n	800e16a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e15c:	e005      	b.n	800e16a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e15e:	2300      	movs	r3, #0
 800e160:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e162:	2301      	movs	r3, #1
 800e164:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e168:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f000 80ea 	beq.w	800e346 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e176:	4a55      	ldr	r2, [pc, #340]	; (800e2cc <UART_SetConfig+0xc28>)
 800e178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e17c:	461a      	mov	r2, r3
 800e17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e180:	fbb3 f3f2 	udiv	r3, r3, r2
 800e184:	005a      	lsls	r2, r3, #1
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	085b      	lsrs	r3, r3, #1
 800e18c:	441a      	add	r2, r3
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	fbb2 f3f3 	udiv	r3, r2, r3
 800e196:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19a:	2b0f      	cmp	r3, #15
 800e19c:	d916      	bls.n	800e1cc <UART_SetConfig+0xb28>
 800e19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1a4:	d212      	bcs.n	800e1cc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	f023 030f 	bic.w	r3, r3, #15
 800e1ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b2:	085b      	lsrs	r3, r3, #1
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	f003 0307 	and.w	r3, r3, #7
 800e1ba:	b29a      	uxth	r2, r3
 800e1bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e1c8:	60da      	str	r2, [r3, #12]
 800e1ca:	e0bc      	b.n	800e346 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e1d2:	e0b8      	b.n	800e346 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e1d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e1d8:	2b20      	cmp	r3, #32
 800e1da:	dc4b      	bgt.n	800e274 <UART_SetConfig+0xbd0>
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f2c0 8087 	blt.w	800e2f0 <UART_SetConfig+0xc4c>
 800e1e2:	2b20      	cmp	r3, #32
 800e1e4:	f200 8084 	bhi.w	800e2f0 <UART_SetConfig+0xc4c>
 800e1e8:	a201      	add	r2, pc, #4	; (adr r2, 800e1f0 <UART_SetConfig+0xb4c>)
 800e1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ee:	bf00      	nop
 800e1f0:	0800e27b 	.word	0x0800e27b
 800e1f4:	0800e283 	.word	0x0800e283
 800e1f8:	0800e2f1 	.word	0x0800e2f1
 800e1fc:	0800e2f1 	.word	0x0800e2f1
 800e200:	0800e28b 	.word	0x0800e28b
 800e204:	0800e2f1 	.word	0x0800e2f1
 800e208:	0800e2f1 	.word	0x0800e2f1
 800e20c:	0800e2f1 	.word	0x0800e2f1
 800e210:	0800e29b 	.word	0x0800e29b
 800e214:	0800e2f1 	.word	0x0800e2f1
 800e218:	0800e2f1 	.word	0x0800e2f1
 800e21c:	0800e2f1 	.word	0x0800e2f1
 800e220:	0800e2f1 	.word	0x0800e2f1
 800e224:	0800e2f1 	.word	0x0800e2f1
 800e228:	0800e2f1 	.word	0x0800e2f1
 800e22c:	0800e2f1 	.word	0x0800e2f1
 800e230:	0800e2ab 	.word	0x0800e2ab
 800e234:	0800e2f1 	.word	0x0800e2f1
 800e238:	0800e2f1 	.word	0x0800e2f1
 800e23c:	0800e2f1 	.word	0x0800e2f1
 800e240:	0800e2f1 	.word	0x0800e2f1
 800e244:	0800e2f1 	.word	0x0800e2f1
 800e248:	0800e2f1 	.word	0x0800e2f1
 800e24c:	0800e2f1 	.word	0x0800e2f1
 800e250:	0800e2f1 	.word	0x0800e2f1
 800e254:	0800e2f1 	.word	0x0800e2f1
 800e258:	0800e2f1 	.word	0x0800e2f1
 800e25c:	0800e2f1 	.word	0x0800e2f1
 800e260:	0800e2f1 	.word	0x0800e2f1
 800e264:	0800e2f1 	.word	0x0800e2f1
 800e268:	0800e2f1 	.word	0x0800e2f1
 800e26c:	0800e2f1 	.word	0x0800e2f1
 800e270:	0800e2e3 	.word	0x0800e2e3
 800e274:	2b40      	cmp	r3, #64	; 0x40
 800e276:	d037      	beq.n	800e2e8 <UART_SetConfig+0xc44>
 800e278:	e03a      	b.n	800e2f0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e27a:	f7fa fd5b 	bl	8008d34 <HAL_RCC_GetPCLK1Freq>
 800e27e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e280:	e03c      	b.n	800e2fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e282:	f7fa fd6d 	bl	8008d60 <HAL_RCC_GetPCLK2Freq>
 800e286:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e288:	e038      	b.n	800e2fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e28a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fc fc04 	bl	800aa9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e298:	e030      	b.n	800e2fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e29a:	f107 0318 	add.w	r3, r7, #24
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fc fd50 	bl	800ad44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2a8:	e028      	b.n	800e2fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e2aa:	4b09      	ldr	r3, [pc, #36]	; (800e2d0 <UART_SetConfig+0xc2c>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f003 0320 	and.w	r3, r3, #32
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d012      	beq.n	800e2dc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e2b6:	4b06      	ldr	r3, [pc, #24]	; (800e2d0 <UART_SetConfig+0xc2c>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	08db      	lsrs	r3, r3, #3
 800e2bc:	f003 0303 	and.w	r3, r3, #3
 800e2c0:	4a04      	ldr	r2, [pc, #16]	; (800e2d4 <UART_SetConfig+0xc30>)
 800e2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800e2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e2c8:	e018      	b.n	800e2fc <UART_SetConfig+0xc58>
 800e2ca:	bf00      	nop
 800e2cc:	0801a754 	.word	0x0801a754
 800e2d0:	58024400 	.word	0x58024400
 800e2d4:	03d09000 	.word	0x03d09000
 800e2d8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e2dc:	4b24      	ldr	r3, [pc, #144]	; (800e370 <UART_SetConfig+0xccc>)
 800e2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2e0:	e00c      	b.n	800e2fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e2e2:	4b24      	ldr	r3, [pc, #144]	; (800e374 <UART_SetConfig+0xcd0>)
 800e2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2e6:	e009      	b.n	800e2fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2ee:	e005      	b.n	800e2fc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e2fa:	bf00      	nop
    }

    if (pclk != 0U)
 800e2fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d021      	beq.n	800e346 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e306:	4a1c      	ldr	r2, [pc, #112]	; (800e378 <UART_SetConfig+0xcd4>)
 800e308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e30c:	461a      	mov	r2, r3
 800e30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e310:	fbb3 f2f2 	udiv	r2, r3, r2
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	085b      	lsrs	r3, r3, #1
 800e31a:	441a      	add	r2, r3
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	fbb2 f3f3 	udiv	r3, r2, r3
 800e324:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e328:	2b0f      	cmp	r3, #15
 800e32a:	d909      	bls.n	800e340 <UART_SetConfig+0xc9c>
 800e32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e332:	d205      	bcs.n	800e340 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e336:	b29a      	uxth	r2, r3
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	60da      	str	r2, [r3, #12]
 800e33e:	e002      	b.n	800e346 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e340:	2301      	movs	r3, #1
 800e342:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	2201      	movs	r2, #1
 800e34a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	2201      	movs	r2, #1
 800e352:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	2200      	movs	r2, #0
 800e35a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	2200      	movs	r2, #0
 800e360:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e362:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e366:	4618      	mov	r0, r3
 800e368:	3748      	adds	r7, #72	; 0x48
 800e36a:	46bd      	mov	sp, r7
 800e36c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e370:	03d09000 	.word	0x03d09000
 800e374:	003d0900 	.word	0x003d0900
 800e378:	0801a754 	.word	0x0801a754

0800e37c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b083      	sub	sp, #12
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e388:	f003 0301 	and.w	r3, r3, #1
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d00a      	beq.n	800e3a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	430a      	orrs	r2, r1
 800e3a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3aa:	f003 0302 	and.w	r3, r3, #2
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00a      	beq.n	800e3c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	430a      	orrs	r2, r1
 800e3c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3cc:	f003 0304 	and.w	r3, r3, #4
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d00a      	beq.n	800e3ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	430a      	orrs	r2, r1
 800e3e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ee:	f003 0308 	and.w	r3, r3, #8
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d00a      	beq.n	800e40c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	430a      	orrs	r2, r1
 800e40a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e410:	f003 0310 	and.w	r3, r3, #16
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00a      	beq.n	800e42e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	689b      	ldr	r3, [r3, #8]
 800e41e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	430a      	orrs	r2, r1
 800e42c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e432:	f003 0320 	and.w	r3, r3, #32
 800e436:	2b00      	cmp	r3, #0
 800e438:	d00a      	beq.n	800e450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	689b      	ldr	r3, [r3, #8]
 800e440:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	430a      	orrs	r2, r1
 800e44e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d01a      	beq.n	800e492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	430a      	orrs	r2, r1
 800e470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e47a:	d10a      	bne.n	800e492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	430a      	orrs	r2, r1
 800e490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00a      	beq.n	800e4b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	430a      	orrs	r2, r1
 800e4b2:	605a      	str	r2, [r3, #4]
  }
}
 800e4b4:	bf00      	nop
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr

0800e4c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b098      	sub	sp, #96	; 0x60
 800e4c4:	af02      	add	r7, sp, #8
 800e4c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e4d0:	f7f4 f8e0 	bl	8002694 <HAL_GetTick>
 800e4d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f003 0308 	and.w	r3, r3, #8
 800e4e0:	2b08      	cmp	r3, #8
 800e4e2:	d12f      	bne.n	800e544 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e4e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e4e8:	9300      	str	r3, [sp, #0]
 800e4ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 f88e 	bl	800e614 <UART_WaitOnFlagUntilTimeout>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d022      	beq.n	800e544 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e506:	e853 3f00 	ldrex	r3, [r3]
 800e50a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e50e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e512:	653b      	str	r3, [r7, #80]	; 0x50
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	461a      	mov	r2, r3
 800e51a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e51c:	647b      	str	r3, [r7, #68]	; 0x44
 800e51e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e520:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e524:	e841 2300 	strex	r3, r2, [r1]
 800e528:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1e6      	bne.n	800e4fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2220      	movs	r2, #32
 800e534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e540:	2303      	movs	r3, #3
 800e542:	e063      	b.n	800e60c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f003 0304 	and.w	r3, r3, #4
 800e54e:	2b04      	cmp	r3, #4
 800e550:	d149      	bne.n	800e5e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e552:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e55a:	2200      	movs	r2, #0
 800e55c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 f857 	bl	800e614 <UART_WaitOnFlagUntilTimeout>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d03c      	beq.n	800e5e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e574:	e853 3f00 	ldrex	r3, [r3]
 800e578:	623b      	str	r3, [r7, #32]
   return(result);
 800e57a:	6a3b      	ldr	r3, [r7, #32]
 800e57c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e580:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	461a      	mov	r2, r3
 800e588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e58a:	633b      	str	r3, [r7, #48]	; 0x30
 800e58c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e58e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e592:	e841 2300 	strex	r3, r2, [r1]
 800e596:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d1e6      	bne.n	800e56c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	3308      	adds	r3, #8
 800e5a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	e853 3f00 	ldrex	r3, [r3]
 800e5ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f023 0301 	bic.w	r3, r3, #1
 800e5b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	3308      	adds	r3, #8
 800e5bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5be:	61fa      	str	r2, [r7, #28]
 800e5c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c2:	69b9      	ldr	r1, [r7, #24]
 800e5c4:	69fa      	ldr	r2, [r7, #28]
 800e5c6:	e841 2300 	strex	r3, r2, [r1]
 800e5ca:	617b      	str	r3, [r7, #20]
   return(result);
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d1e5      	bne.n	800e59e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2220      	movs	r2, #32
 800e5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e5e2:	2303      	movs	r3, #3
 800e5e4:	e012      	b.n	800e60c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2220      	movs	r2, #32
 800e5ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2220      	movs	r2, #32
 800e5f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2200      	movs	r2, #0
 800e600:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2200      	movs	r2, #0
 800e606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3758      	adds	r7, #88	; 0x58
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	603b      	str	r3, [r7, #0]
 800e620:	4613      	mov	r3, r2
 800e622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e624:	e049      	b.n	800e6ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e62c:	d045      	beq.n	800e6ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e62e:	f7f4 f831 	bl	8002694 <HAL_GetTick>
 800e632:	4602      	mov	r2, r0
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	1ad3      	subs	r3, r2, r3
 800e638:	69ba      	ldr	r2, [r7, #24]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d302      	bcc.n	800e644 <UART_WaitOnFlagUntilTimeout+0x30>
 800e63e:	69bb      	ldr	r3, [r7, #24]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d101      	bne.n	800e648 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e644:	2303      	movs	r3, #3
 800e646:	e048      	b.n	800e6da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f003 0304 	and.w	r3, r3, #4
 800e652:	2b00      	cmp	r3, #0
 800e654:	d031      	beq.n	800e6ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	69db      	ldr	r3, [r3, #28]
 800e65c:	f003 0308 	and.w	r3, r3, #8
 800e660:	2b08      	cmp	r3, #8
 800e662:	d110      	bne.n	800e686 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2208      	movs	r2, #8
 800e66a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f000 f839 	bl	800e6e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2208      	movs	r2, #8
 800e676:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2200      	movs	r2, #0
 800e67e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e682:	2301      	movs	r3, #1
 800e684:	e029      	b.n	800e6da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	69db      	ldr	r3, [r3, #28]
 800e68c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e694:	d111      	bne.n	800e6ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e69e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e6a0:	68f8      	ldr	r0, [r7, #12]
 800e6a2:	f000 f81f 	bl	800e6e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2220      	movs	r2, #32
 800e6aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e6b6:	2303      	movs	r3, #3
 800e6b8:	e00f      	b.n	800e6da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	69da      	ldr	r2, [r3, #28]
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	4013      	ands	r3, r2
 800e6c4:	68ba      	ldr	r2, [r7, #8]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	bf0c      	ite	eq
 800e6ca:	2301      	moveq	r3, #1
 800e6cc:	2300      	movne	r3, #0
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	79fb      	ldrb	r3, [r7, #7]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d0a6      	beq.n	800e626 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3710      	adds	r7, #16
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
	...

0800e6e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b095      	sub	sp, #84	; 0x54
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6f4:	e853 3f00 	ldrex	r3, [r3]
 800e6f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e700:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	461a      	mov	r2, r3
 800e708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e70a:	643b      	str	r3, [r7, #64]	; 0x40
 800e70c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e70e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e712:	e841 2300 	strex	r3, r2, [r1]
 800e716:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d1e6      	bne.n	800e6ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	3308      	adds	r3, #8
 800e724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e726:	6a3b      	ldr	r3, [r7, #32]
 800e728:	e853 3f00 	ldrex	r3, [r3]
 800e72c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e72e:	69fa      	ldr	r2, [r7, #28]
 800e730:	4b1e      	ldr	r3, [pc, #120]	; (800e7ac <UART_EndRxTransfer+0xc8>)
 800e732:	4013      	ands	r3, r2
 800e734:	64bb      	str	r3, [r7, #72]	; 0x48
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	3308      	adds	r3, #8
 800e73c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e73e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e740:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e746:	e841 2300 	strex	r3, r2, [r1]
 800e74a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d1e5      	bne.n	800e71e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e756:	2b01      	cmp	r3, #1
 800e758:	d118      	bne.n	800e78c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	e853 3f00 	ldrex	r3, [r3]
 800e766:	60bb      	str	r3, [r7, #8]
   return(result);
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	f023 0310 	bic.w	r3, r3, #16
 800e76e:	647b      	str	r3, [r7, #68]	; 0x44
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	461a      	mov	r2, r3
 800e776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e778:	61bb      	str	r3, [r7, #24]
 800e77a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e77c:	6979      	ldr	r1, [r7, #20]
 800e77e:	69ba      	ldr	r2, [r7, #24]
 800e780:	e841 2300 	strex	r3, r2, [r1]
 800e784:	613b      	str	r3, [r7, #16]
   return(result);
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d1e6      	bne.n	800e75a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2220      	movs	r2, #32
 800e790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2200      	movs	r2, #0
 800e798:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e7a0:	bf00      	nop
 800e7a2:	3754      	adds	r7, #84	; 0x54
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr
 800e7ac:	effffffe 	.word	0xeffffffe

0800e7b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	d101      	bne.n	800e7c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800e7c2:	2302      	movs	r3, #2
 800e7c4:	e027      	b.n	800e816 <HAL_UARTEx_DisableFifoMode+0x66>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2224      	movs	r2, #36	; 0x24
 800e7d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f022 0201 	bic.w	r2, r2, #1
 800e7ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e7f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2220      	movs	r2, #32
 800e808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2200      	movs	r2, #0
 800e810:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e814:	2300      	movs	r3, #0
}
 800e816:	4618      	mov	r0, r3
 800e818:	3714      	adds	r7, #20
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr

0800e822 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b084      	sub	sp, #16
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
 800e82a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e832:	2b01      	cmp	r3, #1
 800e834:	d101      	bne.n	800e83a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e836:	2302      	movs	r3, #2
 800e838:	e02d      	b.n	800e896 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2201      	movs	r2, #1
 800e83e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2224      	movs	r2, #36	; 0x24
 800e846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f022 0201 	bic.w	r2, r2, #1
 800e860:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	683a      	ldr	r2, [r7, #0]
 800e872:	430a      	orrs	r2, r1
 800e874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 f850 	bl	800e91c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2220      	movs	r2, #32
 800e888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2200      	movs	r2, #0
 800e890:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e894:	2300      	movs	r3, #0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}

0800e89e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e89e:	b580      	push	{r7, lr}
 800e8a0:	b084      	sub	sp, #16
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
 800e8a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d101      	bne.n	800e8b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e8b2:	2302      	movs	r3, #2
 800e8b4:	e02d      	b.n	800e912 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2224      	movs	r2, #36	; 0x24
 800e8c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f022 0201 	bic.w	r2, r2, #1
 800e8dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	683a      	ldr	r2, [r7, #0]
 800e8ee:	430a      	orrs	r2, r1
 800e8f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 f812 	bl	800e91c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	68fa      	ldr	r2, [r7, #12]
 800e8fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2220      	movs	r2, #32
 800e904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2200      	movs	r2, #0
 800e90c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
	...

0800e91c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b085      	sub	sp, #20
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d108      	bne.n	800e93e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e93c:	e031      	b.n	800e9a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e93e:	2310      	movs	r3, #16
 800e940:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e942:	2310      	movs	r3, #16
 800e944:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	689b      	ldr	r3, [r3, #8]
 800e94c:	0e5b      	lsrs	r3, r3, #25
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	f003 0307 	and.w	r3, r3, #7
 800e954:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	689b      	ldr	r3, [r3, #8]
 800e95c:	0f5b      	lsrs	r3, r3, #29
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	f003 0307 	and.w	r3, r3, #7
 800e964:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e966:	7bbb      	ldrb	r3, [r7, #14]
 800e968:	7b3a      	ldrb	r2, [r7, #12]
 800e96a:	4911      	ldr	r1, [pc, #68]	; (800e9b0 <UARTEx_SetNbDataToProcess+0x94>)
 800e96c:	5c8a      	ldrb	r2, [r1, r2]
 800e96e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e972:	7b3a      	ldrb	r2, [r7, #12]
 800e974:	490f      	ldr	r1, [pc, #60]	; (800e9b4 <UARTEx_SetNbDataToProcess+0x98>)
 800e976:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e978:	fb93 f3f2 	sdiv	r3, r3, r2
 800e97c:	b29a      	uxth	r2, r3
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e984:	7bfb      	ldrb	r3, [r7, #15]
 800e986:	7b7a      	ldrb	r2, [r7, #13]
 800e988:	4909      	ldr	r1, [pc, #36]	; (800e9b0 <UARTEx_SetNbDataToProcess+0x94>)
 800e98a:	5c8a      	ldrb	r2, [r1, r2]
 800e98c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e990:	7b7a      	ldrb	r2, [r7, #13]
 800e992:	4908      	ldr	r1, [pc, #32]	; (800e9b4 <UARTEx_SetNbDataToProcess+0x98>)
 800e994:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e996:	fb93 f3f2 	sdiv	r3, r3, r2
 800e99a:	b29a      	uxth	r2, r3
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e9a2:	bf00      	nop
 800e9a4:	3714      	adds	r7, #20
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ac:	4770      	bx	lr
 800e9ae:	bf00      	nop
 800e9b0:	0801a76c 	.word	0x0801a76c
 800e9b4:	0801a774 	.word	0x0801a774

0800e9b8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e9b8:	b084      	sub	sp, #16
 800e9ba:	b480      	push	{r7}
 800e9bc:	b085      	sub	sp, #20
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
 800e9c2:	f107 001c 	add.w	r0, r7, #28
 800e9c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e9ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e9d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e9d2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800e9d6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800e9da:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800e9de:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	685a      	ldr	r2, [r3, #4]
 800e9ea:	4b07      	ldr	r3, [pc, #28]	; (800ea08 <SDMMC_Init+0x50>)
 800e9ec:	4013      	ands	r3, r2
 800e9ee:	68fa      	ldr	r2, [r7, #12]
 800e9f0:	431a      	orrs	r2, r3
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e9f6:	2300      	movs	r3, #0
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3714      	adds	r7, #20
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	b004      	add	sp, #16
 800ea04:	4770      	bx	lr
 800ea06:	bf00      	nop
 800ea08:	ffc02c00 	.word	0xffc02c00

0800ea0c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	370c      	adds	r7, #12
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr

0800ea26 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ea26:	b480      	push	{r7}
 800ea28:	b083      	sub	sp, #12
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
 800ea2e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea3a:	2300      	movs	r3, #0
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	370c      	adds	r7, #12
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f043 0203 	orr.w	r2, r3, #3
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ea5c:	2300      	movs	r3, #0
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	370c      	adds	r7, #12
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ea6a:	b480      	push	{r7}
 800ea6c:	b083      	sub	sp, #12
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f003 0303 	and.w	r3, r3, #3
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	370c      	adds	r7, #12
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea84:	4770      	bx	lr
	...

0800ea88 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800eaa6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800eaac:	431a      	orrs	r2, r3
                       Command->CPSM);
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800eab2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	4313      	orrs	r3, r2
 800eab8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	68da      	ldr	r2, [r3, #12]
 800eabe:	4b06      	ldr	r3, [pc, #24]	; (800ead8 <SDMMC_SendCommand+0x50>)
 800eac0:	4013      	ands	r3, r2
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	431a      	orrs	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800eaca:	2300      	movs	r3, #0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3714      	adds	r7, #20
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr
 800ead8:	fffee0c0 	.word	0xfffee0c0

0800eadc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	b2db      	uxtb	r3, r3
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	370c      	adds	r7, #12
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr

0800eaf6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800eaf6:	b480      	push	{r7}
 800eaf8:	b085      	sub	sp, #20
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
 800eafe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	3314      	adds	r3, #20
 800eb04:	461a      	mov	r2, r3
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	4413      	add	r3, r2
 800eb0a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3714      	adds	r7, #20
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr

0800eb1c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b085      	sub	sp, #20
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eb26:	2300      	movs	r3, #0
 800eb28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	685a      	ldr	r2, [r3, #4]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800eb42:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800eb48:	431a      	orrs	r2, r3
                       Data->DPSM);
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800eb4e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	4313      	orrs	r3, r2
 800eb54:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	431a      	orrs	r2, r3
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800eb66:	2300      	movs	r3, #0

}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3714      	adds	r7, #20
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr

0800eb74 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b088      	sub	sp, #32
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800eb82:	2310      	movs	r3, #16
 800eb84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb96:	f107 0308 	add.w	r3, r7, #8
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f7ff ff73 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800eba2:	f241 3288 	movw	r2, #5000	; 0x1388
 800eba6:	2110      	movs	r1, #16
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 fa5f 	bl	800f06c <SDMMC_GetCmdResp1>
 800ebae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebb0:	69fb      	ldr	r3, [r7, #28]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3720      	adds	r7, #32
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}

0800ebba <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ebba:	b580      	push	{r7, lr}
 800ebbc:	b088      	sub	sp, #32
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
 800ebc2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ebc8:	2311      	movs	r3, #17
 800ebca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ebcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ebd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ebd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ebda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ebdc:	f107 0308 	add.w	r3, r7, #8
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f7ff ff50 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ebe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebec:	2111      	movs	r1, #17
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 fa3c 	bl	800f06c <SDMMC_GetCmdResp1>
 800ebf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebf6:	69fb      	ldr	r3, [r7, #28]
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3720      	adds	r7, #32
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b088      	sub	sp, #32
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ec0e:	2312      	movs	r3, #18
 800ec10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec22:	f107 0308 	add.w	r3, r7, #8
 800ec26:	4619      	mov	r1, r3
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f7ff ff2d 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ec2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec32:	2112      	movs	r1, #18
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 fa19 	bl	800f06c <SDMMC_GetCmdResp1>
 800ec3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec3c:	69fb      	ldr	r3, [r7, #28]
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3720      	adds	r7, #32
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b088      	sub	sp, #32
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
 800ec4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ec54:	2318      	movs	r3, #24
 800ec56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec68:	f107 0308 	add.w	r3, r7, #8
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f7ff ff0a 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ec74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec78:	2118      	movs	r1, #24
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 f9f6 	bl	800f06c <SDMMC_GetCmdResp1>
 800ec80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec82:	69fb      	ldr	r3, [r7, #28]
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3720      	adds	r7, #32
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b088      	sub	sp, #32
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ec9a:	2319      	movs	r3, #25
 800ec9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eca2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eca4:	2300      	movs	r3, #0
 800eca6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ecae:	f107 0308 	add.w	r3, r7, #8
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f7ff fee7 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ecba:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecbe:	2119      	movs	r1, #25
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 f9d3 	bl	800f06c <SDMMC_GetCmdResp1>
 800ecc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecc8:	69fb      	ldr	r3, [r7, #28]
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3720      	adds	r7, #32
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
	...

0800ecd4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b088      	sub	sp, #32
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ece0:	230c      	movs	r3, #12
 800ece2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ece4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ece8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecea:	2300      	movs	r3, #0
 800ecec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ecee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecf2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	68db      	ldr	r3, [r3, #12]
 800ed04:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed0c:	f107 0308 	add.w	r3, r7, #8
 800ed10:	4619      	mov	r1, r3
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f7ff feb8 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ed18:	4a0b      	ldr	r2, [pc, #44]	; (800ed48 <SDMMC_CmdStopTransfer+0x74>)
 800ed1a:	210c      	movs	r1, #12
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f000 f9a5 	bl	800f06c <SDMMC_GetCmdResp1>
 800ed22:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ed30:	69fb      	ldr	r3, [r7, #28]
 800ed32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed36:	d101      	bne.n	800ed3c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ed3c:	69fb      	ldr	r3, [r7, #28]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3720      	adds	r7, #32
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	05f5e100 	.word	0x05f5e100

0800ed4c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b088      	sub	sp, #32
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ed5a:	2307      	movs	r3, #7
 800ed5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed64:	2300      	movs	r3, #0
 800ed66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed6e:	f107 0308 	add.w	r3, r7, #8
 800ed72:	4619      	mov	r1, r3
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7ff fe87 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ed7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed7e:	2107      	movs	r1, #7
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 f973 	bl	800f06c <SDMMC_GetCmdResp1>
 800ed86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed88:	69fb      	ldr	r3, [r7, #28]
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3720      	adds	r7, #32
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b088      	sub	sp, #32
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800eda2:	2300      	movs	r3, #0
 800eda4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eda6:	2300      	movs	r3, #0
 800eda8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800edaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800edae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edb0:	f107 0308 	add.w	r3, r7, #8
 800edb4:	4619      	mov	r1, r3
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f7ff fe66 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 fb97 	bl	800f4f0 <SDMMC_GetCmdError>
 800edc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edc4:	69fb      	ldr	r3, [r7, #28]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3720      	adds	r7, #32
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b088      	sub	sp, #32
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800edd6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800edda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800eddc:	2308      	movs	r3, #8
 800edde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ede0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ede4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ede6:	2300      	movs	r3, #0
 800ede8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800edea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800edee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edf0:	f107 0308 	add.w	r3, r7, #8
 800edf4:	4619      	mov	r1, r3
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7ff fe46 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 fb29 	bl	800f454 <SDMMC_GetCmdResp7>
 800ee02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee04:	69fb      	ldr	r3, [r7, #28]
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3720      	adds	r7, #32
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b088      	sub	sp, #32
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
 800ee16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ee1c:	2337      	movs	r3, #55	; 0x37
 800ee1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee26:	2300      	movs	r3, #0
 800ee28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee30:	f107 0308 	add.w	r3, r7, #8
 800ee34:	4619      	mov	r1, r3
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f7ff fe26 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ee3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee40:	2137      	movs	r1, #55	; 0x37
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 f912 	bl	800f06c <SDMMC_GetCmdResp1>
 800ee48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee4a:	69fb      	ldr	r3, [r7, #28]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3720      	adds	r7, #32
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b088      	sub	sp, #32
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ee62:	2329      	movs	r3, #41	; 0x29
 800ee64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee66:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee76:	f107 0308 	add.w	r3, r7, #8
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f7ff fe03 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f000 fa2e 	bl	800f2e4 <SDMMC_GetCmdResp3>
 800ee88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee8a:	69fb      	ldr	r3, [r7, #28]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3720      	adds	r7, #32
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b088      	sub	sp, #32
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800eea2:	2306      	movs	r3, #6
 800eea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eeaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eeac:	2300      	movs	r3, #0
 800eeae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eeb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eeb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eeb6:	f107 0308 	add.w	r3, r7, #8
 800eeba:	4619      	mov	r1, r3
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f7ff fde3 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800eec2:	f241 3288 	movw	r2, #5000	; 0x1388
 800eec6:	2106      	movs	r1, #6
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 f8cf 	bl	800f06c <SDMMC_GetCmdResp1>
 800eece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eed0:	69fb      	ldr	r3, [r7, #28]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3720      	adds	r7, #32
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b088      	sub	sp, #32
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800eee2:	2300      	movs	r3, #0
 800eee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800eee6:	2333      	movs	r3, #51	; 0x33
 800eee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eeea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eeee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eef0:	2300      	movs	r3, #0
 800eef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eef8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eefa:	f107 0308 	add.w	r3, r7, #8
 800eefe:	4619      	mov	r1, r3
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f7ff fdc1 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ef06:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef0a:	2133      	movs	r1, #51	; 0x33
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 f8ad 	bl	800f06c <SDMMC_GetCmdResp1>
 800ef12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef14:	69fb      	ldr	r3, [r7, #28]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3720      	adds	r7, #32
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ef1e:	b580      	push	{r7, lr}
 800ef20:	b088      	sub	sp, #32
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ef26:	2300      	movs	r3, #0
 800ef28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ef2a:	2302      	movs	r3, #2
 800ef2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ef2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ef32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef34:	2300      	movs	r3, #0
 800ef36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef3e:	f107 0308 	add.w	r3, r7, #8
 800ef42:	4619      	mov	r1, r3
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7ff fd9f 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 f980 	bl	800f250 <SDMMC_GetCmdResp2>
 800ef50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef52:	69fb      	ldr	r3, [r7, #28]
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3720      	adds	r7, #32
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b088      	sub	sp, #32
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ef6a:	2309      	movs	r3, #9
 800ef6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ef6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ef72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef74:	2300      	movs	r3, #0
 800ef76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef7e:	f107 0308 	add.w	r3, r7, #8
 800ef82:	4619      	mov	r1, r3
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f7ff fd7f 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f000 f960 	bl	800f250 <SDMMC_GetCmdResp2>
 800ef90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef92:	69fb      	ldr	r3, [r7, #28]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3720      	adds	r7, #32
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b088      	sub	sp, #32
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800efa6:	2300      	movs	r3, #0
 800efa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800efaa:	2303      	movs	r3, #3
 800efac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800efb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efb4:	2300      	movs	r3, #0
 800efb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efbe:	f107 0308 	add.w	r3, r7, #8
 800efc2:	4619      	mov	r1, r3
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f7ff fd5f 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800efca:	683a      	ldr	r2, [r7, #0]
 800efcc:	2103      	movs	r1, #3
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f000 f9c8 	bl	800f364 <SDMMC_GetCmdResp6>
 800efd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efd6:	69fb      	ldr	r3, [r7, #28]
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3720      	adds	r7, #32
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b088      	sub	sp, #32
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800efee:	230d      	movs	r3, #13
 800eff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eff8:	2300      	movs	r3, #0
 800effa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800effc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f000:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f002:	f107 0308 	add.w	r3, r7, #8
 800f006:	4619      	mov	r1, r3
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f7ff fd3d 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f00e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f012:	210d      	movs	r1, #13
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 f829 	bl	800f06c <SDMMC_GetCmdResp1>
 800f01a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f01c:	69fb      	ldr	r3, [r7, #28]
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3720      	adds	r7, #32
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}

0800f026 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800f026:	b580      	push	{r7, lr}
 800f028:	b088      	sub	sp, #32
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f02e:	2300      	movs	r3, #0
 800f030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800f032:	230d      	movs	r3, #13
 800f034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f03a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f03c:	2300      	movs	r3, #0
 800f03e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f044:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f046:	f107 0308 	add.w	r3, r7, #8
 800f04a:	4619      	mov	r1, r3
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f7ff fd1b 	bl	800ea88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800f052:	f241 3288 	movw	r2, #5000	; 0x1388
 800f056:	210d      	movs	r1, #13
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 f807 	bl	800f06c <SDMMC_GetCmdResp1>
 800f05e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f060:	69fb      	ldr	r3, [r7, #28]
}
 800f062:	4618      	mov	r0, r3
 800f064:	3720      	adds	r7, #32
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
	...

0800f06c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b088      	sub	sp, #32
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	460b      	mov	r3, r1
 800f076:	607a      	str	r2, [r7, #4]
 800f078:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f07a:	4b70      	ldr	r3, [pc, #448]	; (800f23c <SDMMC_GetCmdResp1+0x1d0>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	4a70      	ldr	r2, [pc, #448]	; (800f240 <SDMMC_GetCmdResp1+0x1d4>)
 800f080:	fba2 2303 	umull	r2, r3, r2, r3
 800f084:	0a5a      	lsrs	r2, r3, #9
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	fb02 f303 	mul.w	r3, r2, r3
 800f08c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f08e:	69fb      	ldr	r3, [r7, #28]
 800f090:	1e5a      	subs	r2, r3, #1
 800f092:	61fa      	str	r2, [r7, #28]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d102      	bne.n	800f09e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f098:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f09c:	e0c9      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0a2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f0a4:	69ba      	ldr	r2, [r7, #24]
 800f0a6:	4b67      	ldr	r3, [pc, #412]	; (800f244 <SDMMC_GetCmdResp1+0x1d8>)
 800f0a8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d0ef      	beq.n	800f08e <SDMMC_GetCmdResp1+0x22>
 800f0ae:	69bb      	ldr	r3, [r7, #24]
 800f0b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d1ea      	bne.n	800f08e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0bc:	f003 0304 	and.w	r3, r3, #4
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d004      	beq.n	800f0ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	2204      	movs	r2, #4
 800f0c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f0ca:	2304      	movs	r3, #4
 800f0cc:	e0b1      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0d2:	f003 0301 	and.w	r3, r3, #1
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d004      	beq.n	800f0e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2201      	movs	r2, #1
 800f0de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e0a6      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	4a58      	ldr	r2, [pc, #352]	; (800f248 <SDMMC_GetCmdResp1+0x1dc>)
 800f0e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f0ea:	68f8      	ldr	r0, [r7, #12]
 800f0ec:	f7ff fcf6 	bl	800eadc <SDMMC_GetCommandResponse>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	7afb      	ldrb	r3, [r7, #11]
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d001      	beq.n	800f0fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	e099      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f0fe:	2100      	movs	r1, #0
 800f100:	68f8      	ldr	r0, [r7, #12]
 800f102:	f7ff fcf8 	bl	800eaf6 <SDMMC_GetResponse>
 800f106:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f108:	697a      	ldr	r2, [r7, #20]
 800f10a:	4b50      	ldr	r3, [pc, #320]	; (800f24c <SDMMC_GetCmdResp1+0x1e0>)
 800f10c:	4013      	ands	r3, r2
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d101      	bne.n	800f116 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f112:	2300      	movs	r3, #0
 800f114:	e08d      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	da02      	bge.n	800f122 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f11c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f120:	e087      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d001      	beq.n	800f130 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f12c:	2340      	movs	r3, #64	; 0x40
 800f12e:	e080      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f136:	2b00      	cmp	r3, #0
 800f138:	d001      	beq.n	800f13e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f13a:	2380      	movs	r3, #128	; 0x80
 800f13c:	e079      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f144:	2b00      	cmp	r3, #0
 800f146:	d002      	beq.n	800f14e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f14c:	e071      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f154:	2b00      	cmp	r3, #0
 800f156:	d002      	beq.n	800f15e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f15c:	e069      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f164:	2b00      	cmp	r3, #0
 800f166:	d002      	beq.n	800f16e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f16c:	e061      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f174:	2b00      	cmp	r3, #0
 800f176:	d002      	beq.n	800f17e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f178:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f17c:	e059      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f184:	2b00      	cmp	r3, #0
 800f186:	d002      	beq.n	800f18e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f18c:	e051      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f194:	2b00      	cmp	r3, #0
 800f196:	d002      	beq.n	800f19e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f19c:	e049      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d002      	beq.n	800f1ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f1a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f1ac:	e041      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d002      	beq.n	800f1be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f1b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1bc:	e039      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d002      	beq.n	800f1ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f1c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f1cc:	e031      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f1d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f1dc:	e029      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d002      	beq.n	800f1ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f1e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f1ec:	e021      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d002      	beq.n	800f1fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f1f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f1fc:	e019      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f208:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f20c:	e011      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f214:	2b00      	cmp	r3, #0
 800f216:	d002      	beq.n	800f21e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f218:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f21c:	e009      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	f003 0308 	and.w	r3, r3, #8
 800f224:	2b00      	cmp	r3, #0
 800f226:	d002      	beq.n	800f22e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f228:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f22c:	e001      	b.n	800f232 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f22e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f232:	4618      	mov	r0, r3
 800f234:	3720      	adds	r7, #32
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	24000004 	.word	0x24000004
 800f240:	10624dd3 	.word	0x10624dd3
 800f244:	00200045 	.word	0x00200045
 800f248:	002000c5 	.word	0x002000c5
 800f24c:	fdffe008 	.word	0xfdffe008

0800f250 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f250:	b480      	push	{r7}
 800f252:	b085      	sub	sp, #20
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f258:	4b1f      	ldr	r3, [pc, #124]	; (800f2d8 <SDMMC_GetCmdResp2+0x88>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4a1f      	ldr	r2, [pc, #124]	; (800f2dc <SDMMC_GetCmdResp2+0x8c>)
 800f25e:	fba2 2303 	umull	r2, r3, r2, r3
 800f262:	0a5b      	lsrs	r3, r3, #9
 800f264:	f241 3288 	movw	r2, #5000	; 0x1388
 800f268:	fb02 f303 	mul.w	r3, r2, r3
 800f26c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	1e5a      	subs	r2, r3, #1
 800f272:	60fa      	str	r2, [r7, #12]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d102      	bne.n	800f27e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f278:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f27c:	e026      	b.n	800f2cc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f282:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d0ef      	beq.n	800f26e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f294:	2b00      	cmp	r3, #0
 800f296:	d1ea      	bne.n	800f26e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f29c:	f003 0304 	and.w	r3, r3, #4
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d004      	beq.n	800f2ae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2204      	movs	r2, #4
 800f2a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f2aa:	2304      	movs	r3, #4
 800f2ac:	e00e      	b.n	800f2cc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2b2:	f003 0301 	and.w	r3, r3, #1
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d004      	beq.n	800f2c4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	e003      	b.n	800f2cc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a06      	ldr	r2, [pc, #24]	; (800f2e0 <SDMMC_GetCmdResp2+0x90>)
 800f2c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f2ca:	2300      	movs	r3, #0
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3714      	adds	r7, #20
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr
 800f2d8:	24000004 	.word	0x24000004
 800f2dc:	10624dd3 	.word	0x10624dd3
 800f2e0:	002000c5 	.word	0x002000c5

0800f2e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f2ec:	4b1a      	ldr	r3, [pc, #104]	; (800f358 <SDMMC_GetCmdResp3+0x74>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4a1a      	ldr	r2, [pc, #104]	; (800f35c <SDMMC_GetCmdResp3+0x78>)
 800f2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2f6:	0a5b      	lsrs	r3, r3, #9
 800f2f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2fc:	fb02 f303 	mul.w	r3, r2, r3
 800f300:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	1e5a      	subs	r2, r3, #1
 800f306:	60fa      	str	r2, [r7, #12]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d102      	bne.n	800f312 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f30c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f310:	e01b      	b.n	800f34a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f316:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d0ef      	beq.n	800f302 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d1ea      	bne.n	800f302 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f330:	f003 0304 	and.w	r3, r3, #4
 800f334:	2b00      	cmp	r3, #0
 800f336:	d004      	beq.n	800f342 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2204      	movs	r2, #4
 800f33c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f33e:	2304      	movs	r3, #4
 800f340:	e003      	b.n	800f34a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	4a06      	ldr	r2, [pc, #24]	; (800f360 <SDMMC_GetCmdResp3+0x7c>)
 800f346:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f348:	2300      	movs	r3, #0
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3714      	adds	r7, #20
 800f34e:	46bd      	mov	sp, r7
 800f350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f354:	4770      	bx	lr
 800f356:	bf00      	nop
 800f358:	24000004 	.word	0x24000004
 800f35c:	10624dd3 	.word	0x10624dd3
 800f360:	002000c5 	.word	0x002000c5

0800f364 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b088      	sub	sp, #32
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	460b      	mov	r3, r1
 800f36e:	607a      	str	r2, [r7, #4]
 800f370:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f372:	4b35      	ldr	r3, [pc, #212]	; (800f448 <SDMMC_GetCmdResp6+0xe4>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	4a35      	ldr	r2, [pc, #212]	; (800f44c <SDMMC_GetCmdResp6+0xe8>)
 800f378:	fba2 2303 	umull	r2, r3, r2, r3
 800f37c:	0a5b      	lsrs	r3, r3, #9
 800f37e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f382:	fb02 f303 	mul.w	r3, r2, r3
 800f386:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	1e5a      	subs	r2, r3, #1
 800f38c:	61fa      	str	r2, [r7, #28]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d102      	bne.n	800f398 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f392:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f396:	e052      	b.n	800f43e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f39c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f39e:	69bb      	ldr	r3, [r7, #24]
 800f3a0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d0ef      	beq.n	800f388 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f3a8:	69bb      	ldr	r3, [r7, #24]
 800f3aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d1ea      	bne.n	800f388 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3b6:	f003 0304 	and.w	r3, r3, #4
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d004      	beq.n	800f3c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2204      	movs	r2, #4
 800f3c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3c4:	2304      	movs	r3, #4
 800f3c6:	e03a      	b.n	800f43e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3cc:	f003 0301 	and.w	r3, r3, #1
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d004      	beq.n	800f3de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	e02f      	b.n	800f43e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f7ff fb7c 	bl	800eadc <SDMMC_GetCommandResponse>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	7afb      	ldrb	r3, [r7, #11]
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d001      	beq.n	800f3f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	e025      	b.n	800f43e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	4a16      	ldr	r2, [pc, #88]	; (800f450 <SDMMC_GetCmdResp6+0xec>)
 800f3f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	68f8      	ldr	r0, [r7, #12]
 800f3fc:	f7ff fb7b 	bl	800eaf6 <SDMMC_GetResponse>
 800f400:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d106      	bne.n	800f41a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	0c1b      	lsrs	r3, r3, #16
 800f410:	b29a      	uxth	r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f416:	2300      	movs	r3, #0
 800f418:	e011      	b.n	800f43e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f420:	2b00      	cmp	r3, #0
 800f422:	d002      	beq.n	800f42a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f428:	e009      	b.n	800f43e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f430:	2b00      	cmp	r3, #0
 800f432:	d002      	beq.n	800f43a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f438:	e001      	b.n	800f43e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f43a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3720      	adds	r7, #32
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
 800f446:	bf00      	nop
 800f448:	24000004 	.word	0x24000004
 800f44c:	10624dd3 	.word	0x10624dd3
 800f450:	002000c5 	.word	0x002000c5

0800f454 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f454:	b480      	push	{r7}
 800f456:	b085      	sub	sp, #20
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f45c:	4b22      	ldr	r3, [pc, #136]	; (800f4e8 <SDMMC_GetCmdResp7+0x94>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4a22      	ldr	r2, [pc, #136]	; (800f4ec <SDMMC_GetCmdResp7+0x98>)
 800f462:	fba2 2303 	umull	r2, r3, r2, r3
 800f466:	0a5b      	lsrs	r3, r3, #9
 800f468:	f241 3288 	movw	r2, #5000	; 0x1388
 800f46c:	fb02 f303 	mul.w	r3, r2, r3
 800f470:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	1e5a      	subs	r2, r3, #1
 800f476:	60fa      	str	r2, [r7, #12]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d102      	bne.n	800f482 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f47c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f480:	e02c      	b.n	800f4dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f486:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d0ef      	beq.n	800f472 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d1ea      	bne.n	800f472 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4a0:	f003 0304 	and.w	r3, r3, #4
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d004      	beq.n	800f4b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2204      	movs	r2, #4
 800f4ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f4ae:	2304      	movs	r3, #4
 800f4b0:	e014      	b.n	800f4dc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4b6:	f003 0301 	and.w	r3, r3, #1
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d004      	beq.n	800f4c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	e009      	b.n	800f4dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d002      	beq.n	800f4da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2240      	movs	r2, #64	; 0x40
 800f4d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f4da:	2300      	movs	r3, #0

}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3714      	adds	r7, #20
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr
 800f4e8:	24000004 	.word	0x24000004
 800f4ec:	10624dd3 	.word	0x10624dd3

0800f4f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b085      	sub	sp, #20
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f4f8:	4b11      	ldr	r3, [pc, #68]	; (800f540 <SDMMC_GetCmdError+0x50>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a11      	ldr	r2, [pc, #68]	; (800f544 <SDMMC_GetCmdError+0x54>)
 800f4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f502:	0a5b      	lsrs	r3, r3, #9
 800f504:	f241 3288 	movw	r2, #5000	; 0x1388
 800f508:	fb02 f303 	mul.w	r3, r2, r3
 800f50c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	1e5a      	subs	r2, r3, #1
 800f512:	60fa      	str	r2, [r7, #12]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d102      	bne.n	800f51e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f518:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f51c:	e009      	b.n	800f532 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f526:	2b00      	cmp	r3, #0
 800f528:	d0f1      	beq.n	800f50e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4a06      	ldr	r2, [pc, #24]	; (800f548 <SDMMC_GetCmdError+0x58>)
 800f52e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800f530:	2300      	movs	r3, #0
}
 800f532:	4618      	mov	r0, r3
 800f534:	3714      	adds	r7, #20
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr
 800f53e:	bf00      	nop
 800f540:	24000004 	.word	0x24000004
 800f544:	10624dd3 	.word	0x10624dd3
 800f548:	002000c5 	.word	0x002000c5

0800f54c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f54c:	b084      	sub	sp, #16
 800f54e:	b580      	push	{r7, lr}
 800f550:	b084      	sub	sp, #16
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
 800f556:	f107 001c 	add.w	r0, r7, #28
 800f55a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f560:	2b01      	cmp	r3, #1
 800f562:	d120      	bne.n	800f5a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f568:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	68da      	ldr	r2, [r3, #12]
 800f574:	4b2a      	ldr	r3, [pc, #168]	; (800f620 <USB_CoreInit+0xd4>)
 800f576:	4013      	ands	r3, r2
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d105      	bne.n	800f59a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 faac 	bl	800faf8 <USB_CoreReset>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	73fb      	strb	r3, [r7, #15]
 800f5a4:	e01a      	b.n	800f5dc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 faa0 	bl	800faf8 <USB_CoreReset>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d106      	bne.n	800f5d0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	639a      	str	r2, [r3, #56]	; 0x38
 800f5ce:	e005      	b.n	800f5dc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	d116      	bne.n	800f610 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f5f0:	4b0c      	ldr	r3, [pc, #48]	; (800f624 <USB_CoreInit+0xd8>)
 800f5f2:	4313      	orrs	r3, r2
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	689b      	ldr	r3, [r3, #8]
 800f5fc:	f043 0206 	orr.w	r2, r3, #6
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	689b      	ldr	r3, [r3, #8]
 800f608:	f043 0220 	orr.w	r2, r3, #32
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f610:	7bfb      	ldrb	r3, [r7, #15]
}
 800f612:	4618      	mov	r0, r3
 800f614:	3710      	adds	r7, #16
 800f616:	46bd      	mov	sp, r7
 800f618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f61c:	b004      	add	sp, #16
 800f61e:	4770      	bx	lr
 800f620:	ffbdffbf 	.word	0xffbdffbf
 800f624:	03ee0000 	.word	0x03ee0000

0800f628 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	689b      	ldr	r3, [r3, #8]
 800f634:	f023 0201 	bic.w	r2, r3, #1
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f63c:	2300      	movs	r3, #0
}
 800f63e:	4618      	mov	r0, r3
 800f640:	370c      	adds	r7, #12
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr

0800f64a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f64a:	b580      	push	{r7, lr}
 800f64c:	b084      	sub	sp, #16
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
 800f652:	460b      	mov	r3, r1
 800f654:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f656:	2300      	movs	r3, #0
 800f658:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	68db      	ldr	r3, [r3, #12]
 800f65e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f666:	78fb      	ldrb	r3, [r7, #3]
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d115      	bne.n	800f698 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f678:	2001      	movs	r0, #1
 800f67a:	f7f3 f817 	bl	80026ac <HAL_Delay>
      ms++;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	3301      	adds	r3, #1
 800f682:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f000 fa29 	bl	800fadc <USB_GetMode>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d01e      	beq.n	800f6ce <USB_SetCurrentMode+0x84>
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2b31      	cmp	r3, #49	; 0x31
 800f694:	d9f0      	bls.n	800f678 <USB_SetCurrentMode+0x2e>
 800f696:	e01a      	b.n	800f6ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f698:	78fb      	ldrb	r3, [r7, #3]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d115      	bne.n	800f6ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f6aa:	2001      	movs	r0, #1
 800f6ac:	f7f2 fffe 	bl	80026ac <HAL_Delay>
      ms++;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 fa10 	bl	800fadc <USB_GetMode>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d005      	beq.n	800f6ce <USB_SetCurrentMode+0x84>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2b31      	cmp	r3, #49	; 0x31
 800f6c6:	d9f0      	bls.n	800f6aa <USB_SetCurrentMode+0x60>
 800f6c8:	e001      	b.n	800f6ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	e005      	b.n	800f6da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2b32      	cmp	r3, #50	; 0x32
 800f6d2:	d101      	bne.n	800f6d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	e000      	b.n	800f6da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f6d8:	2300      	movs	r3, #0
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3710      	adds	r7, #16
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
	...

0800f6e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f6e4:	b084      	sub	sp, #16
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b086      	sub	sp, #24
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f6f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f6fe:	2300      	movs	r3, #0
 800f700:	613b      	str	r3, [r7, #16]
 800f702:	e009      	b.n	800f718 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f704:	687a      	ldr	r2, [r7, #4]
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	3340      	adds	r3, #64	; 0x40
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	4413      	add	r3, r2
 800f70e:	2200      	movs	r2, #0
 800f710:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	3301      	adds	r3, #1
 800f716:	613b      	str	r3, [r7, #16]
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	2b0e      	cmp	r3, #14
 800f71c:	d9f2      	bls.n	800f704 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f71e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f720:	2b00      	cmp	r3, #0
 800f722:	d11c      	bne.n	800f75e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	68fa      	ldr	r2, [r7, #12]
 800f72e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f732:	f043 0302 	orr.w	r3, r3, #2
 800f736:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f73c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	601a      	str	r2, [r3, #0]
 800f75c:	e005      	b.n	800f76a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f762:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f770:	461a      	mov	r2, r3
 800f772:	2300      	movs	r3, #0
 800f774:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f77c:	4619      	mov	r1, r3
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f784:	461a      	mov	r2, r3
 800f786:	680b      	ldr	r3, [r1, #0]
 800f788:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d10c      	bne.n	800f7aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f792:	2b00      	cmp	r3, #0
 800f794:	d104      	bne.n	800f7a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f796:	2100      	movs	r1, #0
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f000 f965 	bl	800fa68 <USB_SetDevSpeed>
 800f79e:	e008      	b.n	800f7b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f7a0:	2101      	movs	r1, #1
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f000 f960 	bl	800fa68 <USB_SetDevSpeed>
 800f7a8:	e003      	b.n	800f7b2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f7aa:	2103      	movs	r1, #3
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 f95b 	bl	800fa68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f7b2:	2110      	movs	r1, #16
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 f8f3 	bl	800f9a0 <USB_FlushTxFifo>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d001      	beq.n	800f7c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f000 f91f 	bl	800fa08 <USB_FlushRxFifo>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d001      	beq.n	800f7d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7da:	461a      	mov	r2, r3
 800f7dc:	2300      	movs	r3, #0
 800f7de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	613b      	str	r3, [r7, #16]
 800f7fc:	e043      	b.n	800f886 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	015a      	lsls	r2, r3, #5
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	4413      	add	r3, r2
 800f806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f814:	d118      	bne.n	800f848 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d10a      	bne.n	800f832 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	015a      	lsls	r2, r3, #5
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	4413      	add	r3, r2
 800f824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f828:	461a      	mov	r2, r3
 800f82a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f82e:	6013      	str	r3, [r2, #0]
 800f830:	e013      	b.n	800f85a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	015a      	lsls	r2, r3, #5
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	4413      	add	r3, r2
 800f83a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f83e:	461a      	mov	r2, r3
 800f840:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f844:	6013      	str	r3, [r2, #0]
 800f846:	e008      	b.n	800f85a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	015a      	lsls	r2, r3, #5
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	4413      	add	r3, r2
 800f850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f854:	461a      	mov	r2, r3
 800f856:	2300      	movs	r3, #0
 800f858:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	015a      	lsls	r2, r3, #5
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	4413      	add	r3, r2
 800f862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f866:	461a      	mov	r2, r3
 800f868:	2300      	movs	r3, #0
 800f86a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	015a      	lsls	r2, r3, #5
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	4413      	add	r3, r2
 800f874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f878:	461a      	mov	r2, r3
 800f87a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f87e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	3301      	adds	r3, #1
 800f884:	613b      	str	r3, [r7, #16]
 800f886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f888:	693a      	ldr	r2, [r7, #16]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d3b7      	bcc.n	800f7fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f88e:	2300      	movs	r3, #0
 800f890:	613b      	str	r3, [r7, #16]
 800f892:	e043      	b.n	800f91c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	015a      	lsls	r2, r3, #5
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	4413      	add	r3, r2
 800f89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f8a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f8aa:	d118      	bne.n	800f8de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d10a      	bne.n	800f8c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	015a      	lsls	r2, r3, #5
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	4413      	add	r3, r2
 800f8ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8be:	461a      	mov	r2, r3
 800f8c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f8c4:	6013      	str	r3, [r2, #0]
 800f8c6:	e013      	b.n	800f8f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	015a      	lsls	r2, r3, #5
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f8da:	6013      	str	r3, [r2, #0]
 800f8dc:	e008      	b.n	800f8f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	015a      	lsls	r2, r3, #5
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	015a      	lsls	r2, r3, #5
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	2300      	movs	r3, #0
 800f900:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	015a      	lsls	r2, r3, #5
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	4413      	add	r3, r2
 800f90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f90e:	461a      	mov	r2, r3
 800f910:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f914:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	3301      	adds	r3, #1
 800f91a:	613b      	str	r3, [r7, #16]
 800f91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91e:	693a      	ldr	r2, [r7, #16]
 800f920:	429a      	cmp	r2, r3
 800f922:	d3b7      	bcc.n	800f894 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f92a:	691b      	ldr	r3, [r3, #16]
 800f92c:	68fa      	ldr	r2, [r7, #12]
 800f92e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f936:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2200      	movs	r2, #0
 800f93c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f944:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d105      	bne.n	800f958 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	699b      	ldr	r3, [r3, #24]
 800f950:	f043 0210 	orr.w	r2, r3, #16
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	699a      	ldr	r2, [r3, #24]
 800f95c:	4b0e      	ldr	r3, [pc, #56]	; (800f998 <USB_DevInit+0x2b4>)
 800f95e:	4313      	orrs	r3, r2
 800f960:	687a      	ldr	r2, [r7, #4]
 800f962:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f966:	2b00      	cmp	r3, #0
 800f968:	d005      	beq.n	800f976 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	699b      	ldr	r3, [r3, #24]
 800f96e:	f043 0208 	orr.w	r2, r3, #8
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d105      	bne.n	800f988 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	699a      	ldr	r2, [r3, #24]
 800f980:	4b06      	ldr	r3, [pc, #24]	; (800f99c <USB_DevInit+0x2b8>)
 800f982:	4313      	orrs	r3, r2
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f988:	7dfb      	ldrb	r3, [r7, #23]
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3718      	adds	r7, #24
 800f98e:	46bd      	mov	sp, r7
 800f990:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f994:	b004      	add	sp, #16
 800f996:	4770      	bx	lr
 800f998:	803c3800 	.word	0x803c3800
 800f99c:	40000004 	.word	0x40000004

0800f9a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b085      	sub	sp, #20
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	3301      	adds	r3, #1
 800f9b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	4a13      	ldr	r2, [pc, #76]	; (800fa04 <USB_FlushTxFifo+0x64>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d901      	bls.n	800f9c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f9bc:	2303      	movs	r3, #3
 800f9be:	e01b      	b.n	800f9f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	691b      	ldr	r3, [r3, #16]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	daf2      	bge.n	800f9ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	019b      	lsls	r3, r3, #6
 800f9d0:	f043 0220 	orr.w	r2, r3, #32
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	3301      	adds	r3, #1
 800f9dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	4a08      	ldr	r2, [pc, #32]	; (800fa04 <USB_FlushTxFifo+0x64>)
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d901      	bls.n	800f9ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f9e6:	2303      	movs	r3, #3
 800f9e8:	e006      	b.n	800f9f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	691b      	ldr	r3, [r3, #16]
 800f9ee:	f003 0320 	and.w	r3, r3, #32
 800f9f2:	2b20      	cmp	r3, #32
 800f9f4:	d0f0      	beq.n	800f9d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f9f6:	2300      	movs	r3, #0
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3714      	adds	r7, #20
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr
 800fa04:	00030d40 	.word	0x00030d40

0800fa08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b085      	sub	sp, #20
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fa10:	2300      	movs	r3, #0
 800fa12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	3301      	adds	r3, #1
 800fa18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	4a11      	ldr	r2, [pc, #68]	; (800fa64 <USB_FlushRxFifo+0x5c>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d901      	bls.n	800fa26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fa22:	2303      	movs	r3, #3
 800fa24:	e018      	b.n	800fa58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	691b      	ldr	r3, [r3, #16]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	daf2      	bge.n	800fa14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2210      	movs	r2, #16
 800fa36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	4a08      	ldr	r2, [pc, #32]	; (800fa64 <USB_FlushRxFifo+0x5c>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d901      	bls.n	800fa4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fa46:	2303      	movs	r3, #3
 800fa48:	e006      	b.n	800fa58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	691b      	ldr	r3, [r3, #16]
 800fa4e:	f003 0310 	and.w	r3, r3, #16
 800fa52:	2b10      	cmp	r3, #16
 800fa54:	d0f0      	beq.n	800fa38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fa56:	2300      	movs	r3, #0
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3714      	adds	r7, #20
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr
 800fa64:	00030d40 	.word	0x00030d40

0800fa68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b085      	sub	sp, #20
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	460b      	mov	r3, r1
 800fa72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	78fb      	ldrb	r3, [r7, #3]
 800fa82:	68f9      	ldr	r1, [r7, #12]
 800fa84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fa8c:	2300      	movs	r3, #0
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3714      	adds	r7, #20
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr

0800fa9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fa9a:	b480      	push	{r7}
 800fa9c:	b085      	sub	sp, #20
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	68fa      	ldr	r2, [r7, #12]
 800fab0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fab4:	f023 0303 	bic.w	r3, r3, #3
 800fab8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	68fa      	ldr	r2, [r7, #12]
 800fac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fac8:	f043 0302 	orr.w	r3, r3, #2
 800facc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800face:	2300      	movs	r3, #0
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	3714      	adds	r7, #20
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr

0800fadc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fadc:	b480      	push	{r7}
 800fade:	b083      	sub	sp, #12
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	695b      	ldr	r3, [r3, #20]
 800fae8:	f003 0301 	and.w	r3, r3, #1
}
 800faec:	4618      	mov	r0, r3
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b085      	sub	sp, #20
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fb00:	2300      	movs	r3, #0
 800fb02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	3301      	adds	r3, #1
 800fb08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	4a13      	ldr	r2, [pc, #76]	; (800fb5c <USB_CoreReset+0x64>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d901      	bls.n	800fb16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fb12:	2303      	movs	r3, #3
 800fb14:	e01b      	b.n	800fb4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	691b      	ldr	r3, [r3, #16]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	daf2      	bge.n	800fb04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	691b      	ldr	r3, [r3, #16]
 800fb26:	f043 0201 	orr.w	r2, r3, #1
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	3301      	adds	r3, #1
 800fb32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	4a09      	ldr	r2, [pc, #36]	; (800fb5c <USB_CoreReset+0x64>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d901      	bls.n	800fb40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fb3c:	2303      	movs	r3, #3
 800fb3e:	e006      	b.n	800fb4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	691b      	ldr	r3, [r3, #16]
 800fb44:	f003 0301 	and.w	r3, r3, #1
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d0f0      	beq.n	800fb2e <USB_CoreReset+0x36>

  return HAL_OK;
 800fb4c:	2300      	movs	r3, #0
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3714      	adds	r7, #20
 800fb52:	46bd      	mov	sp, r7
 800fb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	00030d40 	.word	0x00030d40

0800fb60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fb64:	4904      	ldr	r1, [pc, #16]	; (800fb78 <MX_FATFS_Init+0x18>)
 800fb66:	4805      	ldr	r0, [pc, #20]	; (800fb7c <MX_FATFS_Init+0x1c>)
 800fb68:	f003 fe14 	bl	8013794 <FATFS_LinkDriver>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	461a      	mov	r2, r3
 800fb70:	4b03      	ldr	r3, [pc, #12]	; (800fb80 <MX_FATFS_Init+0x20>)
 800fb72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fb74:	bf00      	nop
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	2403110c 	.word	0x2403110c
 800fb7c:	0801a77c 	.word	0x0801a77c
 800fb80:	24031108 	.word	0x24031108

0800fb84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fb84:	b480      	push	{r7}
 800fb86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fb88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr

0800fb94 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fb9e:	f000 f885 	bl	800fcac <BSP_SD_IsDetected>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d001      	beq.n	800fbac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fba8:	2302      	movs	r3, #2
 800fbaa:	e012      	b.n	800fbd2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fbac:	480b      	ldr	r0, [pc, #44]	; (800fbdc <BSP_SD_Init+0x48>)
 800fbae:	f7fc f8c5 	bl	800bd3c <HAL_SD_Init>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fbb6:	79fb      	ldrb	r3, [r7, #7]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d109      	bne.n	800fbd0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fbbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fbc0:	4806      	ldr	r0, [pc, #24]	; (800fbdc <BSP_SD_Init+0x48>)
 800fbc2:	f7fc ff7b 	bl	800cabc <HAL_SD_ConfigWideBusOperation>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d001      	beq.n	800fbd0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fbcc:	2301      	movs	r3, #1
 800fbce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fbd0:	79fb      	ldrb	r3, [r7, #7]
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3708      	adds	r7, #8
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
 800fbda:	bf00      	nop
 800fbdc:	24000410 	.word	0x24000410

0800fbe0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b086      	sub	sp, #24
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fbec:	2300      	movs	r3, #0
 800fbee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	68f9      	ldr	r1, [r7, #12]
 800fbf6:	4806      	ldr	r0, [pc, #24]	; (800fc10 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fbf8:	f7fc f9c0 	bl	800bf7c <HAL_SD_ReadBlocks_DMA>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d001      	beq.n	800fc06 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fc02:	2301      	movs	r3, #1
 800fc04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fc06:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3718      	adds	r7, #24
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}
 800fc10:	24000410 	.word	0x24000410

0800fc14 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b086      	sub	sp, #24
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fc20:	2300      	movs	r3, #0
 800fc22:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	68ba      	ldr	r2, [r7, #8]
 800fc28:	68f9      	ldr	r1, [r7, #12]
 800fc2a:	4806      	ldr	r0, [pc, #24]	; (800fc44 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fc2c:	f7fc fa4e 	bl	800c0cc <HAL_SD_WriteBlocks_DMA>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d001      	beq.n	800fc3a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fc36:	2301      	movs	r3, #1
 800fc38:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fc3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3718      	adds	r7, #24
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}
 800fc44:	24000410 	.word	0x24000410

0800fc48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fc4c:	4805      	ldr	r0, [pc, #20]	; (800fc64 <BSP_SD_GetCardState+0x1c>)
 800fc4e:	f7fd f847 	bl	800cce0 <HAL_SD_GetCardState>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b04      	cmp	r3, #4
 800fc56:	bf14      	ite	ne
 800fc58:	2301      	movne	r3, #1
 800fc5a:	2300      	moveq	r3, #0
 800fc5c:	b2db      	uxtb	r3, r3
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	24000410 	.word	0x24000410

0800fc68 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fc70:	6879      	ldr	r1, [r7, #4]
 800fc72:	4803      	ldr	r0, [pc, #12]	; (800fc80 <BSP_SD_GetCardInfo+0x18>)
 800fc74:	f7fc fef6 	bl	800ca64 <HAL_SD_GetCardInfo>
}
 800fc78:	bf00      	nop
 800fc7a:	3708      	adds	r7, #8
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	24000410 	.word	0x24000410

0800fc84 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fc8c:	f000 f9a0 	bl	800ffd0 <BSP_SD_WriteCpltCallback>
}
 800fc90:	bf00      	nop
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fca0:	f000 f9a2 	bl	800ffe8 <BSP_SD_ReadCpltCallback>
}
 800fca4:	bf00      	nop
 800fca6:	3708      	adds	r7, #8
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fcb6:	f000 f80b 	bl	800fcd0 <BSP_PlatformIsDetected>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d101      	bne.n	800fcc4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fcc4:	79fb      	ldrb	r3, [r7, #7]
 800fcc6:	b2db      	uxtb	r3, r3
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fcda:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fcde:	4806      	ldr	r0, [pc, #24]	; (800fcf8 <BSP_PlatformIsDetected+0x28>)
 800fce0:	f7f7 fe1c 	bl	800791c <HAL_GPIO_ReadPin>
 800fce4:	4603      	mov	r3, r0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d001      	beq.n	800fcee <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fcea:	2300      	movs	r3, #0
 800fcec:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fcee:	79fb      	ldrb	r3, [r7, #7]
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}
 800fcf8:	58021800 	.word	0x58021800

0800fcfc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b084      	sub	sp, #16
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800fd04:	f7f2 fcc6 	bl	8002694 <HAL_GetTick>
 800fd08:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800fd0a:	e006      	b.n	800fd1a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fd0c:	f7ff ff9c 	bl	800fc48 <BSP_SD_GetCardState>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d101      	bne.n	800fd1a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fd16:	2300      	movs	r3, #0
 800fd18:	e009      	b.n	800fd2e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800fd1a:	f7f2 fcbb 	bl	8002694 <HAL_GetTick>
 800fd1e:	4602      	mov	r2, r0
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	1ad3      	subs	r3, r2, r3
 800fd24:	687a      	ldr	r2, [r7, #4]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d8f0      	bhi.n	800fd0c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fd2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3710      	adds	r7, #16
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
	...

0800fd38 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	4603      	mov	r3, r0
 800fd40:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fd42:	4b0b      	ldr	r3, [pc, #44]	; (800fd70 <SD_CheckStatus+0x38>)
 800fd44:	2201      	movs	r2, #1
 800fd46:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fd48:	f7ff ff7e 	bl	800fc48 <BSP_SD_GetCardState>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d107      	bne.n	800fd62 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fd52:	4b07      	ldr	r3, [pc, #28]	; (800fd70 <SD_CheckStatus+0x38>)
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	f023 0301 	bic.w	r3, r3, #1
 800fd5c:	b2da      	uxtb	r2, r3
 800fd5e:	4b04      	ldr	r3, [pc, #16]	; (800fd70 <SD_CheckStatus+0x38>)
 800fd60:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fd62:	4b03      	ldr	r3, [pc, #12]	; (800fd70 <SD_CheckStatus+0x38>)
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	b2db      	uxtb	r3, r3
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	24000011 	.word	0x24000011

0800fd74 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fd7e:	f7ff ff09 	bl	800fb94 <BSP_SD_Init>
 800fd82:	4603      	mov	r3, r0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d107      	bne.n	800fd98 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800fd88:	79fb      	ldrb	r3, [r7, #7]
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7ff ffd4 	bl	800fd38 <SD_CheckStatus>
 800fd90:	4603      	mov	r3, r0
 800fd92:	461a      	mov	r2, r3
 800fd94:	4b04      	ldr	r3, [pc, #16]	; (800fda8 <SD_initialize+0x34>)
 800fd96:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fd98:	4b03      	ldr	r3, [pc, #12]	; (800fda8 <SD_initialize+0x34>)
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	b2db      	uxtb	r3, r3
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3708      	adds	r7, #8
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	24000011 	.word	0x24000011

0800fdac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fdb6:	79fb      	ldrb	r3, [r7, #7]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7ff ffbd 	bl	800fd38 <SD_CheckStatus>
 800fdbe:	4603      	mov	r3, r0
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3708      	adds	r7, #8
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}

0800fdc8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b086      	sub	sp, #24
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	60b9      	str	r1, [r7, #8]
 800fdd0:	607a      	str	r2, [r7, #4]
 800fdd2:	603b      	str	r3, [r7, #0]
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fdd8:	2301      	movs	r3, #1
 800fdda:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fddc:	f247 5030 	movw	r0, #30000	; 0x7530
 800fde0:	f7ff ff8c 	bl	800fcfc <SD_CheckStatusWithTimeout>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	da01      	bge.n	800fdee <SD_read+0x26>
  {
    return res;
 800fdea:	7dfb      	ldrb	r3, [r7, #23]
 800fdec:	e03b      	b.n	800fe66 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800fdee:	683a      	ldr	r2, [r7, #0]
 800fdf0:	6879      	ldr	r1, [r7, #4]
 800fdf2:	68b8      	ldr	r0, [r7, #8]
 800fdf4:	f7ff fef4 	bl	800fbe0 <BSP_SD_ReadBlocks_DMA>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d132      	bne.n	800fe64 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800fdfe:	4b1c      	ldr	r3, [pc, #112]	; (800fe70 <SD_read+0xa8>)
 800fe00:	2200      	movs	r2, #0
 800fe02:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800fe04:	f7f2 fc46 	bl	8002694 <HAL_GetTick>
 800fe08:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fe0a:	bf00      	nop
 800fe0c:	4b18      	ldr	r3, [pc, #96]	; (800fe70 <SD_read+0xa8>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d108      	bne.n	800fe26 <SD_read+0x5e>
 800fe14:	f7f2 fc3e 	bl	8002694 <HAL_GetTick>
 800fe18:	4602      	mov	r2, r0
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	1ad3      	subs	r3, r2, r3
 800fe1e:	f247 522f 	movw	r2, #29999	; 0x752f
 800fe22:	4293      	cmp	r3, r2
 800fe24:	d9f2      	bls.n	800fe0c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800fe26:	4b12      	ldr	r3, [pc, #72]	; (800fe70 <SD_read+0xa8>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d102      	bne.n	800fe34 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800fe2e:	2301      	movs	r3, #1
 800fe30:	75fb      	strb	r3, [r7, #23]
 800fe32:	e017      	b.n	800fe64 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800fe34:	4b0e      	ldr	r3, [pc, #56]	; (800fe70 <SD_read+0xa8>)
 800fe36:	2200      	movs	r2, #0
 800fe38:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fe3a:	f7f2 fc2b 	bl	8002694 <HAL_GetTick>
 800fe3e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fe40:	e007      	b.n	800fe52 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fe42:	f7ff ff01 	bl	800fc48 <BSP_SD_GetCardState>
 800fe46:	4603      	mov	r3, r0
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d102      	bne.n	800fe52 <SD_read+0x8a>
          {
            res = RES_OK;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800fe50:	e008      	b.n	800fe64 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fe52:	f7f2 fc1f 	bl	8002694 <HAL_GetTick>
 800fe56:	4602      	mov	r2, r0
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	1ad3      	subs	r3, r2, r3
 800fe5c:	f247 522f 	movw	r2, #29999	; 0x752f
 800fe60:	4293      	cmp	r3, r2
 800fe62:	d9ee      	bls.n	800fe42 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800fe64:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3718      	adds	r7, #24
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	24031348 	.word	0x24031348

0800fe74 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b086      	sub	sp, #24
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	60b9      	str	r1, [r7, #8]
 800fe7c:	607a      	str	r2, [r7, #4]
 800fe7e:	603b      	str	r3, [r7, #0]
 800fe80:	4603      	mov	r3, r0
 800fe82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fe84:	2301      	movs	r3, #1
 800fe86:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800fe88:	4b24      	ldr	r3, [pc, #144]	; (800ff1c <SD_write+0xa8>)
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fe8e:	f247 5030 	movw	r0, #30000	; 0x7530
 800fe92:	f7ff ff33 	bl	800fcfc <SD_CheckStatusWithTimeout>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	da01      	bge.n	800fea0 <SD_write+0x2c>
  {
    return res;
 800fe9c:	7dfb      	ldrb	r3, [r7, #23]
 800fe9e:	e038      	b.n	800ff12 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fea0:	683a      	ldr	r2, [r7, #0]
 800fea2:	6879      	ldr	r1, [r7, #4]
 800fea4:	68b8      	ldr	r0, [r7, #8]
 800fea6:	f7ff feb5 	bl	800fc14 <BSP_SD_WriteBlocks_DMA>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d12f      	bne.n	800ff10 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800feb0:	f7f2 fbf0 	bl	8002694 <HAL_GetTick>
 800feb4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800feb6:	bf00      	nop
 800feb8:	4b18      	ldr	r3, [pc, #96]	; (800ff1c <SD_write+0xa8>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d108      	bne.n	800fed2 <SD_write+0x5e>
 800fec0:	f7f2 fbe8 	bl	8002694 <HAL_GetTick>
 800fec4:	4602      	mov	r2, r0
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	1ad3      	subs	r3, r2, r3
 800feca:	f247 522f 	movw	r2, #29999	; 0x752f
 800fece:	4293      	cmp	r3, r2
 800fed0:	d9f2      	bls.n	800feb8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800fed2:	4b12      	ldr	r3, [pc, #72]	; (800ff1c <SD_write+0xa8>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d102      	bne.n	800fee0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800feda:	2301      	movs	r3, #1
 800fedc:	75fb      	strb	r3, [r7, #23]
 800fede:	e017      	b.n	800ff10 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800fee0:	4b0e      	ldr	r3, [pc, #56]	; (800ff1c <SD_write+0xa8>)
 800fee2:	2200      	movs	r2, #0
 800fee4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fee6:	f7f2 fbd5 	bl	8002694 <HAL_GetTick>
 800feea:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800feec:	e007      	b.n	800fefe <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800feee:	f7ff feab 	bl	800fc48 <BSP_SD_GetCardState>
 800fef2:	4603      	mov	r3, r0
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d102      	bne.n	800fefe <SD_write+0x8a>
          {
            res = RES_OK;
 800fef8:	2300      	movs	r3, #0
 800fefa:	75fb      	strb	r3, [r7, #23]
            break;
 800fefc:	e008      	b.n	800ff10 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fefe:	f7f2 fbc9 	bl	8002694 <HAL_GetTick>
 800ff02:	4602      	mov	r2, r0
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	1ad3      	subs	r3, r2, r3
 800ff08:	f247 522f 	movw	r2, #29999	; 0x752f
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d9ee      	bls.n	800feee <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ff10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3718      	adds	r7, #24
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	24031344 	.word	0x24031344

0800ff20 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b08c      	sub	sp, #48	; 0x30
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	4603      	mov	r3, r0
 800ff28:	603a      	str	r2, [r7, #0]
 800ff2a:	71fb      	strb	r3, [r7, #7]
 800ff2c:	460b      	mov	r3, r1
 800ff2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ff30:	2301      	movs	r3, #1
 800ff32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ff36:	4b25      	ldr	r3, [pc, #148]	; (800ffcc <SD_ioctl+0xac>)
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	f003 0301 	and.w	r3, r3, #1
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d001      	beq.n	800ff48 <SD_ioctl+0x28>
 800ff44:	2303      	movs	r3, #3
 800ff46:	e03c      	b.n	800ffc2 <SD_ioctl+0xa2>

  switch (cmd)
 800ff48:	79bb      	ldrb	r3, [r7, #6]
 800ff4a:	2b03      	cmp	r3, #3
 800ff4c:	d834      	bhi.n	800ffb8 <SD_ioctl+0x98>
 800ff4e:	a201      	add	r2, pc, #4	; (adr r2, 800ff54 <SD_ioctl+0x34>)
 800ff50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff54:	0800ff65 	.word	0x0800ff65
 800ff58:	0800ff6d 	.word	0x0800ff6d
 800ff5c:	0800ff85 	.word	0x0800ff85
 800ff60:	0800ff9f 	.word	0x0800ff9f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ff64:	2300      	movs	r3, #0
 800ff66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff6a:	e028      	b.n	800ffbe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff6c:	f107 0308 	add.w	r3, r7, #8
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7ff fe79 	bl	800fc68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ff76:	6a3a      	ldr	r2, [r7, #32]
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff82:	e01c      	b.n	800ffbe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff84:	f107 0308 	add.w	r3, r7, #8
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7ff fe6d 	bl	800fc68 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ff8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff90:	b29a      	uxth	r2, r3
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ff96:	2300      	movs	r3, #0
 800ff98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff9c:	e00f      	b.n	800ffbe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff9e:	f107 0308 	add.w	r3, r7, #8
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7ff fe60 	bl	800fc68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ffa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffaa:	0a5a      	lsrs	r2, r3, #9
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ffb6:	e002      	b.n	800ffbe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ffb8:	2304      	movs	r3, #4
 800ffba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ffbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3730      	adds	r7, #48	; 0x30
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	24000011 	.word	0x24000011

0800ffd0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ffd4:	4b03      	ldr	r3, [pc, #12]	; (800ffe4 <BSP_SD_WriteCpltCallback+0x14>)
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	601a      	str	r2, [r3, #0]
}
 800ffda:	bf00      	nop
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr
 800ffe4:	24031344 	.word	0x24031344

0800ffe8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ffec:	4b03      	ldr	r3, [pc, #12]	; (800fffc <BSP_SD_ReadCpltCallback+0x14>)
 800ffee:	2201      	movs	r2, #1
 800fff0:	601a      	str	r2, [r3, #0]
}
 800fff2:	bf00      	nop
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr
 800fffc:	24031348 	.word	0x24031348

08010000 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	4603      	mov	r3, r0
 8010008:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801000a:	79fb      	ldrb	r3, [r7, #7]
 801000c:	4a08      	ldr	r2, [pc, #32]	; (8010030 <disk_status+0x30>)
 801000e:	009b      	lsls	r3, r3, #2
 8010010:	4413      	add	r3, r2
 8010012:	685b      	ldr	r3, [r3, #4]
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	79fa      	ldrb	r2, [r7, #7]
 8010018:	4905      	ldr	r1, [pc, #20]	; (8010030 <disk_status+0x30>)
 801001a:	440a      	add	r2, r1
 801001c:	7a12      	ldrb	r2, [r2, #8]
 801001e:	4610      	mov	r0, r2
 8010020:	4798      	blx	r3
 8010022:	4603      	mov	r3, r0
 8010024:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010026:	7bfb      	ldrb	r3, [r7, #15]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3710      	adds	r7, #16
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}
 8010030:	24031374 	.word	0x24031374

08010034 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b084      	sub	sp, #16
 8010038:	af00      	add	r7, sp, #0
 801003a:	4603      	mov	r3, r0
 801003c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801003e:	2300      	movs	r3, #0
 8010040:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010042:	79fb      	ldrb	r3, [r7, #7]
 8010044:	4a0d      	ldr	r2, [pc, #52]	; (801007c <disk_initialize+0x48>)
 8010046:	5cd3      	ldrb	r3, [r2, r3]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d111      	bne.n	8010070 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801004c:	79fb      	ldrb	r3, [r7, #7]
 801004e:	4a0b      	ldr	r2, [pc, #44]	; (801007c <disk_initialize+0x48>)
 8010050:	2101      	movs	r1, #1
 8010052:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010054:	79fb      	ldrb	r3, [r7, #7]
 8010056:	4a09      	ldr	r2, [pc, #36]	; (801007c <disk_initialize+0x48>)
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	4413      	add	r3, r2
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	79fa      	ldrb	r2, [r7, #7]
 8010062:	4906      	ldr	r1, [pc, #24]	; (801007c <disk_initialize+0x48>)
 8010064:	440a      	add	r2, r1
 8010066:	7a12      	ldrb	r2, [r2, #8]
 8010068:	4610      	mov	r0, r2
 801006a:	4798      	blx	r3
 801006c:	4603      	mov	r3, r0
 801006e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010070:	7bfb      	ldrb	r3, [r7, #15]
}
 8010072:	4618      	mov	r0, r3
 8010074:	3710      	adds	r7, #16
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	24031374 	.word	0x24031374

08010080 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010080:	b590      	push	{r4, r7, lr}
 8010082:	b087      	sub	sp, #28
 8010084:	af00      	add	r7, sp, #0
 8010086:	60b9      	str	r1, [r7, #8]
 8010088:	607a      	str	r2, [r7, #4]
 801008a:	603b      	str	r3, [r7, #0]
 801008c:	4603      	mov	r3, r0
 801008e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010090:	7bfb      	ldrb	r3, [r7, #15]
 8010092:	4a0a      	ldr	r2, [pc, #40]	; (80100bc <disk_read+0x3c>)
 8010094:	009b      	lsls	r3, r3, #2
 8010096:	4413      	add	r3, r2
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	689c      	ldr	r4, [r3, #8]
 801009c:	7bfb      	ldrb	r3, [r7, #15]
 801009e:	4a07      	ldr	r2, [pc, #28]	; (80100bc <disk_read+0x3c>)
 80100a0:	4413      	add	r3, r2
 80100a2:	7a18      	ldrb	r0, [r3, #8]
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	687a      	ldr	r2, [r7, #4]
 80100a8:	68b9      	ldr	r1, [r7, #8]
 80100aa:	47a0      	blx	r4
 80100ac:	4603      	mov	r3, r0
 80100ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80100b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	371c      	adds	r7, #28
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd90      	pop	{r4, r7, pc}
 80100ba:	bf00      	nop
 80100bc:	24031374 	.word	0x24031374

080100c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80100c0:	b590      	push	{r4, r7, lr}
 80100c2:	b087      	sub	sp, #28
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	60b9      	str	r1, [r7, #8]
 80100c8:	607a      	str	r2, [r7, #4]
 80100ca:	603b      	str	r3, [r7, #0]
 80100cc:	4603      	mov	r3, r0
 80100ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80100d0:	7bfb      	ldrb	r3, [r7, #15]
 80100d2:	4a0a      	ldr	r2, [pc, #40]	; (80100fc <disk_write+0x3c>)
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	4413      	add	r3, r2
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	68dc      	ldr	r4, [r3, #12]
 80100dc:	7bfb      	ldrb	r3, [r7, #15]
 80100de:	4a07      	ldr	r2, [pc, #28]	; (80100fc <disk_write+0x3c>)
 80100e0:	4413      	add	r3, r2
 80100e2:	7a18      	ldrb	r0, [r3, #8]
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	68b9      	ldr	r1, [r7, #8]
 80100ea:	47a0      	blx	r4
 80100ec:	4603      	mov	r3, r0
 80100ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80100f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	371c      	adds	r7, #28
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd90      	pop	{r4, r7, pc}
 80100fa:	bf00      	nop
 80100fc:	24031374 	.word	0x24031374

08010100 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	4603      	mov	r3, r0
 8010108:	603a      	str	r2, [r7, #0]
 801010a:	71fb      	strb	r3, [r7, #7]
 801010c:	460b      	mov	r3, r1
 801010e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010110:	79fb      	ldrb	r3, [r7, #7]
 8010112:	4a09      	ldr	r2, [pc, #36]	; (8010138 <disk_ioctl+0x38>)
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	4413      	add	r3, r2
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	691b      	ldr	r3, [r3, #16]
 801011c:	79fa      	ldrb	r2, [r7, #7]
 801011e:	4906      	ldr	r1, [pc, #24]	; (8010138 <disk_ioctl+0x38>)
 8010120:	440a      	add	r2, r1
 8010122:	7a10      	ldrb	r0, [r2, #8]
 8010124:	79b9      	ldrb	r1, [r7, #6]
 8010126:	683a      	ldr	r2, [r7, #0]
 8010128:	4798      	blx	r3
 801012a:	4603      	mov	r3, r0
 801012c:	73fb      	strb	r3, [r7, #15]
  return res;
 801012e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010130:	4618      	mov	r0, r3
 8010132:	3710      	adds	r7, #16
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}
 8010138:	24031374 	.word	0x24031374

0801013c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801013c:	b480      	push	{r7}
 801013e:	b085      	sub	sp, #20
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	3301      	adds	r3, #1
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801014c:	89fb      	ldrh	r3, [r7, #14]
 801014e:	021b      	lsls	r3, r3, #8
 8010150:	b21a      	sxth	r2, r3
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	b21b      	sxth	r3, r3
 8010158:	4313      	orrs	r3, r2
 801015a:	b21b      	sxth	r3, r3
 801015c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801015e:	89fb      	ldrh	r3, [r7, #14]
}
 8010160:	4618      	mov	r0, r3
 8010162:	3714      	adds	r7, #20
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr

0801016c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801016c:	b480      	push	{r7}
 801016e:	b085      	sub	sp, #20
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	3303      	adds	r3, #3
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	021b      	lsls	r3, r3, #8
 8010180:	687a      	ldr	r2, [r7, #4]
 8010182:	3202      	adds	r2, #2
 8010184:	7812      	ldrb	r2, [r2, #0]
 8010186:	4313      	orrs	r3, r2
 8010188:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	021b      	lsls	r3, r3, #8
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	3201      	adds	r2, #1
 8010192:	7812      	ldrb	r2, [r2, #0]
 8010194:	4313      	orrs	r3, r2
 8010196:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	021b      	lsls	r3, r3, #8
 801019c:	687a      	ldr	r2, [r7, #4]
 801019e:	7812      	ldrb	r2, [r2, #0]
 80101a0:	4313      	orrs	r3, r2
 80101a2:	60fb      	str	r3, [r7, #12]
	return rv;
 80101a4:	68fb      	ldr	r3, [r7, #12]
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3714      	adds	r7, #20
 80101aa:	46bd      	mov	sp, r7
 80101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b0:	4770      	bx	lr

080101b2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80101b2:	b480      	push	{r7}
 80101b4:	b083      	sub	sp, #12
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
 80101ba:	460b      	mov	r3, r1
 80101bc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	1c5a      	adds	r2, r3, #1
 80101c2:	607a      	str	r2, [r7, #4]
 80101c4:	887a      	ldrh	r2, [r7, #2]
 80101c6:	b2d2      	uxtb	r2, r2
 80101c8:	701a      	strb	r2, [r3, #0]
 80101ca:	887b      	ldrh	r3, [r7, #2]
 80101cc:	0a1b      	lsrs	r3, r3, #8
 80101ce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	1c5a      	adds	r2, r3, #1
 80101d4:	607a      	str	r2, [r7, #4]
 80101d6:	887a      	ldrh	r2, [r7, #2]
 80101d8:	b2d2      	uxtb	r2, r2
 80101da:	701a      	strb	r2, [r3, #0]
}
 80101dc:	bf00      	nop
 80101de:	370c      	adds	r7, #12
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr

080101e8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80101e8:	b480      	push	{r7}
 80101ea:	b083      	sub	sp, #12
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	1c5a      	adds	r2, r3, #1
 80101f6:	607a      	str	r2, [r7, #4]
 80101f8:	683a      	ldr	r2, [r7, #0]
 80101fa:	b2d2      	uxtb	r2, r2
 80101fc:	701a      	strb	r2, [r3, #0]
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	0a1b      	lsrs	r3, r3, #8
 8010202:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	1c5a      	adds	r2, r3, #1
 8010208:	607a      	str	r2, [r7, #4]
 801020a:	683a      	ldr	r2, [r7, #0]
 801020c:	b2d2      	uxtb	r2, r2
 801020e:	701a      	strb	r2, [r3, #0]
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	0a1b      	lsrs	r3, r3, #8
 8010214:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	1c5a      	adds	r2, r3, #1
 801021a:	607a      	str	r2, [r7, #4]
 801021c:	683a      	ldr	r2, [r7, #0]
 801021e:	b2d2      	uxtb	r2, r2
 8010220:	701a      	strb	r2, [r3, #0]
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	0a1b      	lsrs	r3, r3, #8
 8010226:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	1c5a      	adds	r2, r3, #1
 801022c:	607a      	str	r2, [r7, #4]
 801022e:	683a      	ldr	r2, [r7, #0]
 8010230:	b2d2      	uxtb	r2, r2
 8010232:	701a      	strb	r2, [r3, #0]
}
 8010234:	bf00      	nop
 8010236:	370c      	adds	r7, #12
 8010238:	46bd      	mov	sp, r7
 801023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023e:	4770      	bx	lr

08010240 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010240:	b480      	push	{r7}
 8010242:	b087      	sub	sp, #28
 8010244:	af00      	add	r7, sp, #0
 8010246:	60f8      	str	r0, [r7, #12]
 8010248:	60b9      	str	r1, [r7, #8]
 801024a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d00d      	beq.n	8010276 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801025a:	693a      	ldr	r2, [r7, #16]
 801025c:	1c53      	adds	r3, r2, #1
 801025e:	613b      	str	r3, [r7, #16]
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	1c59      	adds	r1, r3, #1
 8010264:	6179      	str	r1, [r7, #20]
 8010266:	7812      	ldrb	r2, [r2, #0]
 8010268:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	3b01      	subs	r3, #1
 801026e:	607b      	str	r3, [r7, #4]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d1f1      	bne.n	801025a <mem_cpy+0x1a>
	}
}
 8010276:	bf00      	nop
 8010278:	371c      	adds	r7, #28
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr

08010282 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010282:	b480      	push	{r7}
 8010284:	b087      	sub	sp, #28
 8010286:	af00      	add	r7, sp, #0
 8010288:	60f8      	str	r0, [r7, #12]
 801028a:	60b9      	str	r1, [r7, #8]
 801028c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	1c5a      	adds	r2, r3, #1
 8010296:	617a      	str	r2, [r7, #20]
 8010298:	68ba      	ldr	r2, [r7, #8]
 801029a:	b2d2      	uxtb	r2, r2
 801029c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	3b01      	subs	r3, #1
 80102a2:	607b      	str	r3, [r7, #4]
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d1f3      	bne.n	8010292 <mem_set+0x10>
}
 80102aa:	bf00      	nop
 80102ac:	bf00      	nop
 80102ae:	371c      	adds	r7, #28
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80102b8:	b480      	push	{r7}
 80102ba:	b089      	sub	sp, #36	; 0x24
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	61fb      	str	r3, [r7, #28]
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80102cc:	2300      	movs	r3, #0
 80102ce:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	1c5a      	adds	r2, r3, #1
 80102d4:	61fa      	str	r2, [r7, #28]
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	4619      	mov	r1, r3
 80102da:	69bb      	ldr	r3, [r7, #24]
 80102dc:	1c5a      	adds	r2, r3, #1
 80102de:	61ba      	str	r2, [r7, #24]
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	1acb      	subs	r3, r1, r3
 80102e4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	3b01      	subs	r3, #1
 80102ea:	607b      	str	r3, [r7, #4]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d002      	beq.n	80102f8 <mem_cmp+0x40>
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d0eb      	beq.n	80102d0 <mem_cmp+0x18>

	return r;
 80102f8:	697b      	ldr	r3, [r7, #20]
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3724      	adds	r7, #36	; 0x24
 80102fe:	46bd      	mov	sp, r7
 8010300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010304:	4770      	bx	lr

08010306 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010306:	b480      	push	{r7}
 8010308:	b083      	sub	sp, #12
 801030a:	af00      	add	r7, sp, #0
 801030c:	6078      	str	r0, [r7, #4]
 801030e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010310:	e002      	b.n	8010318 <chk_chr+0x12>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	3301      	adds	r3, #1
 8010316:	607b      	str	r3, [r7, #4]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d005      	beq.n	801032c <chk_chr+0x26>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	461a      	mov	r2, r3
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	4293      	cmp	r3, r2
 801032a:	d1f2      	bne.n	8010312 <chk_chr+0xc>
	return *str;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	781b      	ldrb	r3, [r3, #0]
}
 8010330:	4618      	mov	r0, r3
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801033c:	b480      	push	{r7}
 801033e:	b085      	sub	sp, #20
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010346:	2300      	movs	r3, #0
 8010348:	60bb      	str	r3, [r7, #8]
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	60fb      	str	r3, [r7, #12]
 801034e:	e029      	b.n	80103a4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010350:	4a27      	ldr	r2, [pc, #156]	; (80103f0 <chk_lock+0xb4>)
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	011b      	lsls	r3, r3, #4
 8010356:	4413      	add	r3, r2
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d01d      	beq.n	801039a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801035e:	4a24      	ldr	r2, [pc, #144]	; (80103f0 <chk_lock+0xb4>)
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	011b      	lsls	r3, r3, #4
 8010364:	4413      	add	r3, r2
 8010366:	681a      	ldr	r2, [r3, #0]
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	429a      	cmp	r2, r3
 801036e:	d116      	bne.n	801039e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010370:	4a1f      	ldr	r2, [pc, #124]	; (80103f0 <chk_lock+0xb4>)
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	011b      	lsls	r3, r3, #4
 8010376:	4413      	add	r3, r2
 8010378:	3304      	adds	r3, #4
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010380:	429a      	cmp	r2, r3
 8010382:	d10c      	bne.n	801039e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010384:	4a1a      	ldr	r2, [pc, #104]	; (80103f0 <chk_lock+0xb4>)
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	011b      	lsls	r3, r3, #4
 801038a:	4413      	add	r3, r2
 801038c:	3308      	adds	r3, #8
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010394:	429a      	cmp	r2, r3
 8010396:	d102      	bne.n	801039e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010398:	e007      	b.n	80103aa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801039a:	2301      	movs	r3, #1
 801039c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	3301      	adds	r3, #1
 80103a2:	60fb      	str	r3, [r7, #12]
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d9d2      	bls.n	8010350 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2b02      	cmp	r3, #2
 80103ae:	d109      	bne.n	80103c4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d102      	bne.n	80103bc <chk_lock+0x80>
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	2b02      	cmp	r3, #2
 80103ba:	d101      	bne.n	80103c0 <chk_lock+0x84>
 80103bc:	2300      	movs	r3, #0
 80103be:	e010      	b.n	80103e2 <chk_lock+0xa6>
 80103c0:	2312      	movs	r3, #18
 80103c2:	e00e      	b.n	80103e2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d108      	bne.n	80103dc <chk_lock+0xa0>
 80103ca:	4a09      	ldr	r2, [pc, #36]	; (80103f0 <chk_lock+0xb4>)
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	011b      	lsls	r3, r3, #4
 80103d0:	4413      	add	r3, r2
 80103d2:	330c      	adds	r3, #12
 80103d4:	881b      	ldrh	r3, [r3, #0]
 80103d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103da:	d101      	bne.n	80103e0 <chk_lock+0xa4>
 80103dc:	2310      	movs	r3, #16
 80103de:	e000      	b.n	80103e2 <chk_lock+0xa6>
 80103e0:	2300      	movs	r3, #0
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3714      	adds	r7, #20
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr
 80103ee:	bf00      	nop
 80103f0:	24031354 	.word	0x24031354

080103f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80103fa:	2300      	movs	r3, #0
 80103fc:	607b      	str	r3, [r7, #4]
 80103fe:	e002      	b.n	8010406 <enq_lock+0x12>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	3301      	adds	r3, #1
 8010404:	607b      	str	r3, [r7, #4]
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2b01      	cmp	r3, #1
 801040a:	d806      	bhi.n	801041a <enq_lock+0x26>
 801040c:	4a09      	ldr	r2, [pc, #36]	; (8010434 <enq_lock+0x40>)
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	011b      	lsls	r3, r3, #4
 8010412:	4413      	add	r3, r2
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1f2      	bne.n	8010400 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2b02      	cmp	r3, #2
 801041e:	bf14      	ite	ne
 8010420:	2301      	movne	r3, #1
 8010422:	2300      	moveq	r3, #0
 8010424:	b2db      	uxtb	r3, r3
}
 8010426:	4618      	mov	r0, r3
 8010428:	370c      	adds	r7, #12
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr
 8010432:	bf00      	nop
 8010434:	24031354 	.word	0x24031354

08010438 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010438:	b480      	push	{r7}
 801043a:	b085      	sub	sp, #20
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010442:	2300      	movs	r3, #0
 8010444:	60fb      	str	r3, [r7, #12]
 8010446:	e01f      	b.n	8010488 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010448:	4a41      	ldr	r2, [pc, #260]	; (8010550 <inc_lock+0x118>)
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	011b      	lsls	r3, r3, #4
 801044e:	4413      	add	r3, r2
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	429a      	cmp	r2, r3
 8010458:	d113      	bne.n	8010482 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801045a:	4a3d      	ldr	r2, [pc, #244]	; (8010550 <inc_lock+0x118>)
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	011b      	lsls	r3, r3, #4
 8010460:	4413      	add	r3, r2
 8010462:	3304      	adds	r3, #4
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801046a:	429a      	cmp	r2, r3
 801046c:	d109      	bne.n	8010482 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801046e:	4a38      	ldr	r2, [pc, #224]	; (8010550 <inc_lock+0x118>)
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	011b      	lsls	r3, r3, #4
 8010474:	4413      	add	r3, r2
 8010476:	3308      	adds	r3, #8
 8010478:	681a      	ldr	r2, [r3, #0]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801047e:	429a      	cmp	r2, r3
 8010480:	d006      	beq.n	8010490 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	3301      	adds	r3, #1
 8010486:	60fb      	str	r3, [r7, #12]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	2b01      	cmp	r3, #1
 801048c:	d9dc      	bls.n	8010448 <inc_lock+0x10>
 801048e:	e000      	b.n	8010492 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010490:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	2b02      	cmp	r3, #2
 8010496:	d132      	bne.n	80104fe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010498:	2300      	movs	r3, #0
 801049a:	60fb      	str	r3, [r7, #12]
 801049c:	e002      	b.n	80104a4 <inc_lock+0x6c>
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	3301      	adds	r3, #1
 80104a2:	60fb      	str	r3, [r7, #12]
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	d806      	bhi.n	80104b8 <inc_lock+0x80>
 80104aa:	4a29      	ldr	r2, [pc, #164]	; (8010550 <inc_lock+0x118>)
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	011b      	lsls	r3, r3, #4
 80104b0:	4413      	add	r3, r2
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d1f2      	bne.n	801049e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2b02      	cmp	r3, #2
 80104bc:	d101      	bne.n	80104c2 <inc_lock+0x8a>
 80104be:	2300      	movs	r3, #0
 80104c0:	e040      	b.n	8010544 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681a      	ldr	r2, [r3, #0]
 80104c6:	4922      	ldr	r1, [pc, #136]	; (8010550 <inc_lock+0x118>)
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	011b      	lsls	r3, r3, #4
 80104cc:	440b      	add	r3, r1
 80104ce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	689a      	ldr	r2, [r3, #8]
 80104d4:	491e      	ldr	r1, [pc, #120]	; (8010550 <inc_lock+0x118>)
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	011b      	lsls	r3, r3, #4
 80104da:	440b      	add	r3, r1
 80104dc:	3304      	adds	r3, #4
 80104de:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	695a      	ldr	r2, [r3, #20]
 80104e4:	491a      	ldr	r1, [pc, #104]	; (8010550 <inc_lock+0x118>)
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	011b      	lsls	r3, r3, #4
 80104ea:	440b      	add	r3, r1
 80104ec:	3308      	adds	r3, #8
 80104ee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80104f0:	4a17      	ldr	r2, [pc, #92]	; (8010550 <inc_lock+0x118>)
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	011b      	lsls	r3, r3, #4
 80104f6:	4413      	add	r3, r2
 80104f8:	330c      	adds	r3, #12
 80104fa:	2200      	movs	r2, #0
 80104fc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d009      	beq.n	8010518 <inc_lock+0xe0>
 8010504:	4a12      	ldr	r2, [pc, #72]	; (8010550 <inc_lock+0x118>)
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	011b      	lsls	r3, r3, #4
 801050a:	4413      	add	r3, r2
 801050c:	330c      	adds	r3, #12
 801050e:	881b      	ldrh	r3, [r3, #0]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d001      	beq.n	8010518 <inc_lock+0xe0>
 8010514:	2300      	movs	r3, #0
 8010516:	e015      	b.n	8010544 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d108      	bne.n	8010530 <inc_lock+0xf8>
 801051e:	4a0c      	ldr	r2, [pc, #48]	; (8010550 <inc_lock+0x118>)
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	011b      	lsls	r3, r3, #4
 8010524:	4413      	add	r3, r2
 8010526:	330c      	adds	r3, #12
 8010528:	881b      	ldrh	r3, [r3, #0]
 801052a:	3301      	adds	r3, #1
 801052c:	b29a      	uxth	r2, r3
 801052e:	e001      	b.n	8010534 <inc_lock+0xfc>
 8010530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010534:	4906      	ldr	r1, [pc, #24]	; (8010550 <inc_lock+0x118>)
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	011b      	lsls	r3, r3, #4
 801053a:	440b      	add	r3, r1
 801053c:	330c      	adds	r3, #12
 801053e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	3301      	adds	r3, #1
}
 8010544:	4618      	mov	r0, r3
 8010546:	3714      	adds	r7, #20
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr
 8010550:	24031354 	.word	0x24031354

08010554 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010554:	b480      	push	{r7}
 8010556:	b085      	sub	sp, #20
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	3b01      	subs	r3, #1
 8010560:	607b      	str	r3, [r7, #4]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2b01      	cmp	r3, #1
 8010566:	d825      	bhi.n	80105b4 <dec_lock+0x60>
		n = Files[i].ctr;
 8010568:	4a17      	ldr	r2, [pc, #92]	; (80105c8 <dec_lock+0x74>)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	011b      	lsls	r3, r3, #4
 801056e:	4413      	add	r3, r2
 8010570:	330c      	adds	r3, #12
 8010572:	881b      	ldrh	r3, [r3, #0]
 8010574:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010576:	89fb      	ldrh	r3, [r7, #14]
 8010578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801057c:	d101      	bne.n	8010582 <dec_lock+0x2e>
 801057e:	2300      	movs	r3, #0
 8010580:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010582:	89fb      	ldrh	r3, [r7, #14]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d002      	beq.n	801058e <dec_lock+0x3a>
 8010588:	89fb      	ldrh	r3, [r7, #14]
 801058a:	3b01      	subs	r3, #1
 801058c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801058e:	4a0e      	ldr	r2, [pc, #56]	; (80105c8 <dec_lock+0x74>)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	011b      	lsls	r3, r3, #4
 8010594:	4413      	add	r3, r2
 8010596:	330c      	adds	r3, #12
 8010598:	89fa      	ldrh	r2, [r7, #14]
 801059a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801059c:	89fb      	ldrh	r3, [r7, #14]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d105      	bne.n	80105ae <dec_lock+0x5a>
 80105a2:	4a09      	ldr	r2, [pc, #36]	; (80105c8 <dec_lock+0x74>)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	011b      	lsls	r3, r3, #4
 80105a8:	4413      	add	r3, r2
 80105aa:	2200      	movs	r2, #0
 80105ac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80105ae:	2300      	movs	r3, #0
 80105b0:	737b      	strb	r3, [r7, #13]
 80105b2:	e001      	b.n	80105b8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80105b4:	2302      	movs	r3, #2
 80105b6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80105b8:	7b7b      	ldrb	r3, [r7, #13]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3714      	adds	r7, #20
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	24031354 	.word	0x24031354

080105cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b085      	sub	sp, #20
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80105d4:	2300      	movs	r3, #0
 80105d6:	60fb      	str	r3, [r7, #12]
 80105d8:	e010      	b.n	80105fc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80105da:	4a0d      	ldr	r2, [pc, #52]	; (8010610 <clear_lock+0x44>)
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	011b      	lsls	r3, r3, #4
 80105e0:	4413      	add	r3, r2
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	687a      	ldr	r2, [r7, #4]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d105      	bne.n	80105f6 <clear_lock+0x2a>
 80105ea:	4a09      	ldr	r2, [pc, #36]	; (8010610 <clear_lock+0x44>)
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	011b      	lsls	r3, r3, #4
 80105f0:	4413      	add	r3, r2
 80105f2:	2200      	movs	r2, #0
 80105f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	3301      	adds	r3, #1
 80105fa:	60fb      	str	r3, [r7, #12]
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d9eb      	bls.n	80105da <clear_lock+0xe>
	}
}
 8010602:	bf00      	nop
 8010604:	bf00      	nop
 8010606:	3714      	adds	r7, #20
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr
 8010610:	24031354 	.word	0x24031354

08010614 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801061c:	2300      	movs	r3, #0
 801061e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	78db      	ldrb	r3, [r3, #3]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d034      	beq.n	8010692 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801062c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	7858      	ldrb	r0, [r3, #1]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010638:	2301      	movs	r3, #1
 801063a:	697a      	ldr	r2, [r7, #20]
 801063c:	f7ff fd40 	bl	80100c0 <disk_write>
 8010640:	4603      	mov	r3, r0
 8010642:	2b00      	cmp	r3, #0
 8010644:	d002      	beq.n	801064c <sync_window+0x38>
			res = FR_DISK_ERR;
 8010646:	2301      	movs	r3, #1
 8010648:	73fb      	strb	r3, [r7, #15]
 801064a:	e022      	b.n	8010692 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2200      	movs	r2, #0
 8010650:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010656:	697a      	ldr	r2, [r7, #20]
 8010658:	1ad2      	subs	r2, r2, r3
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	69db      	ldr	r3, [r3, #28]
 801065e:	429a      	cmp	r2, r3
 8010660:	d217      	bcs.n	8010692 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	789b      	ldrb	r3, [r3, #2]
 8010666:	613b      	str	r3, [r7, #16]
 8010668:	e010      	b.n	801068c <sync_window+0x78>
					wsect += fs->fsize;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	69db      	ldr	r3, [r3, #28]
 801066e:	697a      	ldr	r2, [r7, #20]
 8010670:	4413      	add	r3, r2
 8010672:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	7858      	ldrb	r0, [r3, #1]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801067e:	2301      	movs	r3, #1
 8010680:	697a      	ldr	r2, [r7, #20]
 8010682:	f7ff fd1d 	bl	80100c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	3b01      	subs	r3, #1
 801068a:	613b      	str	r3, [r7, #16]
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	2b01      	cmp	r3, #1
 8010690:	d8eb      	bhi.n	801066a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010692:	7bfb      	ldrb	r3, [r7, #15]
}
 8010694:	4618      	mov	r0, r3
 8010696:	3718      	adds	r7, #24
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b084      	sub	sp, #16
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80106a6:	2300      	movs	r3, #0
 80106a8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ae:	683a      	ldr	r2, [r7, #0]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d01b      	beq.n	80106ec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f7ff ffad 	bl	8010614 <sync_window>
 80106ba:	4603      	mov	r3, r0
 80106bc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80106be:	7bfb      	ldrb	r3, [r7, #15]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d113      	bne.n	80106ec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	7858      	ldrb	r0, [r3, #1]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80106ce:	2301      	movs	r3, #1
 80106d0:	683a      	ldr	r2, [r7, #0]
 80106d2:	f7ff fcd5 	bl	8010080 <disk_read>
 80106d6:	4603      	mov	r3, r0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d004      	beq.n	80106e6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80106dc:	f04f 33ff 	mov.w	r3, #4294967295
 80106e0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80106e2:	2301      	movs	r3, #1
 80106e4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	683a      	ldr	r2, [r7, #0]
 80106ea:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80106ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
	...

080106f8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b084      	sub	sp, #16
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f7ff ff87 	bl	8010614 <sync_window>
 8010706:	4603      	mov	r3, r0
 8010708:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801070a:	7bfb      	ldrb	r3, [r7, #15]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d158      	bne.n	80107c2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	2b03      	cmp	r3, #3
 8010716:	d148      	bne.n	80107aa <sync_fs+0xb2>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	791b      	ldrb	r3, [r3, #4]
 801071c:	2b01      	cmp	r3, #1
 801071e:	d144      	bne.n	80107aa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	3334      	adds	r3, #52	; 0x34
 8010724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010728:	2100      	movs	r1, #0
 801072a:	4618      	mov	r0, r3
 801072c:	f7ff fda9 	bl	8010282 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	3334      	adds	r3, #52	; 0x34
 8010734:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010738:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801073c:	4618      	mov	r0, r3
 801073e:	f7ff fd38 	bl	80101b2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	3334      	adds	r3, #52	; 0x34
 8010746:	4921      	ldr	r1, [pc, #132]	; (80107cc <sync_fs+0xd4>)
 8010748:	4618      	mov	r0, r3
 801074a:	f7ff fd4d 	bl	80101e8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	3334      	adds	r3, #52	; 0x34
 8010752:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010756:	491e      	ldr	r1, [pc, #120]	; (80107d0 <sync_fs+0xd8>)
 8010758:	4618      	mov	r0, r3
 801075a:	f7ff fd45 	bl	80101e8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	3334      	adds	r3, #52	; 0x34
 8010762:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	695b      	ldr	r3, [r3, #20]
 801076a:	4619      	mov	r1, r3
 801076c:	4610      	mov	r0, r2
 801076e:	f7ff fd3b 	bl	80101e8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	3334      	adds	r3, #52	; 0x34
 8010776:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	691b      	ldr	r3, [r3, #16]
 801077e:	4619      	mov	r1, r3
 8010780:	4610      	mov	r0, r2
 8010782:	f7ff fd31 	bl	80101e8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6a1b      	ldr	r3, [r3, #32]
 801078a:	1c5a      	adds	r2, r3, #1
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	7858      	ldrb	r0, [r3, #1]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801079e:	2301      	movs	r3, #1
 80107a0:	f7ff fc8e 	bl	80100c0 <disk_write>
			fs->fsi_flag = 0;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2200      	movs	r2, #0
 80107a8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	785b      	ldrb	r3, [r3, #1]
 80107ae:	2200      	movs	r2, #0
 80107b0:	2100      	movs	r1, #0
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7ff fca4 	bl	8010100 <disk_ioctl>
 80107b8:	4603      	mov	r3, r0
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d001      	beq.n	80107c2 <sync_fs+0xca>
 80107be:	2301      	movs	r3, #1
 80107c0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80107c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3710      	adds	r7, #16
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	41615252 	.word	0x41615252
 80107d0:	61417272 	.word	0x61417272

080107d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	3b02      	subs	r3, #2
 80107e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	699b      	ldr	r3, [r3, #24]
 80107e8:	3b02      	subs	r3, #2
 80107ea:	683a      	ldr	r2, [r7, #0]
 80107ec:	429a      	cmp	r2, r3
 80107ee:	d301      	bcc.n	80107f4 <clust2sect+0x20>
 80107f0:	2300      	movs	r3, #0
 80107f2:	e008      	b.n	8010806 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	895b      	ldrh	r3, [r3, #10]
 80107f8:	461a      	mov	r2, r3
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	fb03 f202 	mul.w	r2, r3, r2
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010804:	4413      	add	r3, r2
}
 8010806:	4618      	mov	r0, r3
 8010808:	370c      	adds	r7, #12
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010812:	b580      	push	{r7, lr}
 8010814:	b086      	sub	sp, #24
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
 801081a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d904      	bls.n	8010832 <get_fat+0x20>
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	699b      	ldr	r3, [r3, #24]
 801082c:	683a      	ldr	r2, [r7, #0]
 801082e:	429a      	cmp	r2, r3
 8010830:	d302      	bcc.n	8010838 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010832:	2301      	movs	r3, #1
 8010834:	617b      	str	r3, [r7, #20]
 8010836:	e08f      	b.n	8010958 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010838:	f04f 33ff 	mov.w	r3, #4294967295
 801083c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	2b03      	cmp	r3, #3
 8010844:	d062      	beq.n	801090c <get_fat+0xfa>
 8010846:	2b03      	cmp	r3, #3
 8010848:	dc7c      	bgt.n	8010944 <get_fat+0x132>
 801084a:	2b01      	cmp	r3, #1
 801084c:	d002      	beq.n	8010854 <get_fat+0x42>
 801084e:	2b02      	cmp	r3, #2
 8010850:	d042      	beq.n	80108d8 <get_fat+0xc6>
 8010852:	e077      	b.n	8010944 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	60fb      	str	r3, [r7, #12]
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	085b      	lsrs	r3, r3, #1
 801085c:	68fa      	ldr	r2, [r7, #12]
 801085e:	4413      	add	r3, r2
 8010860:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	0a5b      	lsrs	r3, r3, #9
 801086a:	4413      	add	r3, r2
 801086c:	4619      	mov	r1, r3
 801086e:	6938      	ldr	r0, [r7, #16]
 8010870:	f7ff ff14 	bl	801069c <move_window>
 8010874:	4603      	mov	r3, r0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d167      	bne.n	801094a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	1c5a      	adds	r2, r3, #1
 801087e:	60fa      	str	r2, [r7, #12]
 8010880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010884:	693a      	ldr	r2, [r7, #16]
 8010886:	4413      	add	r3, r2
 8010888:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801088c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	0a5b      	lsrs	r3, r3, #9
 8010896:	4413      	add	r3, r2
 8010898:	4619      	mov	r1, r3
 801089a:	6938      	ldr	r0, [r7, #16]
 801089c:	f7ff fefe 	bl	801069c <move_window>
 80108a0:	4603      	mov	r3, r0
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d153      	bne.n	801094e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108ac:	693a      	ldr	r2, [r7, #16]
 80108ae:	4413      	add	r3, r2
 80108b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80108b4:	021b      	lsls	r3, r3, #8
 80108b6:	461a      	mov	r2, r3
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	4313      	orrs	r3, r2
 80108bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	f003 0301 	and.w	r3, r3, #1
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d002      	beq.n	80108ce <get_fat+0xbc>
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	091b      	lsrs	r3, r3, #4
 80108cc:	e002      	b.n	80108d4 <get_fat+0xc2>
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80108d4:	617b      	str	r3, [r7, #20]
			break;
 80108d6:	e03f      	b.n	8010958 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	0a1b      	lsrs	r3, r3, #8
 80108e0:	4413      	add	r3, r2
 80108e2:	4619      	mov	r1, r3
 80108e4:	6938      	ldr	r0, [r7, #16]
 80108e6:	f7ff fed9 	bl	801069c <move_window>
 80108ea:	4603      	mov	r3, r0
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d130      	bne.n	8010952 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	005b      	lsls	r3, r3, #1
 80108fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80108fe:	4413      	add	r3, r2
 8010900:	4618      	mov	r0, r3
 8010902:	f7ff fc1b 	bl	801013c <ld_word>
 8010906:	4603      	mov	r3, r0
 8010908:	617b      	str	r3, [r7, #20]
			break;
 801090a:	e025      	b.n	8010958 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	09db      	lsrs	r3, r3, #7
 8010914:	4413      	add	r3, r2
 8010916:	4619      	mov	r1, r3
 8010918:	6938      	ldr	r0, [r7, #16]
 801091a:	f7ff febf 	bl	801069c <move_window>
 801091e:	4603      	mov	r3, r0
 8010920:	2b00      	cmp	r3, #0
 8010922:	d118      	bne.n	8010956 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	009b      	lsls	r3, r3, #2
 801092e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010932:	4413      	add	r3, r2
 8010934:	4618      	mov	r0, r3
 8010936:	f7ff fc19 	bl	801016c <ld_dword>
 801093a:	4603      	mov	r3, r0
 801093c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010940:	617b      	str	r3, [r7, #20]
			break;
 8010942:	e009      	b.n	8010958 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010944:	2301      	movs	r3, #1
 8010946:	617b      	str	r3, [r7, #20]
 8010948:	e006      	b.n	8010958 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801094a:	bf00      	nop
 801094c:	e004      	b.n	8010958 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801094e:	bf00      	nop
 8010950:	e002      	b.n	8010958 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010952:	bf00      	nop
 8010954:	e000      	b.n	8010958 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010956:	bf00      	nop
		}
	}

	return val;
 8010958:	697b      	ldr	r3, [r7, #20]
}
 801095a:	4618      	mov	r0, r3
 801095c:	3718      	adds	r7, #24
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010962:	b590      	push	{r4, r7, lr}
 8010964:	b089      	sub	sp, #36	; 0x24
 8010966:	af00      	add	r7, sp, #0
 8010968:	60f8      	str	r0, [r7, #12]
 801096a:	60b9      	str	r1, [r7, #8]
 801096c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801096e:	2302      	movs	r3, #2
 8010970:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	2b01      	cmp	r3, #1
 8010976:	f240 80d9 	bls.w	8010b2c <put_fat+0x1ca>
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	699b      	ldr	r3, [r3, #24]
 801097e:	68ba      	ldr	r2, [r7, #8]
 8010980:	429a      	cmp	r2, r3
 8010982:	f080 80d3 	bcs.w	8010b2c <put_fat+0x1ca>
		switch (fs->fs_type) {
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	2b03      	cmp	r3, #3
 801098c:	f000 8096 	beq.w	8010abc <put_fat+0x15a>
 8010990:	2b03      	cmp	r3, #3
 8010992:	f300 80cb 	bgt.w	8010b2c <put_fat+0x1ca>
 8010996:	2b01      	cmp	r3, #1
 8010998:	d002      	beq.n	80109a0 <put_fat+0x3e>
 801099a:	2b02      	cmp	r3, #2
 801099c:	d06e      	beq.n	8010a7c <put_fat+0x11a>
 801099e:	e0c5      	b.n	8010b2c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	61bb      	str	r3, [r7, #24]
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	085b      	lsrs	r3, r3, #1
 80109a8:	69ba      	ldr	r2, [r7, #24]
 80109aa:	4413      	add	r3, r2
 80109ac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109b2:	69bb      	ldr	r3, [r7, #24]
 80109b4:	0a5b      	lsrs	r3, r3, #9
 80109b6:	4413      	add	r3, r2
 80109b8:	4619      	mov	r1, r3
 80109ba:	68f8      	ldr	r0, [r7, #12]
 80109bc:	f7ff fe6e 	bl	801069c <move_window>
 80109c0:	4603      	mov	r3, r0
 80109c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80109c4:	7ffb      	ldrb	r3, [r7, #31]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f040 80a9 	bne.w	8010b1e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80109d2:	69bb      	ldr	r3, [r7, #24]
 80109d4:	1c59      	adds	r1, r3, #1
 80109d6:	61b9      	str	r1, [r7, #24]
 80109d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109dc:	4413      	add	r3, r2
 80109de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	f003 0301 	and.w	r3, r3, #1
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d00d      	beq.n	8010a06 <put_fat+0xa4>
 80109ea:	697b      	ldr	r3, [r7, #20]
 80109ec:	781b      	ldrb	r3, [r3, #0]
 80109ee:	b25b      	sxtb	r3, r3
 80109f0:	f003 030f 	and.w	r3, r3, #15
 80109f4:	b25a      	sxtb	r2, r3
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	011b      	lsls	r3, r3, #4
 80109fc:	b25b      	sxtb	r3, r3
 80109fe:	4313      	orrs	r3, r2
 8010a00:	b25b      	sxtb	r3, r3
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	e001      	b.n	8010a0a <put_fat+0xa8>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	697a      	ldr	r2, [r7, #20]
 8010a0c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	2201      	movs	r2, #1
 8010a12:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a18:	69bb      	ldr	r3, [r7, #24]
 8010a1a:	0a5b      	lsrs	r3, r3, #9
 8010a1c:	4413      	add	r3, r2
 8010a1e:	4619      	mov	r1, r3
 8010a20:	68f8      	ldr	r0, [r7, #12]
 8010a22:	f7ff fe3b 	bl	801069c <move_window>
 8010a26:	4603      	mov	r3, r0
 8010a28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010a2a:	7ffb      	ldrb	r3, [r7, #31]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d178      	bne.n	8010b22 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010a36:	69bb      	ldr	r3, [r7, #24]
 8010a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a3c:	4413      	add	r3, r2
 8010a3e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	f003 0301 	and.w	r3, r3, #1
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d003      	beq.n	8010a52 <put_fat+0xf0>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	091b      	lsrs	r3, r3, #4
 8010a4e:	b2db      	uxtb	r3, r3
 8010a50:	e00e      	b.n	8010a70 <put_fat+0x10e>
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	781b      	ldrb	r3, [r3, #0]
 8010a56:	b25b      	sxtb	r3, r3
 8010a58:	f023 030f 	bic.w	r3, r3, #15
 8010a5c:	b25a      	sxtb	r2, r3
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	0a1b      	lsrs	r3, r3, #8
 8010a62:	b25b      	sxtb	r3, r3
 8010a64:	f003 030f 	and.w	r3, r3, #15
 8010a68:	b25b      	sxtb	r3, r3
 8010a6a:	4313      	orrs	r3, r2
 8010a6c:	b25b      	sxtb	r3, r3
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	697a      	ldr	r2, [r7, #20]
 8010a72:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2201      	movs	r2, #1
 8010a78:	70da      	strb	r2, [r3, #3]
			break;
 8010a7a:	e057      	b.n	8010b2c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	0a1b      	lsrs	r3, r3, #8
 8010a84:	4413      	add	r3, r2
 8010a86:	4619      	mov	r1, r3
 8010a88:	68f8      	ldr	r0, [r7, #12]
 8010a8a:	f7ff fe07 	bl	801069c <move_window>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010a92:	7ffb      	ldrb	r3, [r7, #31]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d146      	bne.n	8010b26 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	005b      	lsls	r3, r3, #1
 8010aa2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010aa6:	4413      	add	r3, r2
 8010aa8:	687a      	ldr	r2, [r7, #4]
 8010aaa:	b292      	uxth	r2, r2
 8010aac:	4611      	mov	r1, r2
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7ff fb7f 	bl	80101b2 <st_word>
			fs->wflag = 1;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	70da      	strb	r2, [r3, #3]
			break;
 8010aba:	e037      	b.n	8010b2c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	09db      	lsrs	r3, r3, #7
 8010ac4:	4413      	add	r3, r2
 8010ac6:	4619      	mov	r1, r3
 8010ac8:	68f8      	ldr	r0, [r7, #12]
 8010aca:	f7ff fde7 	bl	801069c <move_window>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010ad2:	7ffb      	ldrb	r3, [r7, #31]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d128      	bne.n	8010b2a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	009b      	lsls	r3, r3, #2
 8010ae8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010aec:	4413      	add	r3, r2
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7ff fb3c 	bl	801016c <ld_dword>
 8010af4:	4603      	mov	r3, r0
 8010af6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010afa:	4323      	orrs	r3, r4
 8010afc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	009b      	lsls	r3, r3, #2
 8010b08:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010b0c:	4413      	add	r3, r2
 8010b0e:	6879      	ldr	r1, [r7, #4]
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7ff fb69 	bl	80101e8 <st_dword>
			fs->wflag = 1;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	2201      	movs	r2, #1
 8010b1a:	70da      	strb	r2, [r3, #3]
			break;
 8010b1c:	e006      	b.n	8010b2c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010b1e:	bf00      	nop
 8010b20:	e004      	b.n	8010b2c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010b22:	bf00      	nop
 8010b24:	e002      	b.n	8010b2c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010b26:	bf00      	nop
 8010b28:	e000      	b.n	8010b2c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010b2a:	bf00      	nop
		}
	}
	return res;
 8010b2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3724      	adds	r7, #36	; 0x24
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd90      	pop	{r4, r7, pc}

08010b36 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010b36:	b580      	push	{r7, lr}
 8010b38:	b088      	sub	sp, #32
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	60f8      	str	r0, [r7, #12]
 8010b3e:	60b9      	str	r1, [r7, #8]
 8010b40:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010b42:	2300      	movs	r3, #0
 8010b44:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d904      	bls.n	8010b5c <remove_chain+0x26>
 8010b52:	69bb      	ldr	r3, [r7, #24]
 8010b54:	699b      	ldr	r3, [r3, #24]
 8010b56:	68ba      	ldr	r2, [r7, #8]
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d301      	bcc.n	8010b60 <remove_chain+0x2a>
 8010b5c:	2302      	movs	r3, #2
 8010b5e:	e04b      	b.n	8010bf8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d00c      	beq.n	8010b80 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010b66:	f04f 32ff 	mov.w	r2, #4294967295
 8010b6a:	6879      	ldr	r1, [r7, #4]
 8010b6c:	69b8      	ldr	r0, [r7, #24]
 8010b6e:	f7ff fef8 	bl	8010962 <put_fat>
 8010b72:	4603      	mov	r3, r0
 8010b74:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010b76:	7ffb      	ldrb	r3, [r7, #31]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d001      	beq.n	8010b80 <remove_chain+0x4a>
 8010b7c:	7ffb      	ldrb	r3, [r7, #31]
 8010b7e:	e03b      	b.n	8010bf8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010b80:	68b9      	ldr	r1, [r7, #8]
 8010b82:	68f8      	ldr	r0, [r7, #12]
 8010b84:	f7ff fe45 	bl	8010812 <get_fat>
 8010b88:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d031      	beq.n	8010bf4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	2b01      	cmp	r3, #1
 8010b94:	d101      	bne.n	8010b9a <remove_chain+0x64>
 8010b96:	2302      	movs	r3, #2
 8010b98:	e02e      	b.n	8010bf8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ba0:	d101      	bne.n	8010ba6 <remove_chain+0x70>
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	e028      	b.n	8010bf8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	68b9      	ldr	r1, [r7, #8]
 8010baa:	69b8      	ldr	r0, [r7, #24]
 8010bac:	f7ff fed9 	bl	8010962 <put_fat>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010bb4:	7ffb      	ldrb	r3, [r7, #31]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d001      	beq.n	8010bbe <remove_chain+0x88>
 8010bba:	7ffb      	ldrb	r3, [r7, #31]
 8010bbc:	e01c      	b.n	8010bf8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010bbe:	69bb      	ldr	r3, [r7, #24]
 8010bc0:	695a      	ldr	r2, [r3, #20]
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	699b      	ldr	r3, [r3, #24]
 8010bc6:	3b02      	subs	r3, #2
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d20b      	bcs.n	8010be4 <remove_chain+0xae>
			fs->free_clst++;
 8010bcc:	69bb      	ldr	r3, [r7, #24]
 8010bce:	695b      	ldr	r3, [r3, #20]
 8010bd0:	1c5a      	adds	r2, r3, #1
 8010bd2:	69bb      	ldr	r3, [r7, #24]
 8010bd4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010bd6:	69bb      	ldr	r3, [r7, #24]
 8010bd8:	791b      	ldrb	r3, [r3, #4]
 8010bda:	f043 0301 	orr.w	r3, r3, #1
 8010bde:	b2da      	uxtb	r2, r3
 8010be0:	69bb      	ldr	r3, [r7, #24]
 8010be2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010be8:	69bb      	ldr	r3, [r7, #24]
 8010bea:	699b      	ldr	r3, [r3, #24]
 8010bec:	68ba      	ldr	r2, [r7, #8]
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d3c6      	bcc.n	8010b80 <remove_chain+0x4a>
 8010bf2:	e000      	b.n	8010bf6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010bf4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010bf6:	2300      	movs	r3, #0
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3720      	adds	r7, #32
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b088      	sub	sp, #32
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d10d      	bne.n	8010c32 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	691b      	ldr	r3, [r3, #16]
 8010c1a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010c1c:	69bb      	ldr	r3, [r7, #24]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d004      	beq.n	8010c2c <create_chain+0x2c>
 8010c22:	693b      	ldr	r3, [r7, #16]
 8010c24:	699b      	ldr	r3, [r3, #24]
 8010c26:	69ba      	ldr	r2, [r7, #24]
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d31b      	bcc.n	8010c64 <create_chain+0x64>
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	61bb      	str	r3, [r7, #24]
 8010c30:	e018      	b.n	8010c64 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010c32:	6839      	ldr	r1, [r7, #0]
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f7ff fdec 	bl	8010812 <get_fat>
 8010c3a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2b01      	cmp	r3, #1
 8010c40:	d801      	bhi.n	8010c46 <create_chain+0x46>
 8010c42:	2301      	movs	r3, #1
 8010c44:	e070      	b.n	8010d28 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c4c:	d101      	bne.n	8010c52 <create_chain+0x52>
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	e06a      	b.n	8010d28 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	699b      	ldr	r3, [r3, #24]
 8010c56:	68fa      	ldr	r2, [r7, #12]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d201      	bcs.n	8010c60 <create_chain+0x60>
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	e063      	b.n	8010d28 <create_chain+0x128>
		scl = clst;
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010c64:	69bb      	ldr	r3, [r7, #24]
 8010c66:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	699b      	ldr	r3, [r3, #24]
 8010c72:	69fa      	ldr	r2, [r7, #28]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d307      	bcc.n	8010c88 <create_chain+0x88>
				ncl = 2;
 8010c78:	2302      	movs	r3, #2
 8010c7a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010c7c:	69fa      	ldr	r2, [r7, #28]
 8010c7e:	69bb      	ldr	r3, [r7, #24]
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d901      	bls.n	8010c88 <create_chain+0x88>
 8010c84:	2300      	movs	r3, #0
 8010c86:	e04f      	b.n	8010d28 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010c88:	69f9      	ldr	r1, [r7, #28]
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f7ff fdc1 	bl	8010812 <get_fat>
 8010c90:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d00e      	beq.n	8010cb6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2b01      	cmp	r3, #1
 8010c9c:	d003      	beq.n	8010ca6 <create_chain+0xa6>
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ca4:	d101      	bne.n	8010caa <create_chain+0xaa>
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	e03e      	b.n	8010d28 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010caa:	69fa      	ldr	r2, [r7, #28]
 8010cac:	69bb      	ldr	r3, [r7, #24]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d1da      	bne.n	8010c68 <create_chain+0x68>
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	e038      	b.n	8010d28 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010cb6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8010cbc:	69f9      	ldr	r1, [r7, #28]
 8010cbe:	6938      	ldr	r0, [r7, #16]
 8010cc0:	f7ff fe4f 	bl	8010962 <put_fat>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010cc8:	7dfb      	ldrb	r3, [r7, #23]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d109      	bne.n	8010ce2 <create_chain+0xe2>
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d006      	beq.n	8010ce2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010cd4:	69fa      	ldr	r2, [r7, #28]
 8010cd6:	6839      	ldr	r1, [r7, #0]
 8010cd8:	6938      	ldr	r0, [r7, #16]
 8010cda:	f7ff fe42 	bl	8010962 <put_fat>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010ce2:	7dfb      	ldrb	r3, [r7, #23]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d116      	bne.n	8010d16 <create_chain+0x116>
		fs->last_clst = ncl;
 8010ce8:	693b      	ldr	r3, [r7, #16]
 8010cea:	69fa      	ldr	r2, [r7, #28]
 8010cec:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	695a      	ldr	r2, [r3, #20]
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	699b      	ldr	r3, [r3, #24]
 8010cf6:	3b02      	subs	r3, #2
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d804      	bhi.n	8010d06 <create_chain+0x106>
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	695b      	ldr	r3, [r3, #20]
 8010d00:	1e5a      	subs	r2, r3, #1
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	791b      	ldrb	r3, [r3, #4]
 8010d0a:	f043 0301 	orr.w	r3, r3, #1
 8010d0e:	b2da      	uxtb	r2, r3
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	711a      	strb	r2, [r3, #4]
 8010d14:	e007      	b.n	8010d26 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010d16:	7dfb      	ldrb	r3, [r7, #23]
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	d102      	bne.n	8010d22 <create_chain+0x122>
 8010d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d20:	e000      	b.n	8010d24 <create_chain+0x124>
 8010d22:	2301      	movs	r3, #1
 8010d24:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010d26:	69fb      	ldr	r3, [r7, #28]
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3720      	adds	r7, #32
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b087      	sub	sp, #28
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d44:	3304      	adds	r3, #4
 8010d46:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	0a5b      	lsrs	r3, r3, #9
 8010d4c:	68fa      	ldr	r2, [r7, #12]
 8010d4e:	8952      	ldrh	r2, [r2, #10]
 8010d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d54:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	1d1a      	adds	r2, r3, #4
 8010d5a:	613a      	str	r2, [r7, #16]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d101      	bne.n	8010d6a <clmt_clust+0x3a>
 8010d66:	2300      	movs	r3, #0
 8010d68:	e010      	b.n	8010d8c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010d6a:	697a      	ldr	r2, [r7, #20]
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d307      	bcc.n	8010d82 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010d72:	697a      	ldr	r2, [r7, #20]
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	1ad3      	subs	r3, r2, r3
 8010d78:	617b      	str	r3, [r7, #20]
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	3304      	adds	r3, #4
 8010d7e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010d80:	e7e9      	b.n	8010d56 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010d82:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	681a      	ldr	r2, [r3, #0]
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	4413      	add	r3, r2
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	371c      	adds	r7, #28
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr

08010d98 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b086      	sub	sp, #24
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010dae:	d204      	bcs.n	8010dba <dir_sdi+0x22>
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	f003 031f 	and.w	r3, r3, #31
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d001      	beq.n	8010dbe <dir_sdi+0x26>
		return FR_INT_ERR;
 8010dba:	2302      	movs	r3, #2
 8010dbc:	e063      	b.n	8010e86 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	683a      	ldr	r2, [r7, #0]
 8010dc2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	689b      	ldr	r3, [r3, #8]
 8010dc8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d106      	bne.n	8010dde <dir_sdi+0x46>
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	2b02      	cmp	r3, #2
 8010dd6:	d902      	bls.n	8010dde <dir_sdi+0x46>
		clst = fs->dirbase;
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ddc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d10c      	bne.n	8010dfe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	095b      	lsrs	r3, r3, #5
 8010de8:	693a      	ldr	r2, [r7, #16]
 8010dea:	8912      	ldrh	r2, [r2, #8]
 8010dec:	4293      	cmp	r3, r2
 8010dee:	d301      	bcc.n	8010df4 <dir_sdi+0x5c>
 8010df0:	2302      	movs	r3, #2
 8010df2:	e048      	b.n	8010e86 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	61da      	str	r2, [r3, #28]
 8010dfc:	e029      	b.n	8010e52 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	895b      	ldrh	r3, [r3, #10]
 8010e02:	025b      	lsls	r3, r3, #9
 8010e04:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010e06:	e019      	b.n	8010e3c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6979      	ldr	r1, [r7, #20]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7ff fd00 	bl	8010812 <get_fat>
 8010e12:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e1a:	d101      	bne.n	8010e20 <dir_sdi+0x88>
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	e032      	b.n	8010e86 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	2b01      	cmp	r3, #1
 8010e24:	d904      	bls.n	8010e30 <dir_sdi+0x98>
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	699b      	ldr	r3, [r3, #24]
 8010e2a:	697a      	ldr	r2, [r7, #20]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d301      	bcc.n	8010e34 <dir_sdi+0x9c>
 8010e30:	2302      	movs	r3, #2
 8010e32:	e028      	b.n	8010e86 <dir_sdi+0xee>
			ofs -= csz;
 8010e34:	683a      	ldr	r2, [r7, #0]
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010e3c:	683a      	ldr	r2, [r7, #0]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d2e1      	bcs.n	8010e08 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010e44:	6979      	ldr	r1, [r7, #20]
 8010e46:	6938      	ldr	r0, [r7, #16]
 8010e48:	f7ff fcc4 	bl	80107d4 <clust2sect>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	697a      	ldr	r2, [r7, #20]
 8010e56:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	69db      	ldr	r3, [r3, #28]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d101      	bne.n	8010e64 <dir_sdi+0xcc>
 8010e60:	2302      	movs	r3, #2
 8010e62:	e010      	b.n	8010e86 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	69da      	ldr	r2, [r3, #28]
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	0a5b      	lsrs	r3, r3, #9
 8010e6c:	441a      	add	r2, r3
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e7e:	441a      	add	r2, r3
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010e84:	2300      	movs	r3, #0
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3718      	adds	r7, #24
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}

08010e8e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b086      	sub	sp, #24
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
 8010e96:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	695b      	ldr	r3, [r3, #20]
 8010ea2:	3320      	adds	r3, #32
 8010ea4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	69db      	ldr	r3, [r3, #28]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d003      	beq.n	8010eb6 <dir_next+0x28>
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010eb4:	d301      	bcc.n	8010eba <dir_next+0x2c>
 8010eb6:	2304      	movs	r3, #4
 8010eb8:	e0aa      	b.n	8011010 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f040 8098 	bne.w	8010ff6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	69db      	ldr	r3, [r3, #28]
 8010eca:	1c5a      	adds	r2, r3, #1
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	699b      	ldr	r3, [r3, #24]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d10b      	bne.n	8010ef0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	095b      	lsrs	r3, r3, #5
 8010edc:	68fa      	ldr	r2, [r7, #12]
 8010ede:	8912      	ldrh	r2, [r2, #8]
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	f0c0 8088 	bcc.w	8010ff6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	61da      	str	r2, [r3, #28]
 8010eec:	2304      	movs	r3, #4
 8010eee:	e08f      	b.n	8011010 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	0a5b      	lsrs	r3, r3, #9
 8010ef4:	68fa      	ldr	r2, [r7, #12]
 8010ef6:	8952      	ldrh	r2, [r2, #10]
 8010ef8:	3a01      	subs	r2, #1
 8010efa:	4013      	ands	r3, r2
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d17a      	bne.n	8010ff6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010f00:	687a      	ldr	r2, [r7, #4]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	699b      	ldr	r3, [r3, #24]
 8010f06:	4619      	mov	r1, r3
 8010f08:	4610      	mov	r0, r2
 8010f0a:	f7ff fc82 	bl	8010812 <get_fat>
 8010f0e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	d801      	bhi.n	8010f1a <dir_next+0x8c>
 8010f16:	2302      	movs	r3, #2
 8010f18:	e07a      	b.n	8011010 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f20:	d101      	bne.n	8010f26 <dir_next+0x98>
 8010f22:	2301      	movs	r3, #1
 8010f24:	e074      	b.n	8011010 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	699b      	ldr	r3, [r3, #24]
 8010f2a:	697a      	ldr	r2, [r7, #20]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d358      	bcc.n	8010fe2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d104      	bne.n	8010f40 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	61da      	str	r2, [r3, #28]
 8010f3c:	2304      	movs	r3, #4
 8010f3e:	e067      	b.n	8011010 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010f40:	687a      	ldr	r2, [r7, #4]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	699b      	ldr	r3, [r3, #24]
 8010f46:	4619      	mov	r1, r3
 8010f48:	4610      	mov	r0, r2
 8010f4a:	f7ff fe59 	bl	8010c00 <create_chain>
 8010f4e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d101      	bne.n	8010f5a <dir_next+0xcc>
 8010f56:	2307      	movs	r3, #7
 8010f58:	e05a      	b.n	8011010 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d101      	bne.n	8010f64 <dir_next+0xd6>
 8010f60:	2302      	movs	r3, #2
 8010f62:	e055      	b.n	8011010 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f6a:	d101      	bne.n	8010f70 <dir_next+0xe2>
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	e04f      	b.n	8011010 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010f70:	68f8      	ldr	r0, [r7, #12]
 8010f72:	f7ff fb4f 	bl	8010614 <sync_window>
 8010f76:	4603      	mov	r3, r0
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d001      	beq.n	8010f80 <dir_next+0xf2>
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	e047      	b.n	8011010 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	3334      	adds	r3, #52	; 0x34
 8010f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010f88:	2100      	movs	r1, #0
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7ff f979 	bl	8010282 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010f90:	2300      	movs	r3, #0
 8010f92:	613b      	str	r3, [r7, #16]
 8010f94:	6979      	ldr	r1, [r7, #20]
 8010f96:	68f8      	ldr	r0, [r7, #12]
 8010f98:	f7ff fc1c 	bl	80107d4 <clust2sect>
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	631a      	str	r2, [r3, #48]	; 0x30
 8010fa2:	e012      	b.n	8010fca <dir_next+0x13c>
						fs->wflag = 1;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010faa:	68f8      	ldr	r0, [r7, #12]
 8010fac:	f7ff fb32 	bl	8010614 <sync_window>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d001      	beq.n	8010fba <dir_next+0x12c>
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	e02a      	b.n	8011010 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	613b      	str	r3, [r7, #16]
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fc4:	1c5a      	adds	r2, r3, #1
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	895b      	ldrh	r3, [r3, #10]
 8010fce:	461a      	mov	r2, r3
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	d3e6      	bcc.n	8010fa4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	1ad2      	subs	r2, r2, r3
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	697a      	ldr	r2, [r7, #20]
 8010fe6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010fe8:	6979      	ldr	r1, [r7, #20]
 8010fea:	68f8      	ldr	r0, [r7, #12]
 8010fec:	f7ff fbf2 	bl	80107d4 <clust2sect>
 8010ff0:	4602      	mov	r2, r0
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	68ba      	ldr	r2, [r7, #8]
 8010ffa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011008:	441a      	add	r2, r3
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801100e:	2300      	movs	r3, #0
}
 8011010:	4618      	mov	r0, r3
 8011012:	3718      	adds	r7, #24
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b086      	sub	sp, #24
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011028:	2100      	movs	r1, #0
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f7ff feb4 	bl	8010d98 <dir_sdi>
 8011030:	4603      	mov	r3, r0
 8011032:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011034:	7dfb      	ldrb	r3, [r7, #23]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d12b      	bne.n	8011092 <dir_alloc+0x7a>
		n = 0;
 801103a:	2300      	movs	r3, #0
 801103c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	69db      	ldr	r3, [r3, #28]
 8011042:	4619      	mov	r1, r3
 8011044:	68f8      	ldr	r0, [r7, #12]
 8011046:	f7ff fb29 	bl	801069c <move_window>
 801104a:	4603      	mov	r3, r0
 801104c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801104e:	7dfb      	ldrb	r3, [r7, #23]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d11d      	bne.n	8011090 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6a1b      	ldr	r3, [r3, #32]
 8011058:	781b      	ldrb	r3, [r3, #0]
 801105a:	2be5      	cmp	r3, #229	; 0xe5
 801105c:	d004      	beq.n	8011068 <dir_alloc+0x50>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6a1b      	ldr	r3, [r3, #32]
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d107      	bne.n	8011078 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	3301      	adds	r3, #1
 801106c:	613b      	str	r3, [r7, #16]
 801106e:	693a      	ldr	r2, [r7, #16]
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	429a      	cmp	r2, r3
 8011074:	d102      	bne.n	801107c <dir_alloc+0x64>
 8011076:	e00c      	b.n	8011092 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011078:	2300      	movs	r3, #0
 801107a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801107c:	2101      	movs	r1, #1
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f7ff ff05 	bl	8010e8e <dir_next>
 8011084:	4603      	mov	r3, r0
 8011086:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011088:	7dfb      	ldrb	r3, [r7, #23]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d0d7      	beq.n	801103e <dir_alloc+0x26>
 801108e:	e000      	b.n	8011092 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011090:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011092:	7dfb      	ldrb	r3, [r7, #23]
 8011094:	2b04      	cmp	r3, #4
 8011096:	d101      	bne.n	801109c <dir_alloc+0x84>
 8011098:	2307      	movs	r3, #7
 801109a:	75fb      	strb	r3, [r7, #23]
	return res;
 801109c:	7dfb      	ldrb	r3, [r7, #23]
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3718      	adds	r7, #24
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}

080110a6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80110a6:	b580      	push	{r7, lr}
 80110a8:	b084      	sub	sp, #16
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	6078      	str	r0, [r7, #4]
 80110ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	331a      	adds	r3, #26
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7ff f841 	bl	801013c <ld_word>
 80110ba:	4603      	mov	r3, r0
 80110bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	2b03      	cmp	r3, #3
 80110c4:	d109      	bne.n	80110da <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	3314      	adds	r3, #20
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7ff f836 	bl	801013c <ld_word>
 80110d0:	4603      	mov	r3, r0
 80110d2:	041b      	lsls	r3, r3, #16
 80110d4:	68fa      	ldr	r2, [r7, #12]
 80110d6:	4313      	orrs	r3, r2
 80110d8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80110da:	68fb      	ldr	r3, [r7, #12]
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3710      	adds	r7, #16
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}

080110e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	60f8      	str	r0, [r7, #12]
 80110ec:	60b9      	str	r1, [r7, #8]
 80110ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	331a      	adds	r3, #26
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	b292      	uxth	r2, r2
 80110f8:	4611      	mov	r1, r2
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7ff f859 	bl	80101b2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	2b03      	cmp	r3, #3
 8011106:	d109      	bne.n	801111c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	f103 0214 	add.w	r2, r3, #20
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	0c1b      	lsrs	r3, r3, #16
 8011112:	b29b      	uxth	r3, r3
 8011114:	4619      	mov	r1, r3
 8011116:	4610      	mov	r0, r2
 8011118:	f7ff f84b 	bl	80101b2 <st_word>
	}
}
 801111c:	bf00      	nop
 801111e:	3710      	adds	r7, #16
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011124:	b590      	push	{r4, r7, lr}
 8011126:	b087      	sub	sp, #28
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	331a      	adds	r3, #26
 8011132:	4618      	mov	r0, r3
 8011134:	f7ff f802 	bl	801013c <ld_word>
 8011138:	4603      	mov	r3, r0
 801113a:	2b00      	cmp	r3, #0
 801113c:	d001      	beq.n	8011142 <cmp_lfn+0x1e>
 801113e:	2300      	movs	r3, #0
 8011140:	e059      	b.n	80111f6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801114a:	1e5a      	subs	r2, r3, #1
 801114c:	4613      	mov	r3, r2
 801114e:	005b      	lsls	r3, r3, #1
 8011150:	4413      	add	r3, r2
 8011152:	009b      	lsls	r3, r3, #2
 8011154:	4413      	add	r3, r2
 8011156:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011158:	2301      	movs	r3, #1
 801115a:	81fb      	strh	r3, [r7, #14]
 801115c:	2300      	movs	r3, #0
 801115e:	613b      	str	r3, [r7, #16]
 8011160:	e033      	b.n	80111ca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011162:	4a27      	ldr	r2, [pc, #156]	; (8011200 <cmp_lfn+0xdc>)
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	4413      	add	r3, r2
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	461a      	mov	r2, r3
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	4413      	add	r3, r2
 8011170:	4618      	mov	r0, r3
 8011172:	f7fe ffe3 	bl	801013c <ld_word>
 8011176:	4603      	mov	r3, r0
 8011178:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801117a:	89fb      	ldrh	r3, [r7, #14]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d01a      	beq.n	80111b6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	2bfe      	cmp	r3, #254	; 0xfe
 8011184:	d812      	bhi.n	80111ac <cmp_lfn+0x88>
 8011186:	89bb      	ldrh	r3, [r7, #12]
 8011188:	4618      	mov	r0, r3
 801118a:	f002 fb4f 	bl	801382c <ff_wtoupper>
 801118e:	4603      	mov	r3, r0
 8011190:	461c      	mov	r4, r3
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	1c5a      	adds	r2, r3, #1
 8011196:	617a      	str	r2, [r7, #20]
 8011198:	005b      	lsls	r3, r3, #1
 801119a:	687a      	ldr	r2, [r7, #4]
 801119c:	4413      	add	r3, r2
 801119e:	881b      	ldrh	r3, [r3, #0]
 80111a0:	4618      	mov	r0, r3
 80111a2:	f002 fb43 	bl	801382c <ff_wtoupper>
 80111a6:	4603      	mov	r3, r0
 80111a8:	429c      	cmp	r4, r3
 80111aa:	d001      	beq.n	80111b0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80111ac:	2300      	movs	r3, #0
 80111ae:	e022      	b.n	80111f6 <cmp_lfn+0xd2>
			}
			wc = uc;
 80111b0:	89bb      	ldrh	r3, [r7, #12]
 80111b2:	81fb      	strh	r3, [r7, #14]
 80111b4:	e006      	b.n	80111c4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80111b6:	89bb      	ldrh	r3, [r7, #12]
 80111b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80111bc:	4293      	cmp	r3, r2
 80111be:	d001      	beq.n	80111c4 <cmp_lfn+0xa0>
 80111c0:	2300      	movs	r3, #0
 80111c2:	e018      	b.n	80111f6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	3301      	adds	r3, #1
 80111c8:	613b      	str	r3, [r7, #16]
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	2b0c      	cmp	r3, #12
 80111ce:	d9c8      	bls.n	8011162 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	781b      	ldrb	r3, [r3, #0]
 80111d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d00b      	beq.n	80111f4 <cmp_lfn+0xd0>
 80111dc:	89fb      	ldrh	r3, [r7, #14]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d008      	beq.n	80111f4 <cmp_lfn+0xd0>
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	005b      	lsls	r3, r3, #1
 80111e6:	687a      	ldr	r2, [r7, #4]
 80111e8:	4413      	add	r3, r2
 80111ea:	881b      	ldrh	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d001      	beq.n	80111f4 <cmp_lfn+0xd0>
 80111f0:	2300      	movs	r3, #0
 80111f2:	e000      	b.n	80111f6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80111f4:	2301      	movs	r3, #1
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	371c      	adds	r7, #28
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd90      	pop	{r4, r7, pc}
 80111fe:	bf00      	nop
 8011200:	0801a810 	.word	0x0801a810

08011204 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b088      	sub	sp, #32
 8011208:	af00      	add	r7, sp, #0
 801120a:	60f8      	str	r0, [r7, #12]
 801120c:	60b9      	str	r1, [r7, #8]
 801120e:	4611      	mov	r1, r2
 8011210:	461a      	mov	r2, r3
 8011212:	460b      	mov	r3, r1
 8011214:	71fb      	strb	r3, [r7, #7]
 8011216:	4613      	mov	r3, r2
 8011218:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	330d      	adds	r3, #13
 801121e:	79ba      	ldrb	r2, [r7, #6]
 8011220:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	330b      	adds	r3, #11
 8011226:	220f      	movs	r2, #15
 8011228:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	330c      	adds	r3, #12
 801122e:	2200      	movs	r2, #0
 8011230:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	331a      	adds	r3, #26
 8011236:	2100      	movs	r1, #0
 8011238:	4618      	mov	r0, r3
 801123a:	f7fe ffba 	bl	80101b2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801123e:	79fb      	ldrb	r3, [r7, #7]
 8011240:	1e5a      	subs	r2, r3, #1
 8011242:	4613      	mov	r3, r2
 8011244:	005b      	lsls	r3, r3, #1
 8011246:	4413      	add	r3, r2
 8011248:	009b      	lsls	r3, r3, #2
 801124a:	4413      	add	r3, r2
 801124c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801124e:	2300      	movs	r3, #0
 8011250:	82fb      	strh	r3, [r7, #22]
 8011252:	2300      	movs	r3, #0
 8011254:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011256:	8afb      	ldrh	r3, [r7, #22]
 8011258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801125c:	4293      	cmp	r3, r2
 801125e:	d007      	beq.n	8011270 <put_lfn+0x6c>
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	1c5a      	adds	r2, r3, #1
 8011264:	61fa      	str	r2, [r7, #28]
 8011266:	005b      	lsls	r3, r3, #1
 8011268:	68fa      	ldr	r2, [r7, #12]
 801126a:	4413      	add	r3, r2
 801126c:	881b      	ldrh	r3, [r3, #0]
 801126e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011270:	4a17      	ldr	r2, [pc, #92]	; (80112d0 <put_lfn+0xcc>)
 8011272:	69bb      	ldr	r3, [r7, #24]
 8011274:	4413      	add	r3, r2
 8011276:	781b      	ldrb	r3, [r3, #0]
 8011278:	461a      	mov	r2, r3
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	4413      	add	r3, r2
 801127e:	8afa      	ldrh	r2, [r7, #22]
 8011280:	4611      	mov	r1, r2
 8011282:	4618      	mov	r0, r3
 8011284:	f7fe ff95 	bl	80101b2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011288:	8afb      	ldrh	r3, [r7, #22]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d102      	bne.n	8011294 <put_lfn+0x90>
 801128e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011292:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011294:	69bb      	ldr	r3, [r7, #24]
 8011296:	3301      	adds	r3, #1
 8011298:	61bb      	str	r3, [r7, #24]
 801129a:	69bb      	ldr	r3, [r7, #24]
 801129c:	2b0c      	cmp	r3, #12
 801129e:	d9da      	bls.n	8011256 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80112a0:	8afb      	ldrh	r3, [r7, #22]
 80112a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112a6:	4293      	cmp	r3, r2
 80112a8:	d006      	beq.n	80112b8 <put_lfn+0xb4>
 80112aa:	69fb      	ldr	r3, [r7, #28]
 80112ac:	005b      	lsls	r3, r3, #1
 80112ae:	68fa      	ldr	r2, [r7, #12]
 80112b0:	4413      	add	r3, r2
 80112b2:	881b      	ldrh	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d103      	bne.n	80112c0 <put_lfn+0xbc>
 80112b8:	79fb      	ldrb	r3, [r7, #7]
 80112ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	79fa      	ldrb	r2, [r7, #7]
 80112c4:	701a      	strb	r2, [r3, #0]
}
 80112c6:	bf00      	nop
 80112c8:	3720      	adds	r7, #32
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	bf00      	nop
 80112d0:	0801a810 	.word	0x0801a810

080112d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b08c      	sub	sp, #48	; 0x30
 80112d8:	af00      	add	r7, sp, #0
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	607a      	str	r2, [r7, #4]
 80112e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80112e2:	220b      	movs	r2, #11
 80112e4:	68b9      	ldr	r1, [r7, #8]
 80112e6:	68f8      	ldr	r0, [r7, #12]
 80112e8:	f7fe ffaa 	bl	8010240 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	2b05      	cmp	r3, #5
 80112f0:	d929      	bls.n	8011346 <gen_numname+0x72>
		sr = seq;
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80112f6:	e020      	b.n	801133a <gen_numname+0x66>
			wc = *lfn++;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	1c9a      	adds	r2, r3, #2
 80112fc:	607a      	str	r2, [r7, #4]
 80112fe:	881b      	ldrh	r3, [r3, #0]
 8011300:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011302:	2300      	movs	r3, #0
 8011304:	62bb      	str	r3, [r7, #40]	; 0x28
 8011306:	e015      	b.n	8011334 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	005a      	lsls	r2, r3, #1
 801130c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801130e:	f003 0301 	and.w	r3, r3, #1
 8011312:	4413      	add	r3, r2
 8011314:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011316:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011318:	085b      	lsrs	r3, r3, #1
 801131a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011322:	2b00      	cmp	r3, #0
 8011324:	d003      	beq.n	801132e <gen_numname+0x5a>
 8011326:	69fa      	ldr	r2, [r7, #28]
 8011328:	4b30      	ldr	r3, [pc, #192]	; (80113ec <gen_numname+0x118>)
 801132a:	4053      	eors	r3, r2
 801132c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011330:	3301      	adds	r3, #1
 8011332:	62bb      	str	r3, [r7, #40]	; 0x28
 8011334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011336:	2b0f      	cmp	r3, #15
 8011338:	d9e6      	bls.n	8011308 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	881b      	ldrh	r3, [r3, #0]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d1da      	bne.n	80112f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011342:	69fb      	ldr	r3, [r7, #28]
 8011344:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011346:	2307      	movs	r3, #7
 8011348:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	b2db      	uxtb	r3, r3
 801134e:	f003 030f 	and.w	r3, r3, #15
 8011352:	b2db      	uxtb	r3, r3
 8011354:	3330      	adds	r3, #48	; 0x30
 8011356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801135a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801135e:	2b39      	cmp	r3, #57	; 0x39
 8011360:	d904      	bls.n	801136c <gen_numname+0x98>
 8011362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011366:	3307      	adds	r3, #7
 8011368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801136c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136e:	1e5a      	subs	r2, r3, #1
 8011370:	62ba      	str	r2, [r7, #40]	; 0x28
 8011372:	3330      	adds	r3, #48	; 0x30
 8011374:	443b      	add	r3, r7
 8011376:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801137a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	091b      	lsrs	r3, r3, #4
 8011382:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d1df      	bne.n	801134a <gen_numname+0x76>
	ns[i] = '~';
 801138a:	f107 0214 	add.w	r2, r7, #20
 801138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011390:	4413      	add	r3, r2
 8011392:	227e      	movs	r2, #126	; 0x7e
 8011394:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011396:	2300      	movs	r3, #0
 8011398:	627b      	str	r3, [r7, #36]	; 0x24
 801139a:	e002      	b.n	80113a2 <gen_numname+0xce>
 801139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139e:	3301      	adds	r3, #1
 80113a0:	627b      	str	r3, [r7, #36]	; 0x24
 80113a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d205      	bcs.n	80113b6 <gen_numname+0xe2>
 80113aa:	68fa      	ldr	r2, [r7, #12]
 80113ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ae:	4413      	add	r3, r2
 80113b0:	781b      	ldrb	r3, [r3, #0]
 80113b2:	2b20      	cmp	r3, #32
 80113b4:	d1f2      	bne.n	801139c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80113b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b8:	2b07      	cmp	r3, #7
 80113ba:	d807      	bhi.n	80113cc <gen_numname+0xf8>
 80113bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113be:	1c5a      	adds	r2, r3, #1
 80113c0:	62ba      	str	r2, [r7, #40]	; 0x28
 80113c2:	3330      	adds	r3, #48	; 0x30
 80113c4:	443b      	add	r3, r7
 80113c6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80113ca:	e000      	b.n	80113ce <gen_numname+0xfa>
 80113cc:	2120      	movs	r1, #32
 80113ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d0:	1c5a      	adds	r2, r3, #1
 80113d2:	627a      	str	r2, [r7, #36]	; 0x24
 80113d4:	68fa      	ldr	r2, [r7, #12]
 80113d6:	4413      	add	r3, r2
 80113d8:	460a      	mov	r2, r1
 80113da:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80113dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113de:	2b07      	cmp	r3, #7
 80113e0:	d9e9      	bls.n	80113b6 <gen_numname+0xe2>
}
 80113e2:	bf00      	nop
 80113e4:	bf00      	nop
 80113e6:	3730      	adds	r7, #48	; 0x30
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}
 80113ec:	00011021 	.word	0x00011021

080113f0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80113f0:	b480      	push	{r7}
 80113f2:	b085      	sub	sp, #20
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80113f8:	2300      	movs	r3, #0
 80113fa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80113fc:	230b      	movs	r3, #11
 80113fe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011400:	7bfb      	ldrb	r3, [r7, #15]
 8011402:	b2da      	uxtb	r2, r3
 8011404:	0852      	lsrs	r2, r2, #1
 8011406:	01db      	lsls	r3, r3, #7
 8011408:	4313      	orrs	r3, r2
 801140a:	b2da      	uxtb	r2, r3
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	1c59      	adds	r1, r3, #1
 8011410:	6079      	str	r1, [r7, #4]
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	4413      	add	r3, r2
 8011416:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	3b01      	subs	r3, #1
 801141c:	60bb      	str	r3, [r7, #8]
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d1ed      	bne.n	8011400 <sum_sfn+0x10>
	return sum;
 8011424:	7bfb      	ldrb	r3, [r7, #15]
}
 8011426:	4618      	mov	r0, r3
 8011428:	3714      	adds	r7, #20
 801142a:	46bd      	mov	sp, r7
 801142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011430:	4770      	bx	lr

08011432 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011432:	b580      	push	{r7, lr}
 8011434:	b086      	sub	sp, #24
 8011436:	af00      	add	r7, sp, #0
 8011438:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011440:	2100      	movs	r1, #0
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f7ff fca8 	bl	8010d98 <dir_sdi>
 8011448:	4603      	mov	r3, r0
 801144a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801144c:	7dfb      	ldrb	r3, [r7, #23]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d001      	beq.n	8011456 <dir_find+0x24>
 8011452:	7dfb      	ldrb	r3, [r7, #23]
 8011454:	e0a9      	b.n	80115aa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011456:	23ff      	movs	r3, #255	; 0xff
 8011458:	753b      	strb	r3, [r7, #20]
 801145a:	7d3b      	ldrb	r3, [r7, #20]
 801145c:	757b      	strb	r3, [r7, #21]
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f04f 32ff 	mov.w	r2, #4294967295
 8011464:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	69db      	ldr	r3, [r3, #28]
 801146a:	4619      	mov	r1, r3
 801146c:	6938      	ldr	r0, [r7, #16]
 801146e:	f7ff f915 	bl	801069c <move_window>
 8011472:	4603      	mov	r3, r0
 8011474:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011476:	7dfb      	ldrb	r3, [r7, #23]
 8011478:	2b00      	cmp	r3, #0
 801147a:	f040 8090 	bne.w	801159e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6a1b      	ldr	r3, [r3, #32]
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011486:	7dbb      	ldrb	r3, [r7, #22]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d102      	bne.n	8011492 <dir_find+0x60>
 801148c:	2304      	movs	r3, #4
 801148e:	75fb      	strb	r3, [r7, #23]
 8011490:	e08a      	b.n	80115a8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6a1b      	ldr	r3, [r3, #32]
 8011496:	330b      	adds	r3, #11
 8011498:	781b      	ldrb	r3, [r3, #0]
 801149a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801149e:	73fb      	strb	r3, [r7, #15]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	7bfa      	ldrb	r2, [r7, #15]
 80114a4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80114a6:	7dbb      	ldrb	r3, [r7, #22]
 80114a8:	2be5      	cmp	r3, #229	; 0xe5
 80114aa:	d007      	beq.n	80114bc <dir_find+0x8a>
 80114ac:	7bfb      	ldrb	r3, [r7, #15]
 80114ae:	f003 0308 	and.w	r3, r3, #8
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d009      	beq.n	80114ca <dir_find+0x98>
 80114b6:	7bfb      	ldrb	r3, [r7, #15]
 80114b8:	2b0f      	cmp	r3, #15
 80114ba:	d006      	beq.n	80114ca <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80114bc:	23ff      	movs	r3, #255	; 0xff
 80114be:	757b      	strb	r3, [r7, #21]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f04f 32ff 	mov.w	r2, #4294967295
 80114c6:	631a      	str	r2, [r3, #48]	; 0x30
 80114c8:	e05e      	b.n	8011588 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80114ca:	7bfb      	ldrb	r3, [r7, #15]
 80114cc:	2b0f      	cmp	r3, #15
 80114ce:	d136      	bne.n	801153e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80114d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d154      	bne.n	8011588 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80114de:	7dbb      	ldrb	r3, [r7, #22]
 80114e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d00d      	beq.n	8011504 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6a1b      	ldr	r3, [r3, #32]
 80114ec:	7b5b      	ldrb	r3, [r3, #13]
 80114ee:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80114f0:	7dbb      	ldrb	r3, [r7, #22]
 80114f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114f6:	75bb      	strb	r3, [r7, #22]
 80114f8:	7dbb      	ldrb	r3, [r7, #22]
 80114fa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	695a      	ldr	r2, [r3, #20]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011504:	7dba      	ldrb	r2, [r7, #22]
 8011506:	7d7b      	ldrb	r3, [r7, #21]
 8011508:	429a      	cmp	r2, r3
 801150a:	d115      	bne.n	8011538 <dir_find+0x106>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6a1b      	ldr	r3, [r3, #32]
 8011510:	330d      	adds	r3, #13
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	7d3a      	ldrb	r2, [r7, #20]
 8011516:	429a      	cmp	r2, r3
 8011518:	d10e      	bne.n	8011538 <dir_find+0x106>
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	68da      	ldr	r2, [r3, #12]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6a1b      	ldr	r3, [r3, #32]
 8011522:	4619      	mov	r1, r3
 8011524:	4610      	mov	r0, r2
 8011526:	f7ff fdfd 	bl	8011124 <cmp_lfn>
 801152a:	4603      	mov	r3, r0
 801152c:	2b00      	cmp	r3, #0
 801152e:	d003      	beq.n	8011538 <dir_find+0x106>
 8011530:	7d7b      	ldrb	r3, [r7, #21]
 8011532:	3b01      	subs	r3, #1
 8011534:	b2db      	uxtb	r3, r3
 8011536:	e000      	b.n	801153a <dir_find+0x108>
 8011538:	23ff      	movs	r3, #255	; 0xff
 801153a:	757b      	strb	r3, [r7, #21]
 801153c:	e024      	b.n	8011588 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801153e:	7d7b      	ldrb	r3, [r7, #21]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d109      	bne.n	8011558 <dir_find+0x126>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6a1b      	ldr	r3, [r3, #32]
 8011548:	4618      	mov	r0, r3
 801154a:	f7ff ff51 	bl	80113f0 <sum_sfn>
 801154e:	4603      	mov	r3, r0
 8011550:	461a      	mov	r2, r3
 8011552:	7d3b      	ldrb	r3, [r7, #20]
 8011554:	4293      	cmp	r3, r2
 8011556:	d024      	beq.n	80115a2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801155e:	f003 0301 	and.w	r3, r3, #1
 8011562:	2b00      	cmp	r3, #0
 8011564:	d10a      	bne.n	801157c <dir_find+0x14a>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6a18      	ldr	r0, [r3, #32]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	3324      	adds	r3, #36	; 0x24
 801156e:	220b      	movs	r2, #11
 8011570:	4619      	mov	r1, r3
 8011572:	f7fe fea1 	bl	80102b8 <mem_cmp>
 8011576:	4603      	mov	r3, r0
 8011578:	2b00      	cmp	r3, #0
 801157a:	d014      	beq.n	80115a6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801157c:	23ff      	movs	r3, #255	; 0xff
 801157e:	757b      	strb	r3, [r7, #21]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f04f 32ff 	mov.w	r2, #4294967295
 8011586:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011588:	2100      	movs	r1, #0
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f7ff fc7f 	bl	8010e8e <dir_next>
 8011590:	4603      	mov	r3, r0
 8011592:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011594:	7dfb      	ldrb	r3, [r7, #23]
 8011596:	2b00      	cmp	r3, #0
 8011598:	f43f af65 	beq.w	8011466 <dir_find+0x34>
 801159c:	e004      	b.n	80115a8 <dir_find+0x176>
		if (res != FR_OK) break;
 801159e:	bf00      	nop
 80115a0:	e002      	b.n	80115a8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80115a2:	bf00      	nop
 80115a4:	e000      	b.n	80115a8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80115a6:	bf00      	nop

	return res;
 80115a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3718      	adds	r7, #24
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
	...

080115b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b08c      	sub	sp, #48	; 0x30
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80115c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d001      	beq.n	80115d4 <dir_register+0x20>
 80115d0:	2306      	movs	r3, #6
 80115d2:	e0e0      	b.n	8011796 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80115d4:	2300      	movs	r3, #0
 80115d6:	627b      	str	r3, [r7, #36]	; 0x24
 80115d8:	e002      	b.n	80115e0 <dir_register+0x2c>
 80115da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115dc:	3301      	adds	r3, #1
 80115de:	627b      	str	r3, [r7, #36]	; 0x24
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	68da      	ldr	r2, [r3, #12]
 80115e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e6:	005b      	lsls	r3, r3, #1
 80115e8:	4413      	add	r3, r2
 80115ea:	881b      	ldrh	r3, [r3, #0]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d1f4      	bne.n	80115da <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80115f6:	f107 030c 	add.w	r3, r7, #12
 80115fa:	220c      	movs	r2, #12
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fe fe1f 	bl	8010240 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011602:	7dfb      	ldrb	r3, [r7, #23]
 8011604:	f003 0301 	and.w	r3, r3, #1
 8011608:	2b00      	cmp	r3, #0
 801160a:	d032      	beq.n	8011672 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2240      	movs	r2, #64	; 0x40
 8011610:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8011614:	2301      	movs	r3, #1
 8011616:	62bb      	str	r3, [r7, #40]	; 0x28
 8011618:	e016      	b.n	8011648 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8011620:	69fb      	ldr	r3, [r7, #28]
 8011622:	68da      	ldr	r2, [r3, #12]
 8011624:	f107 010c 	add.w	r1, r7, #12
 8011628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162a:	f7ff fe53 	bl	80112d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f7ff feff 	bl	8011432 <dir_find>
 8011634:	4603      	mov	r3, r0
 8011636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801163a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801163e:	2b00      	cmp	r3, #0
 8011640:	d106      	bne.n	8011650 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8011642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011644:	3301      	adds	r3, #1
 8011646:	62bb      	str	r3, [r7, #40]	; 0x28
 8011648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164a:	2b63      	cmp	r3, #99	; 0x63
 801164c:	d9e5      	bls.n	801161a <dir_register+0x66>
 801164e:	e000      	b.n	8011652 <dir_register+0x9e>
			if (res != FR_OK) break;
 8011650:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011654:	2b64      	cmp	r3, #100	; 0x64
 8011656:	d101      	bne.n	801165c <dir_register+0xa8>
 8011658:	2307      	movs	r3, #7
 801165a:	e09c      	b.n	8011796 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801165c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011660:	2b04      	cmp	r3, #4
 8011662:	d002      	beq.n	801166a <dir_register+0xb6>
 8011664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011668:	e095      	b.n	8011796 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801166a:	7dfa      	ldrb	r2, [r7, #23]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011672:	7dfb      	ldrb	r3, [r7, #23]
 8011674:	f003 0302 	and.w	r3, r3, #2
 8011678:	2b00      	cmp	r3, #0
 801167a:	d007      	beq.n	801168c <dir_register+0xd8>
 801167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167e:	330c      	adds	r3, #12
 8011680:	4a47      	ldr	r2, [pc, #284]	; (80117a0 <dir_register+0x1ec>)
 8011682:	fba2 2303 	umull	r2, r3, r2, r3
 8011686:	089b      	lsrs	r3, r3, #2
 8011688:	3301      	adds	r3, #1
 801168a:	e000      	b.n	801168e <dir_register+0xda>
 801168c:	2301      	movs	r3, #1
 801168e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011690:	6a39      	ldr	r1, [r7, #32]
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f7ff fcc0 	bl	8011018 <dir_alloc>
 8011698:	4603      	mov	r3, r0
 801169a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801169e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d148      	bne.n	8011738 <dir_register+0x184>
 80116a6:	6a3b      	ldr	r3, [r7, #32]
 80116a8:	3b01      	subs	r3, #1
 80116aa:	623b      	str	r3, [r7, #32]
 80116ac:	6a3b      	ldr	r3, [r7, #32]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d042      	beq.n	8011738 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	695a      	ldr	r2, [r3, #20]
 80116b6:	6a3b      	ldr	r3, [r7, #32]
 80116b8:	015b      	lsls	r3, r3, #5
 80116ba:	1ad3      	subs	r3, r2, r3
 80116bc:	4619      	mov	r1, r3
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f7ff fb6a 	bl	8010d98 <dir_sdi>
 80116c4:	4603      	mov	r3, r0
 80116c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80116ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d132      	bne.n	8011738 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	3324      	adds	r3, #36	; 0x24
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7ff fe8a 	bl	80113f0 <sum_sfn>
 80116dc:	4603      	mov	r3, r0
 80116de:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	69db      	ldr	r3, [r3, #28]
 80116e4:	4619      	mov	r1, r3
 80116e6:	69f8      	ldr	r0, [r7, #28]
 80116e8:	f7fe ffd8 	bl	801069c <move_window>
 80116ec:	4603      	mov	r3, r0
 80116ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80116f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d11d      	bne.n	8011736 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80116fa:	69fb      	ldr	r3, [r7, #28]
 80116fc:	68d8      	ldr	r0, [r3, #12]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6a19      	ldr	r1, [r3, #32]
 8011702:	6a3b      	ldr	r3, [r7, #32]
 8011704:	b2da      	uxtb	r2, r3
 8011706:	7efb      	ldrb	r3, [r7, #27]
 8011708:	f7ff fd7c 	bl	8011204 <put_lfn>
				fs->wflag = 1;
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	2201      	movs	r2, #1
 8011710:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8011712:	2100      	movs	r1, #0
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f7ff fbba 	bl	8010e8e <dir_next>
 801171a:	4603      	mov	r3, r0
 801171c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8011720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011724:	2b00      	cmp	r3, #0
 8011726:	d107      	bne.n	8011738 <dir_register+0x184>
 8011728:	6a3b      	ldr	r3, [r7, #32]
 801172a:	3b01      	subs	r3, #1
 801172c:	623b      	str	r3, [r7, #32]
 801172e:	6a3b      	ldr	r3, [r7, #32]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d1d5      	bne.n	80116e0 <dir_register+0x12c>
 8011734:	e000      	b.n	8011738 <dir_register+0x184>
				if (res != FR_OK) break;
 8011736:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011738:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801173c:	2b00      	cmp	r3, #0
 801173e:	d128      	bne.n	8011792 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	69db      	ldr	r3, [r3, #28]
 8011744:	4619      	mov	r1, r3
 8011746:	69f8      	ldr	r0, [r7, #28]
 8011748:	f7fe ffa8 	bl	801069c <move_window>
 801174c:	4603      	mov	r3, r0
 801174e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8011752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011756:	2b00      	cmp	r3, #0
 8011758:	d11b      	bne.n	8011792 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6a1b      	ldr	r3, [r3, #32]
 801175e:	2220      	movs	r2, #32
 8011760:	2100      	movs	r1, #0
 8011762:	4618      	mov	r0, r3
 8011764:	f7fe fd8d 	bl	8010282 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6a18      	ldr	r0, [r3, #32]
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	3324      	adds	r3, #36	; 0x24
 8011770:	220b      	movs	r2, #11
 8011772:	4619      	mov	r1, r3
 8011774:	f7fe fd64 	bl	8010240 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6a1b      	ldr	r3, [r3, #32]
 8011782:	330c      	adds	r3, #12
 8011784:	f002 0218 	and.w	r2, r2, #24
 8011788:	b2d2      	uxtb	r2, r2
 801178a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	2201      	movs	r2, #1
 8011790:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011796:	4618      	mov	r0, r3
 8011798:	3730      	adds	r7, #48	; 0x30
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	4ec4ec4f 	.word	0x4ec4ec4f

080117a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b08a      	sub	sp, #40	; 0x28
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	613b      	str	r3, [r7, #16]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	68db      	ldr	r3, [r3, #12]
 80117ba:	60fb      	str	r3, [r7, #12]
 80117bc:	2300      	movs	r3, #0
 80117be:	617b      	str	r3, [r7, #20]
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80117c4:	69bb      	ldr	r3, [r7, #24]
 80117c6:	1c5a      	adds	r2, r3, #1
 80117c8:	61ba      	str	r2, [r7, #24]
 80117ca:	693a      	ldr	r2, [r7, #16]
 80117cc:	4413      	add	r3, r2
 80117ce:	781b      	ldrb	r3, [r3, #0]
 80117d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80117d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80117d4:	2b1f      	cmp	r3, #31
 80117d6:	d940      	bls.n	801185a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80117d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80117da:	2b2f      	cmp	r3, #47	; 0x2f
 80117dc:	d006      	beq.n	80117ec <create_name+0x48>
 80117de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80117e0:	2b5c      	cmp	r3, #92	; 0x5c
 80117e2:	d110      	bne.n	8011806 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80117e4:	e002      	b.n	80117ec <create_name+0x48>
 80117e6:	69bb      	ldr	r3, [r7, #24]
 80117e8:	3301      	adds	r3, #1
 80117ea:	61bb      	str	r3, [r7, #24]
 80117ec:	693a      	ldr	r2, [r7, #16]
 80117ee:	69bb      	ldr	r3, [r7, #24]
 80117f0:	4413      	add	r3, r2
 80117f2:	781b      	ldrb	r3, [r3, #0]
 80117f4:	2b2f      	cmp	r3, #47	; 0x2f
 80117f6:	d0f6      	beq.n	80117e6 <create_name+0x42>
 80117f8:	693a      	ldr	r2, [r7, #16]
 80117fa:	69bb      	ldr	r3, [r7, #24]
 80117fc:	4413      	add	r3, r2
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	2b5c      	cmp	r3, #92	; 0x5c
 8011802:	d0f0      	beq.n	80117e6 <create_name+0x42>
			break;
 8011804:	e02a      	b.n	801185c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	2bfe      	cmp	r3, #254	; 0xfe
 801180a:	d901      	bls.n	8011810 <create_name+0x6c>
 801180c:	2306      	movs	r3, #6
 801180e:	e17d      	b.n	8011b0c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8011810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011812:	b2db      	uxtb	r3, r3
 8011814:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8011816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011818:	2101      	movs	r1, #1
 801181a:	4618      	mov	r0, r3
 801181c:	f001 ffca 	bl	80137b4 <ff_convert>
 8011820:	4603      	mov	r3, r0
 8011822:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8011824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011826:	2b00      	cmp	r3, #0
 8011828:	d101      	bne.n	801182e <create_name+0x8a>
 801182a:	2306      	movs	r3, #6
 801182c:	e16e      	b.n	8011b0c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801182e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011830:	2b7f      	cmp	r3, #127	; 0x7f
 8011832:	d809      	bhi.n	8011848 <create_name+0xa4>
 8011834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011836:	4619      	mov	r1, r3
 8011838:	488d      	ldr	r0, [pc, #564]	; (8011a70 <create_name+0x2cc>)
 801183a:	f7fe fd64 	bl	8010306 <chk_chr>
 801183e:	4603      	mov	r3, r0
 8011840:	2b00      	cmp	r3, #0
 8011842:	d001      	beq.n	8011848 <create_name+0xa4>
 8011844:	2306      	movs	r3, #6
 8011846:	e161      	b.n	8011b0c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	1c5a      	adds	r2, r3, #1
 801184c:	617a      	str	r2, [r7, #20]
 801184e:	005b      	lsls	r3, r3, #1
 8011850:	68fa      	ldr	r2, [r7, #12]
 8011852:	4413      	add	r3, r2
 8011854:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011856:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8011858:	e7b4      	b.n	80117c4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801185a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801185c:	693a      	ldr	r2, [r7, #16]
 801185e:	69bb      	ldr	r3, [r7, #24]
 8011860:	441a      	add	r2, r3
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011868:	2b1f      	cmp	r3, #31
 801186a:	d801      	bhi.n	8011870 <create_name+0xcc>
 801186c:	2304      	movs	r3, #4
 801186e:	e000      	b.n	8011872 <create_name+0xce>
 8011870:	2300      	movs	r3, #0
 8011872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011876:	e011      	b.n	801189c <create_name+0xf8>
		w = lfn[di - 1];
 8011878:	697a      	ldr	r2, [r7, #20]
 801187a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801187e:	4413      	add	r3, r2
 8011880:	005b      	lsls	r3, r3, #1
 8011882:	68fa      	ldr	r2, [r7, #12]
 8011884:	4413      	add	r3, r2
 8011886:	881b      	ldrh	r3, [r3, #0]
 8011888:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801188a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801188c:	2b20      	cmp	r3, #32
 801188e:	d002      	beq.n	8011896 <create_name+0xf2>
 8011890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011892:	2b2e      	cmp	r3, #46	; 0x2e
 8011894:	d106      	bne.n	80118a4 <create_name+0x100>
		di--;
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	3b01      	subs	r3, #1
 801189a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d1ea      	bne.n	8011878 <create_name+0xd4>
 80118a2:	e000      	b.n	80118a6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80118a4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	005b      	lsls	r3, r3, #1
 80118aa:	68fa      	ldr	r2, [r7, #12]
 80118ac:	4413      	add	r3, r2
 80118ae:	2200      	movs	r2, #0
 80118b0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d101      	bne.n	80118bc <create_name+0x118>
 80118b8:	2306      	movs	r3, #6
 80118ba:	e127      	b.n	8011b0c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	3324      	adds	r3, #36	; 0x24
 80118c0:	220b      	movs	r2, #11
 80118c2:	2120      	movs	r1, #32
 80118c4:	4618      	mov	r0, r3
 80118c6:	f7fe fcdc 	bl	8010282 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80118ca:	2300      	movs	r3, #0
 80118cc:	61bb      	str	r3, [r7, #24]
 80118ce:	e002      	b.n	80118d6 <create_name+0x132>
 80118d0:	69bb      	ldr	r3, [r7, #24]
 80118d2:	3301      	adds	r3, #1
 80118d4:	61bb      	str	r3, [r7, #24]
 80118d6:	69bb      	ldr	r3, [r7, #24]
 80118d8:	005b      	lsls	r3, r3, #1
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	4413      	add	r3, r2
 80118de:	881b      	ldrh	r3, [r3, #0]
 80118e0:	2b20      	cmp	r3, #32
 80118e2:	d0f5      	beq.n	80118d0 <create_name+0x12c>
 80118e4:	69bb      	ldr	r3, [r7, #24]
 80118e6:	005b      	lsls	r3, r3, #1
 80118e8:	68fa      	ldr	r2, [r7, #12]
 80118ea:	4413      	add	r3, r2
 80118ec:	881b      	ldrh	r3, [r3, #0]
 80118ee:	2b2e      	cmp	r3, #46	; 0x2e
 80118f0:	d0ee      	beq.n	80118d0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80118f2:	69bb      	ldr	r3, [r7, #24]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d009      	beq.n	801190c <create_name+0x168>
 80118f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118fc:	f043 0303 	orr.w	r3, r3, #3
 8011900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8011904:	e002      	b.n	801190c <create_name+0x168>
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	3b01      	subs	r3, #1
 801190a:	617b      	str	r3, [r7, #20]
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d009      	beq.n	8011926 <create_name+0x182>
 8011912:	697a      	ldr	r2, [r7, #20]
 8011914:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011918:	4413      	add	r3, r2
 801191a:	005b      	lsls	r3, r3, #1
 801191c:	68fa      	ldr	r2, [r7, #12]
 801191e:	4413      	add	r3, r2
 8011920:	881b      	ldrh	r3, [r3, #0]
 8011922:	2b2e      	cmp	r3, #46	; 0x2e
 8011924:	d1ef      	bne.n	8011906 <create_name+0x162>

	i = b = 0; ni = 8;
 8011926:	2300      	movs	r3, #0
 8011928:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801192c:	2300      	movs	r3, #0
 801192e:	623b      	str	r3, [r7, #32]
 8011930:	2308      	movs	r3, #8
 8011932:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8011934:	69bb      	ldr	r3, [r7, #24]
 8011936:	1c5a      	adds	r2, r3, #1
 8011938:	61ba      	str	r2, [r7, #24]
 801193a:	005b      	lsls	r3, r3, #1
 801193c:	68fa      	ldr	r2, [r7, #12]
 801193e:	4413      	add	r3, r2
 8011940:	881b      	ldrh	r3, [r3, #0]
 8011942:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8011944:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011946:	2b00      	cmp	r3, #0
 8011948:	f000 8090 	beq.w	8011a6c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801194c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801194e:	2b20      	cmp	r3, #32
 8011950:	d006      	beq.n	8011960 <create_name+0x1bc>
 8011952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011954:	2b2e      	cmp	r3, #46	; 0x2e
 8011956:	d10a      	bne.n	801196e <create_name+0x1ca>
 8011958:	69ba      	ldr	r2, [r7, #24]
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	429a      	cmp	r2, r3
 801195e:	d006      	beq.n	801196e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8011960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011964:	f043 0303 	orr.w	r3, r3, #3
 8011968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801196c:	e07d      	b.n	8011a6a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801196e:	6a3a      	ldr	r2, [r7, #32]
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	429a      	cmp	r2, r3
 8011974:	d203      	bcs.n	801197e <create_name+0x1da>
 8011976:	69ba      	ldr	r2, [r7, #24]
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	429a      	cmp	r2, r3
 801197c:	d123      	bne.n	80119c6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801197e:	69fb      	ldr	r3, [r7, #28]
 8011980:	2b0b      	cmp	r3, #11
 8011982:	d106      	bne.n	8011992 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8011984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011988:	f043 0303 	orr.w	r3, r3, #3
 801198c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011990:	e075      	b.n	8011a7e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8011992:	69ba      	ldr	r2, [r7, #24]
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	429a      	cmp	r2, r3
 8011998:	d005      	beq.n	80119a6 <create_name+0x202>
 801199a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801199e:	f043 0303 	orr.w	r3, r3, #3
 80119a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80119a6:	69ba      	ldr	r2, [r7, #24]
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d866      	bhi.n	8011a7c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	61bb      	str	r3, [r7, #24]
 80119b2:	2308      	movs	r3, #8
 80119b4:	623b      	str	r3, [r7, #32]
 80119b6:	230b      	movs	r3, #11
 80119b8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80119ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80119be:	009b      	lsls	r3, r3, #2
 80119c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80119c4:	e051      	b.n	8011a6a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80119c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119c8:	2b7f      	cmp	r3, #127	; 0x7f
 80119ca:	d914      	bls.n	80119f6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80119cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119ce:	2100      	movs	r1, #0
 80119d0:	4618      	mov	r0, r3
 80119d2:	f001 feef 	bl	80137b4 <ff_convert>
 80119d6:	4603      	mov	r3, r0
 80119d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80119da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d004      	beq.n	80119ea <create_name+0x246>
 80119e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119e2:	3b80      	subs	r3, #128	; 0x80
 80119e4:	4a23      	ldr	r2, [pc, #140]	; (8011a74 <create_name+0x2d0>)
 80119e6:	5cd3      	ldrb	r3, [r2, r3]
 80119e8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80119ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119ee:	f043 0302 	orr.w	r3, r3, #2
 80119f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80119f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d007      	beq.n	8011a0c <create_name+0x268>
 80119fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119fe:	4619      	mov	r1, r3
 8011a00:	481d      	ldr	r0, [pc, #116]	; (8011a78 <create_name+0x2d4>)
 8011a02:	f7fe fc80 	bl	8010306 <chk_chr>
 8011a06:	4603      	mov	r3, r0
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d008      	beq.n	8011a1e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8011a0c:	235f      	movs	r3, #95	; 0x5f
 8011a0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a14:	f043 0303 	orr.w	r3, r3, #3
 8011a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a1c:	e01b      	b.n	8011a56 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8011a1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a20:	2b40      	cmp	r3, #64	; 0x40
 8011a22:	d909      	bls.n	8011a38 <create_name+0x294>
 8011a24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a26:	2b5a      	cmp	r3, #90	; 0x5a
 8011a28:	d806      	bhi.n	8011a38 <create_name+0x294>
					b |= 2;
 8011a2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a2e:	f043 0302 	orr.w	r3, r3, #2
 8011a32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011a36:	e00e      	b.n	8011a56 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8011a38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a3a:	2b60      	cmp	r3, #96	; 0x60
 8011a3c:	d90b      	bls.n	8011a56 <create_name+0x2b2>
 8011a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a40:	2b7a      	cmp	r3, #122	; 0x7a
 8011a42:	d808      	bhi.n	8011a56 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8011a44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a48:	f043 0301 	orr.w	r3, r3, #1
 8011a4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011a50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a52:	3b20      	subs	r3, #32
 8011a54:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8011a56:	6a3b      	ldr	r3, [r7, #32]
 8011a58:	1c5a      	adds	r2, r3, #1
 8011a5a:	623a      	str	r2, [r7, #32]
 8011a5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011a5e:	b2d1      	uxtb	r1, r2
 8011a60:	687a      	ldr	r2, [r7, #4]
 8011a62:	4413      	add	r3, r2
 8011a64:	460a      	mov	r2, r1
 8011a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8011a6a:	e763      	b.n	8011934 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8011a6c:	bf00      	nop
 8011a6e:	e006      	b.n	8011a7e <create_name+0x2da>
 8011a70:	0801a6e8 	.word	0x0801a6e8
 8011a74:	0801a790 	.word	0x0801a790
 8011a78:	0801a6f4 	.word	0x0801a6f4
			if (si > di) break;			/* No extension */
 8011a7c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011a84:	2be5      	cmp	r3, #229	; 0xe5
 8011a86:	d103      	bne.n	8011a90 <create_name+0x2ec>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2205      	movs	r2, #5
 8011a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8011a90:	69fb      	ldr	r3, [r7, #28]
 8011a92:	2b08      	cmp	r3, #8
 8011a94:	d104      	bne.n	8011aa0 <create_name+0x2fc>
 8011a96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8011aa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011aa4:	f003 030c 	and.w	r3, r3, #12
 8011aa8:	2b0c      	cmp	r3, #12
 8011aaa:	d005      	beq.n	8011ab8 <create_name+0x314>
 8011aac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ab0:	f003 0303 	and.w	r3, r3, #3
 8011ab4:	2b03      	cmp	r3, #3
 8011ab6:	d105      	bne.n	8011ac4 <create_name+0x320>
 8011ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011abc:	f043 0302 	orr.w	r3, r3, #2
 8011ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8011ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ac8:	f003 0302 	and.w	r3, r3, #2
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d117      	bne.n	8011b00 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8011ad0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ad4:	f003 0303 	and.w	r3, r3, #3
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	d105      	bne.n	8011ae8 <create_name+0x344>
 8011adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ae0:	f043 0310 	orr.w	r3, r3, #16
 8011ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8011ae8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011aec:	f003 030c 	and.w	r3, r3, #12
 8011af0:	2b04      	cmp	r3, #4
 8011af2:	d105      	bne.n	8011b00 <create_name+0x35c>
 8011af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011af8:	f043 0308 	orr.w	r3, r3, #8
 8011afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011b06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8011b0a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	3728      	adds	r7, #40	; 0x28
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b086      	sub	sp, #24
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011b28:	e002      	b.n	8011b30 <follow_path+0x1c>
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	603b      	str	r3, [r7, #0]
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	2b2f      	cmp	r3, #47	; 0x2f
 8011b36:	d0f8      	beq.n	8011b2a <follow_path+0x16>
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	2b5c      	cmp	r3, #92	; 0x5c
 8011b3e:	d0f4      	beq.n	8011b2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	2200      	movs	r2, #0
 8011b44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	781b      	ldrb	r3, [r3, #0]
 8011b4a:	2b1f      	cmp	r3, #31
 8011b4c:	d80a      	bhi.n	8011b64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2280      	movs	r2, #128	; 0x80
 8011b52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011b56:	2100      	movs	r1, #0
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f7ff f91d 	bl	8010d98 <dir_sdi>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	75fb      	strb	r3, [r7, #23]
 8011b62:	e043      	b.n	8011bec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011b64:	463b      	mov	r3, r7
 8011b66:	4619      	mov	r1, r3
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f7ff fe1b 	bl	80117a4 <create_name>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011b72:	7dfb      	ldrb	r3, [r7, #23]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d134      	bne.n	8011be2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f7ff fc5a 	bl	8011432 <dir_find>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011b88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011b8a:	7dfb      	ldrb	r3, [r7, #23]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d00a      	beq.n	8011ba6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011b90:	7dfb      	ldrb	r3, [r7, #23]
 8011b92:	2b04      	cmp	r3, #4
 8011b94:	d127      	bne.n	8011be6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011b96:	7afb      	ldrb	r3, [r7, #11]
 8011b98:	f003 0304 	and.w	r3, r3, #4
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d122      	bne.n	8011be6 <follow_path+0xd2>
 8011ba0:	2305      	movs	r3, #5
 8011ba2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011ba4:	e01f      	b.n	8011be6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011ba6:	7afb      	ldrb	r3, [r7, #11]
 8011ba8:	f003 0304 	and.w	r3, r3, #4
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d11c      	bne.n	8011bea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	799b      	ldrb	r3, [r3, #6]
 8011bb4:	f003 0310 	and.w	r3, r3, #16
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d102      	bne.n	8011bc2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011bbc:	2305      	movs	r3, #5
 8011bbe:	75fb      	strb	r3, [r7, #23]
 8011bc0:	e014      	b.n	8011bec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	695b      	ldr	r3, [r3, #20]
 8011bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bd0:	4413      	add	r3, r2
 8011bd2:	4619      	mov	r1, r3
 8011bd4:	68f8      	ldr	r0, [r7, #12]
 8011bd6:	f7ff fa66 	bl	80110a6 <ld_clust>
 8011bda:	4602      	mov	r2, r0
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011be0:	e7c0      	b.n	8011b64 <follow_path+0x50>
			if (res != FR_OK) break;
 8011be2:	bf00      	nop
 8011be4:	e002      	b.n	8011bec <follow_path+0xd8>
				break;
 8011be6:	bf00      	nop
 8011be8:	e000      	b.n	8011bec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011bea:	bf00      	nop
			}
		}
	}

	return res;
 8011bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3718      	adds	r7, #24
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}

08011bf6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011bf6:	b480      	push	{r7}
 8011bf8:	b087      	sub	sp, #28
 8011bfa:	af00      	add	r7, sp, #0
 8011bfc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8011c02:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d031      	beq.n	8011c70 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	617b      	str	r3, [r7, #20]
 8011c12:	e002      	b.n	8011c1a <get_ldnumber+0x24>
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	3301      	adds	r3, #1
 8011c18:	617b      	str	r3, [r7, #20]
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	2b1f      	cmp	r3, #31
 8011c20:	d903      	bls.n	8011c2a <get_ldnumber+0x34>
 8011c22:	697b      	ldr	r3, [r7, #20]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	2b3a      	cmp	r3, #58	; 0x3a
 8011c28:	d1f4      	bne.n	8011c14 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	781b      	ldrb	r3, [r3, #0]
 8011c2e:	2b3a      	cmp	r3, #58	; 0x3a
 8011c30:	d11c      	bne.n	8011c6c <get_ldnumber+0x76>
			tp = *path;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	1c5a      	adds	r2, r3, #1
 8011c3c:	60fa      	str	r2, [r7, #12]
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	3b30      	subs	r3, #48	; 0x30
 8011c42:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	2b09      	cmp	r3, #9
 8011c48:	d80e      	bhi.n	8011c68 <get_ldnumber+0x72>
 8011c4a:	68fa      	ldr	r2, [r7, #12]
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d10a      	bne.n	8011c68 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d107      	bne.n	8011c68 <get_ldnumber+0x72>
					vol = (int)i;
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	617b      	str	r3, [r7, #20]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	697a      	ldr	r2, [r7, #20]
 8011c66:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	e002      	b.n	8011c72 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011c70:	693b      	ldr	r3, [r7, #16]
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	371c      	adds	r7, #28
 8011c76:	46bd      	mov	sp, r7
 8011c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7c:	4770      	bx	lr
	...

08011c80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b082      	sub	sp, #8
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
 8011c88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	70da      	strb	r2, [r3, #3]
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f04f 32ff 	mov.w	r2, #4294967295
 8011c96:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011c98:	6839      	ldr	r1, [r7, #0]
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f7fe fcfe 	bl	801069c <move_window>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d001      	beq.n	8011caa <check_fs+0x2a>
 8011ca6:	2304      	movs	r3, #4
 8011ca8:	e038      	b.n	8011d1c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	3334      	adds	r3, #52	; 0x34
 8011cae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7fe fa42 	bl	801013c <ld_word>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	461a      	mov	r2, r3
 8011cbc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d001      	beq.n	8011cc8 <check_fs+0x48>
 8011cc4:	2303      	movs	r3, #3
 8011cc6:	e029      	b.n	8011d1c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011cce:	2be9      	cmp	r3, #233	; 0xe9
 8011cd0:	d009      	beq.n	8011ce6 <check_fs+0x66>
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011cd8:	2beb      	cmp	r3, #235	; 0xeb
 8011cda:	d11e      	bne.n	8011d1a <check_fs+0x9a>
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011ce2:	2b90      	cmp	r3, #144	; 0x90
 8011ce4:	d119      	bne.n	8011d1a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	3334      	adds	r3, #52	; 0x34
 8011cea:	3336      	adds	r3, #54	; 0x36
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7fe fa3d 	bl	801016c <ld_dword>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011cf8:	4a0a      	ldr	r2, [pc, #40]	; (8011d24 <check_fs+0xa4>)
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d101      	bne.n	8011d02 <check_fs+0x82>
 8011cfe:	2300      	movs	r3, #0
 8011d00:	e00c      	b.n	8011d1c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	3334      	adds	r3, #52	; 0x34
 8011d06:	3352      	adds	r3, #82	; 0x52
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7fe fa2f 	bl	801016c <ld_dword>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	4a05      	ldr	r2, [pc, #20]	; (8011d28 <check_fs+0xa8>)
 8011d12:	4293      	cmp	r3, r2
 8011d14:	d101      	bne.n	8011d1a <check_fs+0x9a>
 8011d16:	2300      	movs	r3, #0
 8011d18:	e000      	b.n	8011d1c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011d1a:	2302      	movs	r3, #2
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3708      	adds	r7, #8
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}
 8011d24:	00544146 	.word	0x00544146
 8011d28:	33544146 	.word	0x33544146

08011d2c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b096      	sub	sp, #88	; 0x58
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	60b9      	str	r1, [r7, #8]
 8011d36:	4613      	mov	r3, r2
 8011d38:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011d40:	68f8      	ldr	r0, [r7, #12]
 8011d42:	f7ff ff58 	bl	8011bf6 <get_ldnumber>
 8011d46:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	da01      	bge.n	8011d52 <find_volume+0x26>
 8011d4e:	230b      	movs	r3, #11
 8011d50:	e22d      	b.n	80121ae <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011d52:	4aa1      	ldr	r2, [pc, #644]	; (8011fd8 <find_volume+0x2ac>)
 8011d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d5a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d101      	bne.n	8011d66 <find_volume+0x3a>
 8011d62:	230c      	movs	r3, #12
 8011d64:	e223      	b.n	80121ae <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d6a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011d6c:	79fb      	ldrb	r3, [r7, #7]
 8011d6e:	f023 0301 	bic.w	r3, r3, #1
 8011d72:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d01a      	beq.n	8011db2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7e:	785b      	ldrb	r3, [r3, #1]
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7fe f93d 	bl	8010000 <disk_status>
 8011d86:	4603      	mov	r3, r0
 8011d88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011d8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d90:	f003 0301 	and.w	r3, r3, #1
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d10c      	bne.n	8011db2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011d98:	79fb      	ldrb	r3, [r7, #7]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d007      	beq.n	8011dae <find_volume+0x82>
 8011d9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011da2:	f003 0304 	and.w	r3, r3, #4
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d001      	beq.n	8011dae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011daa:	230a      	movs	r3, #10
 8011dac:	e1ff      	b.n	80121ae <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8011dae:	2300      	movs	r3, #0
 8011db0:	e1fd      	b.n	80121ae <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db4:	2200      	movs	r2, #0
 8011db6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dba:	b2da      	uxtb	r2, r3
 8011dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dbe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc2:	785b      	ldrb	r3, [r3, #1]
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7fe f935 	bl	8010034 <disk_initialize>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011dd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011dd4:	f003 0301 	and.w	r3, r3, #1
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d001      	beq.n	8011de0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011ddc:	2303      	movs	r3, #3
 8011dde:	e1e6      	b.n	80121ae <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011de0:	79fb      	ldrb	r3, [r7, #7]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d007      	beq.n	8011df6 <find_volume+0xca>
 8011de6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011dea:	f003 0304 	and.w	r3, r3, #4
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d001      	beq.n	8011df6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011df2:	230a      	movs	r3, #10
 8011df4:	e1db      	b.n	80121ae <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011df6:	2300      	movs	r3, #0
 8011df8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011dfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011dfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011dfe:	f7ff ff3f 	bl	8011c80 <check_fs>
 8011e02:	4603      	mov	r3, r0
 8011e04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e0c:	2b02      	cmp	r3, #2
 8011e0e:	d149      	bne.n	8011ea4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011e10:	2300      	movs	r3, #0
 8011e12:	643b      	str	r3, [r7, #64]	; 0x40
 8011e14:	e01e      	b.n	8011e54 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e1e:	011b      	lsls	r3, r3, #4
 8011e20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011e24:	4413      	add	r3, r2
 8011e26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e2a:	3304      	adds	r3, #4
 8011e2c:	781b      	ldrb	r3, [r3, #0]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d006      	beq.n	8011e40 <find_volume+0x114>
 8011e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e34:	3308      	adds	r3, #8
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7fe f998 	bl	801016c <ld_dword>
 8011e3c:	4602      	mov	r2, r0
 8011e3e:	e000      	b.n	8011e42 <find_volume+0x116>
 8011e40:	2200      	movs	r2, #0
 8011e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e44:	009b      	lsls	r3, r3, #2
 8011e46:	3358      	adds	r3, #88	; 0x58
 8011e48:	443b      	add	r3, r7
 8011e4a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e50:	3301      	adds	r3, #1
 8011e52:	643b      	str	r3, [r7, #64]	; 0x40
 8011e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e56:	2b03      	cmp	r3, #3
 8011e58:	d9dd      	bls.n	8011e16 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d002      	beq.n	8011e6a <find_volume+0x13e>
 8011e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e66:	3b01      	subs	r3, #1
 8011e68:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	3358      	adds	r3, #88	; 0x58
 8011e70:	443b      	add	r3, r7
 8011e72:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011e76:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d005      	beq.n	8011e8a <find_volume+0x15e>
 8011e7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011e80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e82:	f7ff fefd 	bl	8011c80 <check_fs>
 8011e86:	4603      	mov	r3, r0
 8011e88:	e000      	b.n	8011e8c <find_volume+0x160>
 8011e8a:	2303      	movs	r3, #3
 8011e8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011e90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	d905      	bls.n	8011ea4 <find_volume+0x178>
 8011e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8011e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ea0:	2b03      	cmp	r3, #3
 8011ea2:	d9e2      	bls.n	8011e6a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011ea4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ea8:	2b04      	cmp	r3, #4
 8011eaa:	d101      	bne.n	8011eb0 <find_volume+0x184>
 8011eac:	2301      	movs	r3, #1
 8011eae:	e17e      	b.n	80121ae <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	d901      	bls.n	8011ebc <find_volume+0x190>
 8011eb8:	230d      	movs	r3, #13
 8011eba:	e178      	b.n	80121ae <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ebe:	3334      	adds	r3, #52	; 0x34
 8011ec0:	330b      	adds	r3, #11
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7fe f93a 	bl	801013c <ld_word>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ece:	d001      	beq.n	8011ed4 <find_volume+0x1a8>
 8011ed0:	230d      	movs	r3, #13
 8011ed2:	e16c      	b.n	80121ae <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed6:	3334      	adds	r3, #52	; 0x34
 8011ed8:	3316      	adds	r3, #22
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7fe f92e 	bl	801013c <ld_word>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d106      	bne.n	8011ef8 <find_volume+0x1cc>
 8011eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eec:	3334      	adds	r3, #52	; 0x34
 8011eee:	3324      	adds	r3, #36	; 0x24
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7fe f93b 	bl	801016c <ld_dword>
 8011ef6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011efa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011efc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f00:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f06:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f0a:	789b      	ldrb	r3, [r3, #2]
 8011f0c:	2b01      	cmp	r3, #1
 8011f0e:	d005      	beq.n	8011f1c <find_volume+0x1f0>
 8011f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f12:	789b      	ldrb	r3, [r3, #2]
 8011f14:	2b02      	cmp	r3, #2
 8011f16:	d001      	beq.n	8011f1c <find_volume+0x1f0>
 8011f18:	230d      	movs	r3, #13
 8011f1a:	e148      	b.n	80121ae <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1e:	789b      	ldrb	r3, [r3, #2]
 8011f20:	461a      	mov	r2, r3
 8011f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f24:	fb02 f303 	mul.w	r3, r2, r3
 8011f28:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011f30:	b29a      	uxth	r2, r3
 8011f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f34:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f38:	895b      	ldrh	r3, [r3, #10]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d008      	beq.n	8011f50 <find_volume+0x224>
 8011f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f40:	895b      	ldrh	r3, [r3, #10]
 8011f42:	461a      	mov	r2, r3
 8011f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f46:	895b      	ldrh	r3, [r3, #10]
 8011f48:	3b01      	subs	r3, #1
 8011f4a:	4013      	ands	r3, r2
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d001      	beq.n	8011f54 <find_volume+0x228>
 8011f50:	230d      	movs	r3, #13
 8011f52:	e12c      	b.n	80121ae <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f56:	3334      	adds	r3, #52	; 0x34
 8011f58:	3311      	adds	r3, #17
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7fe f8ee 	bl	801013c <ld_word>
 8011f60:	4603      	mov	r3, r0
 8011f62:	461a      	mov	r2, r3
 8011f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f66:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6a:	891b      	ldrh	r3, [r3, #8]
 8011f6c:	f003 030f 	and.w	r3, r3, #15
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d001      	beq.n	8011f7a <find_volume+0x24e>
 8011f76:	230d      	movs	r3, #13
 8011f78:	e119      	b.n	80121ae <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7c:	3334      	adds	r3, #52	; 0x34
 8011f7e:	3313      	adds	r3, #19
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7fe f8db 	bl	801013c <ld_word>
 8011f86:	4603      	mov	r3, r0
 8011f88:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d106      	bne.n	8011f9e <find_volume+0x272>
 8011f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f92:	3334      	adds	r3, #52	; 0x34
 8011f94:	3320      	adds	r3, #32
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7fe f8e8 	bl	801016c <ld_dword>
 8011f9c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa0:	3334      	adds	r3, #52	; 0x34
 8011fa2:	330e      	adds	r3, #14
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7fe f8c9 	bl	801013c <ld_word>
 8011faa:	4603      	mov	r3, r0
 8011fac:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011fae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d101      	bne.n	8011fb8 <find_volume+0x28c>
 8011fb4:	230d      	movs	r3, #13
 8011fb6:	e0fa      	b.n	80121ae <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011fb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fbc:	4413      	add	r3, r2
 8011fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fc0:	8912      	ldrh	r2, [r2, #8]
 8011fc2:	0912      	lsrs	r2, r2, #4
 8011fc4:	b292      	uxth	r2, r2
 8011fc6:	4413      	add	r3, r2
 8011fc8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d204      	bcs.n	8011fdc <find_volume+0x2b0>
 8011fd2:	230d      	movs	r3, #13
 8011fd4:	e0eb      	b.n	80121ae <find_volume+0x482>
 8011fd6:	bf00      	nop
 8011fd8:	2403134c 	.word	0x2403134c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe0:	1ad3      	subs	r3, r2, r3
 8011fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fe4:	8952      	ldrh	r2, [r2, #10]
 8011fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fea:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d101      	bne.n	8011ff6 <find_volume+0x2ca>
 8011ff2:	230d      	movs	r3, #13
 8011ff4:	e0db      	b.n	80121ae <find_volume+0x482>
		fmt = FS_FAT32;
 8011ff6:	2303      	movs	r3, #3
 8011ff8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012002:	4293      	cmp	r3, r2
 8012004:	d802      	bhi.n	801200c <find_volume+0x2e0>
 8012006:	2302      	movs	r3, #2
 8012008:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012012:	4293      	cmp	r3, r2
 8012014:	d802      	bhi.n	801201c <find_volume+0x2f0>
 8012016:	2301      	movs	r3, #1
 8012018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801201e:	1c9a      	adds	r2, r3, #2
 8012020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012022:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012026:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012028:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801202a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801202c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801202e:	441a      	add	r2, r3
 8012030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012032:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012034:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012038:	441a      	add	r2, r3
 801203a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801203c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801203e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012042:	2b03      	cmp	r3, #3
 8012044:	d11e      	bne.n	8012084 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012048:	3334      	adds	r3, #52	; 0x34
 801204a:	332a      	adds	r3, #42	; 0x2a
 801204c:	4618      	mov	r0, r3
 801204e:	f7fe f875 	bl	801013c <ld_word>
 8012052:	4603      	mov	r3, r0
 8012054:	2b00      	cmp	r3, #0
 8012056:	d001      	beq.n	801205c <find_volume+0x330>
 8012058:	230d      	movs	r3, #13
 801205a:	e0a8      	b.n	80121ae <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801205c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801205e:	891b      	ldrh	r3, [r3, #8]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d001      	beq.n	8012068 <find_volume+0x33c>
 8012064:	230d      	movs	r3, #13
 8012066:	e0a2      	b.n	80121ae <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801206a:	3334      	adds	r3, #52	; 0x34
 801206c:	332c      	adds	r3, #44	; 0x2c
 801206e:	4618      	mov	r0, r3
 8012070:	f7fe f87c 	bl	801016c <ld_dword>
 8012074:	4602      	mov	r2, r0
 8012076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012078:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801207a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207c:	699b      	ldr	r3, [r3, #24]
 801207e:	009b      	lsls	r3, r3, #2
 8012080:	647b      	str	r3, [r7, #68]	; 0x44
 8012082:	e01f      	b.n	80120c4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012086:	891b      	ldrh	r3, [r3, #8]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d101      	bne.n	8012090 <find_volume+0x364>
 801208c:	230d      	movs	r3, #13
 801208e:	e08e      	b.n	80121ae <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012096:	441a      	add	r2, r3
 8012098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801209c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120a0:	2b02      	cmp	r3, #2
 80120a2:	d103      	bne.n	80120ac <find_volume+0x380>
 80120a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a6:	699b      	ldr	r3, [r3, #24]
 80120a8:	005b      	lsls	r3, r3, #1
 80120aa:	e00a      	b.n	80120c2 <find_volume+0x396>
 80120ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ae:	699a      	ldr	r2, [r3, #24]
 80120b0:	4613      	mov	r3, r2
 80120b2:	005b      	lsls	r3, r3, #1
 80120b4:	4413      	add	r3, r2
 80120b6:	085a      	lsrs	r2, r3, #1
 80120b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ba:	699b      	ldr	r3, [r3, #24]
 80120bc:	f003 0301 	and.w	r3, r3, #1
 80120c0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80120c2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80120c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c6:	69da      	ldr	r2, [r3, #28]
 80120c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80120ce:	0a5b      	lsrs	r3, r3, #9
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d201      	bcs.n	80120d8 <find_volume+0x3ac>
 80120d4:	230d      	movs	r3, #13
 80120d6:	e06a      	b.n	80121ae <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80120d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120da:	f04f 32ff 	mov.w	r2, #4294967295
 80120de:	615a      	str	r2, [r3, #20]
 80120e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e2:	695a      	ldr	r2, [r3, #20]
 80120e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80120e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ea:	2280      	movs	r2, #128	; 0x80
 80120ec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80120ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120f2:	2b03      	cmp	r3, #3
 80120f4:	d149      	bne.n	801218a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80120f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f8:	3334      	adds	r3, #52	; 0x34
 80120fa:	3330      	adds	r3, #48	; 0x30
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7fe f81d 	bl	801013c <ld_word>
 8012102:	4603      	mov	r3, r0
 8012104:	2b01      	cmp	r3, #1
 8012106:	d140      	bne.n	801218a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801210a:	3301      	adds	r3, #1
 801210c:	4619      	mov	r1, r3
 801210e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012110:	f7fe fac4 	bl	801069c <move_window>
 8012114:	4603      	mov	r3, r0
 8012116:	2b00      	cmp	r3, #0
 8012118:	d137      	bne.n	801218a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801211c:	2200      	movs	r2, #0
 801211e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012122:	3334      	adds	r3, #52	; 0x34
 8012124:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012128:	4618      	mov	r0, r3
 801212a:	f7fe f807 	bl	801013c <ld_word>
 801212e:	4603      	mov	r3, r0
 8012130:	461a      	mov	r2, r3
 8012132:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012136:	429a      	cmp	r2, r3
 8012138:	d127      	bne.n	801218a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801213c:	3334      	adds	r3, #52	; 0x34
 801213e:	4618      	mov	r0, r3
 8012140:	f7fe f814 	bl	801016c <ld_dword>
 8012144:	4603      	mov	r3, r0
 8012146:	4a1c      	ldr	r2, [pc, #112]	; (80121b8 <find_volume+0x48c>)
 8012148:	4293      	cmp	r3, r2
 801214a:	d11e      	bne.n	801218a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801214c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801214e:	3334      	adds	r3, #52	; 0x34
 8012150:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012154:	4618      	mov	r0, r3
 8012156:	f7fe f809 	bl	801016c <ld_dword>
 801215a:	4603      	mov	r3, r0
 801215c:	4a17      	ldr	r2, [pc, #92]	; (80121bc <find_volume+0x490>)
 801215e:	4293      	cmp	r3, r2
 8012160:	d113      	bne.n	801218a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012164:	3334      	adds	r3, #52	; 0x34
 8012166:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801216a:	4618      	mov	r0, r3
 801216c:	f7fd fffe 	bl	801016c <ld_dword>
 8012170:	4602      	mov	r2, r0
 8012172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012174:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012178:	3334      	adds	r3, #52	; 0x34
 801217a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801217e:	4618      	mov	r0, r3
 8012180:	f7fd fff4 	bl	801016c <ld_dword>
 8012184:	4602      	mov	r2, r0
 8012186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012188:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801218c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012190:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012192:	4b0b      	ldr	r3, [pc, #44]	; (80121c0 <find_volume+0x494>)
 8012194:	881b      	ldrh	r3, [r3, #0]
 8012196:	3301      	adds	r3, #1
 8012198:	b29a      	uxth	r2, r3
 801219a:	4b09      	ldr	r3, [pc, #36]	; (80121c0 <find_volume+0x494>)
 801219c:	801a      	strh	r2, [r3, #0]
 801219e:	4b08      	ldr	r3, [pc, #32]	; (80121c0 <find_volume+0x494>)
 80121a0:	881a      	ldrh	r2, [r3, #0]
 80121a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80121a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80121a8:	f7fe fa10 	bl	80105cc <clear_lock>
#endif
	return FR_OK;
 80121ac:	2300      	movs	r3, #0
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3758      	adds	r7, #88	; 0x58
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}
 80121b6:	bf00      	nop
 80121b8:	41615252 	.word	0x41615252
 80121bc:	61417272 	.word	0x61417272
 80121c0:	24031350 	.word	0x24031350

080121c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b084      	sub	sp, #16
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80121ce:	2309      	movs	r3, #9
 80121d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d01c      	beq.n	8012212 <validate+0x4e>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d018      	beq.n	8012212 <validate+0x4e>
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	781b      	ldrb	r3, [r3, #0]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d013      	beq.n	8012212 <validate+0x4e>
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	889a      	ldrh	r2, [r3, #4]
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	88db      	ldrh	r3, [r3, #6]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d10c      	bne.n	8012212 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	785b      	ldrb	r3, [r3, #1]
 80121fe:	4618      	mov	r0, r3
 8012200:	f7fd fefe 	bl	8010000 <disk_status>
 8012204:	4603      	mov	r3, r0
 8012206:	f003 0301 	and.w	r3, r3, #1
 801220a:	2b00      	cmp	r3, #0
 801220c:	d101      	bne.n	8012212 <validate+0x4e>
			res = FR_OK;
 801220e:	2300      	movs	r3, #0
 8012210:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012212:	7bfb      	ldrb	r3, [r7, #15]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d102      	bne.n	801221e <validate+0x5a>
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	e000      	b.n	8012220 <validate+0x5c>
 801221e:	2300      	movs	r3, #0
 8012220:	683a      	ldr	r2, [r7, #0]
 8012222:	6013      	str	r3, [r2, #0]
	return res;
 8012224:	7bfb      	ldrb	r3, [r7, #15]
}
 8012226:	4618      	mov	r0, r3
 8012228:	3710      	adds	r7, #16
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}
	...

08012230 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b088      	sub	sp, #32
 8012234:	af00      	add	r7, sp, #0
 8012236:	60f8      	str	r0, [r7, #12]
 8012238:	60b9      	str	r1, [r7, #8]
 801223a:	4613      	mov	r3, r2
 801223c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012242:	f107 0310 	add.w	r3, r7, #16
 8012246:	4618      	mov	r0, r3
 8012248:	f7ff fcd5 	bl	8011bf6 <get_ldnumber>
 801224c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801224e:	69fb      	ldr	r3, [r7, #28]
 8012250:	2b00      	cmp	r3, #0
 8012252:	da01      	bge.n	8012258 <f_mount+0x28>
 8012254:	230b      	movs	r3, #11
 8012256:	e02b      	b.n	80122b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012258:	4a17      	ldr	r2, [pc, #92]	; (80122b8 <f_mount+0x88>)
 801225a:	69fb      	ldr	r3, [r7, #28]
 801225c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012260:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012262:	69bb      	ldr	r3, [r7, #24]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d005      	beq.n	8012274 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012268:	69b8      	ldr	r0, [r7, #24]
 801226a:	f7fe f9af 	bl	80105cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801226e:	69bb      	ldr	r3, [r7, #24]
 8012270:	2200      	movs	r2, #0
 8012272:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d002      	beq.n	8012280 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2200      	movs	r2, #0
 801227e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012280:	68fa      	ldr	r2, [r7, #12]
 8012282:	490d      	ldr	r1, [pc, #52]	; (80122b8 <f_mount+0x88>)
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d002      	beq.n	8012296 <f_mount+0x66>
 8012290:	79fb      	ldrb	r3, [r7, #7]
 8012292:	2b01      	cmp	r3, #1
 8012294:	d001      	beq.n	801229a <f_mount+0x6a>
 8012296:	2300      	movs	r3, #0
 8012298:	e00a      	b.n	80122b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801229a:	f107 010c 	add.w	r1, r7, #12
 801229e:	f107 0308 	add.w	r3, r7, #8
 80122a2:	2200      	movs	r2, #0
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7ff fd41 	bl	8011d2c <find_volume>
 80122aa:	4603      	mov	r3, r0
 80122ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80122ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3720      	adds	r7, #32
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	2403134c 	.word	0x2403134c

080122bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b09a      	sub	sp, #104	; 0x68
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	60b9      	str	r1, [r7, #8]
 80122c6:	4613      	mov	r3, r2
 80122c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d101      	bne.n	80122d4 <f_open+0x18>
 80122d0:	2309      	movs	r3, #9
 80122d2:	e1bd      	b.n	8012650 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80122d4:	79fb      	ldrb	r3, [r7, #7]
 80122d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80122da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80122dc:	79fa      	ldrb	r2, [r7, #7]
 80122de:	f107 0110 	add.w	r1, r7, #16
 80122e2:	f107 0308 	add.w	r3, r7, #8
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7ff fd20 	bl	8011d2c <find_volume>
 80122ec:	4603      	mov	r3, r0
 80122ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80122f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	f040 81a1 	bne.w	801263e <f_open+0x382>
		dj.obj.fs = fs;
 80122fc:	693b      	ldr	r3, [r7, #16]
 80122fe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8012300:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012304:	f001 fb1c 	bl	8013940 <ff_memalloc>
 8012308:	65b8      	str	r0, [r7, #88]	; 0x58
 801230a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801230c:	2b00      	cmp	r3, #0
 801230e:	d101      	bne.n	8012314 <f_open+0x58>
 8012310:	2311      	movs	r3, #17
 8012312:	e19d      	b.n	8012650 <f_open+0x394>
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012318:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801231a:	68ba      	ldr	r2, [r7, #8]
 801231c:	f107 0314 	add.w	r3, r7, #20
 8012320:	4611      	mov	r1, r2
 8012322:	4618      	mov	r0, r3
 8012324:	f7ff fbf6 	bl	8011b14 <follow_path>
 8012328:	4603      	mov	r3, r0
 801232a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801232e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012332:	2b00      	cmp	r3, #0
 8012334:	d11a      	bne.n	801236c <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012336:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801233a:	b25b      	sxtb	r3, r3
 801233c:	2b00      	cmp	r3, #0
 801233e:	da03      	bge.n	8012348 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8012340:	2306      	movs	r3, #6
 8012342:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012346:	e011      	b.n	801236c <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012348:	79fb      	ldrb	r3, [r7, #7]
 801234a:	f023 0301 	bic.w	r3, r3, #1
 801234e:	2b00      	cmp	r3, #0
 8012350:	bf14      	ite	ne
 8012352:	2301      	movne	r3, #1
 8012354:	2300      	moveq	r3, #0
 8012356:	b2db      	uxtb	r3, r3
 8012358:	461a      	mov	r2, r3
 801235a:	f107 0314 	add.w	r3, r7, #20
 801235e:	4611      	mov	r1, r2
 8012360:	4618      	mov	r0, r3
 8012362:	f7fd ffeb 	bl	801033c <chk_lock>
 8012366:	4603      	mov	r3, r0
 8012368:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801236c:	79fb      	ldrb	r3, [r7, #7]
 801236e:	f003 031c 	and.w	r3, r3, #28
 8012372:	2b00      	cmp	r3, #0
 8012374:	d07f      	beq.n	8012476 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 8012376:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801237a:	2b00      	cmp	r3, #0
 801237c:	d017      	beq.n	80123ae <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801237e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012382:	2b04      	cmp	r3, #4
 8012384:	d10e      	bne.n	80123a4 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012386:	f7fe f835 	bl	80103f4 <enq_lock>
 801238a:	4603      	mov	r3, r0
 801238c:	2b00      	cmp	r3, #0
 801238e:	d006      	beq.n	801239e <f_open+0xe2>
 8012390:	f107 0314 	add.w	r3, r7, #20
 8012394:	4618      	mov	r0, r3
 8012396:	f7ff f90d 	bl	80115b4 <dir_register>
 801239a:	4603      	mov	r3, r0
 801239c:	e000      	b.n	80123a0 <f_open+0xe4>
 801239e:	2312      	movs	r3, #18
 80123a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80123a4:	79fb      	ldrb	r3, [r7, #7]
 80123a6:	f043 0308 	orr.w	r3, r3, #8
 80123aa:	71fb      	strb	r3, [r7, #7]
 80123ac:	e010      	b.n	80123d0 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80123ae:	7ebb      	ldrb	r3, [r7, #26]
 80123b0:	f003 0311 	and.w	r3, r3, #17
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d003      	beq.n	80123c0 <f_open+0x104>
					res = FR_DENIED;
 80123b8:	2307      	movs	r3, #7
 80123ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80123be:	e007      	b.n	80123d0 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80123c0:	79fb      	ldrb	r3, [r7, #7]
 80123c2:	f003 0304 	and.w	r3, r3, #4
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d002      	beq.n	80123d0 <f_open+0x114>
 80123ca:	2308      	movs	r3, #8
 80123cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80123d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d168      	bne.n	80124aa <f_open+0x1ee>
 80123d8:	79fb      	ldrb	r3, [r7, #7]
 80123da:	f003 0308 	and.w	r3, r3, #8
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d063      	beq.n	80124aa <f_open+0x1ee>
				dw = GET_FATTIME();
 80123e2:	f7fd fbcf 	bl	800fb84 <get_fattime>
 80123e6:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80123e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123ea:	330e      	adds	r3, #14
 80123ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7fd fefa 	bl	80101e8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80123f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123f6:	3316      	adds	r3, #22
 80123f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123fa:	4618      	mov	r0, r3
 80123fc:	f7fd fef4 	bl	80101e8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012402:	330b      	adds	r3, #11
 8012404:	2220      	movs	r2, #32
 8012406:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801240c:	4611      	mov	r1, r2
 801240e:	4618      	mov	r0, r3
 8012410:	f7fe fe49 	bl	80110a6 <ld_clust>
 8012414:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801241a:	2200      	movs	r2, #0
 801241c:	4618      	mov	r0, r3
 801241e:	f7fe fe61 	bl	80110e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012424:	331c      	adds	r3, #28
 8012426:	2100      	movs	r1, #0
 8012428:	4618      	mov	r0, r3
 801242a:	f7fd fedd 	bl	80101e8 <st_dword>
					fs->wflag = 1;
 801242e:	693b      	ldr	r3, [r7, #16]
 8012430:	2201      	movs	r2, #1
 8012432:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012436:	2b00      	cmp	r3, #0
 8012438:	d037      	beq.n	80124aa <f_open+0x1ee>
						dw = fs->winsect;
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801243e:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8012440:	f107 0314 	add.w	r3, r7, #20
 8012444:	2200      	movs	r2, #0
 8012446:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012448:	4618      	mov	r0, r3
 801244a:	f7fe fb74 	bl	8010b36 <remove_chain>
 801244e:	4603      	mov	r3, r0
 8012450:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8012454:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012458:	2b00      	cmp	r3, #0
 801245a:	d126      	bne.n	80124aa <f_open+0x1ee>
							res = move_window(fs, dw);
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012460:	4618      	mov	r0, r3
 8012462:	f7fe f91b 	bl	801069c <move_window>
 8012466:	4603      	mov	r3, r0
 8012468:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012470:	3a01      	subs	r2, #1
 8012472:	611a      	str	r2, [r3, #16]
 8012474:	e019      	b.n	80124aa <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012476:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801247a:	2b00      	cmp	r3, #0
 801247c:	d115      	bne.n	80124aa <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801247e:	7ebb      	ldrb	r3, [r7, #26]
 8012480:	f003 0310 	and.w	r3, r3, #16
 8012484:	2b00      	cmp	r3, #0
 8012486:	d003      	beq.n	8012490 <f_open+0x1d4>
					res = FR_NO_FILE;
 8012488:	2304      	movs	r3, #4
 801248a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801248e:	e00c      	b.n	80124aa <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012490:	79fb      	ldrb	r3, [r7, #7]
 8012492:	f003 0302 	and.w	r3, r3, #2
 8012496:	2b00      	cmp	r3, #0
 8012498:	d007      	beq.n	80124aa <f_open+0x1ee>
 801249a:	7ebb      	ldrb	r3, [r7, #26]
 801249c:	f003 0301 	and.w	r3, r3, #1
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d002      	beq.n	80124aa <f_open+0x1ee>
						res = FR_DENIED;
 80124a4:	2307      	movs	r3, #7
 80124a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80124aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d128      	bne.n	8012504 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80124b2:	79fb      	ldrb	r3, [r7, #7]
 80124b4:	f003 0308 	and.w	r3, r3, #8
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d003      	beq.n	80124c4 <f_open+0x208>
				mode |= FA_MODIFIED;
 80124bc:	79fb      	ldrb	r3, [r7, #7]
 80124be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124c2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80124cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80124d2:	79fb      	ldrb	r3, [r7, #7]
 80124d4:	f023 0301 	bic.w	r3, r3, #1
 80124d8:	2b00      	cmp	r3, #0
 80124da:	bf14      	ite	ne
 80124dc:	2301      	movne	r3, #1
 80124de:	2300      	moveq	r3, #0
 80124e0:	b2db      	uxtb	r3, r3
 80124e2:	461a      	mov	r2, r3
 80124e4:	f107 0314 	add.w	r3, r7, #20
 80124e8:	4611      	mov	r1, r2
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7fd ffa4 	bl	8010438 <inc_lock>
 80124f0:	4602      	mov	r2, r0
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	691b      	ldr	r3, [r3, #16]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d102      	bne.n	8012504 <f_open+0x248>
 80124fe:	2302      	movs	r3, #2
 8012500:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012504:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012508:	2b00      	cmp	r3, #0
 801250a:	f040 8095 	bne.w	8012638 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012512:	4611      	mov	r1, r2
 8012514:	4618      	mov	r0, r3
 8012516:	f7fe fdc6 	bl	80110a6 <ld_clust>
 801251a:	4602      	mov	r2, r0
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012522:	331c      	adds	r3, #28
 8012524:	4618      	mov	r0, r3
 8012526:	f7fd fe21 	bl	801016c <ld_dword>
 801252a:	4602      	mov	r2, r0
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	2200      	movs	r2, #0
 8012534:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012536:	693a      	ldr	r2, [r7, #16]
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	88da      	ldrh	r2, [r3, #6]
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	79fa      	ldrb	r2, [r7, #7]
 8012548:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	2200      	movs	r2, #0
 801254e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2200      	movs	r2, #0
 8012554:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	2200      	movs	r2, #0
 801255a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	3330      	adds	r3, #48	; 0x30
 8012560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012564:	2100      	movs	r1, #0
 8012566:	4618      	mov	r0, r3
 8012568:	f7fd fe8b 	bl	8010282 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801256c:	79fb      	ldrb	r3, [r7, #7]
 801256e:	f003 0320 	and.w	r3, r3, #32
 8012572:	2b00      	cmp	r3, #0
 8012574:	d060      	beq.n	8012638 <f_open+0x37c>
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	68db      	ldr	r3, [r3, #12]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d05c      	beq.n	8012638 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	68da      	ldr	r2, [r3, #12]
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	895b      	ldrh	r3, [r3, #10]
 801258a:	025b      	lsls	r3, r3, #9
 801258c:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	689b      	ldr	r3, [r3, #8]
 8012592:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	68db      	ldr	r3, [r3, #12]
 8012598:	65fb      	str	r3, [r7, #92]	; 0x5c
 801259a:	e016      	b.n	80125ca <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7fe f936 	bl	8010812 <get_fat>
 80125a6:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80125a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125aa:	2b01      	cmp	r3, #1
 80125ac:	d802      	bhi.n	80125b4 <f_open+0x2f8>
 80125ae:	2302      	movs	r3, #2
 80125b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80125b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125ba:	d102      	bne.n	80125c2 <f_open+0x306>
 80125bc:	2301      	movs	r3, #1
 80125be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80125c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80125c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125c6:	1ad3      	subs	r3, r2, r3
 80125c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80125ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d103      	bne.n	80125da <f_open+0x31e>
 80125d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80125d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d8e0      	bhi.n	801259c <f_open+0x2e0>
				}
				fp->clust = clst;
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80125de:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80125e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d127      	bne.n	8012638 <f_open+0x37c>
 80125e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80125ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d022      	beq.n	8012638 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7fe f8ec 	bl	80107d4 <clust2sect>
 80125fc:	64b8      	str	r0, [r7, #72]	; 0x48
 80125fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012600:	2b00      	cmp	r3, #0
 8012602:	d103      	bne.n	801260c <f_open+0x350>
						res = FR_INT_ERR;
 8012604:	2302      	movs	r3, #2
 8012606:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801260a:	e015      	b.n	8012638 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801260c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801260e:	0a5a      	lsrs	r2, r3, #9
 8012610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012612:	441a      	add	r2, r3
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	7858      	ldrb	r0, [r3, #1]
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	6a1a      	ldr	r2, [r3, #32]
 8012626:	2301      	movs	r3, #1
 8012628:	f7fd fd2a 	bl	8010080 <disk_read>
 801262c:	4603      	mov	r3, r0
 801262e:	2b00      	cmp	r3, #0
 8012630:	d002      	beq.n	8012638 <f_open+0x37c>
 8012632:	2301      	movs	r3, #1
 8012634:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8012638:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801263a:	f001 f98d 	bl	8013958 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801263e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012642:	2b00      	cmp	r3, #0
 8012644:	d002      	beq.n	801264c <f_open+0x390>
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2200      	movs	r2, #0
 801264a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801264c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8012650:	4618      	mov	r0, r3
 8012652:	3768      	adds	r7, #104	; 0x68
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}

08012658 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b08c      	sub	sp, #48	; 0x30
 801265c:	af00      	add	r7, sp, #0
 801265e:	60f8      	str	r0, [r7, #12]
 8012660:	60b9      	str	r1, [r7, #8]
 8012662:	607a      	str	r2, [r7, #4]
 8012664:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	2200      	movs	r2, #0
 801266e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	f107 0210 	add.w	r2, r7, #16
 8012676:	4611      	mov	r1, r2
 8012678:	4618      	mov	r0, r3
 801267a:	f7ff fda3 	bl	80121c4 <validate>
 801267e:	4603      	mov	r3, r0
 8012680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012684:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012688:	2b00      	cmp	r3, #0
 801268a:	d107      	bne.n	801269c <f_write+0x44>
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	7d5b      	ldrb	r3, [r3, #21]
 8012690:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012698:	2b00      	cmp	r3, #0
 801269a:	d002      	beq.n	80126a2 <f_write+0x4a>
 801269c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126a0:	e14b      	b.n	801293a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	7d1b      	ldrb	r3, [r3, #20]
 80126a6:	f003 0302 	and.w	r3, r3, #2
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d101      	bne.n	80126b2 <f_write+0x5a>
 80126ae:	2307      	movs	r3, #7
 80126b0:	e143      	b.n	801293a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	699a      	ldr	r2, [r3, #24]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	441a      	add	r2, r3
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	699b      	ldr	r3, [r3, #24]
 80126be:	429a      	cmp	r2, r3
 80126c0:	f080 812d 	bcs.w	801291e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	699b      	ldr	r3, [r3, #24]
 80126c8:	43db      	mvns	r3, r3
 80126ca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80126cc:	e127      	b.n	801291e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	699b      	ldr	r3, [r3, #24]
 80126d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	f040 80e3 	bne.w	80128a2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	699b      	ldr	r3, [r3, #24]
 80126e0:	0a5b      	lsrs	r3, r3, #9
 80126e2:	693a      	ldr	r2, [r7, #16]
 80126e4:	8952      	ldrh	r2, [r2, #10]
 80126e6:	3a01      	subs	r2, #1
 80126e8:	4013      	ands	r3, r2
 80126ea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d143      	bne.n	801277a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	699b      	ldr	r3, [r3, #24]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d10c      	bne.n	8012714 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	689b      	ldr	r3, [r3, #8]
 80126fe:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012702:	2b00      	cmp	r3, #0
 8012704:	d11a      	bne.n	801273c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	2100      	movs	r1, #0
 801270a:	4618      	mov	r0, r3
 801270c:	f7fe fa78 	bl	8010c00 <create_chain>
 8012710:	62b8      	str	r0, [r7, #40]	; 0x28
 8012712:	e013      	b.n	801273c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012718:	2b00      	cmp	r3, #0
 801271a:	d007      	beq.n	801272c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	699b      	ldr	r3, [r3, #24]
 8012720:	4619      	mov	r1, r3
 8012722:	68f8      	ldr	r0, [r7, #12]
 8012724:	f7fe fb04 	bl	8010d30 <clmt_clust>
 8012728:	62b8      	str	r0, [r7, #40]	; 0x28
 801272a:	e007      	b.n	801273c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801272c:	68fa      	ldr	r2, [r7, #12]
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	69db      	ldr	r3, [r3, #28]
 8012732:	4619      	mov	r1, r3
 8012734:	4610      	mov	r0, r2
 8012736:	f7fe fa63 	bl	8010c00 <create_chain>
 801273a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801273e:	2b00      	cmp	r3, #0
 8012740:	f000 80f2 	beq.w	8012928 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012746:	2b01      	cmp	r3, #1
 8012748:	d104      	bne.n	8012754 <f_write+0xfc>
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	2202      	movs	r2, #2
 801274e:	755a      	strb	r2, [r3, #21]
 8012750:	2302      	movs	r3, #2
 8012752:	e0f2      	b.n	801293a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801275a:	d104      	bne.n	8012766 <f_write+0x10e>
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	2201      	movs	r2, #1
 8012760:	755a      	strb	r2, [r3, #21]
 8012762:	2301      	movs	r3, #1
 8012764:	e0e9      	b.n	801293a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801276a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	689b      	ldr	r3, [r3, #8]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d102      	bne.n	801277a <f_write+0x122>
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012778:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	7d1b      	ldrb	r3, [r3, #20]
 801277e:	b25b      	sxtb	r3, r3
 8012780:	2b00      	cmp	r3, #0
 8012782:	da18      	bge.n	80127b6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	7858      	ldrb	r0, [r3, #1]
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	6a1a      	ldr	r2, [r3, #32]
 8012792:	2301      	movs	r3, #1
 8012794:	f7fd fc94 	bl	80100c0 <disk_write>
 8012798:	4603      	mov	r3, r0
 801279a:	2b00      	cmp	r3, #0
 801279c:	d004      	beq.n	80127a8 <f_write+0x150>
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	2201      	movs	r2, #1
 80127a2:	755a      	strb	r2, [r3, #21]
 80127a4:	2301      	movs	r3, #1
 80127a6:	e0c8      	b.n	801293a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	7d1b      	ldrb	r3, [r3, #20]
 80127ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127b0:	b2da      	uxtb	r2, r3
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80127b6:	693a      	ldr	r2, [r7, #16]
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	69db      	ldr	r3, [r3, #28]
 80127bc:	4619      	mov	r1, r3
 80127be:	4610      	mov	r0, r2
 80127c0:	f7fe f808 	bl	80107d4 <clust2sect>
 80127c4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d104      	bne.n	80127d6 <f_write+0x17e>
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	2202      	movs	r2, #2
 80127d0:	755a      	strb	r2, [r3, #21]
 80127d2:	2302      	movs	r3, #2
 80127d4:	e0b1      	b.n	801293a <f_write+0x2e2>
			sect += csect;
 80127d6:	697a      	ldr	r2, [r7, #20]
 80127d8:	69bb      	ldr	r3, [r7, #24]
 80127da:	4413      	add	r3, r2
 80127dc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	0a5b      	lsrs	r3, r3, #9
 80127e2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80127e4:	6a3b      	ldr	r3, [r7, #32]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d03c      	beq.n	8012864 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80127ea:	69ba      	ldr	r2, [r7, #24]
 80127ec:	6a3b      	ldr	r3, [r7, #32]
 80127ee:	4413      	add	r3, r2
 80127f0:	693a      	ldr	r2, [r7, #16]
 80127f2:	8952      	ldrh	r2, [r2, #10]
 80127f4:	4293      	cmp	r3, r2
 80127f6:	d905      	bls.n	8012804 <f_write+0x1ac>
					cc = fs->csize - csect;
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	895b      	ldrh	r3, [r3, #10]
 80127fc:	461a      	mov	r2, r3
 80127fe:	69bb      	ldr	r3, [r7, #24]
 8012800:	1ad3      	subs	r3, r2, r3
 8012802:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	7858      	ldrb	r0, [r3, #1]
 8012808:	6a3b      	ldr	r3, [r7, #32]
 801280a:	697a      	ldr	r2, [r7, #20]
 801280c:	69f9      	ldr	r1, [r7, #28]
 801280e:	f7fd fc57 	bl	80100c0 <disk_write>
 8012812:	4603      	mov	r3, r0
 8012814:	2b00      	cmp	r3, #0
 8012816:	d004      	beq.n	8012822 <f_write+0x1ca>
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	2201      	movs	r2, #1
 801281c:	755a      	strb	r2, [r3, #21]
 801281e:	2301      	movs	r3, #1
 8012820:	e08b      	b.n	801293a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	6a1a      	ldr	r2, [r3, #32]
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	1ad3      	subs	r3, r2, r3
 801282a:	6a3a      	ldr	r2, [r7, #32]
 801282c:	429a      	cmp	r2, r3
 801282e:	d915      	bls.n	801285c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	6a1a      	ldr	r2, [r3, #32]
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	1ad3      	subs	r3, r2, r3
 801283e:	025b      	lsls	r3, r3, #9
 8012840:	69fa      	ldr	r2, [r7, #28]
 8012842:	4413      	add	r3, r2
 8012844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012848:	4619      	mov	r1, r3
 801284a:	f7fd fcf9 	bl	8010240 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	7d1b      	ldrb	r3, [r3, #20]
 8012852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012856:	b2da      	uxtb	r2, r3
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801285c:	6a3b      	ldr	r3, [r7, #32]
 801285e:	025b      	lsls	r3, r3, #9
 8012860:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012862:	e03f      	b.n	80128e4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	6a1b      	ldr	r3, [r3, #32]
 8012868:	697a      	ldr	r2, [r7, #20]
 801286a:	429a      	cmp	r2, r3
 801286c:	d016      	beq.n	801289c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	699a      	ldr	r2, [r3, #24]
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012876:	429a      	cmp	r2, r3
 8012878:	d210      	bcs.n	801289c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801287a:	693b      	ldr	r3, [r7, #16]
 801287c:	7858      	ldrb	r0, [r3, #1]
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012884:	2301      	movs	r3, #1
 8012886:	697a      	ldr	r2, [r7, #20]
 8012888:	f7fd fbfa 	bl	8010080 <disk_read>
 801288c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801288e:	2b00      	cmp	r3, #0
 8012890:	d004      	beq.n	801289c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	2201      	movs	r2, #1
 8012896:	755a      	strb	r2, [r3, #21]
 8012898:	2301      	movs	r3, #1
 801289a:	e04e      	b.n	801293a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	697a      	ldr	r2, [r7, #20]
 80128a0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	699b      	ldr	r3, [r3, #24]
 80128a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80128ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80128b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d901      	bls.n	80128bc <f_write+0x264>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	699b      	ldr	r3, [r3, #24]
 80128c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128ca:	4413      	add	r3, r2
 80128cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128ce:	69f9      	ldr	r1, [r7, #28]
 80128d0:	4618      	mov	r0, r3
 80128d2:	f7fd fcb5 	bl	8010240 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	7d1b      	ldrb	r3, [r3, #20]
 80128da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80128de:	b2da      	uxtb	r2, r3
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80128e4:	69fa      	ldr	r2, [r7, #28]
 80128e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128e8:	4413      	add	r3, r2
 80128ea:	61fb      	str	r3, [r7, #28]
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	699a      	ldr	r2, [r3, #24]
 80128f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f2:	441a      	add	r2, r3
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	619a      	str	r2, [r3, #24]
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	68da      	ldr	r2, [r3, #12]
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	699b      	ldr	r3, [r3, #24]
 8012900:	429a      	cmp	r2, r3
 8012902:	bf38      	it	cc
 8012904:	461a      	movcc	r2, r3
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	60da      	str	r2, [r3, #12]
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	681a      	ldr	r2, [r3, #0]
 801290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012910:	441a      	add	r2, r3
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	601a      	str	r2, [r3, #0]
 8012916:	687a      	ldr	r2, [r7, #4]
 8012918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291a:	1ad3      	subs	r3, r2, r3
 801291c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2b00      	cmp	r3, #0
 8012922:	f47f aed4 	bne.w	80126ce <f_write+0x76>
 8012926:	e000      	b.n	801292a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012928:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	7d1b      	ldrb	r3, [r3, #20]
 801292e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012932:	b2da      	uxtb	r2, r3
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012938:	2300      	movs	r3, #0
}
 801293a:	4618      	mov	r0, r3
 801293c:	3730      	adds	r7, #48	; 0x30
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}

08012942 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012942:	b580      	push	{r7, lr}
 8012944:	b086      	sub	sp, #24
 8012946:	af00      	add	r7, sp, #0
 8012948:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f107 0208 	add.w	r2, r7, #8
 8012950:	4611      	mov	r1, r2
 8012952:	4618      	mov	r0, r3
 8012954:	f7ff fc36 	bl	80121c4 <validate>
 8012958:	4603      	mov	r3, r0
 801295a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801295c:	7dfb      	ldrb	r3, [r7, #23]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d168      	bne.n	8012a34 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	7d1b      	ldrb	r3, [r3, #20]
 8012966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801296a:	2b00      	cmp	r3, #0
 801296c:	d062      	beq.n	8012a34 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	7d1b      	ldrb	r3, [r3, #20]
 8012972:	b25b      	sxtb	r3, r3
 8012974:	2b00      	cmp	r3, #0
 8012976:	da15      	bge.n	80129a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	7858      	ldrb	r0, [r3, #1]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6a1a      	ldr	r2, [r3, #32]
 8012986:	2301      	movs	r3, #1
 8012988:	f7fd fb9a 	bl	80100c0 <disk_write>
 801298c:	4603      	mov	r3, r0
 801298e:	2b00      	cmp	r3, #0
 8012990:	d001      	beq.n	8012996 <f_sync+0x54>
 8012992:	2301      	movs	r3, #1
 8012994:	e04f      	b.n	8012a36 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	7d1b      	ldrb	r3, [r3, #20]
 801299a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801299e:	b2da      	uxtb	r2, r3
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80129a4:	f7fd f8ee 	bl	800fb84 <get_fattime>
 80129a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80129aa:	68ba      	ldr	r2, [r7, #8]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129b0:	4619      	mov	r1, r3
 80129b2:	4610      	mov	r0, r2
 80129b4:	f7fd fe72 	bl	801069c <move_window>
 80129b8:	4603      	mov	r3, r0
 80129ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80129bc:	7dfb      	ldrb	r3, [r7, #23]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d138      	bne.n	8012a34 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	330b      	adds	r3, #11
 80129cc:	781a      	ldrb	r2, [r3, #0]
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	330b      	adds	r3, #11
 80129d2:	f042 0220 	orr.w	r2, r2, #32
 80129d6:	b2d2      	uxtb	r2, r2
 80129d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6818      	ldr	r0, [r3, #0]
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	689b      	ldr	r3, [r3, #8]
 80129e2:	461a      	mov	r2, r3
 80129e4:	68f9      	ldr	r1, [r7, #12]
 80129e6:	f7fe fb7d 	bl	80110e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	f103 021c 	add.w	r2, r3, #28
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	68db      	ldr	r3, [r3, #12]
 80129f4:	4619      	mov	r1, r3
 80129f6:	4610      	mov	r0, r2
 80129f8:	f7fd fbf6 	bl	80101e8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	3316      	adds	r3, #22
 8012a00:	6939      	ldr	r1, [r7, #16]
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7fd fbf0 	bl	80101e8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	3312      	adds	r3, #18
 8012a0c:	2100      	movs	r1, #0
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7fd fbcf 	bl	80101b2 <st_word>
					fs->wflag = 1;
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	2201      	movs	r2, #1
 8012a18:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7fd fe6b 	bl	80106f8 <sync_fs>
 8012a22:	4603      	mov	r3, r0
 8012a24:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	7d1b      	ldrb	r3, [r3, #20]
 8012a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012a2e:	b2da      	uxtb	r2, r3
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3718      	adds	r7, #24
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}

08012a3e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012a3e:	b580      	push	{r7, lr}
 8012a40:	b084      	sub	sp, #16
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f7ff ff7b 	bl	8012942 <f_sync>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012a50:	7bfb      	ldrb	r3, [r7, #15]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d118      	bne.n	8012a88 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f107 0208 	add.w	r2, r7, #8
 8012a5c:	4611      	mov	r1, r2
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7ff fbb0 	bl	80121c4 <validate>
 8012a64:	4603      	mov	r3, r0
 8012a66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012a68:	7bfb      	ldrb	r3, [r7, #15]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d10c      	bne.n	8012a88 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	691b      	ldr	r3, [r3, #16]
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7fd fd6e 	bl	8010554 <dec_lock>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012a7c:	7bfb      	ldrb	r3, [r7, #15]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d102      	bne.n	8012a88 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	2200      	movs	r2, #0
 8012a86:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	3710      	adds	r7, #16
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}

08012a92 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012a92:	b580      	push	{r7, lr}
 8012a94:	b090      	sub	sp, #64	; 0x40
 8012a96:	af00      	add	r7, sp, #0
 8012a98:	6078      	str	r0, [r7, #4]
 8012a9a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f107 0208 	add.w	r2, r7, #8
 8012aa2:	4611      	mov	r1, r2
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f7ff fb8d 	bl	80121c4 <validate>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012ab0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d103      	bne.n	8012ac0 <f_lseek+0x2e>
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	7d5b      	ldrb	r3, [r3, #21]
 8012abc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012ac0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d002      	beq.n	8012ace <f_lseek+0x3c>
 8012ac8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012acc:	e1e6      	b.n	8012e9c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	f000 80d1 	beq.w	8012c7a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ade:	d15a      	bne.n	8012b96 <f_lseek+0x104>
			tbl = fp->cltbl;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ae4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae8:	1d1a      	adds	r2, r3, #4
 8012aea:	627a      	str	r2, [r7, #36]	; 0x24
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	617b      	str	r3, [r7, #20]
 8012af0:	2302      	movs	r3, #2
 8012af2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	689b      	ldr	r3, [r3, #8]
 8012af8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d03a      	beq.n	8012b76 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b02:	613b      	str	r3, [r7, #16]
 8012b04:	2300      	movs	r3, #0
 8012b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b0a:	3302      	adds	r3, #2
 8012b0c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8012b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b10:	60fb      	str	r3, [r7, #12]
 8012b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b14:	3301      	adds	r3, #1
 8012b16:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f7fd fe78 	bl	8010812 <get_fat>
 8012b22:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b26:	2b01      	cmp	r3, #1
 8012b28:	d804      	bhi.n	8012b34 <f_lseek+0xa2>
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2202      	movs	r2, #2
 8012b2e:	755a      	strb	r2, [r3, #21]
 8012b30:	2302      	movs	r3, #2
 8012b32:	e1b3      	b.n	8012e9c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b3a:	d104      	bne.n	8012b46 <f_lseek+0xb4>
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2201      	movs	r2, #1
 8012b40:	755a      	strb	r2, [r3, #21]
 8012b42:	2301      	movs	r3, #1
 8012b44:	e1aa      	b.n	8012e9c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d0de      	beq.n	8012b0e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d809      	bhi.n	8012b6c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b5a:	1d1a      	adds	r2, r3, #4
 8012b5c:	627a      	str	r2, [r7, #36]	; 0x24
 8012b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b60:	601a      	str	r2, [r3, #0]
 8012b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b64:	1d1a      	adds	r2, r3, #4
 8012b66:	627a      	str	r2, [r7, #36]	; 0x24
 8012b68:	693a      	ldr	r2, [r7, #16]
 8012b6a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012b6c:	68bb      	ldr	r3, [r7, #8]
 8012b6e:	699b      	ldr	r3, [r3, #24]
 8012b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d3c4      	bcc.n	8012b00 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b7c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d803      	bhi.n	8012b8e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b88:	2200      	movs	r2, #0
 8012b8a:	601a      	str	r2, [r3, #0]
 8012b8c:	e184      	b.n	8012e98 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012b8e:	2311      	movs	r3, #17
 8012b90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012b94:	e180      	b.n	8012e98 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	68db      	ldr	r3, [r3, #12]
 8012b9a:	683a      	ldr	r2, [r7, #0]
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	d902      	bls.n	8012ba6 <f_lseek+0x114>
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	68db      	ldr	r3, [r3, #12]
 8012ba4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	683a      	ldr	r2, [r7, #0]
 8012baa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	f000 8172 	beq.w	8012e98 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	3b01      	subs	r3, #1
 8012bb8:	4619      	mov	r1, r3
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f7fe f8b8 	bl	8010d30 <clmt_clust>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012bc6:	68ba      	ldr	r2, [r7, #8]
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	69db      	ldr	r3, [r3, #28]
 8012bcc:	4619      	mov	r1, r3
 8012bce:	4610      	mov	r0, r2
 8012bd0:	f7fd fe00 	bl	80107d4 <clust2sect>
 8012bd4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012bd6:	69bb      	ldr	r3, [r7, #24]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d104      	bne.n	8012be6 <f_lseek+0x154>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2202      	movs	r2, #2
 8012be0:	755a      	strb	r2, [r3, #21]
 8012be2:	2302      	movs	r3, #2
 8012be4:	e15a      	b.n	8012e9c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	3b01      	subs	r3, #1
 8012bea:	0a5b      	lsrs	r3, r3, #9
 8012bec:	68ba      	ldr	r2, [r7, #8]
 8012bee:	8952      	ldrh	r2, [r2, #10]
 8012bf0:	3a01      	subs	r2, #1
 8012bf2:	4013      	ands	r3, r2
 8012bf4:	69ba      	ldr	r2, [r7, #24]
 8012bf6:	4413      	add	r3, r2
 8012bf8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	699b      	ldr	r3, [r3, #24]
 8012bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	f000 8148 	beq.w	8012e98 <f_lseek+0x406>
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6a1b      	ldr	r3, [r3, #32]
 8012c0c:	69ba      	ldr	r2, [r7, #24]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	f000 8142 	beq.w	8012e98 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	7d1b      	ldrb	r3, [r3, #20]
 8012c18:	b25b      	sxtb	r3, r3
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	da18      	bge.n	8012c50 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	7858      	ldrb	r0, [r3, #1]
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6a1a      	ldr	r2, [r3, #32]
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	f7fd fa47 	bl	80100c0 <disk_write>
 8012c32:	4603      	mov	r3, r0
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d004      	beq.n	8012c42 <f_lseek+0x1b0>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2201      	movs	r2, #1
 8012c3c:	755a      	strb	r2, [r3, #21]
 8012c3e:	2301      	movs	r3, #1
 8012c40:	e12c      	b.n	8012e9c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	7d1b      	ldrb	r3, [r3, #20]
 8012c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c4a:	b2da      	uxtb	r2, r3
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012c50:	68bb      	ldr	r3, [r7, #8]
 8012c52:	7858      	ldrb	r0, [r3, #1]
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	69ba      	ldr	r2, [r7, #24]
 8012c5e:	f7fd fa0f 	bl	8010080 <disk_read>
 8012c62:	4603      	mov	r3, r0
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d004      	beq.n	8012c72 <f_lseek+0x1e0>
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2201      	movs	r2, #1
 8012c6c:	755a      	strb	r2, [r3, #21]
 8012c6e:	2301      	movs	r3, #1
 8012c70:	e114      	b.n	8012e9c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	69ba      	ldr	r2, [r7, #24]
 8012c76:	621a      	str	r2, [r3, #32]
 8012c78:	e10e      	b.n	8012e98 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	68db      	ldr	r3, [r3, #12]
 8012c7e:	683a      	ldr	r2, [r7, #0]
 8012c80:	429a      	cmp	r2, r3
 8012c82:	d908      	bls.n	8012c96 <f_lseek+0x204>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	7d1b      	ldrb	r3, [r3, #20]
 8012c88:	f003 0302 	and.w	r3, r3, #2
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d102      	bne.n	8012c96 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	699b      	ldr	r3, [r3, #24]
 8012c9a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ca4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	f000 80a7 	beq.w	8012dfc <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	895b      	ldrh	r3, [r3, #10]
 8012cb2:	025b      	lsls	r3, r3, #9
 8012cb4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012cb6:	6a3b      	ldr	r3, [r7, #32]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d01b      	beq.n	8012cf4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	1e5a      	subs	r2, r3, #1
 8012cc0:	69fb      	ldr	r3, [r7, #28]
 8012cc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8012cc6:	6a3b      	ldr	r3, [r7, #32]
 8012cc8:	1e59      	subs	r1, r3, #1
 8012cca:	69fb      	ldr	r3, [r7, #28]
 8012ccc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d30f      	bcc.n	8012cf4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012cd4:	6a3b      	ldr	r3, [r7, #32]
 8012cd6:	1e5a      	subs	r2, r3, #1
 8012cd8:	69fb      	ldr	r3, [r7, #28]
 8012cda:	425b      	negs	r3, r3
 8012cdc:	401a      	ands	r2, r3
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	699b      	ldr	r3, [r3, #24]
 8012ce6:	683a      	ldr	r2, [r7, #0]
 8012ce8:	1ad3      	subs	r3, r2, r3
 8012cea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	69db      	ldr	r3, [r3, #28]
 8012cf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8012cf2:	e022      	b.n	8012d3a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	689b      	ldr	r3, [r3, #8]
 8012cf8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d119      	bne.n	8012d34 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2100      	movs	r1, #0
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7fd ff7b 	bl	8010c00 <create_chain>
 8012d0a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d0e:	2b01      	cmp	r3, #1
 8012d10:	d104      	bne.n	8012d1c <f_lseek+0x28a>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2202      	movs	r2, #2
 8012d16:	755a      	strb	r2, [r3, #21]
 8012d18:	2302      	movs	r3, #2
 8012d1a:	e0bf      	b.n	8012e9c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d22:	d104      	bne.n	8012d2e <f_lseek+0x29c>
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2201      	movs	r2, #1
 8012d28:	755a      	strb	r2, [r3, #21]
 8012d2a:	2301      	movs	r3, #1
 8012d2c:	e0b6      	b.n	8012e9c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d32:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d38:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d05d      	beq.n	8012dfc <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8012d40:	e03a      	b.n	8012db8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8012d42:	683a      	ldr	r2, [r7, #0]
 8012d44:	69fb      	ldr	r3, [r7, #28]
 8012d46:	1ad3      	subs	r3, r2, r3
 8012d48:	603b      	str	r3, [r7, #0]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	699a      	ldr	r2, [r3, #24]
 8012d4e:	69fb      	ldr	r3, [r7, #28]
 8012d50:	441a      	add	r2, r3
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	7d1b      	ldrb	r3, [r3, #20]
 8012d5a:	f003 0302 	and.w	r3, r3, #2
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d00b      	beq.n	8012d7a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7fd ff4a 	bl	8010c00 <create_chain>
 8012d6c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d108      	bne.n	8012d86 <f_lseek+0x2f4>
							ofs = 0; break;
 8012d74:	2300      	movs	r3, #0
 8012d76:	603b      	str	r3, [r7, #0]
 8012d78:	e022      	b.n	8012dc0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7fd fd47 	bl	8010812 <get_fat>
 8012d84:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d8c:	d104      	bne.n	8012d98 <f_lseek+0x306>
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	2201      	movs	r2, #1
 8012d92:	755a      	strb	r2, [r3, #21]
 8012d94:	2301      	movs	r3, #1
 8012d96:	e081      	b.n	8012e9c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d9a:	2b01      	cmp	r3, #1
 8012d9c:	d904      	bls.n	8012da8 <f_lseek+0x316>
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	699b      	ldr	r3, [r3, #24]
 8012da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012da4:	429a      	cmp	r2, r3
 8012da6:	d304      	bcc.n	8012db2 <f_lseek+0x320>
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2202      	movs	r2, #2
 8012dac:	755a      	strb	r2, [r3, #21]
 8012dae:	2302      	movs	r3, #2
 8012db0:	e074      	b.n	8012e9c <f_lseek+0x40a>
					fp->clust = clst;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012db6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012db8:	683a      	ldr	r2, [r7, #0]
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	d8c0      	bhi.n	8012d42 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	699a      	ldr	r2, [r3, #24]
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	441a      	add	r2, r3
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d012      	beq.n	8012dfc <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f7fd fcfa 	bl	80107d4 <clust2sect>
 8012de0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d104      	bne.n	8012df2 <f_lseek+0x360>
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2202      	movs	r2, #2
 8012dec:	755a      	strb	r2, [r3, #21]
 8012dee:	2302      	movs	r3, #2
 8012df0:	e054      	b.n	8012e9c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	0a5b      	lsrs	r3, r3, #9
 8012df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012df8:	4413      	add	r3, r2
 8012dfa:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	699a      	ldr	r2, [r3, #24]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	68db      	ldr	r3, [r3, #12]
 8012e04:	429a      	cmp	r2, r3
 8012e06:	d90a      	bls.n	8012e1e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	699a      	ldr	r2, [r3, #24]
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	7d1b      	ldrb	r3, [r3, #20]
 8012e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e18:	b2da      	uxtb	r2, r3
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	699b      	ldr	r3, [r3, #24]
 8012e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d036      	beq.n	8012e98 <f_lseek+0x406>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	6a1b      	ldr	r3, [r3, #32]
 8012e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d031      	beq.n	8012e98 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	7d1b      	ldrb	r3, [r3, #20]
 8012e38:	b25b      	sxtb	r3, r3
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	da18      	bge.n	8012e70 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	7858      	ldrb	r0, [r3, #1]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6a1a      	ldr	r2, [r3, #32]
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	f7fd f937 	bl	80100c0 <disk_write>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d004      	beq.n	8012e62 <f_lseek+0x3d0>
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2201      	movs	r2, #1
 8012e5c:	755a      	strb	r2, [r3, #21]
 8012e5e:	2301      	movs	r3, #1
 8012e60:	e01c      	b.n	8012e9c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	7d1b      	ldrb	r3, [r3, #20]
 8012e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e6a:	b2da      	uxtb	r2, r3
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	7858      	ldrb	r0, [r3, #1]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e7e:	f7fd f8ff 	bl	8010080 <disk_read>
 8012e82:	4603      	mov	r3, r0
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d004      	beq.n	8012e92 <f_lseek+0x400>
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2201      	movs	r2, #1
 8012e8c:	755a      	strb	r2, [r3, #21]
 8012e8e:	2301      	movs	r3, #1
 8012e90:	e004      	b.n	8012e9c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e96:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012e98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3740      	adds	r7, #64	; 0x40
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8012ea4:	b590      	push	{r4, r7, lr}
 8012ea6:	b09d      	sub	sp, #116	; 0x74
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	60f8      	str	r0, [r7, #12]
 8012eac:	607a      	str	r2, [r7, #4]
 8012eae:	603b      	str	r3, [r7, #0]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8012eb4:	2301      	movs	r3, #1
 8012eb6:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8012eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ebc:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8012ebe:	f107 030c 	add.w	r3, r7, #12
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7fe fe97 	bl	8011bf6 <get_ldnumber>
 8012ec8:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	da02      	bge.n	8012ed6 <f_mkfs+0x32>
 8012ed0:	230b      	movs	r3, #11
 8012ed2:	f000 bc0d 	b.w	80136f0 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8012ed6:	4a94      	ldr	r2, [pc, #592]	; (8013128 <f_mkfs+0x284>)
 8012ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d005      	beq.n	8012eee <f_mkfs+0x4a>
 8012ee2:	4a91      	ldr	r2, [pc, #580]	; (8013128 <f_mkfs+0x284>)
 8012ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012eea:	2200      	movs	r2, #0
 8012eec:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8012eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ef0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8012efa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7fd f898 	bl	8010034 <disk_initialize>
 8012f04:	4603      	mov	r3, r0
 8012f06:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8012f0a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8012f0e:	f003 0301 	and.w	r3, r3, #1
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d001      	beq.n	8012f1a <f_mkfs+0x76>
 8012f16:	2303      	movs	r3, #3
 8012f18:	e3ea      	b.n	80136f0 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8012f1a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8012f1e:	f003 0304 	and.w	r3, r3, #4
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d001      	beq.n	8012f2a <f_mkfs+0x86>
 8012f26:	230a      	movs	r3, #10
 8012f28:	e3e2      	b.n	80136f0 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8012f2a:	f107 0214 	add.w	r2, r7, #20
 8012f2e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012f32:	2103      	movs	r1, #3
 8012f34:	4618      	mov	r0, r3
 8012f36:	f7fd f8e3 	bl	8010100 <disk_ioctl>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d10c      	bne.n	8012f5a <f_mkfs+0xb6>
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d009      	beq.n	8012f5a <f_mkfs+0xb6>
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012f4c:	d805      	bhi.n	8012f5a <f_mkfs+0xb6>
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	1e5a      	subs	r2, r3, #1
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	4013      	ands	r3, r2
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d001      	beq.n	8012f5e <f_mkfs+0xba>
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8012f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f62:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d003      	beq.n	8012f72 <f_mkfs+0xce>
 8012f6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012f6c:	687a      	ldr	r2, [r7, #4]
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	d309      	bcc.n	8012f86 <f_mkfs+0xe2>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012f78:	d805      	bhi.n	8012f86 <f_mkfs+0xe2>
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	1e5a      	subs	r2, r3, #1
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	4013      	ands	r3, r2
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d001      	beq.n	8012f8a <f_mkfs+0xe6>
 8012f86:	2313      	movs	r3, #19
 8012f88:	e3b2      	b.n	80136f0 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8012f8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012f8c:	687a      	ldr	r2, [r7, #4]
 8012f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f92:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8012f98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012f9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8012fa4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa8:	fb02 f303 	mul.w	r3, r2, r3
 8012fac:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8012fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d101      	bne.n	8012fb8 <f_mkfs+0x114>
 8012fb4:	230e      	movs	r3, #14
 8012fb6:	e39b      	b.n	80136f0 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8012fb8:	f107 0210 	add.w	r2, r7, #16
 8012fbc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012fc0:	2101      	movs	r1, #1
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f7fd f89c 	bl	8010100 <disk_ioctl>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d001      	beq.n	8012fd2 <f_mkfs+0x12e>
 8012fce:	2301      	movs	r3, #1
 8012fd0:	e38e      	b.n	80136f0 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8012fd2:	7afb      	ldrb	r3, [r7, #11]
 8012fd4:	f003 0308 	and.w	r3, r3, #8
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d001      	beq.n	8012fe0 <f_mkfs+0x13c>
 8012fdc:	2300      	movs	r3, #0
 8012fde:	e000      	b.n	8012fe2 <f_mkfs+0x13e>
 8012fe0:	233f      	movs	r3, #63	; 0x3f
 8012fe2:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8012fe4:	693b      	ldr	r3, [r7, #16]
 8012fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d901      	bls.n	8012ff0 <f_mkfs+0x14c>
 8012fec:	230e      	movs	r3, #14
 8012fee:	e37f      	b.n	80136f0 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8012ff0:	693a      	ldr	r2, [r7, #16]
 8012ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff4:	1ad3      	subs	r3, r2, r3
 8012ff6:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8012ff8:	693b      	ldr	r3, [r7, #16]
 8012ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8012ffc:	d801      	bhi.n	8013002 <f_mkfs+0x15e>
 8012ffe:	230e      	movs	r3, #14
 8013000:	e376      	b.n	80136f0 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2b80      	cmp	r3, #128	; 0x80
 8013006:	d901      	bls.n	801300c <f_mkfs+0x168>
 8013008:	2313      	movs	r3, #19
 801300a:	e371      	b.n	80136f0 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 801300c:	7afb      	ldrb	r3, [r7, #11]
 801300e:	f003 0302 	and.w	r3, r3, #2
 8013012:	2b00      	cmp	r3, #0
 8013014:	d00d      	beq.n	8013032 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8013016:	7afb      	ldrb	r3, [r7, #11]
 8013018:	f003 0307 	and.w	r3, r3, #7
 801301c:	2b02      	cmp	r3, #2
 801301e:	d004      	beq.n	801302a <f_mkfs+0x186>
 8013020:	7afb      	ldrb	r3, [r7, #11]
 8013022:	f003 0301 	and.w	r3, r3, #1
 8013026:	2b00      	cmp	r3, #0
 8013028:	d103      	bne.n	8013032 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 801302a:	2303      	movs	r3, #3
 801302c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8013030:	e009      	b.n	8013046 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8013032:	7afb      	ldrb	r3, [r7, #11]
 8013034:	f003 0301 	and.w	r3, r3, #1
 8013038:	2b00      	cmp	r3, #0
 801303a:	d101      	bne.n	8013040 <f_mkfs+0x19c>
 801303c:	2313      	movs	r3, #19
 801303e:	e357      	b.n	80136f0 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8013040:	2302      	movs	r3, #2
 8013042:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 801304a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801304e:	2b03      	cmp	r3, #3
 8013050:	d13c      	bne.n	80130cc <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8013052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013054:	2b00      	cmp	r3, #0
 8013056:	d11b      	bne.n	8013090 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8013058:	693b      	ldr	r3, [r7, #16]
 801305a:	0c5b      	lsrs	r3, r3, #17
 801305c:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801305e:	2300      	movs	r3, #0
 8013060:	64bb      	str	r3, [r7, #72]	; 0x48
 8013062:	2301      	movs	r3, #1
 8013064:	653b      	str	r3, [r7, #80]	; 0x50
 8013066:	e005      	b.n	8013074 <f_mkfs+0x1d0>
 8013068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801306a:	3301      	adds	r3, #1
 801306c:	64bb      	str	r3, [r7, #72]	; 0x48
 801306e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013070:	005b      	lsls	r3, r3, #1
 8013072:	653b      	str	r3, [r7, #80]	; 0x50
 8013074:	4a2d      	ldr	r2, [pc, #180]	; (801312c <f_mkfs+0x288>)
 8013076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d007      	beq.n	8013090 <f_mkfs+0x1ec>
 8013080:	4a2a      	ldr	r2, [pc, #168]	; (801312c <f_mkfs+0x288>)
 8013082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013088:	461a      	mov	r2, r3
 801308a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801308c:	4293      	cmp	r3, r2
 801308e:	d2eb      	bcs.n	8013068 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8013090:	693a      	ldr	r2, [r7, #16]
 8013092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013094:	fbb2 f3f3 	udiv	r3, r2, r3
 8013098:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801309a:	6a3b      	ldr	r3, [r7, #32]
 801309c:	3302      	adds	r3, #2
 801309e:	009a      	lsls	r2, r3, #2
 80130a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80130a2:	4413      	add	r3, r2
 80130a4:	1e5a      	subs	r2, r3, #1
 80130a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80130a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80130ac:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80130ae:	2320      	movs	r3, #32
 80130b0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80130b2:	2300      	movs	r3, #0
 80130b4:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80130b6:	6a3b      	ldr	r3, [r7, #32]
 80130b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80130bc:	4293      	cmp	r3, r2
 80130be:	d903      	bls.n	80130c8 <f_mkfs+0x224>
 80130c0:	6a3b      	ldr	r3, [r7, #32]
 80130c2:	4a1b      	ldr	r2, [pc, #108]	; (8013130 <f_mkfs+0x28c>)
 80130c4:	4293      	cmp	r3, r2
 80130c6:	d952      	bls.n	801316e <f_mkfs+0x2ca>
 80130c8:	230e      	movs	r3, #14
 80130ca:	e311      	b.n	80136f0 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80130cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d11b      	bne.n	801310a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	0b1b      	lsrs	r3, r3, #12
 80130d6:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80130d8:	2300      	movs	r3, #0
 80130da:	64bb      	str	r3, [r7, #72]	; 0x48
 80130dc:	2301      	movs	r3, #1
 80130de:	653b      	str	r3, [r7, #80]	; 0x50
 80130e0:	e005      	b.n	80130ee <f_mkfs+0x24a>
 80130e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130e4:	3301      	adds	r3, #1
 80130e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80130e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130ea:	005b      	lsls	r3, r3, #1
 80130ec:	653b      	str	r3, [r7, #80]	; 0x50
 80130ee:	4a11      	ldr	r2, [pc, #68]	; (8013134 <f_mkfs+0x290>)
 80130f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d007      	beq.n	801310a <f_mkfs+0x266>
 80130fa:	4a0e      	ldr	r2, [pc, #56]	; (8013134 <f_mkfs+0x290>)
 80130fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013102:	461a      	mov	r2, r3
 8013104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013106:	4293      	cmp	r3, r2
 8013108:	d2eb      	bcs.n	80130e2 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 801310a:	693a      	ldr	r2, [r7, #16]
 801310c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013112:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8013114:	6a3b      	ldr	r3, [r7, #32]
 8013116:	f640 72f5 	movw	r2, #4085	; 0xff5
 801311a:	4293      	cmp	r3, r2
 801311c:	d90c      	bls.n	8013138 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 801311e:	6a3b      	ldr	r3, [r7, #32]
 8013120:	3302      	adds	r3, #2
 8013122:	005b      	lsls	r3, r3, #1
 8013124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013126:	e012      	b.n	801314e <f_mkfs+0x2aa>
 8013128:	2403134c 	.word	0x2403134c
 801312c:	0801a820 	.word	0x0801a820
 8013130:	0ffffff5 	.word	0x0ffffff5
 8013134:	0801a830 	.word	0x0801a830
				} else {
					fmt = FS_FAT12;
 8013138:	2301      	movs	r3, #1
 801313a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 801313e:	6a3a      	ldr	r2, [r7, #32]
 8013140:	4613      	mov	r3, r2
 8013142:	005b      	lsls	r3, r3, #1
 8013144:	4413      	add	r3, r2
 8013146:	3301      	adds	r3, #1
 8013148:	085b      	lsrs	r3, r3, #1
 801314a:	3303      	adds	r3, #3
 801314c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801314e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013152:	4413      	add	r3, r2
 8013154:	1e5a      	subs	r2, r3, #1
 8013156:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013158:	fbb2 f3f3 	udiv	r3, r2, r3
 801315c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 801315e:	2301      	movs	r3, #1
 8013160:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8013162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013164:	015a      	lsls	r2, r3, #5
 8013166:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013168:	fbb2 f3f3 	udiv	r3, r2, r3
 801316c:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801316e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013172:	4413      	add	r3, r2
 8013174:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8013176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013178:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801317a:	fb03 f202 	mul.w	r2, r3, r2
 801317e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013180:	4413      	add	r3, r2
 8013182:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013184:	4413      	add	r3, r2
 8013186:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8013188:	697a      	ldr	r2, [r7, #20]
 801318a:	69fb      	ldr	r3, [r7, #28]
 801318c:	4413      	add	r3, r2
 801318e:	1e5a      	subs	r2, r3, #1
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	425b      	negs	r3, r3
 8013194:	401a      	ands	r2, r3
 8013196:	69fb      	ldr	r3, [r7, #28]
 8013198:	1ad3      	subs	r3, r2, r3
 801319a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 801319c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80131a0:	2b03      	cmp	r3, #3
 80131a2:	d108      	bne.n	80131b6 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80131a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80131a8:	4413      	add	r3, r2
 80131aa:	657b      	str	r3, [r7, #84]	; 0x54
 80131ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80131ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80131b0:	4413      	add	r3, r2
 80131b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80131b4:	e006      	b.n	80131c4 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80131b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80131b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80131be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80131c0:	4413      	add	r3, r2
 80131c2:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80131c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131c6:	011a      	lsls	r2, r3, #4
 80131c8:	69fb      	ldr	r3, [r7, #28]
 80131ca:	441a      	add	r2, r3
 80131cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ce:	1ad2      	subs	r2, r2, r3
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d901      	bls.n	80131da <f_mkfs+0x336>
 80131d6:	230e      	movs	r3, #14
 80131d8:	e28a      	b.n	80136f0 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80131da:	693a      	ldr	r2, [r7, #16]
 80131dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131de:	1ad2      	subs	r2, r2, r3
 80131e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80131e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80131e4:	fb01 f303 	mul.w	r3, r1, r3
 80131e8:	1ad2      	subs	r2, r2, r3
 80131ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80131ec:	1ad2      	subs	r2, r2, r3
 80131ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80131f4:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80131f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80131fa:	2b03      	cmp	r3, #3
 80131fc:	d10f      	bne.n	801321e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80131fe:	6a3b      	ldr	r3, [r7, #32]
 8013200:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013204:	4293      	cmp	r3, r2
 8013206:	d80a      	bhi.n	801321e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d105      	bne.n	801321a <f_mkfs+0x376>
 801320e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013210:	085b      	lsrs	r3, r3, #1
 8013212:	607b      	str	r3, [r7, #4]
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d144      	bne.n	80132a4 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 801321a:	230e      	movs	r3, #14
 801321c:	e268      	b.n	80136f0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 801321e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013222:	2b02      	cmp	r3, #2
 8013224:	d133      	bne.n	801328e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8013226:	6a3b      	ldr	r3, [r7, #32]
 8013228:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801322c:	4293      	cmp	r3, r2
 801322e:	d91e      	bls.n	801326e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d107      	bne.n	8013246 <f_mkfs+0x3a2>
 8013236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013238:	005b      	lsls	r3, r3, #1
 801323a:	2b40      	cmp	r3, #64	; 0x40
 801323c:	d803      	bhi.n	8013246 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 801323e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013240:	005b      	lsls	r3, r3, #1
 8013242:	607b      	str	r3, [r7, #4]
 8013244:	e033      	b.n	80132ae <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8013246:	7afb      	ldrb	r3, [r7, #11]
 8013248:	f003 0302 	and.w	r3, r3, #2
 801324c:	2b00      	cmp	r3, #0
 801324e:	d003      	beq.n	8013258 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8013250:	2303      	movs	r3, #3
 8013252:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8013256:	e02a      	b.n	80132ae <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d105      	bne.n	801326a <f_mkfs+0x3c6>
 801325e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013260:	005b      	lsls	r3, r3, #1
 8013262:	607b      	str	r3, [r7, #4]
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2b80      	cmp	r3, #128	; 0x80
 8013268:	d91e      	bls.n	80132a8 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 801326a:	230e      	movs	r3, #14
 801326c:	e240      	b.n	80136f0 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 801326e:	6a3b      	ldr	r3, [r7, #32]
 8013270:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013274:	4293      	cmp	r3, r2
 8013276:	d80a      	bhi.n	801328e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d105      	bne.n	801328a <f_mkfs+0x3e6>
 801327e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013280:	005b      	lsls	r3, r3, #1
 8013282:	607b      	str	r3, [r7, #4]
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2b80      	cmp	r3, #128	; 0x80
 8013288:	d910      	bls.n	80132ac <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 801328a:	230e      	movs	r3, #14
 801328c:	e230      	b.n	80136f0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 801328e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013292:	2b01      	cmp	r3, #1
 8013294:	d10c      	bne.n	80132b0 <f_mkfs+0x40c>
 8013296:	6a3b      	ldr	r3, [r7, #32]
 8013298:	f640 72f5 	movw	r2, #4085	; 0xff5
 801329c:	4293      	cmp	r3, r2
 801329e:	d907      	bls.n	80132b0 <f_mkfs+0x40c>
 80132a0:	230e      	movs	r3, #14
 80132a2:	e225      	b.n	80136f0 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80132a4:	bf00      	nop
 80132a6:	e6ce      	b.n	8013046 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80132a8:	bf00      	nop
 80132aa:	e6cc      	b.n	8013046 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80132ac:	bf00      	nop
			pau = au;
 80132ae:	e6ca      	b.n	8013046 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80132b0:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80132b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80132b4:	461a      	mov	r2, r3
 80132b6:	2100      	movs	r1, #0
 80132b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132ba:	f7fc ffe2 	bl	8010282 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80132be:	220b      	movs	r2, #11
 80132c0:	49b2      	ldr	r1, [pc, #712]	; (801358c <f_mkfs+0x6e8>)
 80132c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132c4:	f7fc ffbc 	bl	8010240 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80132c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ca:	330b      	adds	r3, #11
 80132cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80132ce:	4611      	mov	r1, r2
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7fc ff6e 	bl	80101b2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80132d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d8:	330d      	adds	r3, #13
 80132da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80132dc:	b2d2      	uxtb	r2, r2
 80132de:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80132e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e2:	330e      	adds	r3, #14
 80132e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80132e6:	b292      	uxth	r2, r2
 80132e8:	4611      	mov	r1, r2
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7fc ff61 	bl	80101b2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80132f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f2:	3310      	adds	r3, #16
 80132f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80132f6:	b2d2      	uxtb	r2, r2
 80132f8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80132fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132fc:	f103 0211 	add.w	r2, r3, #17
 8013300:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013304:	2b03      	cmp	r3, #3
 8013306:	d002      	beq.n	801330e <f_mkfs+0x46a>
 8013308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801330a:	b29b      	uxth	r3, r3
 801330c:	e000      	b.n	8013310 <f_mkfs+0x46c>
 801330e:	2300      	movs	r3, #0
 8013310:	4619      	mov	r1, r3
 8013312:	4610      	mov	r0, r2
 8013314:	f7fc ff4d 	bl	80101b2 <st_word>
		if (sz_vol < 0x10000) {
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801331e:	d208      	bcs.n	8013332 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8013320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013322:	3313      	adds	r3, #19
 8013324:	693a      	ldr	r2, [r7, #16]
 8013326:	b292      	uxth	r2, r2
 8013328:	4611      	mov	r1, r2
 801332a:	4618      	mov	r0, r3
 801332c:	f7fc ff41 	bl	80101b2 <st_word>
 8013330:	e006      	b.n	8013340 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8013332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013334:	3320      	adds	r3, #32
 8013336:	693a      	ldr	r2, [r7, #16]
 8013338:	4611      	mov	r1, r2
 801333a:	4618      	mov	r0, r3
 801333c:	f7fc ff54 	bl	80101e8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8013340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013342:	3315      	adds	r3, #21
 8013344:	22f8      	movs	r2, #248	; 0xf8
 8013346:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8013348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801334a:	3318      	adds	r3, #24
 801334c:	213f      	movs	r1, #63	; 0x3f
 801334e:	4618      	mov	r0, r3
 8013350:	f7fc ff2f 	bl	80101b2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8013354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013356:	331a      	adds	r3, #26
 8013358:	21ff      	movs	r1, #255	; 0xff
 801335a:	4618      	mov	r0, r3
 801335c:	f7fc ff29 	bl	80101b2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8013360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013362:	331c      	adds	r3, #28
 8013364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013366:	4618      	mov	r0, r3
 8013368:	f7fc ff3e 	bl	80101e8 <st_dword>
		if (fmt == FS_FAT32) {
 801336c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013370:	2b03      	cmp	r3, #3
 8013372:	d131      	bne.n	80133d8 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8013374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013376:	f103 0443 	add.w	r4, r3, #67	; 0x43
 801337a:	f7fc fc03 	bl	800fb84 <get_fattime>
 801337e:	4603      	mov	r3, r0
 8013380:	4619      	mov	r1, r3
 8013382:	4620      	mov	r0, r4
 8013384:	f7fc ff30 	bl	80101e8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8013388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801338a:	3324      	adds	r3, #36	; 0x24
 801338c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801338e:	4618      	mov	r0, r3
 8013390:	f7fc ff2a 	bl	80101e8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8013394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013396:	332c      	adds	r3, #44	; 0x2c
 8013398:	2102      	movs	r1, #2
 801339a:	4618      	mov	r0, r3
 801339c:	f7fc ff24 	bl	80101e8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80133a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a2:	3330      	adds	r3, #48	; 0x30
 80133a4:	2101      	movs	r1, #1
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7fc ff03 	bl	80101b2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80133ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ae:	3332      	adds	r3, #50	; 0x32
 80133b0:	2106      	movs	r1, #6
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7fc fefd 	bl	80101b2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80133b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ba:	3340      	adds	r3, #64	; 0x40
 80133bc:	2280      	movs	r2, #128	; 0x80
 80133be:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80133c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c2:	3342      	adds	r3, #66	; 0x42
 80133c4:	2229      	movs	r2, #41	; 0x29
 80133c6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80133c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ca:	3347      	adds	r3, #71	; 0x47
 80133cc:	2213      	movs	r2, #19
 80133ce:	4970      	ldr	r1, [pc, #448]	; (8013590 <f_mkfs+0x6ec>)
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7fc ff35 	bl	8010240 <mem_cpy>
 80133d6:	e020      	b.n	801341a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80133d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133da:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80133de:	f7fc fbd1 	bl	800fb84 <get_fattime>
 80133e2:	4603      	mov	r3, r0
 80133e4:	4619      	mov	r1, r3
 80133e6:	4620      	mov	r0, r4
 80133e8:	f7fc fefe 	bl	80101e8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80133ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ee:	3316      	adds	r3, #22
 80133f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80133f2:	b292      	uxth	r2, r2
 80133f4:	4611      	mov	r1, r2
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7fc fedb 	bl	80101b2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80133fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133fe:	3324      	adds	r3, #36	; 0x24
 8013400:	2280      	movs	r2, #128	; 0x80
 8013402:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8013404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013406:	3326      	adds	r3, #38	; 0x26
 8013408:	2229      	movs	r2, #41	; 0x29
 801340a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 801340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801340e:	332b      	adds	r3, #43	; 0x2b
 8013410:	2213      	movs	r2, #19
 8013412:	4960      	ldr	r1, [pc, #384]	; (8013594 <f_mkfs+0x6f0>)
 8013414:	4618      	mov	r0, r3
 8013416:	f7fc ff13 	bl	8010240 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 801341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801341c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013420:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013424:	4618      	mov	r0, r3
 8013426:	f7fc fec4 	bl	80101b2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 801342a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801342e:	2301      	movs	r3, #1
 8013430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013432:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013434:	f7fc fe44 	bl	80100c0 <disk_write>
 8013438:	4603      	mov	r3, r0
 801343a:	2b00      	cmp	r3, #0
 801343c:	d001      	beq.n	8013442 <f_mkfs+0x59e>
 801343e:	2301      	movs	r3, #1
 8013440:	e156      	b.n	80136f0 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8013442:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013446:	2b03      	cmp	r3, #3
 8013448:	d140      	bne.n	80134cc <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 801344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801344c:	1d9a      	adds	r2, r3, #6
 801344e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013452:	2301      	movs	r3, #1
 8013454:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013456:	f7fc fe33 	bl	80100c0 <disk_write>
			mem_set(buf, 0, ss);
 801345a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801345c:	461a      	mov	r2, r3
 801345e:	2100      	movs	r1, #0
 8013460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013462:	f7fc ff0e 	bl	8010282 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8013466:	494c      	ldr	r1, [pc, #304]	; (8013598 <f_mkfs+0x6f4>)
 8013468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801346a:	f7fc febd 	bl	80101e8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 801346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013470:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013474:	4949      	ldr	r1, [pc, #292]	; (801359c <f_mkfs+0x6f8>)
 8013476:	4618      	mov	r0, r3
 8013478:	f7fc feb6 	bl	80101e8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 801347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801347e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013482:	6a3b      	ldr	r3, [r7, #32]
 8013484:	3b01      	subs	r3, #1
 8013486:	4619      	mov	r1, r3
 8013488:	4610      	mov	r0, r2
 801348a:	f7fc fead 	bl	80101e8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 801348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013490:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013494:	2102      	movs	r1, #2
 8013496:	4618      	mov	r0, r3
 8013498:	f7fc fea6 	bl	80101e8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 801349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801349e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80134a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80134a6:	4618      	mov	r0, r3
 80134a8:	f7fc fe83 	bl	80101b2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80134ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ae:	1dda      	adds	r2, r3, #7
 80134b0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80134b4:	2301      	movs	r3, #1
 80134b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80134b8:	f7fc fe02 	bl	80100c0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80134bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134be:	1c5a      	adds	r2, r3, #1
 80134c0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80134c4:	2301      	movs	r3, #1
 80134c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80134c8:	f7fc fdfa 	bl	80100c0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80134cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134ce:	2100      	movs	r1, #0
 80134d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134d2:	f7fc fed6 	bl	8010282 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80134d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80134d8:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80134da:	2300      	movs	r3, #0
 80134dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80134de:	e04b      	b.n	8013578 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80134e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80134e4:	2b03      	cmp	r3, #3
 80134e6:	d113      	bne.n	8013510 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80134e8:	f06f 0107 	mvn.w	r1, #7
 80134ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134ee:	f7fc fe7b 	bl	80101e8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80134f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f4:	3304      	adds	r3, #4
 80134f6:	f04f 31ff 	mov.w	r1, #4294967295
 80134fa:	4618      	mov	r0, r3
 80134fc:	f7fc fe74 	bl	80101e8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8013500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013502:	3308      	adds	r3, #8
 8013504:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8013508:	4618      	mov	r0, r3
 801350a:	f7fc fe6d 	bl	80101e8 <st_dword>
 801350e:	e00b      	b.n	8013528 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8013510:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013514:	2b01      	cmp	r3, #1
 8013516:	d101      	bne.n	801351c <f_mkfs+0x678>
 8013518:	4b21      	ldr	r3, [pc, #132]	; (80135a0 <f_mkfs+0x6fc>)
 801351a:	e001      	b.n	8013520 <f_mkfs+0x67c>
 801351c:	f06f 0307 	mvn.w	r3, #7
 8013520:	4619      	mov	r1, r3
 8013522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013524:	f7fc fe60 	bl	80101e8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8013528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801352a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 801352c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013530:	4293      	cmp	r3, r2
 8013532:	bf28      	it	cs
 8013534:	4613      	movcs	r3, r2
 8013536:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8013538:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801353c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801353e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013542:	f7fc fdbd 	bl	80100c0 <disk_write>
 8013546:	4603      	mov	r3, r0
 8013548:	2b00      	cmp	r3, #0
 801354a:	d001      	beq.n	8013550 <f_mkfs+0x6ac>
 801354c:	2301      	movs	r3, #1
 801354e:	e0cf      	b.n	80136f0 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8013550:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013552:	461a      	mov	r2, r3
 8013554:	2100      	movs	r1, #0
 8013556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013558:	f7fc fe93 	bl	8010282 <mem_set>
				sect += n; nsect -= n;
 801355c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801355e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013560:	4413      	add	r3, r2
 8013562:	667b      	str	r3, [r7, #100]	; 0x64
 8013564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013568:	1ad3      	subs	r3, r2, r3
 801356a:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 801356c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801356e:	2b00      	cmp	r3, #0
 8013570:	d1dc      	bne.n	801352c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8013572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013574:	3301      	adds	r3, #1
 8013576:	64bb      	str	r3, [r7, #72]	; 0x48
 8013578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801357a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801357c:	429a      	cmp	r2, r3
 801357e:	d3af      	bcc.n	80134e0 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8013580:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013584:	2b03      	cmp	r3, #3
 8013586:	d10d      	bne.n	80135a4 <f_mkfs+0x700>
 8013588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801358a:	e00c      	b.n	80135a6 <f_mkfs+0x702>
 801358c:	0801a6fc 	.word	0x0801a6fc
 8013590:	0801a708 	.word	0x0801a708
 8013594:	0801a71c 	.word	0x0801a71c
 8013598:	41615252 	.word	0x41615252
 801359c:	61417272 	.word	0x61417272
 80135a0:	00fffff8 	.word	0x00fffff8
 80135a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80135a6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80135a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80135aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ac:	4293      	cmp	r3, r2
 80135ae:	bf28      	it	cs
 80135b0:	4613      	movcs	r3, r2
 80135b2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80135b4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80135b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80135bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80135be:	f7fc fd7f 	bl	80100c0 <disk_write>
 80135c2:	4603      	mov	r3, r0
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d001      	beq.n	80135cc <f_mkfs+0x728>
 80135c8:	2301      	movs	r3, #1
 80135ca:	e091      	b.n	80136f0 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 80135cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80135ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135d0:	4413      	add	r3, r2
 80135d2:	667b      	str	r3, [r7, #100]	; 0x64
 80135d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80135d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135d8:	1ad3      	subs	r3, r2, r3
 80135da:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80135dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d1e2      	bne.n	80135a8 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80135e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80135e6:	2b03      	cmp	r3, #3
 80135e8:	d103      	bne.n	80135f2 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80135ea:	230c      	movs	r3, #12
 80135ec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80135f0:	e010      	b.n	8013614 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80135f2:	693b      	ldr	r3, [r7, #16]
 80135f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80135f8:	d303      	bcc.n	8013602 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80135fa:	2306      	movs	r3, #6
 80135fc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8013600:	e008      	b.n	8013614 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8013602:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013606:	2b02      	cmp	r3, #2
 8013608:	d101      	bne.n	801360e <f_mkfs+0x76a>
 801360a:	2304      	movs	r3, #4
 801360c:	e000      	b.n	8013610 <f_mkfs+0x76c>
 801360e:	2301      	movs	r3, #1
 8013610:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8013614:	7afb      	ldrb	r3, [r7, #11]
 8013616:	f003 0308 	and.w	r3, r3, #8
 801361a:	2b00      	cmp	r3, #0
 801361c:	d15b      	bne.n	80136d6 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 801361e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013620:	461a      	mov	r2, r3
 8013622:	2100      	movs	r1, #0
 8013624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013626:	f7fc fe2c 	bl	8010282 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 801362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801362c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013630:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013634:	4618      	mov	r0, r3
 8013636:	f7fc fdbc 	bl	80101b2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 801363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801363c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013640:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8013642:	69bb      	ldr	r3, [r7, #24]
 8013644:	2200      	movs	r2, #0
 8013646:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8013648:	69bb      	ldr	r3, [r7, #24]
 801364a:	3301      	adds	r3, #1
 801364c:	2201      	movs	r2, #1
 801364e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8013650:	69bb      	ldr	r3, [r7, #24]
 8013652:	3302      	adds	r3, #2
 8013654:	2201      	movs	r2, #1
 8013656:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8013658:	69bb      	ldr	r3, [r7, #24]
 801365a:	3303      	adds	r3, #3
 801365c:	2200      	movs	r2, #0
 801365e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8013660:	69bb      	ldr	r3, [r7, #24]
 8013662:	3304      	adds	r3, #4
 8013664:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8013668:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 801366a:	693a      	ldr	r2, [r7, #16]
 801366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801366e:	441a      	add	r2, r3
 8013670:	4b21      	ldr	r3, [pc, #132]	; (80136f8 <f_mkfs+0x854>)
 8013672:	fba3 1302 	umull	r1, r3, r3, r2
 8013676:	1ad2      	subs	r2, r2, r3
 8013678:	0852      	lsrs	r2, r2, #1
 801367a:	4413      	add	r3, r2
 801367c:	0b5b      	lsrs	r3, r3, #13
 801367e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8013680:	69bb      	ldr	r3, [r7, #24]
 8013682:	3305      	adds	r3, #5
 8013684:	22fe      	movs	r2, #254	; 0xfe
 8013686:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8013688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801368a:	089b      	lsrs	r3, r3, #2
 801368c:	b2da      	uxtb	r2, r3
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	3306      	adds	r3, #6
 8013692:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8013696:	b2d2      	uxtb	r2, r2
 8013698:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 801369a:	69bb      	ldr	r3, [r7, #24]
 801369c:	3307      	adds	r3, #7
 801369e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80136a0:	b2d2      	uxtb	r2, r2
 80136a2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80136a4:	69bb      	ldr	r3, [r7, #24]
 80136a6:	3308      	adds	r3, #8
 80136a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7fc fd9c 	bl	80101e8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80136b0:	69bb      	ldr	r3, [r7, #24]
 80136b2:	330c      	adds	r3, #12
 80136b4:	693a      	ldr	r2, [r7, #16]
 80136b6:	4611      	mov	r1, r2
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7fc fd95 	bl	80101e8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80136be:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80136c2:	2301      	movs	r3, #1
 80136c4:	2200      	movs	r2, #0
 80136c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80136c8:	f7fc fcfa 	bl	80100c0 <disk_write>
 80136cc:	4603      	mov	r3, r0
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d001      	beq.n	80136d6 <f_mkfs+0x832>
 80136d2:	2301      	movs	r3, #1
 80136d4:	e00c      	b.n	80136f0 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80136d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80136da:	2200      	movs	r2, #0
 80136dc:	2100      	movs	r1, #0
 80136de:	4618      	mov	r0, r3
 80136e0:	f7fc fd0e 	bl	8010100 <disk_ioctl>
 80136e4:	4603      	mov	r3, r0
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d001      	beq.n	80136ee <f_mkfs+0x84a>
 80136ea:	2301      	movs	r3, #1
 80136ec:	e000      	b.n	80136f0 <f_mkfs+0x84c>

	return FR_OK;
 80136ee:	2300      	movs	r3, #0
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	3774      	adds	r7, #116	; 0x74
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd90      	pop	{r4, r7, pc}
 80136f8:	0515565b 	.word	0x0515565b

080136fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80136fc:	b480      	push	{r7}
 80136fe:	b087      	sub	sp, #28
 8013700:	af00      	add	r7, sp, #0
 8013702:	60f8      	str	r0, [r7, #12]
 8013704:	60b9      	str	r1, [r7, #8]
 8013706:	4613      	mov	r3, r2
 8013708:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801370a:	2301      	movs	r3, #1
 801370c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801370e:	2300      	movs	r3, #0
 8013710:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013712:	4b1f      	ldr	r3, [pc, #124]	; (8013790 <FATFS_LinkDriverEx+0x94>)
 8013714:	7a5b      	ldrb	r3, [r3, #9]
 8013716:	b2db      	uxtb	r3, r3
 8013718:	2b00      	cmp	r3, #0
 801371a:	d131      	bne.n	8013780 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801371c:	4b1c      	ldr	r3, [pc, #112]	; (8013790 <FATFS_LinkDriverEx+0x94>)
 801371e:	7a5b      	ldrb	r3, [r3, #9]
 8013720:	b2db      	uxtb	r3, r3
 8013722:	461a      	mov	r2, r3
 8013724:	4b1a      	ldr	r3, [pc, #104]	; (8013790 <FATFS_LinkDriverEx+0x94>)
 8013726:	2100      	movs	r1, #0
 8013728:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801372a:	4b19      	ldr	r3, [pc, #100]	; (8013790 <FATFS_LinkDriverEx+0x94>)
 801372c:	7a5b      	ldrb	r3, [r3, #9]
 801372e:	b2db      	uxtb	r3, r3
 8013730:	4a17      	ldr	r2, [pc, #92]	; (8013790 <FATFS_LinkDriverEx+0x94>)
 8013732:	009b      	lsls	r3, r3, #2
 8013734:	4413      	add	r3, r2
 8013736:	68fa      	ldr	r2, [r7, #12]
 8013738:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801373a:	4b15      	ldr	r3, [pc, #84]	; (8013790 <FATFS_LinkDriverEx+0x94>)
 801373c:	7a5b      	ldrb	r3, [r3, #9]
 801373e:	b2db      	uxtb	r3, r3
 8013740:	461a      	mov	r2, r3
 8013742:	4b13      	ldr	r3, [pc, #76]	; (8013790 <FATFS_LinkDriverEx+0x94>)
 8013744:	4413      	add	r3, r2
 8013746:	79fa      	ldrb	r2, [r7, #7]
 8013748:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801374a:	4b11      	ldr	r3, [pc, #68]	; (8013790 <FATFS_LinkDriverEx+0x94>)
 801374c:	7a5b      	ldrb	r3, [r3, #9]
 801374e:	b2db      	uxtb	r3, r3
 8013750:	1c5a      	adds	r2, r3, #1
 8013752:	b2d1      	uxtb	r1, r2
 8013754:	4a0e      	ldr	r2, [pc, #56]	; (8013790 <FATFS_LinkDriverEx+0x94>)
 8013756:	7251      	strb	r1, [r2, #9]
 8013758:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801375a:	7dbb      	ldrb	r3, [r7, #22]
 801375c:	3330      	adds	r3, #48	; 0x30
 801375e:	b2da      	uxtb	r2, r3
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	3301      	adds	r3, #1
 8013768:	223a      	movs	r2, #58	; 0x3a
 801376a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	3302      	adds	r3, #2
 8013770:	222f      	movs	r2, #47	; 0x2f
 8013772:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	3303      	adds	r3, #3
 8013778:	2200      	movs	r2, #0
 801377a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801377c:	2300      	movs	r3, #0
 801377e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013780:	7dfb      	ldrb	r3, [r7, #23]
}
 8013782:	4618      	mov	r0, r3
 8013784:	371c      	adds	r7, #28
 8013786:	46bd      	mov	sp, r7
 8013788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378c:	4770      	bx	lr
 801378e:	bf00      	nop
 8013790:	24031374 	.word	0x24031374

08013794 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
 801379c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801379e:	2200      	movs	r2, #0
 80137a0:	6839      	ldr	r1, [r7, #0]
 80137a2:	6878      	ldr	r0, [r7, #4]
 80137a4:	f7ff ffaa 	bl	80136fc <FATFS_LinkDriverEx>
 80137a8:	4603      	mov	r3, r0
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3708      	adds	r7, #8
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}
	...

080137b4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80137b4:	b480      	push	{r7}
 80137b6:	b085      	sub	sp, #20
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	4603      	mov	r3, r0
 80137bc:	6039      	str	r1, [r7, #0]
 80137be:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80137c0:	88fb      	ldrh	r3, [r7, #6]
 80137c2:	2b7f      	cmp	r3, #127	; 0x7f
 80137c4:	d802      	bhi.n	80137cc <ff_convert+0x18>
		c = chr;
 80137c6:	88fb      	ldrh	r3, [r7, #6]
 80137c8:	81fb      	strh	r3, [r7, #14]
 80137ca:	e025      	b.n	8013818 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d00b      	beq.n	80137ea <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80137d2:	88fb      	ldrh	r3, [r7, #6]
 80137d4:	2bff      	cmp	r3, #255	; 0xff
 80137d6:	d805      	bhi.n	80137e4 <ff_convert+0x30>
 80137d8:	88fb      	ldrh	r3, [r7, #6]
 80137da:	3b80      	subs	r3, #128	; 0x80
 80137dc:	4a12      	ldr	r2, [pc, #72]	; (8013828 <ff_convert+0x74>)
 80137de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80137e2:	e000      	b.n	80137e6 <ff_convert+0x32>
 80137e4:	2300      	movs	r3, #0
 80137e6:	81fb      	strh	r3, [r7, #14]
 80137e8:	e016      	b.n	8013818 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80137ea:	2300      	movs	r3, #0
 80137ec:	81fb      	strh	r3, [r7, #14]
 80137ee:	e009      	b.n	8013804 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80137f0:	89fb      	ldrh	r3, [r7, #14]
 80137f2:	4a0d      	ldr	r2, [pc, #52]	; (8013828 <ff_convert+0x74>)
 80137f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80137f8:	88fa      	ldrh	r2, [r7, #6]
 80137fa:	429a      	cmp	r2, r3
 80137fc:	d006      	beq.n	801380c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80137fe:	89fb      	ldrh	r3, [r7, #14]
 8013800:	3301      	adds	r3, #1
 8013802:	81fb      	strh	r3, [r7, #14]
 8013804:	89fb      	ldrh	r3, [r7, #14]
 8013806:	2b7f      	cmp	r3, #127	; 0x7f
 8013808:	d9f2      	bls.n	80137f0 <ff_convert+0x3c>
 801380a:	e000      	b.n	801380e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801380c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801380e:	89fb      	ldrh	r3, [r7, #14]
 8013810:	3380      	adds	r3, #128	; 0x80
 8013812:	b29b      	uxth	r3, r3
 8013814:	b2db      	uxtb	r3, r3
 8013816:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8013818:	89fb      	ldrh	r3, [r7, #14]
}
 801381a:	4618      	mov	r0, r3
 801381c:	3714      	adds	r7, #20
 801381e:	46bd      	mov	sp, r7
 8013820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013824:	4770      	bx	lr
 8013826:	bf00      	nop
 8013828:	0801a840 	.word	0x0801a840

0801382c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801382c:	b480      	push	{r7}
 801382e:	b087      	sub	sp, #28
 8013830:	af00      	add	r7, sp, #0
 8013832:	4603      	mov	r3, r0
 8013834:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8013836:	88fb      	ldrh	r3, [r7, #6]
 8013838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801383c:	d201      	bcs.n	8013842 <ff_wtoupper+0x16>
 801383e:	4b3e      	ldr	r3, [pc, #248]	; (8013938 <ff_wtoupper+0x10c>)
 8013840:	e000      	b.n	8013844 <ff_wtoupper+0x18>
 8013842:	4b3e      	ldr	r3, [pc, #248]	; (801393c <ff_wtoupper+0x110>)
 8013844:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	1c9a      	adds	r2, r3, #2
 801384a:	617a      	str	r2, [r7, #20]
 801384c:	881b      	ldrh	r3, [r3, #0]
 801384e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8013850:	8a7b      	ldrh	r3, [r7, #18]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d068      	beq.n	8013928 <ff_wtoupper+0xfc>
 8013856:	88fa      	ldrh	r2, [r7, #6]
 8013858:	8a7b      	ldrh	r3, [r7, #18]
 801385a:	429a      	cmp	r2, r3
 801385c:	d364      	bcc.n	8013928 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801385e:	697b      	ldr	r3, [r7, #20]
 8013860:	1c9a      	adds	r2, r3, #2
 8013862:	617a      	str	r2, [r7, #20]
 8013864:	881b      	ldrh	r3, [r3, #0]
 8013866:	823b      	strh	r3, [r7, #16]
 8013868:	8a3b      	ldrh	r3, [r7, #16]
 801386a:	0a1b      	lsrs	r3, r3, #8
 801386c:	81fb      	strh	r3, [r7, #14]
 801386e:	8a3b      	ldrh	r3, [r7, #16]
 8013870:	b2db      	uxtb	r3, r3
 8013872:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8013874:	88fa      	ldrh	r2, [r7, #6]
 8013876:	8a79      	ldrh	r1, [r7, #18]
 8013878:	8a3b      	ldrh	r3, [r7, #16]
 801387a:	440b      	add	r3, r1
 801387c:	429a      	cmp	r2, r3
 801387e:	da49      	bge.n	8013914 <ff_wtoupper+0xe8>
			switch (cmd) {
 8013880:	89fb      	ldrh	r3, [r7, #14]
 8013882:	2b08      	cmp	r3, #8
 8013884:	d84f      	bhi.n	8013926 <ff_wtoupper+0xfa>
 8013886:	a201      	add	r2, pc, #4	; (adr r2, 801388c <ff_wtoupper+0x60>)
 8013888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801388c:	080138b1 	.word	0x080138b1
 8013890:	080138c3 	.word	0x080138c3
 8013894:	080138d9 	.word	0x080138d9
 8013898:	080138e1 	.word	0x080138e1
 801389c:	080138e9 	.word	0x080138e9
 80138a0:	080138f1 	.word	0x080138f1
 80138a4:	080138f9 	.word	0x080138f9
 80138a8:	08013901 	.word	0x08013901
 80138ac:	08013909 	.word	0x08013909
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80138b0:	88fa      	ldrh	r2, [r7, #6]
 80138b2:	8a7b      	ldrh	r3, [r7, #18]
 80138b4:	1ad3      	subs	r3, r2, r3
 80138b6:	005b      	lsls	r3, r3, #1
 80138b8:	697a      	ldr	r2, [r7, #20]
 80138ba:	4413      	add	r3, r2
 80138bc:	881b      	ldrh	r3, [r3, #0]
 80138be:	80fb      	strh	r3, [r7, #6]
 80138c0:	e027      	b.n	8013912 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80138c2:	88fa      	ldrh	r2, [r7, #6]
 80138c4:	8a7b      	ldrh	r3, [r7, #18]
 80138c6:	1ad3      	subs	r3, r2, r3
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	f003 0301 	and.w	r3, r3, #1
 80138ce:	b29b      	uxth	r3, r3
 80138d0:	88fa      	ldrh	r2, [r7, #6]
 80138d2:	1ad3      	subs	r3, r2, r3
 80138d4:	80fb      	strh	r3, [r7, #6]
 80138d6:	e01c      	b.n	8013912 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80138d8:	88fb      	ldrh	r3, [r7, #6]
 80138da:	3b10      	subs	r3, #16
 80138dc:	80fb      	strh	r3, [r7, #6]
 80138de:	e018      	b.n	8013912 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80138e0:	88fb      	ldrh	r3, [r7, #6]
 80138e2:	3b20      	subs	r3, #32
 80138e4:	80fb      	strh	r3, [r7, #6]
 80138e6:	e014      	b.n	8013912 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80138e8:	88fb      	ldrh	r3, [r7, #6]
 80138ea:	3b30      	subs	r3, #48	; 0x30
 80138ec:	80fb      	strh	r3, [r7, #6]
 80138ee:	e010      	b.n	8013912 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80138f0:	88fb      	ldrh	r3, [r7, #6]
 80138f2:	3b1a      	subs	r3, #26
 80138f4:	80fb      	strh	r3, [r7, #6]
 80138f6:	e00c      	b.n	8013912 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80138f8:	88fb      	ldrh	r3, [r7, #6]
 80138fa:	3308      	adds	r3, #8
 80138fc:	80fb      	strh	r3, [r7, #6]
 80138fe:	e008      	b.n	8013912 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8013900:	88fb      	ldrh	r3, [r7, #6]
 8013902:	3b50      	subs	r3, #80	; 0x50
 8013904:	80fb      	strh	r3, [r7, #6]
 8013906:	e004      	b.n	8013912 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8013908:	88fb      	ldrh	r3, [r7, #6]
 801390a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801390e:	80fb      	strh	r3, [r7, #6]
 8013910:	bf00      	nop
			}
			break;
 8013912:	e008      	b.n	8013926 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8013914:	89fb      	ldrh	r3, [r7, #14]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d195      	bne.n	8013846 <ff_wtoupper+0x1a>
 801391a:	8a3b      	ldrh	r3, [r7, #16]
 801391c:	005b      	lsls	r3, r3, #1
 801391e:	697a      	ldr	r2, [r7, #20]
 8013920:	4413      	add	r3, r2
 8013922:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8013924:	e78f      	b.n	8013846 <ff_wtoupper+0x1a>
			break;
 8013926:	bf00      	nop
	}

	return chr;
 8013928:	88fb      	ldrh	r3, [r7, #6]
}
 801392a:	4618      	mov	r0, r3
 801392c:	371c      	adds	r7, #28
 801392e:	46bd      	mov	sp, r7
 8013930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013934:	4770      	bx	lr
 8013936:	bf00      	nop
 8013938:	0801a940 	.word	0x0801a940
 801393c:	0801ab34 	.word	0x0801ab34

08013940 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b082      	sub	sp, #8
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f000 fcf1 	bl	8014330 <malloc>
 801394e:	4603      	mov	r3, r0
}
 8013950:	4618      	mov	r0, r3
 8013952:	3708      	adds	r7, #8
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}

08013958 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f000 fced 	bl	8014340 <free>
}
 8013966:	bf00      	nop
 8013968:	3708      	adds	r7, #8
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}
	...

08013970 <arm_rfft_q15>:
 8013970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013974:	b083      	sub	sp, #12
 8013976:	6805      	ldr	r5, [r0, #0]
 8013978:	4604      	mov	r4, r0
 801397a:	460f      	mov	r7, r1
 801397c:	9200      	str	r2, [sp, #0]
 801397e:	086d      	lsrs	r5, r5, #1
 8013980:	7902      	ldrb	r2, [r0, #4]
 8013982:	00ab      	lsls	r3, r5, #2
 8013984:	6940      	ldr	r0, [r0, #20]
 8013986:	2a01      	cmp	r2, #1
 8013988:	9301      	str	r3, [sp, #4]
 801398a:	d052      	beq.n	8013a32 <arm_rfft_q15+0xc2>
 801398c:	7963      	ldrb	r3, [r4, #5]
 801398e:	f107 0b04 	add.w	fp, r7, #4
 8013992:	f000 f9d1 	bl	8013d38 <arm_cfft_q15>
 8013996:	6926      	ldr	r6, [r4, #16]
 8013998:	00a9      	lsls	r1, r5, #2
 801399a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 801399e:	f1a1 0804 	sub.w	r8, r1, #4
 80139a2:	00ec      	lsls	r4, r5, #3
 80139a4:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80139a8:	1e6a      	subs	r2, r5, #1
 80139aa:	44b8      	add	r8, r7
 80139ac:	eb03 0c0e 	add.w	ip, r3, lr
 80139b0:	4476      	add	r6, lr
 80139b2:	d027      	beq.n	8013a04 <arm_rfft_q15+0x94>
 80139b4:	9b00      	ldr	r3, [sp, #0]
 80139b6:	3c08      	subs	r4, #8
 80139b8:	f103 0508 	add.w	r5, r3, #8
 80139bc:	441c      	add	r4, r3
 80139be:	f85b 3b04 	ldr.w	r3, [fp], #4
 80139c2:	f8dc 9000 	ldr.w	r9, [ip]
 80139c6:	fb43 f109 	smusd	r1, r3, r9
 80139ca:	f858 0904 	ldr.w	r0, [r8], #-4
 80139ce:	f8d6 a000 	ldr.w	sl, [r6]
 80139d2:	fb20 110a 	smlad	r1, r0, sl, r1
 80139d6:	fb40 f01a 	smusdx	r0, r0, sl
 80139da:	fb23 0319 	smladx	r3, r3, r9, r0
 80139de:	141b      	asrs	r3, r3, #16
 80139e0:	3a01      	subs	r2, #1
 80139e2:	ea4f 4121 	mov.w	r1, r1, asr #16
 80139e6:	4476      	add	r6, lr
 80139e8:	f1c3 0000 	rsb	r0, r3, #0
 80139ec:	f825 3c02 	strh.w	r3, [r5, #-2]
 80139f0:	f825 1c04 	strh.w	r1, [r5, #-4]
 80139f4:	44f4      	add	ip, lr
 80139f6:	80e0      	strh	r0, [r4, #6]
 80139f8:	f105 0504 	add.w	r5, r5, #4
 80139fc:	80a1      	strh	r1, [r4, #4]
 80139fe:	f1a4 0404 	sub.w	r4, r4, #4
 8013a02:	d1dc      	bne.n	80139be <arm_rfft_q15+0x4e>
 8013a04:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013a08:	2200      	movs	r2, #0
 8013a0a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8013a0e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013a12:	1a1b      	subs	r3, r3, r0
 8013a14:	1961      	adds	r1, r4, r5
 8013a16:	105b      	asrs	r3, r3, #1
 8013a18:	5363      	strh	r3, [r4, r5]
 8013a1a:	804a      	strh	r2, [r1, #2]
 8013a1c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013a20:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8013a24:	8062      	strh	r2, [r4, #2]
 8013a26:	440b      	add	r3, r1
 8013a28:	105b      	asrs	r3, r3, #1
 8013a2a:	8023      	strh	r3, [r4, #0]
 8013a2c:	b003      	add	sp, #12
 8013a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a32:	440b      	add	r3, r1
 8013a34:	e9d4 c603 	ldrd	ip, r6, [r4, #12]
 8013a38:	469a      	mov	sl, r3
 8013a3a:	68a3      	ldr	r3, [r4, #8]
 8013a3c:	b305      	cbz	r5, 8013a80 <arm_rfft_q15+0x110>
 8013a3e:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8013a42:	f8dd b000 	ldr.w	fp, [sp]
 8013a46:	f85a 3904 	ldr.w	r3, [sl], #-4
 8013a4a:	f8d6 8000 	ldr.w	r8, [r6]
 8013a4e:	fb43 f108 	smusd	r1, r3, r8
 8013a52:	f857 eb04 	ldr.w	lr, [r7], #4
 8013a56:	f8dc 2000 	ldr.w	r2, [ip]
 8013a5a:	fb2e 1102 	smlad	r1, lr, r2, r1
 8013a5e:	fb23 f318 	smuadx	r3, r3, r8
 8013a62:	425b      	negs	r3, r3
 8013a64:	fb42 321e 	smlsdx	r2, r2, lr, r3
 8013a68:	4b10      	ldr	r3, [pc, #64]	; (8013aac <arm_rfft_q15+0x13c>)
 8013a6a:	3d01      	subs	r5, #1
 8013a6c:	444e      	add	r6, r9
 8013a6e:	44cc      	add	ip, r9
 8013a70:	ea03 0302 	and.w	r3, r3, r2
 8013a74:	ea43 4111 	orr.w	r1, r3, r1, lsr #16
 8013a78:	f84b 1b04 	str.w	r1, [fp], #4
 8013a7c:	d1e3      	bne.n	8013a46 <arm_rfft_q15+0xd6>
 8013a7e:	7922      	ldrb	r2, [r4, #4]
 8013a80:	9d00      	ldr	r5, [sp, #0]
 8013a82:	7963      	ldrb	r3, [r4, #5]
 8013a84:	4629      	mov	r1, r5
 8013a86:	f000 f957 	bl	8013d38 <arm_cfft_q15>
 8013a8a:	6823      	ldr	r3, [r4, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d0cd      	beq.n	8013a2c <arm_rfft_q15+0xbc>
 8013a90:	1ea9      	subs	r1, r5, #2
 8013a92:	2200      	movs	r2, #0
 8013a94:	f931 3f02 	ldrsh.w	r3, [r1, #2]!
 8013a98:	3201      	adds	r2, #1
 8013a9a:	005b      	lsls	r3, r3, #1
 8013a9c:	800b      	strh	r3, [r1, #0]
 8013a9e:	6823      	ldr	r3, [r4, #0]
 8013aa0:	4293      	cmp	r3, r2
 8013aa2:	d8f7      	bhi.n	8013a94 <arm_rfft_q15+0x124>
 8013aa4:	b003      	add	sp, #12
 8013aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aaa:	bf00      	nop
 8013aac:	ffff0000 	.word	0xffff0000

08013ab0 <arm_rfft_init_q15>:
 8013ab0:	b289      	uxth	r1, r1
 8013ab2:	b430      	push	{r4, r5}
 8013ab4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013ab8:	4d2e      	ldr	r5, [pc, #184]	; (8013b74 <arm_rfft_init_q15+0xc4>)
 8013aba:	4c2f      	ldr	r4, [pc, #188]	; (8013b78 <arm_rfft_init_q15+0xc8>)
 8013abc:	7102      	strb	r2, [r0, #4]
 8013abe:	7143      	strb	r3, [r0, #5]
 8013ac0:	6001      	str	r1, [r0, #0]
 8013ac2:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8013ac6:	d037      	beq.n	8013b38 <arm_rfft_init_q15+0x88>
 8013ac8:	d91a      	bls.n	8013b00 <arm_rfft_init_q15+0x50>
 8013aca:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8013ace:	d039      	beq.n	8013b44 <arm_rfft_init_q15+0x94>
 8013ad0:	d90d      	bls.n	8013aee <arm_rfft_init_q15+0x3e>
 8013ad2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8013ad6:	d03b      	beq.n	8013b50 <arm_rfft_init_q15+0xa0>
 8013ad8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8013adc:	d127      	bne.n	8013b2e <arm_rfft_init_q15+0x7e>
 8013ade:	2101      	movs	r1, #1
 8013ae0:	4a26      	ldr	r2, [pc, #152]	; (8013b7c <arm_rfft_init_q15+0xcc>)
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	6081      	str	r1, [r0, #8]
 8013ae6:	6142      	str	r2, [r0, #20]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	bc30      	pop	{r4, r5}
 8013aec:	4770      	bx	lr
 8013aee:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013af2:	d11c      	bne.n	8013b2e <arm_rfft_init_q15+0x7e>
 8013af4:	2108      	movs	r1, #8
 8013af6:	4a22      	ldr	r2, [pc, #136]	; (8013b80 <arm_rfft_init_q15+0xd0>)
 8013af8:	2300      	movs	r3, #0
 8013afa:	6081      	str	r1, [r0, #8]
 8013afc:	6142      	str	r2, [r0, #20]
 8013afe:	e7f3      	b.n	8013ae8 <arm_rfft_init_q15+0x38>
 8013b00:	2940      	cmp	r1, #64	; 0x40
 8013b02:	d02b      	beq.n	8013b5c <arm_rfft_init_q15+0xac>
 8013b04:	d90a      	bls.n	8013b1c <arm_rfft_init_q15+0x6c>
 8013b06:	2980      	cmp	r1, #128	; 0x80
 8013b08:	d02e      	beq.n	8013b68 <arm_rfft_init_q15+0xb8>
 8013b0a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8013b0e:	d10e      	bne.n	8013b2e <arm_rfft_init_q15+0x7e>
 8013b10:	2120      	movs	r1, #32
 8013b12:	4a1c      	ldr	r2, [pc, #112]	; (8013b84 <arm_rfft_init_q15+0xd4>)
 8013b14:	2300      	movs	r3, #0
 8013b16:	6081      	str	r1, [r0, #8]
 8013b18:	6142      	str	r2, [r0, #20]
 8013b1a:	e7e5      	b.n	8013ae8 <arm_rfft_init_q15+0x38>
 8013b1c:	2920      	cmp	r1, #32
 8013b1e:	d106      	bne.n	8013b2e <arm_rfft_init_q15+0x7e>
 8013b20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013b24:	4a18      	ldr	r2, [pc, #96]	; (8013b88 <arm_rfft_init_q15+0xd8>)
 8013b26:	2300      	movs	r3, #0
 8013b28:	6081      	str	r1, [r0, #8]
 8013b2a:	6142      	str	r2, [r0, #20]
 8013b2c:	e7dc      	b.n	8013ae8 <arm_rfft_init_q15+0x38>
 8013b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8013b32:	bc30      	pop	{r4, r5}
 8013b34:	4618      	mov	r0, r3
 8013b36:	4770      	bx	lr
 8013b38:	2110      	movs	r1, #16
 8013b3a:	4a14      	ldr	r2, [pc, #80]	; (8013b8c <arm_rfft_init_q15+0xdc>)
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	6081      	str	r1, [r0, #8]
 8013b40:	6142      	str	r2, [r0, #20]
 8013b42:	e7d1      	b.n	8013ae8 <arm_rfft_init_q15+0x38>
 8013b44:	2104      	movs	r1, #4
 8013b46:	4a12      	ldr	r2, [pc, #72]	; (8013b90 <arm_rfft_init_q15+0xe0>)
 8013b48:	2300      	movs	r3, #0
 8013b4a:	6081      	str	r1, [r0, #8]
 8013b4c:	6142      	str	r2, [r0, #20]
 8013b4e:	e7cb      	b.n	8013ae8 <arm_rfft_init_q15+0x38>
 8013b50:	2102      	movs	r1, #2
 8013b52:	4a10      	ldr	r2, [pc, #64]	; (8013b94 <arm_rfft_init_q15+0xe4>)
 8013b54:	2300      	movs	r3, #0
 8013b56:	6081      	str	r1, [r0, #8]
 8013b58:	6142      	str	r2, [r0, #20]
 8013b5a:	e7c5      	b.n	8013ae8 <arm_rfft_init_q15+0x38>
 8013b5c:	2180      	movs	r1, #128	; 0x80
 8013b5e:	4a0e      	ldr	r2, [pc, #56]	; (8013b98 <arm_rfft_init_q15+0xe8>)
 8013b60:	2300      	movs	r3, #0
 8013b62:	6081      	str	r1, [r0, #8]
 8013b64:	6142      	str	r2, [r0, #20]
 8013b66:	e7bf      	b.n	8013ae8 <arm_rfft_init_q15+0x38>
 8013b68:	2140      	movs	r1, #64	; 0x40
 8013b6a:	4a0c      	ldr	r2, [pc, #48]	; (8013b9c <arm_rfft_init_q15+0xec>)
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	6081      	str	r1, [r0, #8]
 8013b70:	6142      	str	r2, [r0, #20]
 8013b72:	e7b9      	b.n	8013ae8 <arm_rfft_init_q15+0x38>
 8013b74:	0801ea78 	.word	0x0801ea78
 8013b78:	08022a78 	.word	0x08022a78
 8013b7c:	0801ac50 	.word	0x0801ac50
 8013b80:	0801ac60 	.word	0x0801ac60
 8013b84:	0801ac00 	.word	0x0801ac00
 8013b88:	0801ac10 	.word	0x0801ac10
 8013b8c:	0801ac30 	.word	0x0801ac30
 8013b90:	0801abf0 	.word	0x0801abf0
 8013b94:	0801ac20 	.word	0x0801ac20
 8013b98:	0801ac40 	.word	0x0801ac40
 8013b9c:	0801ac70 	.word	0x0801ac70

08013ba0 <arm_cfft_radix4by2_q15>:
 8013ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba4:	084d      	lsrs	r5, r1, #1
 8013ba6:	b081      	sub	sp, #4
 8013ba8:	4616      	mov	r6, r2
 8013baa:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8013bae:	d04d      	beq.n	8013c4c <arm_cfft_radix4by2_q15+0xac>
 8013bb0:	4604      	mov	r4, r0
 8013bb2:	4696      	mov	lr, r2
 8013bb4:	4638      	mov	r0, r7
 8013bb6:	462a      	mov	r2, r5
 8013bb8:	4621      	mov	r1, r4
 8013bba:	f04f 0c00 	mov.w	ip, #0
 8013bbe:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8013c68 <arm_cfft_radix4by2_q15+0xc8>
 8013bc2:	f85e 3b04 	ldr.w	r3, [lr], #4
 8013bc6:	f8d1 9000 	ldr.w	r9, [r1]
 8013bca:	fa99 f92c 	shadd16	r9, r9, ip
 8013bce:	f8d0 b000 	ldr.w	fp, [r0]
 8013bd2:	fa9b fb2c 	shadd16	fp, fp, ip
 8013bd6:	fad9 fa1b 	qsub16	sl, r9, fp
 8013bda:	fa99 f92b 	shadd16	r9, r9, fp
 8013bde:	f841 9b04 	str.w	r9, [r1], #4
 8013be2:	fb23 f90a 	smuad	r9, r3, sl
 8013be6:	fb43 f31a 	smusdx	r3, r3, sl
 8013bea:	ea03 0308 	and.w	r3, r3, r8
 8013bee:	3a01      	subs	r2, #1
 8013bf0:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8013bf4:	f840 3b04 	str.w	r3, [r0], #4
 8013bf8:	d1e3      	bne.n	8013bc2 <arm_cfft_radix4by2_q15+0x22>
 8013bfa:	4629      	mov	r1, r5
 8013bfc:	2302      	movs	r3, #2
 8013bfe:	4632      	mov	r2, r6
 8013c00:	4620      	mov	r0, r4
 8013c02:	f000 f905 	bl	8013e10 <arm_radix4_butterfly_q15>
 8013c06:	4638      	mov	r0, r7
 8013c08:	4629      	mov	r1, r5
 8013c0a:	4632      	mov	r2, r6
 8013c0c:	2302      	movs	r3, #2
 8013c0e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8013c12:	f000 f8fd 	bl	8013e10 <arm_radix4_butterfly_q15>
 8013c16:	4620      	mov	r0, r4
 8013c18:	f9b0 6000 	ldrsh.w	r6, [r0]
 8013c1c:	3008      	adds	r0, #8
 8013c1e:	f930 4c06 	ldrsh.w	r4, [r0, #-6]
 8013c22:	f930 2c04 	ldrsh.w	r2, [r0, #-4]
 8013c26:	0076      	lsls	r6, r6, #1
 8013c28:	f930 3c02 	ldrsh.w	r3, [r0, #-2]
 8013c2c:	0064      	lsls	r4, r4, #1
 8013c2e:	0052      	lsls	r2, r2, #1
 8013c30:	f820 6c08 	strh.w	r6, [r0, #-8]
 8013c34:	005b      	lsls	r3, r3, #1
 8013c36:	f820 4c06 	strh.w	r4, [r0, #-6]
 8013c3a:	f820 2c04 	strh.w	r2, [r0, #-4]
 8013c3e:	f820 3c02 	strh.w	r3, [r0, #-2]
 8013c42:	4285      	cmp	r5, r0
 8013c44:	d1e8      	bne.n	8013c18 <arm_cfft_radix4by2_q15+0x78>
 8013c46:	b001      	add	sp, #4
 8013c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c4c:	4629      	mov	r1, r5
 8013c4e:	2302      	movs	r3, #2
 8013c50:	f000 f8de 	bl	8013e10 <arm_radix4_butterfly_q15>
 8013c54:	4632      	mov	r2, r6
 8013c56:	4629      	mov	r1, r5
 8013c58:	4638      	mov	r0, r7
 8013c5a:	2302      	movs	r3, #2
 8013c5c:	b001      	add	sp, #4
 8013c5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c62:	f000 b8d5 	b.w	8013e10 <arm_radix4_butterfly_q15>
 8013c66:	bf00      	nop
 8013c68:	ffff0000 	.word	0xffff0000

08013c6c <arm_cfft_radix4by2_inverse_q15>:
 8013c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c70:	084d      	lsrs	r5, r1, #1
 8013c72:	b081      	sub	sp, #4
 8013c74:	4616      	mov	r6, r2
 8013c76:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8013c7a:	d04d      	beq.n	8013d18 <arm_cfft_radix4by2_inverse_q15+0xac>
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	4696      	mov	lr, r2
 8013c80:	4638      	mov	r0, r7
 8013c82:	462a      	mov	r2, r5
 8013c84:	4621      	mov	r1, r4
 8013c86:	f04f 0c00 	mov.w	ip, #0
 8013c8a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8013d34 <arm_cfft_radix4by2_inverse_q15+0xc8>
 8013c8e:	f85e 3b04 	ldr.w	r3, [lr], #4
 8013c92:	f8d1 9000 	ldr.w	r9, [r1]
 8013c96:	fa99 f92c 	shadd16	r9, r9, ip
 8013c9a:	f8d0 b000 	ldr.w	fp, [r0]
 8013c9e:	fa9b fb2c 	shadd16	fp, fp, ip
 8013ca2:	fad9 fa1b 	qsub16	sl, r9, fp
 8013ca6:	fa99 f92b 	shadd16	r9, r9, fp
 8013caa:	f841 9b04 	str.w	r9, [r1], #4
 8013cae:	fb43 f90a 	smusd	r9, r3, sl
 8013cb2:	fb23 f31a 	smuadx	r3, r3, sl
 8013cb6:	ea03 0308 	and.w	r3, r3, r8
 8013cba:	3a01      	subs	r2, #1
 8013cbc:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8013cc0:	f840 3b04 	str.w	r3, [r0], #4
 8013cc4:	d1e3      	bne.n	8013c8e <arm_cfft_radix4by2_inverse_q15+0x22>
 8013cc6:	4629      	mov	r1, r5
 8013cc8:	2302      	movs	r3, #2
 8013cca:	4632      	mov	r2, r6
 8013ccc:	4620      	mov	r0, r4
 8013cce:	f000 f9d5 	bl	801407c <arm_radix4_butterfly_inverse_q15>
 8013cd2:	4638      	mov	r0, r7
 8013cd4:	4629      	mov	r1, r5
 8013cd6:	4632      	mov	r2, r6
 8013cd8:	2302      	movs	r3, #2
 8013cda:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8013cde:	f000 f9cd 	bl	801407c <arm_radix4_butterfly_inverse_q15>
 8013ce2:	4620      	mov	r0, r4
 8013ce4:	f9b0 6000 	ldrsh.w	r6, [r0]
 8013ce8:	3008      	adds	r0, #8
 8013cea:	f930 4c06 	ldrsh.w	r4, [r0, #-6]
 8013cee:	f930 2c04 	ldrsh.w	r2, [r0, #-4]
 8013cf2:	0076      	lsls	r6, r6, #1
 8013cf4:	f930 3c02 	ldrsh.w	r3, [r0, #-2]
 8013cf8:	0064      	lsls	r4, r4, #1
 8013cfa:	0052      	lsls	r2, r2, #1
 8013cfc:	f820 6c08 	strh.w	r6, [r0, #-8]
 8013d00:	005b      	lsls	r3, r3, #1
 8013d02:	f820 4c06 	strh.w	r4, [r0, #-6]
 8013d06:	f820 2c04 	strh.w	r2, [r0, #-4]
 8013d0a:	f820 3c02 	strh.w	r3, [r0, #-2]
 8013d0e:	4285      	cmp	r5, r0
 8013d10:	d1e8      	bne.n	8013ce4 <arm_cfft_radix4by2_inverse_q15+0x78>
 8013d12:	b001      	add	sp, #4
 8013d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d18:	4629      	mov	r1, r5
 8013d1a:	2302      	movs	r3, #2
 8013d1c:	f000 f9ae 	bl	801407c <arm_radix4_butterfly_inverse_q15>
 8013d20:	4632      	mov	r2, r6
 8013d22:	4629      	mov	r1, r5
 8013d24:	4638      	mov	r0, r7
 8013d26:	2302      	movs	r3, #2
 8013d28:	b001      	add	sp, #4
 8013d2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d2e:	f000 b9a5 	b.w	801407c <arm_radix4_butterfly_inverse_q15>
 8013d32:	bf00      	nop
 8013d34:	ffff0000 	.word	0xffff0000

08013d38 <arm_cfft_q15>:
 8013d38:	2a01      	cmp	r2, #1
 8013d3a:	b570      	push	{r4, r5, r6, lr}
 8013d3c:	460e      	mov	r6, r1
 8013d3e:	4604      	mov	r4, r0
 8013d40:	461d      	mov	r5, r3
 8013d42:	8801      	ldrh	r1, [r0, #0]
 8013d44:	d033      	beq.n	8013dae <arm_cfft_q15+0x76>
 8013d46:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8013d4a:	d02a      	beq.n	8013da2 <arm_cfft_q15+0x6a>
 8013d4c:	d90b      	bls.n	8013d66 <arm_cfft_q15+0x2e>
 8013d4e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013d52:	d026      	beq.n	8013da2 <arm_cfft_q15+0x6a>
 8013d54:	d91b      	bls.n	8013d8e <arm_cfft_q15+0x56>
 8013d56:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8013d5a:	d00b      	beq.n	8013d74 <arm_cfft_q15+0x3c>
 8013d5c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8013d60:	d01f      	beq.n	8013da2 <arm_cfft_q15+0x6a>
 8013d62:	b96d      	cbnz	r5, 8013d80 <arm_cfft_q15+0x48>
 8013d64:	bd70      	pop	{r4, r5, r6, pc}
 8013d66:	2920      	cmp	r1, #32
 8013d68:	d004      	beq.n	8013d74 <arm_cfft_q15+0x3c>
 8013d6a:	d918      	bls.n	8013d9e <arm_cfft_q15+0x66>
 8013d6c:	2940      	cmp	r1, #64	; 0x40
 8013d6e:	d018      	beq.n	8013da2 <arm_cfft_q15+0x6a>
 8013d70:	2980      	cmp	r1, #128	; 0x80
 8013d72:	d1f6      	bne.n	8013d62 <arm_cfft_q15+0x2a>
 8013d74:	6862      	ldr	r2, [r4, #4]
 8013d76:	4630      	mov	r0, r6
 8013d78:	f7ff ff12 	bl	8013ba0 <arm_cfft_radix4by2_q15>
 8013d7c:	2d00      	cmp	r5, #0
 8013d7e:	d0f1      	beq.n	8013d64 <arm_cfft_q15+0x2c>
 8013d80:	4630      	mov	r0, r6
 8013d82:	68a2      	ldr	r2, [r4, #8]
 8013d84:	89a1      	ldrh	r1, [r4, #12]
 8013d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d8a:	f000 baad 	b.w	80142e8 <arm_bitreversal_16>
 8013d8e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013d92:	d1e6      	bne.n	8013d62 <arm_cfft_q15+0x2a>
 8013d94:	6862      	ldr	r2, [r4, #4]
 8013d96:	4630      	mov	r0, r6
 8013d98:	f7ff ff02 	bl	8013ba0 <arm_cfft_radix4by2_q15>
 8013d9c:	e7ee      	b.n	8013d7c <arm_cfft_q15+0x44>
 8013d9e:	2910      	cmp	r1, #16
 8013da0:	d1df      	bne.n	8013d62 <arm_cfft_q15+0x2a>
 8013da2:	2301      	movs	r3, #1
 8013da4:	6862      	ldr	r2, [r4, #4]
 8013da6:	4630      	mov	r0, r6
 8013da8:	f000 f832 	bl	8013e10 <arm_radix4_butterfly_q15>
 8013dac:	e7d9      	b.n	8013d62 <arm_cfft_q15+0x2a>
 8013dae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8013db2:	d00a      	beq.n	8013dca <arm_cfft_q15+0x92>
 8013db4:	d90f      	bls.n	8013dd6 <arm_cfft_q15+0x9e>
 8013db6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013dba:	d006      	beq.n	8013dca <arm_cfft_q15+0x92>
 8013dbc:	d917      	bls.n	8013dee <arm_cfft_q15+0xb6>
 8013dbe:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8013dc2:	d00f      	beq.n	8013de4 <arm_cfft_q15+0xac>
 8013dc4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8013dc8:	d1cb      	bne.n	8013d62 <arm_cfft_q15+0x2a>
 8013dca:	2301      	movs	r3, #1
 8013dcc:	6862      	ldr	r2, [r4, #4]
 8013dce:	4630      	mov	r0, r6
 8013dd0:	f000 f954 	bl	801407c <arm_radix4_butterfly_inverse_q15>
 8013dd4:	e7c5      	b.n	8013d62 <arm_cfft_q15+0x2a>
 8013dd6:	2920      	cmp	r1, #32
 8013dd8:	d004      	beq.n	8013de4 <arm_cfft_q15+0xac>
 8013dda:	d910      	bls.n	8013dfe <arm_cfft_q15+0xc6>
 8013ddc:	2940      	cmp	r1, #64	; 0x40
 8013dde:	d0f4      	beq.n	8013dca <arm_cfft_q15+0x92>
 8013de0:	2980      	cmp	r1, #128	; 0x80
 8013de2:	d1be      	bne.n	8013d62 <arm_cfft_q15+0x2a>
 8013de4:	6862      	ldr	r2, [r4, #4]
 8013de6:	4630      	mov	r0, r6
 8013de8:	f7ff ff40 	bl	8013c6c <arm_cfft_radix4by2_inverse_q15>
 8013dec:	e7b9      	b.n	8013d62 <arm_cfft_q15+0x2a>
 8013dee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013df2:	d1b6      	bne.n	8013d62 <arm_cfft_q15+0x2a>
 8013df4:	6862      	ldr	r2, [r4, #4]
 8013df6:	4630      	mov	r0, r6
 8013df8:	f7ff ff38 	bl	8013c6c <arm_cfft_radix4by2_inverse_q15>
 8013dfc:	e7b1      	b.n	8013d62 <arm_cfft_q15+0x2a>
 8013dfe:	2910      	cmp	r1, #16
 8013e00:	d1af      	bne.n	8013d62 <arm_cfft_q15+0x2a>
 8013e02:	2301      	movs	r3, #1
 8013e04:	6862      	ldr	r2, [r4, #4]
 8013e06:	4630      	mov	r0, r6
 8013e08:	f000 f938 	bl	801407c <arm_radix4_butterfly_inverse_q15>
 8013e0c:	e7a9      	b.n	8013d62 <arm_cfft_q15+0x2a>
 8013e0e:	bf00      	nop

08013e10 <arm_radix4_butterfly_q15>:
 8013e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e14:	460c      	mov	r4, r1
 8013e16:	b095      	sub	sp, #84	; 0x54
 8013e18:	4605      	mov	r5, r0
 8013e1a:	4607      	mov	r7, r0
 8013e1c:	08a4      	lsrs	r4, r4, #2
 8013e1e:	9011      	str	r0, [sp, #68]	; 0x44
 8013e20:	9103      	str	r1, [sp, #12]
 8013e22:	2100      	movs	r1, #0
 8013e24:	00a0      	lsls	r0, r4, #2
 8013e26:	9413      	str	r4, [sp, #76]	; 0x4c
 8013e28:	46a1      	mov	r9, r4
 8013e2a:	462c      	mov	r4, r5
 8013e2c:	469a      	mov	sl, r3
 8013e2e:	4e92      	ldr	r6, [pc, #584]	; (8014078 <arm_radix4_butterfly_q15+0x268>)
 8013e30:	4404      	add	r4, r0
 8013e32:	460b      	mov	r3, r1
 8013e34:	4694      	mov	ip, r2
 8013e36:	9212      	str	r2, [sp, #72]	; 0x48
 8013e38:	1825      	adds	r5, r4, r0
 8013e3a:	4428      	add	r0, r5
 8013e3c:	f8d7 e000 	ldr.w	lr, [r7]
 8013e40:	fa9e fe23 	shadd16	lr, lr, r3
 8013e44:	fa9e fe23 	shadd16	lr, lr, r3
 8013e48:	682a      	ldr	r2, [r5, #0]
 8013e4a:	fa92 f223 	shadd16	r2, r2, r3
 8013e4e:	fa92 f223 	shadd16	r2, r2, r3
 8013e52:	fa9e f812 	qadd16	r8, lr, r2
 8013e56:	fade fe12 	qsub16	lr, lr, r2
 8013e5a:	6822      	ldr	r2, [r4, #0]
 8013e5c:	fa92 f223 	shadd16	r2, r2, r3
 8013e60:	fa92 f223 	shadd16	r2, r2, r3
 8013e64:	f8d0 b000 	ldr.w	fp, [r0]
 8013e68:	fa9b fb23 	shadd16	fp, fp, r3
 8013e6c:	fa9b fb23 	shadd16	fp, fp, r3
 8013e70:	fa92 f21b 	qadd16	r2, r2, fp
 8013e74:	fa98 fb22 	shadd16	fp, r8, r2
 8013e78:	f847 bb04 	str.w	fp, [r7], #4
 8013e7c:	fad8 f812 	qsub16	r8, r8, r2
 8013e80:	f85c 2031 	ldr.w	r2, [ip, r1, lsl #3]
 8013e84:	fb22 fb08 	smuad	fp, r2, r8
 8013e88:	fb42 f818 	smusdx	r8, r2, r8
 8013e8c:	6822      	ldr	r2, [r4, #0]
 8013e8e:	fa92 f223 	shadd16	r2, r2, r3
 8013e92:	fa92 f223 	shadd16	r2, r2, r3
 8013e96:	ea08 0806 	and.w	r8, r8, r6
 8013e9a:	ea48 481b 	orr.w	r8, r8, fp, lsr #16
 8013e9e:	f844 8b04 	str.w	r8, [r4], #4
 8013ea2:	f8d0 8000 	ldr.w	r8, [r0]
 8013ea6:	fa98 f823 	shadd16	r8, r8, r3
 8013eaa:	fa98 f823 	shadd16	r8, r8, r3
 8013eae:	fad2 f218 	qsub16	r2, r2, r8
 8013eb2:	faae f812 	qasx	r8, lr, r2
 8013eb6:	faee fe12 	qsax	lr, lr, r2
 8013eba:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 8013ebe:	fb22 fb0e 	smuad	fp, r2, lr
 8013ec2:	fb42 f21e 	smusdx	r2, r2, lr
 8013ec6:	4032      	ands	r2, r6
 8013ec8:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
 8013ecc:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8013ed0:	f845 2b04 	str.w	r2, [r5], #4
 8013ed4:	f85c 202e 	ldr.w	r2, [ip, lr, lsl #2]
 8013ed8:	fb22 fe08 	smuad	lr, r2, r8
 8013edc:	fb42 f218 	smusdx	r2, r2, r8
 8013ee0:	4032      	ands	r2, r6
 8013ee2:	f1b9 0901 	subs.w	r9, r9, #1
 8013ee6:	4451      	add	r1, sl
 8013ee8:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8013eec:	f840 2b04 	str.w	r2, [r0], #4
 8013ef0:	d1a4      	bne.n	8013e3c <arm_radix4_butterfly_q15+0x2c>
 8013ef2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013ef4:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8013ef8:	2a04      	cmp	r2, #4
 8013efa:	f240 80b9 	bls.w	8014070 <arm_radix4_butterfly_q15+0x260>
 8013efe:	f8df a178 	ldr.w	sl, [pc, #376]	; 8014078 <arm_radix4_butterfly_q15+0x268>
 8013f02:	f8cd 9010 	str.w	r9, [sp, #16]
 8013f06:	9202      	str	r2, [sp, #8]
 8013f08:	9d02      	ldr	r5, [sp, #8]
 8013f0a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013f0e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013f10:	08a9      	lsrs	r1, r5, #2
 8013f12:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013f14:	0092      	lsls	r2, r2, #2
 8013f16:	9608      	str	r6, [sp, #32]
 8013f18:	0088      	lsls	r0, r1, #2
 8013f1a:	9110      	str	r1, [sp, #64]	; 0x40
 8013f1c:	920f      	str	r2, [sp, #60]	; 0x3c
 8013f1e:	2200      	movs	r2, #0
 8013f20:	900c      	str	r0, [sp, #48]	; 0x30
 8013f22:	9803      	ldr	r0, [sp, #12]
 8013f24:	9205      	str	r2, [sp, #20]
 8013f26:	009a      	lsls	r2, r3, #2
 8013f28:	4607      	mov	r7, r0
 8013f2a:	00db      	lsls	r3, r3, #3
 8013f2c:	9409      	str	r4, [sp, #36]	; 0x24
 8013f2e:	428f      	cmp	r7, r1
 8013f30:	940a      	str	r4, [sp, #40]	; 0x28
 8013f32:	9406      	str	r4, [sp, #24]
 8013f34:	bf28      	it	cs
 8013f36:	460f      	movcs	r7, r1
 8013f38:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8013f3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8013f3e:	970e      	str	r7, [sp, #56]	; 0x38
 8013f40:	00af      	lsls	r7, r5, #2
 8013f42:	9107      	str	r1, [sp, #28]
 8013f44:	930d      	str	r3, [sp, #52]	; 0x34
 8013f46:	9b06      	ldr	r3, [sp, #24]
 8013f48:	9a08      	ldr	r2, [sp, #32]
 8013f4a:	f8d3 9000 	ldr.w	r9, [r3]
 8013f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f50:	4616      	mov	r6, r2
 8013f52:	f8dd c014 	ldr.w	ip, [sp, #20]
 8013f56:	f8d3 8000 	ldr.w	r8, [r3]
 8013f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f5c:	1898      	adds	r0, r3, r2
 8013f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f60:	f8d2 e000 	ldr.w	lr, [r2]
 8013f64:	9a07      	ldr	r2, [sp, #28]
 8013f66:	4615      	mov	r5, r2
 8013f68:	1899      	adds	r1, r3, r2
 8013f6a:	6832      	ldr	r2, [r6, #0]
 8013f6c:	682c      	ldr	r4, [r5, #0]
 8013f6e:	fa92 f314 	qadd16	r3, r2, r4
 8013f72:	fad2 f214 	qsub16	r2, r2, r4
 8013f76:	6804      	ldr	r4, [r0, #0]
 8013f78:	f8d1 b000 	ldr.w	fp, [r1]
 8013f7c:	fa94 f41b 	qadd16	r4, r4, fp
 8013f80:	9301      	str	r3, [sp, #4]
 8013f82:	fa93 fb24 	shadd16	fp, r3, r4
 8013f86:	9b04      	ldr	r3, [sp, #16]
 8013f88:	fa9b fb23 	shadd16	fp, fp, r3
 8013f8c:	f8c6 b000 	str.w	fp, [r6]
 8013f90:	443e      	add	r6, r7
 8013f92:	9b01      	ldr	r3, [sp, #4]
 8013f94:	fad3 f324 	shsub16	r3, r3, r4
 8013f98:	fb28 fb03 	smuad	fp, r8, r3
 8013f9c:	fb48 f313 	smusdx	r3, r8, r3
 8013fa0:	ea03 030a 	and.w	r3, r3, sl
 8013fa4:	6804      	ldr	r4, [r0, #0]
 8013fa6:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8013faa:	6003      	str	r3, [r0, #0]
 8013fac:	4438      	add	r0, r7
 8013fae:	680b      	ldr	r3, [r1, #0]
 8013fb0:	fad4 f413 	qsub16	r4, r4, r3
 8013fb4:	faa2 f324 	shasx	r3, r2, r4
 8013fb8:	fae2 f224 	shsax	r2, r2, r4
 8013fbc:	fb29 fb02 	smuad	fp, r9, r2
 8013fc0:	fb49 f212 	smusdx	r2, r9, r2
 8013fc4:	ea02 020a 	and.w	r2, r2, sl
 8013fc8:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8013fcc:	602a      	str	r2, [r5, #0]
 8013fce:	443d      	add	r5, r7
 8013fd0:	fb2e f203 	smuad	r2, lr, r3
 8013fd4:	fb4e f313 	smusdx	r3, lr, r3
 8013fd8:	ea03 030a 	and.w	r3, r3, sl
 8013fdc:	9c02      	ldr	r4, [sp, #8]
 8013fde:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8013fe2:	44a4      	add	ip, r4
 8013fe4:	600b      	str	r3, [r1, #0]
 8013fe6:	4439      	add	r1, r7
 8013fe8:	9b03      	ldr	r3, [sp, #12]
 8013fea:	4563      	cmp	r3, ip
 8013fec:	d8bd      	bhi.n	8013f6a <arm_radix4_butterfly_q15+0x15a>
 8013fee:	9a06      	ldr	r2, [sp, #24]
 8013ff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013ff2:	9b05      	ldr	r3, [sp, #20]
 8013ff4:	440a      	add	r2, r1
 8013ff6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013ff8:	3301      	adds	r3, #1
 8013ffa:	9206      	str	r2, [sp, #24]
 8013ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ffe:	9305      	str	r3, [sp, #20]
 8014000:	440a      	add	r2, r1
 8014002:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014004:	920a      	str	r2, [sp, #40]	; 0x28
 8014006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014008:	440a      	add	r2, r1
 801400a:	9209      	str	r2, [sp, #36]	; 0x24
 801400c:	9a08      	ldr	r2, [sp, #32]
 801400e:	3204      	adds	r2, #4
 8014010:	9208      	str	r2, [sp, #32]
 8014012:	9a07      	ldr	r2, [sp, #28]
 8014014:	3204      	adds	r2, #4
 8014016:	9207      	str	r2, [sp, #28]
 8014018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801401a:	4293      	cmp	r3, r2
 801401c:	d393      	bcc.n	8013f46 <arm_radix4_butterfly_q15+0x136>
 801401e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014022:	2a04      	cmp	r2, #4
 8014024:	9202      	str	r2, [sp, #8]
 8014026:	f63f af6f 	bhi.w	8013f08 <arm_radix4_butterfly_q15+0xf8>
 801402a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801402c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801402e:	681a      	ldr	r2, [r3, #0]
 8014030:	6859      	ldr	r1, [r3, #4]
 8014032:	689f      	ldr	r7, [r3, #8]
 8014034:	68dc      	ldr	r4, [r3, #12]
 8014036:	fa92 f017 	qadd16	r0, r2, r7
 801403a:	fa91 f514 	qadd16	r5, r1, r4
 801403e:	fa90 f525 	shadd16	r5, r0, r5
 8014042:	601d      	str	r5, [r3, #0]
 8014044:	fa91 f514 	qadd16	r5, r1, r4
 8014048:	fad0 f025 	shsub16	r0, r0, r5
 801404c:	6058      	str	r0, [r3, #4]
 801404e:	fad2 f217 	qsub16	r2, r2, r7
 8014052:	fad1 f114 	qsub16	r1, r1, r4
 8014056:	fae2 f021 	shsax	r0, r2, r1
 801405a:	6098      	str	r0, [r3, #8]
 801405c:	faa2 f221 	shasx	r2, r2, r1
 8014060:	3e01      	subs	r6, #1
 8014062:	60da      	str	r2, [r3, #12]
 8014064:	f103 0310 	add.w	r3, r3, #16
 8014068:	d1e1      	bne.n	801402e <arm_radix4_butterfly_q15+0x21e>
 801406a:	b015      	add	sp, #84	; 0x54
 801406c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014070:	4616      	mov	r6, r2
 8014072:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014074:	e7db      	b.n	801402e <arm_radix4_butterfly_q15+0x21e>
 8014076:	bf00      	nop
 8014078:	ffff0000 	.word	0xffff0000

0801407c <arm_radix4_butterfly_inverse_q15>:
 801407c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014080:	460c      	mov	r4, r1
 8014082:	b095      	sub	sp, #84	; 0x54
 8014084:	4605      	mov	r5, r0
 8014086:	4607      	mov	r7, r0
 8014088:	08a4      	lsrs	r4, r4, #2
 801408a:	9011      	str	r0, [sp, #68]	; 0x44
 801408c:	9103      	str	r1, [sp, #12]
 801408e:	2100      	movs	r1, #0
 8014090:	00a0      	lsls	r0, r4, #2
 8014092:	9413      	str	r4, [sp, #76]	; 0x4c
 8014094:	46a1      	mov	r9, r4
 8014096:	462c      	mov	r4, r5
 8014098:	469a      	mov	sl, r3
 801409a:	4e92      	ldr	r6, [pc, #584]	; (80142e4 <arm_radix4_butterfly_inverse_q15+0x268>)
 801409c:	4404      	add	r4, r0
 801409e:	460b      	mov	r3, r1
 80140a0:	4694      	mov	ip, r2
 80140a2:	9212      	str	r2, [sp, #72]	; 0x48
 80140a4:	1825      	adds	r5, r4, r0
 80140a6:	4428      	add	r0, r5
 80140a8:	f8d7 e000 	ldr.w	lr, [r7]
 80140ac:	fa9e fe23 	shadd16	lr, lr, r3
 80140b0:	fa9e fe23 	shadd16	lr, lr, r3
 80140b4:	682a      	ldr	r2, [r5, #0]
 80140b6:	fa92 f223 	shadd16	r2, r2, r3
 80140ba:	fa92 f223 	shadd16	r2, r2, r3
 80140be:	fa9e f812 	qadd16	r8, lr, r2
 80140c2:	fade fe12 	qsub16	lr, lr, r2
 80140c6:	6822      	ldr	r2, [r4, #0]
 80140c8:	fa92 f223 	shadd16	r2, r2, r3
 80140cc:	fa92 f223 	shadd16	r2, r2, r3
 80140d0:	f8d0 b000 	ldr.w	fp, [r0]
 80140d4:	fa9b fb23 	shadd16	fp, fp, r3
 80140d8:	fa9b fb23 	shadd16	fp, fp, r3
 80140dc:	fa92 f21b 	qadd16	r2, r2, fp
 80140e0:	fa98 fb22 	shadd16	fp, r8, r2
 80140e4:	f847 bb04 	str.w	fp, [r7], #4
 80140e8:	fad8 f812 	qsub16	r8, r8, r2
 80140ec:	f85c 2031 	ldr.w	r2, [ip, r1, lsl #3]
 80140f0:	fb42 fb08 	smusd	fp, r2, r8
 80140f4:	fb22 f818 	smuadx	r8, r2, r8
 80140f8:	6822      	ldr	r2, [r4, #0]
 80140fa:	fa92 f223 	shadd16	r2, r2, r3
 80140fe:	fa92 f223 	shadd16	r2, r2, r3
 8014102:	ea08 0806 	and.w	r8, r8, r6
 8014106:	ea48 481b 	orr.w	r8, r8, fp, lsr #16
 801410a:	f844 8b04 	str.w	r8, [r4], #4
 801410e:	f8d0 8000 	ldr.w	r8, [r0]
 8014112:	fa98 f823 	shadd16	r8, r8, r3
 8014116:	fa98 f823 	shadd16	r8, r8, r3
 801411a:	fad2 f218 	qsub16	r2, r2, r8
 801411e:	faee f812 	qsax	r8, lr, r2
 8014122:	faae fe12 	qasx	lr, lr, r2
 8014126:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 801412a:	fb42 fb0e 	smusd	fp, r2, lr
 801412e:	fb22 f21e 	smuadx	r2, r2, lr
 8014132:	4032      	ands	r2, r6
 8014134:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
 8014138:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 801413c:	f845 2b04 	str.w	r2, [r5], #4
 8014140:	f85c 202e 	ldr.w	r2, [ip, lr, lsl #2]
 8014144:	fb42 fe08 	smusd	lr, r2, r8
 8014148:	fb22 f218 	smuadx	r2, r2, r8
 801414c:	4032      	ands	r2, r6
 801414e:	f1b9 0901 	subs.w	r9, r9, #1
 8014152:	4451      	add	r1, sl
 8014154:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8014158:	f840 2b04 	str.w	r2, [r0], #4
 801415c:	d1a4      	bne.n	80140a8 <arm_radix4_butterfly_inverse_q15+0x2c>
 801415e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014160:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8014164:	2a04      	cmp	r2, #4
 8014166:	f240 80b9 	bls.w	80142dc <arm_radix4_butterfly_inverse_q15+0x260>
 801416a:	f8df a178 	ldr.w	sl, [pc, #376]	; 80142e4 <arm_radix4_butterfly_inverse_q15+0x268>
 801416e:	f8cd 9010 	str.w	r9, [sp, #16]
 8014172:	9202      	str	r2, [sp, #8]
 8014174:	9d02      	ldr	r5, [sp, #8]
 8014176:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801417a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801417c:	08a9      	lsrs	r1, r5, #2
 801417e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014180:	0092      	lsls	r2, r2, #2
 8014182:	9608      	str	r6, [sp, #32]
 8014184:	0088      	lsls	r0, r1, #2
 8014186:	9110      	str	r1, [sp, #64]	; 0x40
 8014188:	920f      	str	r2, [sp, #60]	; 0x3c
 801418a:	2200      	movs	r2, #0
 801418c:	900c      	str	r0, [sp, #48]	; 0x30
 801418e:	9803      	ldr	r0, [sp, #12]
 8014190:	9205      	str	r2, [sp, #20]
 8014192:	009a      	lsls	r2, r3, #2
 8014194:	4607      	mov	r7, r0
 8014196:	00db      	lsls	r3, r3, #3
 8014198:	9409      	str	r4, [sp, #36]	; 0x24
 801419a:	428f      	cmp	r7, r1
 801419c:	940a      	str	r4, [sp, #40]	; 0x28
 801419e:	9406      	str	r4, [sp, #24]
 80141a0:	bf28      	it	cs
 80141a2:	460f      	movcs	r7, r1
 80141a4:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 80141a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80141aa:	970e      	str	r7, [sp, #56]	; 0x38
 80141ac:	00af      	lsls	r7, r5, #2
 80141ae:	9107      	str	r1, [sp, #28]
 80141b0:	930d      	str	r3, [sp, #52]	; 0x34
 80141b2:	9b06      	ldr	r3, [sp, #24]
 80141b4:	9a08      	ldr	r2, [sp, #32]
 80141b6:	f8d3 9000 	ldr.w	r9, [r3]
 80141ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141bc:	4616      	mov	r6, r2
 80141be:	f8dd c014 	ldr.w	ip, [sp, #20]
 80141c2:	f8d3 8000 	ldr.w	r8, [r3]
 80141c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141c8:	1898      	adds	r0, r3, r2
 80141ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141cc:	f8d2 e000 	ldr.w	lr, [r2]
 80141d0:	9a07      	ldr	r2, [sp, #28]
 80141d2:	4615      	mov	r5, r2
 80141d4:	1899      	adds	r1, r3, r2
 80141d6:	6832      	ldr	r2, [r6, #0]
 80141d8:	682c      	ldr	r4, [r5, #0]
 80141da:	fa92 f314 	qadd16	r3, r2, r4
 80141de:	fad2 f214 	qsub16	r2, r2, r4
 80141e2:	6804      	ldr	r4, [r0, #0]
 80141e4:	f8d1 b000 	ldr.w	fp, [r1]
 80141e8:	fa94 f41b 	qadd16	r4, r4, fp
 80141ec:	9301      	str	r3, [sp, #4]
 80141ee:	fa93 fb24 	shadd16	fp, r3, r4
 80141f2:	9b04      	ldr	r3, [sp, #16]
 80141f4:	fa9b fb23 	shadd16	fp, fp, r3
 80141f8:	f8c6 b000 	str.w	fp, [r6]
 80141fc:	443e      	add	r6, r7
 80141fe:	9b01      	ldr	r3, [sp, #4]
 8014200:	fad3 f324 	shsub16	r3, r3, r4
 8014204:	fb48 fb03 	smusd	fp, r8, r3
 8014208:	fb28 f313 	smuadx	r3, r8, r3
 801420c:	ea03 030a 	and.w	r3, r3, sl
 8014210:	6804      	ldr	r4, [r0, #0]
 8014212:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8014216:	6003      	str	r3, [r0, #0]
 8014218:	4438      	add	r0, r7
 801421a:	680b      	ldr	r3, [r1, #0]
 801421c:	fad4 f413 	qsub16	r4, r4, r3
 8014220:	fae2 f324 	shsax	r3, r2, r4
 8014224:	faa2 f224 	shasx	r2, r2, r4
 8014228:	fb49 fb02 	smusd	fp, r9, r2
 801422c:	fb29 f212 	smuadx	r2, r9, r2
 8014230:	ea02 020a 	and.w	r2, r2, sl
 8014234:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8014238:	602a      	str	r2, [r5, #0]
 801423a:	443d      	add	r5, r7
 801423c:	fb4e f203 	smusd	r2, lr, r3
 8014240:	fb2e f313 	smuadx	r3, lr, r3
 8014244:	ea03 030a 	and.w	r3, r3, sl
 8014248:	9c02      	ldr	r4, [sp, #8]
 801424a:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 801424e:	44a4      	add	ip, r4
 8014250:	600b      	str	r3, [r1, #0]
 8014252:	4439      	add	r1, r7
 8014254:	9b03      	ldr	r3, [sp, #12]
 8014256:	4563      	cmp	r3, ip
 8014258:	d8bd      	bhi.n	80141d6 <arm_radix4_butterfly_inverse_q15+0x15a>
 801425a:	9a06      	ldr	r2, [sp, #24]
 801425c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801425e:	9b05      	ldr	r3, [sp, #20]
 8014260:	440a      	add	r2, r1
 8014262:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014264:	3301      	adds	r3, #1
 8014266:	9206      	str	r2, [sp, #24]
 8014268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801426a:	9305      	str	r3, [sp, #20]
 801426c:	440a      	add	r2, r1
 801426e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014270:	920a      	str	r2, [sp, #40]	; 0x28
 8014272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014274:	440a      	add	r2, r1
 8014276:	9209      	str	r2, [sp, #36]	; 0x24
 8014278:	9a08      	ldr	r2, [sp, #32]
 801427a:	3204      	adds	r2, #4
 801427c:	9208      	str	r2, [sp, #32]
 801427e:	9a07      	ldr	r2, [sp, #28]
 8014280:	3204      	adds	r2, #4
 8014282:	9207      	str	r2, [sp, #28]
 8014284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014286:	4293      	cmp	r3, r2
 8014288:	d393      	bcc.n	80141b2 <arm_radix4_butterfly_inverse_q15+0x136>
 801428a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801428c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801428e:	2a04      	cmp	r2, #4
 8014290:	9202      	str	r2, [sp, #8]
 8014292:	f63f af6f 	bhi.w	8014174 <arm_radix4_butterfly_inverse_q15+0xf8>
 8014296:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014298:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801429a:	681a      	ldr	r2, [r3, #0]
 801429c:	6859      	ldr	r1, [r3, #4]
 801429e:	689f      	ldr	r7, [r3, #8]
 80142a0:	68dc      	ldr	r4, [r3, #12]
 80142a2:	fa92 f017 	qadd16	r0, r2, r7
 80142a6:	fa91 f514 	qadd16	r5, r1, r4
 80142aa:	fa90 f525 	shadd16	r5, r0, r5
 80142ae:	601d      	str	r5, [r3, #0]
 80142b0:	fa91 f514 	qadd16	r5, r1, r4
 80142b4:	fad0 f025 	shsub16	r0, r0, r5
 80142b8:	6058      	str	r0, [r3, #4]
 80142ba:	fad2 f217 	qsub16	r2, r2, r7
 80142be:	fad1 f114 	qsub16	r1, r1, r4
 80142c2:	faa2 f021 	shasx	r0, r2, r1
 80142c6:	6098      	str	r0, [r3, #8]
 80142c8:	fae2 f221 	shsax	r2, r2, r1
 80142cc:	3e01      	subs	r6, #1
 80142ce:	60da      	str	r2, [r3, #12]
 80142d0:	f103 0310 	add.w	r3, r3, #16
 80142d4:	d1e1      	bne.n	801429a <arm_radix4_butterfly_inverse_q15+0x21e>
 80142d6:	b015      	add	sp, #84	; 0x54
 80142d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142dc:	4616      	mov	r6, r2
 80142de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80142e0:	e7db      	b.n	801429a <arm_radix4_butterfly_inverse_q15+0x21e>
 80142e2:	bf00      	nop
 80142e4:	ffff0000 	.word	0xffff0000

080142e8 <arm_bitreversal_16>:
 80142e8:	b301      	cbz	r1, 801432c <arm_bitreversal_16+0x44>
 80142ea:	2300      	movs	r3, #0
 80142ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142ee:	eb02 0443 	add.w	r4, r2, r3, lsl #1
 80142f2:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80142f6:	3302      	adds	r3, #2
 80142f8:	8864      	ldrh	r4, [r4, #2]
 80142fa:	08ad      	lsrs	r5, r5, #2
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	08a4      	lsrs	r4, r4, #2
 8014300:	f830 c015 	ldrh.w	ip, [r0, r5, lsl #1]
 8014304:	006f      	lsls	r7, r5, #1
 8014306:	4299      	cmp	r1, r3
 8014308:	ea4f 0644 	mov.w	r6, r4, lsl #1
 801430c:	f830 e014 	ldrh.w	lr, [r0, r4, lsl #1]
 8014310:	f107 0702 	add.w	r7, r7, #2
 8014314:	f106 0602 	add.w	r6, r6, #2
 8014318:	f820 e015 	strh.w	lr, [r0, r5, lsl #1]
 801431c:	f820 c014 	strh.w	ip, [r0, r4, lsl #1]
 8014320:	5bc4      	ldrh	r4, [r0, r7]
 8014322:	5b85      	ldrh	r5, [r0, r6]
 8014324:	53c5      	strh	r5, [r0, r7]
 8014326:	5384      	strh	r4, [r0, r6]
 8014328:	d8e1      	bhi.n	80142ee <arm_bitreversal_16+0x6>
 801432a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801432c:	4770      	bx	lr
 801432e:	bf00      	nop

08014330 <malloc>:
 8014330:	4b02      	ldr	r3, [pc, #8]	; (801433c <malloc+0xc>)
 8014332:	4601      	mov	r1, r0
 8014334:	6818      	ldr	r0, [r3, #0]
 8014336:	f000 b82b 	b.w	8014390 <_malloc_r>
 801433a:	bf00      	nop
 801433c:	240001d8 	.word	0x240001d8

08014340 <free>:
 8014340:	4b02      	ldr	r3, [pc, #8]	; (801434c <free+0xc>)
 8014342:	4601      	mov	r1, r0
 8014344:	6818      	ldr	r0, [r3, #0]
 8014346:	f002 bb8f 	b.w	8016a68 <_free_r>
 801434a:	bf00      	nop
 801434c:	240001d8 	.word	0x240001d8

08014350 <sbrk_aligned>:
 8014350:	b570      	push	{r4, r5, r6, lr}
 8014352:	4e0e      	ldr	r6, [pc, #56]	; (801438c <sbrk_aligned+0x3c>)
 8014354:	460c      	mov	r4, r1
 8014356:	6831      	ldr	r1, [r6, #0]
 8014358:	4605      	mov	r5, r0
 801435a:	b911      	cbnz	r1, 8014362 <sbrk_aligned+0x12>
 801435c:	f001 fd2a 	bl	8015db4 <_sbrk_r>
 8014360:	6030      	str	r0, [r6, #0]
 8014362:	4621      	mov	r1, r4
 8014364:	4628      	mov	r0, r5
 8014366:	f001 fd25 	bl	8015db4 <_sbrk_r>
 801436a:	1c43      	adds	r3, r0, #1
 801436c:	d00a      	beq.n	8014384 <sbrk_aligned+0x34>
 801436e:	1cc4      	adds	r4, r0, #3
 8014370:	f024 0403 	bic.w	r4, r4, #3
 8014374:	42a0      	cmp	r0, r4
 8014376:	d007      	beq.n	8014388 <sbrk_aligned+0x38>
 8014378:	1a21      	subs	r1, r4, r0
 801437a:	4628      	mov	r0, r5
 801437c:	f001 fd1a 	bl	8015db4 <_sbrk_r>
 8014380:	3001      	adds	r0, #1
 8014382:	d101      	bne.n	8014388 <sbrk_aligned+0x38>
 8014384:	f04f 34ff 	mov.w	r4, #4294967295
 8014388:	4620      	mov	r0, r4
 801438a:	bd70      	pop	{r4, r5, r6, pc}
 801438c:	24031384 	.word	0x24031384

08014390 <_malloc_r>:
 8014390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014394:	1ccd      	adds	r5, r1, #3
 8014396:	f025 0503 	bic.w	r5, r5, #3
 801439a:	3508      	adds	r5, #8
 801439c:	2d0c      	cmp	r5, #12
 801439e:	bf38      	it	cc
 80143a0:	250c      	movcc	r5, #12
 80143a2:	2d00      	cmp	r5, #0
 80143a4:	4607      	mov	r7, r0
 80143a6:	db01      	blt.n	80143ac <_malloc_r+0x1c>
 80143a8:	42a9      	cmp	r1, r5
 80143aa:	d905      	bls.n	80143b8 <_malloc_r+0x28>
 80143ac:	230c      	movs	r3, #12
 80143ae:	603b      	str	r3, [r7, #0]
 80143b0:	2600      	movs	r6, #0
 80143b2:	4630      	mov	r0, r6
 80143b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801448c <_malloc_r+0xfc>
 80143bc:	f000 f868 	bl	8014490 <__malloc_lock>
 80143c0:	f8d8 3000 	ldr.w	r3, [r8]
 80143c4:	461c      	mov	r4, r3
 80143c6:	bb5c      	cbnz	r4, 8014420 <_malloc_r+0x90>
 80143c8:	4629      	mov	r1, r5
 80143ca:	4638      	mov	r0, r7
 80143cc:	f7ff ffc0 	bl	8014350 <sbrk_aligned>
 80143d0:	1c43      	adds	r3, r0, #1
 80143d2:	4604      	mov	r4, r0
 80143d4:	d155      	bne.n	8014482 <_malloc_r+0xf2>
 80143d6:	f8d8 4000 	ldr.w	r4, [r8]
 80143da:	4626      	mov	r6, r4
 80143dc:	2e00      	cmp	r6, #0
 80143de:	d145      	bne.n	801446c <_malloc_r+0xdc>
 80143e0:	2c00      	cmp	r4, #0
 80143e2:	d048      	beq.n	8014476 <_malloc_r+0xe6>
 80143e4:	6823      	ldr	r3, [r4, #0]
 80143e6:	4631      	mov	r1, r6
 80143e8:	4638      	mov	r0, r7
 80143ea:	eb04 0903 	add.w	r9, r4, r3
 80143ee:	f001 fce1 	bl	8015db4 <_sbrk_r>
 80143f2:	4581      	cmp	r9, r0
 80143f4:	d13f      	bne.n	8014476 <_malloc_r+0xe6>
 80143f6:	6821      	ldr	r1, [r4, #0]
 80143f8:	1a6d      	subs	r5, r5, r1
 80143fa:	4629      	mov	r1, r5
 80143fc:	4638      	mov	r0, r7
 80143fe:	f7ff ffa7 	bl	8014350 <sbrk_aligned>
 8014402:	3001      	adds	r0, #1
 8014404:	d037      	beq.n	8014476 <_malloc_r+0xe6>
 8014406:	6823      	ldr	r3, [r4, #0]
 8014408:	442b      	add	r3, r5
 801440a:	6023      	str	r3, [r4, #0]
 801440c:	f8d8 3000 	ldr.w	r3, [r8]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d038      	beq.n	8014486 <_malloc_r+0xf6>
 8014414:	685a      	ldr	r2, [r3, #4]
 8014416:	42a2      	cmp	r2, r4
 8014418:	d12b      	bne.n	8014472 <_malloc_r+0xe2>
 801441a:	2200      	movs	r2, #0
 801441c:	605a      	str	r2, [r3, #4]
 801441e:	e00f      	b.n	8014440 <_malloc_r+0xb0>
 8014420:	6822      	ldr	r2, [r4, #0]
 8014422:	1b52      	subs	r2, r2, r5
 8014424:	d41f      	bmi.n	8014466 <_malloc_r+0xd6>
 8014426:	2a0b      	cmp	r2, #11
 8014428:	d917      	bls.n	801445a <_malloc_r+0xca>
 801442a:	1961      	adds	r1, r4, r5
 801442c:	42a3      	cmp	r3, r4
 801442e:	6025      	str	r5, [r4, #0]
 8014430:	bf18      	it	ne
 8014432:	6059      	strne	r1, [r3, #4]
 8014434:	6863      	ldr	r3, [r4, #4]
 8014436:	bf08      	it	eq
 8014438:	f8c8 1000 	streq.w	r1, [r8]
 801443c:	5162      	str	r2, [r4, r5]
 801443e:	604b      	str	r3, [r1, #4]
 8014440:	4638      	mov	r0, r7
 8014442:	f104 060b 	add.w	r6, r4, #11
 8014446:	f000 f829 	bl	801449c <__malloc_unlock>
 801444a:	f026 0607 	bic.w	r6, r6, #7
 801444e:	1d23      	adds	r3, r4, #4
 8014450:	1af2      	subs	r2, r6, r3
 8014452:	d0ae      	beq.n	80143b2 <_malloc_r+0x22>
 8014454:	1b9b      	subs	r3, r3, r6
 8014456:	50a3      	str	r3, [r4, r2]
 8014458:	e7ab      	b.n	80143b2 <_malloc_r+0x22>
 801445a:	42a3      	cmp	r3, r4
 801445c:	6862      	ldr	r2, [r4, #4]
 801445e:	d1dd      	bne.n	801441c <_malloc_r+0x8c>
 8014460:	f8c8 2000 	str.w	r2, [r8]
 8014464:	e7ec      	b.n	8014440 <_malloc_r+0xb0>
 8014466:	4623      	mov	r3, r4
 8014468:	6864      	ldr	r4, [r4, #4]
 801446a:	e7ac      	b.n	80143c6 <_malloc_r+0x36>
 801446c:	4634      	mov	r4, r6
 801446e:	6876      	ldr	r6, [r6, #4]
 8014470:	e7b4      	b.n	80143dc <_malloc_r+0x4c>
 8014472:	4613      	mov	r3, r2
 8014474:	e7cc      	b.n	8014410 <_malloc_r+0x80>
 8014476:	230c      	movs	r3, #12
 8014478:	603b      	str	r3, [r7, #0]
 801447a:	4638      	mov	r0, r7
 801447c:	f000 f80e 	bl	801449c <__malloc_unlock>
 8014480:	e797      	b.n	80143b2 <_malloc_r+0x22>
 8014482:	6025      	str	r5, [r4, #0]
 8014484:	e7dc      	b.n	8014440 <_malloc_r+0xb0>
 8014486:	605b      	str	r3, [r3, #4]
 8014488:	deff      	udf	#255	; 0xff
 801448a:	bf00      	nop
 801448c:	24031380 	.word	0x24031380

08014490 <__malloc_lock>:
 8014490:	4801      	ldr	r0, [pc, #4]	; (8014498 <__malloc_lock+0x8>)
 8014492:	f001 bcdd 	b.w	8015e50 <__retarget_lock_acquire_recursive>
 8014496:	bf00      	nop
 8014498:	240314c9 	.word	0x240314c9

0801449c <__malloc_unlock>:
 801449c:	4801      	ldr	r0, [pc, #4]	; (80144a4 <__malloc_unlock+0x8>)
 801449e:	f001 bcd9 	b.w	8015e54 <__retarget_lock_release_recursive>
 80144a2:	bf00      	nop
 80144a4:	240314c9 	.word	0x240314c9

080144a8 <__cvt>:
 80144a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144aa:	ed2d 8b02 	vpush	{d8}
 80144ae:	eeb0 8b40 	vmov.f64	d8, d0
 80144b2:	b085      	sub	sp, #20
 80144b4:	4617      	mov	r7, r2
 80144b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80144b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80144ba:	ee18 2a90 	vmov	r2, s17
 80144be:	f025 0520 	bic.w	r5, r5, #32
 80144c2:	2a00      	cmp	r2, #0
 80144c4:	bfb6      	itet	lt
 80144c6:	222d      	movlt	r2, #45	; 0x2d
 80144c8:	2200      	movge	r2, #0
 80144ca:	eeb1 8b40 	vneglt.f64	d8, d0
 80144ce:	2d46      	cmp	r5, #70	; 0x46
 80144d0:	460c      	mov	r4, r1
 80144d2:	701a      	strb	r2, [r3, #0]
 80144d4:	d004      	beq.n	80144e0 <__cvt+0x38>
 80144d6:	2d45      	cmp	r5, #69	; 0x45
 80144d8:	d100      	bne.n	80144dc <__cvt+0x34>
 80144da:	3401      	adds	r4, #1
 80144dc:	2102      	movs	r1, #2
 80144de:	e000      	b.n	80144e2 <__cvt+0x3a>
 80144e0:	2103      	movs	r1, #3
 80144e2:	ab03      	add	r3, sp, #12
 80144e4:	9301      	str	r3, [sp, #4]
 80144e6:	ab02      	add	r3, sp, #8
 80144e8:	9300      	str	r3, [sp, #0]
 80144ea:	4622      	mov	r2, r4
 80144ec:	4633      	mov	r3, r6
 80144ee:	eeb0 0b48 	vmov.f64	d0, d8
 80144f2:	f001 fd4d 	bl	8015f90 <_dtoa_r>
 80144f6:	2d47      	cmp	r5, #71	; 0x47
 80144f8:	d101      	bne.n	80144fe <__cvt+0x56>
 80144fa:	07fb      	lsls	r3, r7, #31
 80144fc:	d51a      	bpl.n	8014534 <__cvt+0x8c>
 80144fe:	2d46      	cmp	r5, #70	; 0x46
 8014500:	eb00 0204 	add.w	r2, r0, r4
 8014504:	d10c      	bne.n	8014520 <__cvt+0x78>
 8014506:	7803      	ldrb	r3, [r0, #0]
 8014508:	2b30      	cmp	r3, #48	; 0x30
 801450a:	d107      	bne.n	801451c <__cvt+0x74>
 801450c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014514:	bf1c      	itt	ne
 8014516:	f1c4 0401 	rsbne	r4, r4, #1
 801451a:	6034      	strne	r4, [r6, #0]
 801451c:	6833      	ldr	r3, [r6, #0]
 801451e:	441a      	add	r2, r3
 8014520:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014528:	bf08      	it	eq
 801452a:	9203      	streq	r2, [sp, #12]
 801452c:	2130      	movs	r1, #48	; 0x30
 801452e:	9b03      	ldr	r3, [sp, #12]
 8014530:	4293      	cmp	r3, r2
 8014532:	d307      	bcc.n	8014544 <__cvt+0x9c>
 8014534:	9b03      	ldr	r3, [sp, #12]
 8014536:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014538:	1a1b      	subs	r3, r3, r0
 801453a:	6013      	str	r3, [r2, #0]
 801453c:	b005      	add	sp, #20
 801453e:	ecbd 8b02 	vpop	{d8}
 8014542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014544:	1c5c      	adds	r4, r3, #1
 8014546:	9403      	str	r4, [sp, #12]
 8014548:	7019      	strb	r1, [r3, #0]
 801454a:	e7f0      	b.n	801452e <__cvt+0x86>

0801454c <__exponent>:
 801454c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801454e:	4603      	mov	r3, r0
 8014550:	2900      	cmp	r1, #0
 8014552:	bfb8      	it	lt
 8014554:	4249      	neglt	r1, r1
 8014556:	f803 2b02 	strb.w	r2, [r3], #2
 801455a:	bfb4      	ite	lt
 801455c:	222d      	movlt	r2, #45	; 0x2d
 801455e:	222b      	movge	r2, #43	; 0x2b
 8014560:	2909      	cmp	r1, #9
 8014562:	7042      	strb	r2, [r0, #1]
 8014564:	dd2a      	ble.n	80145bc <__exponent+0x70>
 8014566:	f10d 0207 	add.w	r2, sp, #7
 801456a:	4617      	mov	r7, r2
 801456c:	260a      	movs	r6, #10
 801456e:	4694      	mov	ip, r2
 8014570:	fb91 f5f6 	sdiv	r5, r1, r6
 8014574:	fb06 1415 	mls	r4, r6, r5, r1
 8014578:	3430      	adds	r4, #48	; 0x30
 801457a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801457e:	460c      	mov	r4, r1
 8014580:	2c63      	cmp	r4, #99	; 0x63
 8014582:	f102 32ff 	add.w	r2, r2, #4294967295
 8014586:	4629      	mov	r1, r5
 8014588:	dcf1      	bgt.n	801456e <__exponent+0x22>
 801458a:	3130      	adds	r1, #48	; 0x30
 801458c:	f1ac 0402 	sub.w	r4, ip, #2
 8014590:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014594:	1c41      	adds	r1, r0, #1
 8014596:	4622      	mov	r2, r4
 8014598:	42ba      	cmp	r2, r7
 801459a:	d30a      	bcc.n	80145b2 <__exponent+0x66>
 801459c:	f10d 0209 	add.w	r2, sp, #9
 80145a0:	eba2 020c 	sub.w	r2, r2, ip
 80145a4:	42bc      	cmp	r4, r7
 80145a6:	bf88      	it	hi
 80145a8:	2200      	movhi	r2, #0
 80145aa:	4413      	add	r3, r2
 80145ac:	1a18      	subs	r0, r3, r0
 80145ae:	b003      	add	sp, #12
 80145b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80145b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80145ba:	e7ed      	b.n	8014598 <__exponent+0x4c>
 80145bc:	2330      	movs	r3, #48	; 0x30
 80145be:	3130      	adds	r1, #48	; 0x30
 80145c0:	7083      	strb	r3, [r0, #2]
 80145c2:	70c1      	strb	r1, [r0, #3]
 80145c4:	1d03      	adds	r3, r0, #4
 80145c6:	e7f1      	b.n	80145ac <__exponent+0x60>

080145c8 <_printf_float>:
 80145c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145cc:	b08b      	sub	sp, #44	; 0x2c
 80145ce:	460c      	mov	r4, r1
 80145d0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80145d4:	4616      	mov	r6, r2
 80145d6:	461f      	mov	r7, r3
 80145d8:	4605      	mov	r5, r0
 80145da:	f001 fbb3 	bl	8015d44 <_localeconv_r>
 80145de:	f8d0 b000 	ldr.w	fp, [r0]
 80145e2:	4658      	mov	r0, fp
 80145e4:	f7eb fef4 	bl	80003d0 <strlen>
 80145e8:	2300      	movs	r3, #0
 80145ea:	9308      	str	r3, [sp, #32]
 80145ec:	f8d8 3000 	ldr.w	r3, [r8]
 80145f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80145f4:	6822      	ldr	r2, [r4, #0]
 80145f6:	3307      	adds	r3, #7
 80145f8:	f023 0307 	bic.w	r3, r3, #7
 80145fc:	f103 0108 	add.w	r1, r3, #8
 8014600:	f8c8 1000 	str.w	r1, [r8]
 8014604:	ed93 0b00 	vldr	d0, [r3]
 8014608:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8014868 <_printf_float+0x2a0>
 801460c:	eeb0 7bc0 	vabs.f64	d7, d0
 8014610:	eeb4 7b46 	vcmp.f64	d7, d6
 8014614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014618:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801461c:	4682      	mov	sl, r0
 801461e:	dd24      	ble.n	801466a <_printf_float+0xa2>
 8014620:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014628:	d502      	bpl.n	8014630 <_printf_float+0x68>
 801462a:	232d      	movs	r3, #45	; 0x2d
 801462c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014630:	498f      	ldr	r1, [pc, #572]	; (8014870 <_printf_float+0x2a8>)
 8014632:	4b90      	ldr	r3, [pc, #576]	; (8014874 <_printf_float+0x2ac>)
 8014634:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8014638:	bf94      	ite	ls
 801463a:	4688      	movls	r8, r1
 801463c:	4698      	movhi	r8, r3
 801463e:	2303      	movs	r3, #3
 8014640:	6123      	str	r3, [r4, #16]
 8014642:	f022 0204 	bic.w	r2, r2, #4
 8014646:	2300      	movs	r3, #0
 8014648:	6022      	str	r2, [r4, #0]
 801464a:	9304      	str	r3, [sp, #16]
 801464c:	9700      	str	r7, [sp, #0]
 801464e:	4633      	mov	r3, r6
 8014650:	aa09      	add	r2, sp, #36	; 0x24
 8014652:	4621      	mov	r1, r4
 8014654:	4628      	mov	r0, r5
 8014656:	f000 f9d1 	bl	80149fc <_printf_common>
 801465a:	3001      	adds	r0, #1
 801465c:	f040 808a 	bne.w	8014774 <_printf_float+0x1ac>
 8014660:	f04f 30ff 	mov.w	r0, #4294967295
 8014664:	b00b      	add	sp, #44	; 0x2c
 8014666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801466a:	eeb4 0b40 	vcmp.f64	d0, d0
 801466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014672:	d709      	bvc.n	8014688 <_printf_float+0xc0>
 8014674:	ee10 3a90 	vmov	r3, s1
 8014678:	2b00      	cmp	r3, #0
 801467a:	bfbc      	itt	lt
 801467c:	232d      	movlt	r3, #45	; 0x2d
 801467e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014682:	497d      	ldr	r1, [pc, #500]	; (8014878 <_printf_float+0x2b0>)
 8014684:	4b7d      	ldr	r3, [pc, #500]	; (801487c <_printf_float+0x2b4>)
 8014686:	e7d5      	b.n	8014634 <_printf_float+0x6c>
 8014688:	6863      	ldr	r3, [r4, #4]
 801468a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801468e:	9104      	str	r1, [sp, #16]
 8014690:	1c59      	adds	r1, r3, #1
 8014692:	d13c      	bne.n	801470e <_printf_float+0x146>
 8014694:	2306      	movs	r3, #6
 8014696:	6063      	str	r3, [r4, #4]
 8014698:	2300      	movs	r3, #0
 801469a:	9303      	str	r3, [sp, #12]
 801469c:	ab08      	add	r3, sp, #32
 801469e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80146a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80146a6:	ab07      	add	r3, sp, #28
 80146a8:	6861      	ldr	r1, [r4, #4]
 80146aa:	9300      	str	r3, [sp, #0]
 80146ac:	6022      	str	r2, [r4, #0]
 80146ae:	f10d 031b 	add.w	r3, sp, #27
 80146b2:	4628      	mov	r0, r5
 80146b4:	f7ff fef8 	bl	80144a8 <__cvt>
 80146b8:	9b04      	ldr	r3, [sp, #16]
 80146ba:	9907      	ldr	r1, [sp, #28]
 80146bc:	2b47      	cmp	r3, #71	; 0x47
 80146be:	4680      	mov	r8, r0
 80146c0:	d108      	bne.n	80146d4 <_printf_float+0x10c>
 80146c2:	1cc8      	adds	r0, r1, #3
 80146c4:	db02      	blt.n	80146cc <_printf_float+0x104>
 80146c6:	6863      	ldr	r3, [r4, #4]
 80146c8:	4299      	cmp	r1, r3
 80146ca:	dd41      	ble.n	8014750 <_printf_float+0x188>
 80146cc:	f1a9 0902 	sub.w	r9, r9, #2
 80146d0:	fa5f f989 	uxtb.w	r9, r9
 80146d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80146d8:	d820      	bhi.n	801471c <_printf_float+0x154>
 80146da:	3901      	subs	r1, #1
 80146dc:	464a      	mov	r2, r9
 80146de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80146e2:	9107      	str	r1, [sp, #28]
 80146e4:	f7ff ff32 	bl	801454c <__exponent>
 80146e8:	9a08      	ldr	r2, [sp, #32]
 80146ea:	9004      	str	r0, [sp, #16]
 80146ec:	1813      	adds	r3, r2, r0
 80146ee:	2a01      	cmp	r2, #1
 80146f0:	6123      	str	r3, [r4, #16]
 80146f2:	dc02      	bgt.n	80146fa <_printf_float+0x132>
 80146f4:	6822      	ldr	r2, [r4, #0]
 80146f6:	07d2      	lsls	r2, r2, #31
 80146f8:	d501      	bpl.n	80146fe <_printf_float+0x136>
 80146fa:	3301      	adds	r3, #1
 80146fc:	6123      	str	r3, [r4, #16]
 80146fe:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d0a2      	beq.n	801464c <_printf_float+0x84>
 8014706:	232d      	movs	r3, #45	; 0x2d
 8014708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801470c:	e79e      	b.n	801464c <_printf_float+0x84>
 801470e:	9904      	ldr	r1, [sp, #16]
 8014710:	2947      	cmp	r1, #71	; 0x47
 8014712:	d1c1      	bne.n	8014698 <_printf_float+0xd0>
 8014714:	2b00      	cmp	r3, #0
 8014716:	d1bf      	bne.n	8014698 <_printf_float+0xd0>
 8014718:	2301      	movs	r3, #1
 801471a:	e7bc      	b.n	8014696 <_printf_float+0xce>
 801471c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014720:	d118      	bne.n	8014754 <_printf_float+0x18c>
 8014722:	2900      	cmp	r1, #0
 8014724:	6863      	ldr	r3, [r4, #4]
 8014726:	dd0b      	ble.n	8014740 <_printf_float+0x178>
 8014728:	6121      	str	r1, [r4, #16]
 801472a:	b913      	cbnz	r3, 8014732 <_printf_float+0x16a>
 801472c:	6822      	ldr	r2, [r4, #0]
 801472e:	07d0      	lsls	r0, r2, #31
 8014730:	d502      	bpl.n	8014738 <_printf_float+0x170>
 8014732:	3301      	adds	r3, #1
 8014734:	440b      	add	r3, r1
 8014736:	6123      	str	r3, [r4, #16]
 8014738:	2300      	movs	r3, #0
 801473a:	65a1      	str	r1, [r4, #88]	; 0x58
 801473c:	9304      	str	r3, [sp, #16]
 801473e:	e7de      	b.n	80146fe <_printf_float+0x136>
 8014740:	b913      	cbnz	r3, 8014748 <_printf_float+0x180>
 8014742:	6822      	ldr	r2, [r4, #0]
 8014744:	07d2      	lsls	r2, r2, #31
 8014746:	d501      	bpl.n	801474c <_printf_float+0x184>
 8014748:	3302      	adds	r3, #2
 801474a:	e7f4      	b.n	8014736 <_printf_float+0x16e>
 801474c:	2301      	movs	r3, #1
 801474e:	e7f2      	b.n	8014736 <_printf_float+0x16e>
 8014750:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014754:	9b08      	ldr	r3, [sp, #32]
 8014756:	4299      	cmp	r1, r3
 8014758:	db05      	blt.n	8014766 <_printf_float+0x19e>
 801475a:	6823      	ldr	r3, [r4, #0]
 801475c:	6121      	str	r1, [r4, #16]
 801475e:	07d8      	lsls	r0, r3, #31
 8014760:	d5ea      	bpl.n	8014738 <_printf_float+0x170>
 8014762:	1c4b      	adds	r3, r1, #1
 8014764:	e7e7      	b.n	8014736 <_printf_float+0x16e>
 8014766:	2900      	cmp	r1, #0
 8014768:	bfd4      	ite	le
 801476a:	f1c1 0202 	rsble	r2, r1, #2
 801476e:	2201      	movgt	r2, #1
 8014770:	4413      	add	r3, r2
 8014772:	e7e0      	b.n	8014736 <_printf_float+0x16e>
 8014774:	6823      	ldr	r3, [r4, #0]
 8014776:	055a      	lsls	r2, r3, #21
 8014778:	d407      	bmi.n	801478a <_printf_float+0x1c2>
 801477a:	6923      	ldr	r3, [r4, #16]
 801477c:	4642      	mov	r2, r8
 801477e:	4631      	mov	r1, r6
 8014780:	4628      	mov	r0, r5
 8014782:	47b8      	blx	r7
 8014784:	3001      	adds	r0, #1
 8014786:	d12a      	bne.n	80147de <_printf_float+0x216>
 8014788:	e76a      	b.n	8014660 <_printf_float+0x98>
 801478a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801478e:	f240 80e0 	bls.w	8014952 <_printf_float+0x38a>
 8014792:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014796:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801479a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801479e:	d133      	bne.n	8014808 <_printf_float+0x240>
 80147a0:	4a37      	ldr	r2, [pc, #220]	; (8014880 <_printf_float+0x2b8>)
 80147a2:	2301      	movs	r3, #1
 80147a4:	4631      	mov	r1, r6
 80147a6:	4628      	mov	r0, r5
 80147a8:	47b8      	blx	r7
 80147aa:	3001      	adds	r0, #1
 80147ac:	f43f af58 	beq.w	8014660 <_printf_float+0x98>
 80147b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80147b4:	429a      	cmp	r2, r3
 80147b6:	db02      	blt.n	80147be <_printf_float+0x1f6>
 80147b8:	6823      	ldr	r3, [r4, #0]
 80147ba:	07d8      	lsls	r0, r3, #31
 80147bc:	d50f      	bpl.n	80147de <_printf_float+0x216>
 80147be:	4653      	mov	r3, sl
 80147c0:	465a      	mov	r2, fp
 80147c2:	4631      	mov	r1, r6
 80147c4:	4628      	mov	r0, r5
 80147c6:	47b8      	blx	r7
 80147c8:	3001      	adds	r0, #1
 80147ca:	f43f af49 	beq.w	8014660 <_printf_float+0x98>
 80147ce:	f04f 0800 	mov.w	r8, #0
 80147d2:	f104 091a 	add.w	r9, r4, #26
 80147d6:	9b08      	ldr	r3, [sp, #32]
 80147d8:	3b01      	subs	r3, #1
 80147da:	4543      	cmp	r3, r8
 80147dc:	dc09      	bgt.n	80147f2 <_printf_float+0x22a>
 80147de:	6823      	ldr	r3, [r4, #0]
 80147e0:	079b      	lsls	r3, r3, #30
 80147e2:	f100 8106 	bmi.w	80149f2 <_printf_float+0x42a>
 80147e6:	68e0      	ldr	r0, [r4, #12]
 80147e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147ea:	4298      	cmp	r0, r3
 80147ec:	bfb8      	it	lt
 80147ee:	4618      	movlt	r0, r3
 80147f0:	e738      	b.n	8014664 <_printf_float+0x9c>
 80147f2:	2301      	movs	r3, #1
 80147f4:	464a      	mov	r2, r9
 80147f6:	4631      	mov	r1, r6
 80147f8:	4628      	mov	r0, r5
 80147fa:	47b8      	blx	r7
 80147fc:	3001      	adds	r0, #1
 80147fe:	f43f af2f 	beq.w	8014660 <_printf_float+0x98>
 8014802:	f108 0801 	add.w	r8, r8, #1
 8014806:	e7e6      	b.n	80147d6 <_printf_float+0x20e>
 8014808:	9b07      	ldr	r3, [sp, #28]
 801480a:	2b00      	cmp	r3, #0
 801480c:	dc3a      	bgt.n	8014884 <_printf_float+0x2bc>
 801480e:	4a1c      	ldr	r2, [pc, #112]	; (8014880 <_printf_float+0x2b8>)
 8014810:	2301      	movs	r3, #1
 8014812:	4631      	mov	r1, r6
 8014814:	4628      	mov	r0, r5
 8014816:	47b8      	blx	r7
 8014818:	3001      	adds	r0, #1
 801481a:	f43f af21 	beq.w	8014660 <_printf_float+0x98>
 801481e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014822:	4313      	orrs	r3, r2
 8014824:	d102      	bne.n	801482c <_printf_float+0x264>
 8014826:	6823      	ldr	r3, [r4, #0]
 8014828:	07d9      	lsls	r1, r3, #31
 801482a:	d5d8      	bpl.n	80147de <_printf_float+0x216>
 801482c:	4653      	mov	r3, sl
 801482e:	465a      	mov	r2, fp
 8014830:	4631      	mov	r1, r6
 8014832:	4628      	mov	r0, r5
 8014834:	47b8      	blx	r7
 8014836:	3001      	adds	r0, #1
 8014838:	f43f af12 	beq.w	8014660 <_printf_float+0x98>
 801483c:	f04f 0900 	mov.w	r9, #0
 8014840:	f104 0a1a 	add.w	sl, r4, #26
 8014844:	9b07      	ldr	r3, [sp, #28]
 8014846:	425b      	negs	r3, r3
 8014848:	454b      	cmp	r3, r9
 801484a:	dc01      	bgt.n	8014850 <_printf_float+0x288>
 801484c:	9b08      	ldr	r3, [sp, #32]
 801484e:	e795      	b.n	801477c <_printf_float+0x1b4>
 8014850:	2301      	movs	r3, #1
 8014852:	4652      	mov	r2, sl
 8014854:	4631      	mov	r1, r6
 8014856:	4628      	mov	r0, r5
 8014858:	47b8      	blx	r7
 801485a:	3001      	adds	r0, #1
 801485c:	f43f af00 	beq.w	8014660 <_printf_float+0x98>
 8014860:	f109 0901 	add.w	r9, r9, #1
 8014864:	e7ee      	b.n	8014844 <_printf_float+0x27c>
 8014866:	bf00      	nop
 8014868:	ffffffff 	.word	0xffffffff
 801486c:	7fefffff 	.word	0x7fefffff
 8014870:	0802ca48 	.word	0x0802ca48
 8014874:	0802ca4c 	.word	0x0802ca4c
 8014878:	0802ca50 	.word	0x0802ca50
 801487c:	0802ca54 	.word	0x0802ca54
 8014880:	0802d19c 	.word	0x0802d19c
 8014884:	9a08      	ldr	r2, [sp, #32]
 8014886:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014888:	429a      	cmp	r2, r3
 801488a:	bfa8      	it	ge
 801488c:	461a      	movge	r2, r3
 801488e:	2a00      	cmp	r2, #0
 8014890:	4691      	mov	r9, r2
 8014892:	dc38      	bgt.n	8014906 <_printf_float+0x33e>
 8014894:	2300      	movs	r3, #0
 8014896:	9305      	str	r3, [sp, #20]
 8014898:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801489c:	f104 021a 	add.w	r2, r4, #26
 80148a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80148a2:	9905      	ldr	r1, [sp, #20]
 80148a4:	9304      	str	r3, [sp, #16]
 80148a6:	eba3 0309 	sub.w	r3, r3, r9
 80148aa:	428b      	cmp	r3, r1
 80148ac:	dc33      	bgt.n	8014916 <_printf_float+0x34e>
 80148ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80148b2:	429a      	cmp	r2, r3
 80148b4:	db3c      	blt.n	8014930 <_printf_float+0x368>
 80148b6:	6823      	ldr	r3, [r4, #0]
 80148b8:	07da      	lsls	r2, r3, #31
 80148ba:	d439      	bmi.n	8014930 <_printf_float+0x368>
 80148bc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80148c0:	eba2 0903 	sub.w	r9, r2, r3
 80148c4:	9b04      	ldr	r3, [sp, #16]
 80148c6:	1ad2      	subs	r2, r2, r3
 80148c8:	4591      	cmp	r9, r2
 80148ca:	bfa8      	it	ge
 80148cc:	4691      	movge	r9, r2
 80148ce:	f1b9 0f00 	cmp.w	r9, #0
 80148d2:	dc35      	bgt.n	8014940 <_printf_float+0x378>
 80148d4:	f04f 0800 	mov.w	r8, #0
 80148d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80148dc:	f104 0a1a 	add.w	sl, r4, #26
 80148e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80148e4:	1a9b      	subs	r3, r3, r2
 80148e6:	eba3 0309 	sub.w	r3, r3, r9
 80148ea:	4543      	cmp	r3, r8
 80148ec:	f77f af77 	ble.w	80147de <_printf_float+0x216>
 80148f0:	2301      	movs	r3, #1
 80148f2:	4652      	mov	r2, sl
 80148f4:	4631      	mov	r1, r6
 80148f6:	4628      	mov	r0, r5
 80148f8:	47b8      	blx	r7
 80148fa:	3001      	adds	r0, #1
 80148fc:	f43f aeb0 	beq.w	8014660 <_printf_float+0x98>
 8014900:	f108 0801 	add.w	r8, r8, #1
 8014904:	e7ec      	b.n	80148e0 <_printf_float+0x318>
 8014906:	4613      	mov	r3, r2
 8014908:	4631      	mov	r1, r6
 801490a:	4642      	mov	r2, r8
 801490c:	4628      	mov	r0, r5
 801490e:	47b8      	blx	r7
 8014910:	3001      	adds	r0, #1
 8014912:	d1bf      	bne.n	8014894 <_printf_float+0x2cc>
 8014914:	e6a4      	b.n	8014660 <_printf_float+0x98>
 8014916:	2301      	movs	r3, #1
 8014918:	4631      	mov	r1, r6
 801491a:	4628      	mov	r0, r5
 801491c:	9204      	str	r2, [sp, #16]
 801491e:	47b8      	blx	r7
 8014920:	3001      	adds	r0, #1
 8014922:	f43f ae9d 	beq.w	8014660 <_printf_float+0x98>
 8014926:	9b05      	ldr	r3, [sp, #20]
 8014928:	9a04      	ldr	r2, [sp, #16]
 801492a:	3301      	adds	r3, #1
 801492c:	9305      	str	r3, [sp, #20]
 801492e:	e7b7      	b.n	80148a0 <_printf_float+0x2d8>
 8014930:	4653      	mov	r3, sl
 8014932:	465a      	mov	r2, fp
 8014934:	4631      	mov	r1, r6
 8014936:	4628      	mov	r0, r5
 8014938:	47b8      	blx	r7
 801493a:	3001      	adds	r0, #1
 801493c:	d1be      	bne.n	80148bc <_printf_float+0x2f4>
 801493e:	e68f      	b.n	8014660 <_printf_float+0x98>
 8014940:	9a04      	ldr	r2, [sp, #16]
 8014942:	464b      	mov	r3, r9
 8014944:	4442      	add	r2, r8
 8014946:	4631      	mov	r1, r6
 8014948:	4628      	mov	r0, r5
 801494a:	47b8      	blx	r7
 801494c:	3001      	adds	r0, #1
 801494e:	d1c1      	bne.n	80148d4 <_printf_float+0x30c>
 8014950:	e686      	b.n	8014660 <_printf_float+0x98>
 8014952:	9a08      	ldr	r2, [sp, #32]
 8014954:	2a01      	cmp	r2, #1
 8014956:	dc01      	bgt.n	801495c <_printf_float+0x394>
 8014958:	07db      	lsls	r3, r3, #31
 801495a:	d537      	bpl.n	80149cc <_printf_float+0x404>
 801495c:	2301      	movs	r3, #1
 801495e:	4642      	mov	r2, r8
 8014960:	4631      	mov	r1, r6
 8014962:	4628      	mov	r0, r5
 8014964:	47b8      	blx	r7
 8014966:	3001      	adds	r0, #1
 8014968:	f43f ae7a 	beq.w	8014660 <_printf_float+0x98>
 801496c:	4653      	mov	r3, sl
 801496e:	465a      	mov	r2, fp
 8014970:	4631      	mov	r1, r6
 8014972:	4628      	mov	r0, r5
 8014974:	47b8      	blx	r7
 8014976:	3001      	adds	r0, #1
 8014978:	f43f ae72 	beq.w	8014660 <_printf_float+0x98>
 801497c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014980:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014988:	9b08      	ldr	r3, [sp, #32]
 801498a:	d01a      	beq.n	80149c2 <_printf_float+0x3fa>
 801498c:	3b01      	subs	r3, #1
 801498e:	f108 0201 	add.w	r2, r8, #1
 8014992:	4631      	mov	r1, r6
 8014994:	4628      	mov	r0, r5
 8014996:	47b8      	blx	r7
 8014998:	3001      	adds	r0, #1
 801499a:	d10e      	bne.n	80149ba <_printf_float+0x3f2>
 801499c:	e660      	b.n	8014660 <_printf_float+0x98>
 801499e:	2301      	movs	r3, #1
 80149a0:	464a      	mov	r2, r9
 80149a2:	4631      	mov	r1, r6
 80149a4:	4628      	mov	r0, r5
 80149a6:	47b8      	blx	r7
 80149a8:	3001      	adds	r0, #1
 80149aa:	f43f ae59 	beq.w	8014660 <_printf_float+0x98>
 80149ae:	f108 0801 	add.w	r8, r8, #1
 80149b2:	9b08      	ldr	r3, [sp, #32]
 80149b4:	3b01      	subs	r3, #1
 80149b6:	4543      	cmp	r3, r8
 80149b8:	dcf1      	bgt.n	801499e <_printf_float+0x3d6>
 80149ba:	9b04      	ldr	r3, [sp, #16]
 80149bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80149c0:	e6dd      	b.n	801477e <_printf_float+0x1b6>
 80149c2:	f04f 0800 	mov.w	r8, #0
 80149c6:	f104 091a 	add.w	r9, r4, #26
 80149ca:	e7f2      	b.n	80149b2 <_printf_float+0x3ea>
 80149cc:	2301      	movs	r3, #1
 80149ce:	4642      	mov	r2, r8
 80149d0:	e7df      	b.n	8014992 <_printf_float+0x3ca>
 80149d2:	2301      	movs	r3, #1
 80149d4:	464a      	mov	r2, r9
 80149d6:	4631      	mov	r1, r6
 80149d8:	4628      	mov	r0, r5
 80149da:	47b8      	blx	r7
 80149dc:	3001      	adds	r0, #1
 80149de:	f43f ae3f 	beq.w	8014660 <_printf_float+0x98>
 80149e2:	f108 0801 	add.w	r8, r8, #1
 80149e6:	68e3      	ldr	r3, [r4, #12]
 80149e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80149ea:	1a5b      	subs	r3, r3, r1
 80149ec:	4543      	cmp	r3, r8
 80149ee:	dcf0      	bgt.n	80149d2 <_printf_float+0x40a>
 80149f0:	e6f9      	b.n	80147e6 <_printf_float+0x21e>
 80149f2:	f04f 0800 	mov.w	r8, #0
 80149f6:	f104 0919 	add.w	r9, r4, #25
 80149fa:	e7f4      	b.n	80149e6 <_printf_float+0x41e>

080149fc <_printf_common>:
 80149fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a00:	4616      	mov	r6, r2
 8014a02:	4699      	mov	r9, r3
 8014a04:	688a      	ldr	r2, [r1, #8]
 8014a06:	690b      	ldr	r3, [r1, #16]
 8014a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014a0c:	4293      	cmp	r3, r2
 8014a0e:	bfb8      	it	lt
 8014a10:	4613      	movlt	r3, r2
 8014a12:	6033      	str	r3, [r6, #0]
 8014a14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014a18:	4607      	mov	r7, r0
 8014a1a:	460c      	mov	r4, r1
 8014a1c:	b10a      	cbz	r2, 8014a22 <_printf_common+0x26>
 8014a1e:	3301      	adds	r3, #1
 8014a20:	6033      	str	r3, [r6, #0]
 8014a22:	6823      	ldr	r3, [r4, #0]
 8014a24:	0699      	lsls	r1, r3, #26
 8014a26:	bf42      	ittt	mi
 8014a28:	6833      	ldrmi	r3, [r6, #0]
 8014a2a:	3302      	addmi	r3, #2
 8014a2c:	6033      	strmi	r3, [r6, #0]
 8014a2e:	6825      	ldr	r5, [r4, #0]
 8014a30:	f015 0506 	ands.w	r5, r5, #6
 8014a34:	d106      	bne.n	8014a44 <_printf_common+0x48>
 8014a36:	f104 0a19 	add.w	sl, r4, #25
 8014a3a:	68e3      	ldr	r3, [r4, #12]
 8014a3c:	6832      	ldr	r2, [r6, #0]
 8014a3e:	1a9b      	subs	r3, r3, r2
 8014a40:	42ab      	cmp	r3, r5
 8014a42:	dc26      	bgt.n	8014a92 <_printf_common+0x96>
 8014a44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014a48:	1e13      	subs	r3, r2, #0
 8014a4a:	6822      	ldr	r2, [r4, #0]
 8014a4c:	bf18      	it	ne
 8014a4e:	2301      	movne	r3, #1
 8014a50:	0692      	lsls	r2, r2, #26
 8014a52:	d42b      	bmi.n	8014aac <_printf_common+0xb0>
 8014a54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014a58:	4649      	mov	r1, r9
 8014a5a:	4638      	mov	r0, r7
 8014a5c:	47c0      	blx	r8
 8014a5e:	3001      	adds	r0, #1
 8014a60:	d01e      	beq.n	8014aa0 <_printf_common+0xa4>
 8014a62:	6823      	ldr	r3, [r4, #0]
 8014a64:	6922      	ldr	r2, [r4, #16]
 8014a66:	f003 0306 	and.w	r3, r3, #6
 8014a6a:	2b04      	cmp	r3, #4
 8014a6c:	bf02      	ittt	eq
 8014a6e:	68e5      	ldreq	r5, [r4, #12]
 8014a70:	6833      	ldreq	r3, [r6, #0]
 8014a72:	1aed      	subeq	r5, r5, r3
 8014a74:	68a3      	ldr	r3, [r4, #8]
 8014a76:	bf0c      	ite	eq
 8014a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014a7c:	2500      	movne	r5, #0
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	bfc4      	itt	gt
 8014a82:	1a9b      	subgt	r3, r3, r2
 8014a84:	18ed      	addgt	r5, r5, r3
 8014a86:	2600      	movs	r6, #0
 8014a88:	341a      	adds	r4, #26
 8014a8a:	42b5      	cmp	r5, r6
 8014a8c:	d11a      	bne.n	8014ac4 <_printf_common+0xc8>
 8014a8e:	2000      	movs	r0, #0
 8014a90:	e008      	b.n	8014aa4 <_printf_common+0xa8>
 8014a92:	2301      	movs	r3, #1
 8014a94:	4652      	mov	r2, sl
 8014a96:	4649      	mov	r1, r9
 8014a98:	4638      	mov	r0, r7
 8014a9a:	47c0      	blx	r8
 8014a9c:	3001      	adds	r0, #1
 8014a9e:	d103      	bne.n	8014aa8 <_printf_common+0xac>
 8014aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8014aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014aa8:	3501      	adds	r5, #1
 8014aaa:	e7c6      	b.n	8014a3a <_printf_common+0x3e>
 8014aac:	18e1      	adds	r1, r4, r3
 8014aae:	1c5a      	adds	r2, r3, #1
 8014ab0:	2030      	movs	r0, #48	; 0x30
 8014ab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014ab6:	4422      	add	r2, r4
 8014ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014abc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014ac0:	3302      	adds	r3, #2
 8014ac2:	e7c7      	b.n	8014a54 <_printf_common+0x58>
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	4622      	mov	r2, r4
 8014ac8:	4649      	mov	r1, r9
 8014aca:	4638      	mov	r0, r7
 8014acc:	47c0      	blx	r8
 8014ace:	3001      	adds	r0, #1
 8014ad0:	d0e6      	beq.n	8014aa0 <_printf_common+0xa4>
 8014ad2:	3601      	adds	r6, #1
 8014ad4:	e7d9      	b.n	8014a8a <_printf_common+0x8e>
	...

08014ad8 <_printf_i>:
 8014ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014adc:	7e0f      	ldrb	r7, [r1, #24]
 8014ade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014ae0:	2f78      	cmp	r7, #120	; 0x78
 8014ae2:	4691      	mov	r9, r2
 8014ae4:	4680      	mov	r8, r0
 8014ae6:	460c      	mov	r4, r1
 8014ae8:	469a      	mov	sl, r3
 8014aea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014aee:	d807      	bhi.n	8014b00 <_printf_i+0x28>
 8014af0:	2f62      	cmp	r7, #98	; 0x62
 8014af2:	d80a      	bhi.n	8014b0a <_printf_i+0x32>
 8014af4:	2f00      	cmp	r7, #0
 8014af6:	f000 80d4 	beq.w	8014ca2 <_printf_i+0x1ca>
 8014afa:	2f58      	cmp	r7, #88	; 0x58
 8014afc:	f000 80c0 	beq.w	8014c80 <_printf_i+0x1a8>
 8014b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014b08:	e03a      	b.n	8014b80 <_printf_i+0xa8>
 8014b0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014b0e:	2b15      	cmp	r3, #21
 8014b10:	d8f6      	bhi.n	8014b00 <_printf_i+0x28>
 8014b12:	a101      	add	r1, pc, #4	; (adr r1, 8014b18 <_printf_i+0x40>)
 8014b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014b18:	08014b71 	.word	0x08014b71
 8014b1c:	08014b85 	.word	0x08014b85
 8014b20:	08014b01 	.word	0x08014b01
 8014b24:	08014b01 	.word	0x08014b01
 8014b28:	08014b01 	.word	0x08014b01
 8014b2c:	08014b01 	.word	0x08014b01
 8014b30:	08014b85 	.word	0x08014b85
 8014b34:	08014b01 	.word	0x08014b01
 8014b38:	08014b01 	.word	0x08014b01
 8014b3c:	08014b01 	.word	0x08014b01
 8014b40:	08014b01 	.word	0x08014b01
 8014b44:	08014c89 	.word	0x08014c89
 8014b48:	08014bb1 	.word	0x08014bb1
 8014b4c:	08014c43 	.word	0x08014c43
 8014b50:	08014b01 	.word	0x08014b01
 8014b54:	08014b01 	.word	0x08014b01
 8014b58:	08014cab 	.word	0x08014cab
 8014b5c:	08014b01 	.word	0x08014b01
 8014b60:	08014bb1 	.word	0x08014bb1
 8014b64:	08014b01 	.word	0x08014b01
 8014b68:	08014b01 	.word	0x08014b01
 8014b6c:	08014c4b 	.word	0x08014c4b
 8014b70:	682b      	ldr	r3, [r5, #0]
 8014b72:	1d1a      	adds	r2, r3, #4
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	602a      	str	r2, [r5, #0]
 8014b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014b80:	2301      	movs	r3, #1
 8014b82:	e09f      	b.n	8014cc4 <_printf_i+0x1ec>
 8014b84:	6820      	ldr	r0, [r4, #0]
 8014b86:	682b      	ldr	r3, [r5, #0]
 8014b88:	0607      	lsls	r7, r0, #24
 8014b8a:	f103 0104 	add.w	r1, r3, #4
 8014b8e:	6029      	str	r1, [r5, #0]
 8014b90:	d501      	bpl.n	8014b96 <_printf_i+0xbe>
 8014b92:	681e      	ldr	r6, [r3, #0]
 8014b94:	e003      	b.n	8014b9e <_printf_i+0xc6>
 8014b96:	0646      	lsls	r6, r0, #25
 8014b98:	d5fb      	bpl.n	8014b92 <_printf_i+0xba>
 8014b9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014b9e:	2e00      	cmp	r6, #0
 8014ba0:	da03      	bge.n	8014baa <_printf_i+0xd2>
 8014ba2:	232d      	movs	r3, #45	; 0x2d
 8014ba4:	4276      	negs	r6, r6
 8014ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014baa:	485a      	ldr	r0, [pc, #360]	; (8014d14 <_printf_i+0x23c>)
 8014bac:	230a      	movs	r3, #10
 8014bae:	e012      	b.n	8014bd6 <_printf_i+0xfe>
 8014bb0:	682b      	ldr	r3, [r5, #0]
 8014bb2:	6820      	ldr	r0, [r4, #0]
 8014bb4:	1d19      	adds	r1, r3, #4
 8014bb6:	6029      	str	r1, [r5, #0]
 8014bb8:	0605      	lsls	r5, r0, #24
 8014bba:	d501      	bpl.n	8014bc0 <_printf_i+0xe8>
 8014bbc:	681e      	ldr	r6, [r3, #0]
 8014bbe:	e002      	b.n	8014bc6 <_printf_i+0xee>
 8014bc0:	0641      	lsls	r1, r0, #25
 8014bc2:	d5fb      	bpl.n	8014bbc <_printf_i+0xe4>
 8014bc4:	881e      	ldrh	r6, [r3, #0]
 8014bc6:	4853      	ldr	r0, [pc, #332]	; (8014d14 <_printf_i+0x23c>)
 8014bc8:	2f6f      	cmp	r7, #111	; 0x6f
 8014bca:	bf0c      	ite	eq
 8014bcc:	2308      	moveq	r3, #8
 8014bce:	230a      	movne	r3, #10
 8014bd0:	2100      	movs	r1, #0
 8014bd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014bd6:	6865      	ldr	r5, [r4, #4]
 8014bd8:	60a5      	str	r5, [r4, #8]
 8014bda:	2d00      	cmp	r5, #0
 8014bdc:	bfa2      	ittt	ge
 8014bde:	6821      	ldrge	r1, [r4, #0]
 8014be0:	f021 0104 	bicge.w	r1, r1, #4
 8014be4:	6021      	strge	r1, [r4, #0]
 8014be6:	b90e      	cbnz	r6, 8014bec <_printf_i+0x114>
 8014be8:	2d00      	cmp	r5, #0
 8014bea:	d04b      	beq.n	8014c84 <_printf_i+0x1ac>
 8014bec:	4615      	mov	r5, r2
 8014bee:	fbb6 f1f3 	udiv	r1, r6, r3
 8014bf2:	fb03 6711 	mls	r7, r3, r1, r6
 8014bf6:	5dc7      	ldrb	r7, [r0, r7]
 8014bf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014bfc:	4637      	mov	r7, r6
 8014bfe:	42bb      	cmp	r3, r7
 8014c00:	460e      	mov	r6, r1
 8014c02:	d9f4      	bls.n	8014bee <_printf_i+0x116>
 8014c04:	2b08      	cmp	r3, #8
 8014c06:	d10b      	bne.n	8014c20 <_printf_i+0x148>
 8014c08:	6823      	ldr	r3, [r4, #0]
 8014c0a:	07de      	lsls	r6, r3, #31
 8014c0c:	d508      	bpl.n	8014c20 <_printf_i+0x148>
 8014c0e:	6923      	ldr	r3, [r4, #16]
 8014c10:	6861      	ldr	r1, [r4, #4]
 8014c12:	4299      	cmp	r1, r3
 8014c14:	bfde      	ittt	le
 8014c16:	2330      	movle	r3, #48	; 0x30
 8014c18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014c1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014c20:	1b52      	subs	r2, r2, r5
 8014c22:	6122      	str	r2, [r4, #16]
 8014c24:	f8cd a000 	str.w	sl, [sp]
 8014c28:	464b      	mov	r3, r9
 8014c2a:	aa03      	add	r2, sp, #12
 8014c2c:	4621      	mov	r1, r4
 8014c2e:	4640      	mov	r0, r8
 8014c30:	f7ff fee4 	bl	80149fc <_printf_common>
 8014c34:	3001      	adds	r0, #1
 8014c36:	d14a      	bne.n	8014cce <_printf_i+0x1f6>
 8014c38:	f04f 30ff 	mov.w	r0, #4294967295
 8014c3c:	b004      	add	sp, #16
 8014c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c42:	6823      	ldr	r3, [r4, #0]
 8014c44:	f043 0320 	orr.w	r3, r3, #32
 8014c48:	6023      	str	r3, [r4, #0]
 8014c4a:	4833      	ldr	r0, [pc, #204]	; (8014d18 <_printf_i+0x240>)
 8014c4c:	2778      	movs	r7, #120	; 0x78
 8014c4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014c52:	6823      	ldr	r3, [r4, #0]
 8014c54:	6829      	ldr	r1, [r5, #0]
 8014c56:	061f      	lsls	r7, r3, #24
 8014c58:	f851 6b04 	ldr.w	r6, [r1], #4
 8014c5c:	d402      	bmi.n	8014c64 <_printf_i+0x18c>
 8014c5e:	065f      	lsls	r7, r3, #25
 8014c60:	bf48      	it	mi
 8014c62:	b2b6      	uxthmi	r6, r6
 8014c64:	07df      	lsls	r7, r3, #31
 8014c66:	bf48      	it	mi
 8014c68:	f043 0320 	orrmi.w	r3, r3, #32
 8014c6c:	6029      	str	r1, [r5, #0]
 8014c6e:	bf48      	it	mi
 8014c70:	6023      	strmi	r3, [r4, #0]
 8014c72:	b91e      	cbnz	r6, 8014c7c <_printf_i+0x1a4>
 8014c74:	6823      	ldr	r3, [r4, #0]
 8014c76:	f023 0320 	bic.w	r3, r3, #32
 8014c7a:	6023      	str	r3, [r4, #0]
 8014c7c:	2310      	movs	r3, #16
 8014c7e:	e7a7      	b.n	8014bd0 <_printf_i+0xf8>
 8014c80:	4824      	ldr	r0, [pc, #144]	; (8014d14 <_printf_i+0x23c>)
 8014c82:	e7e4      	b.n	8014c4e <_printf_i+0x176>
 8014c84:	4615      	mov	r5, r2
 8014c86:	e7bd      	b.n	8014c04 <_printf_i+0x12c>
 8014c88:	682b      	ldr	r3, [r5, #0]
 8014c8a:	6826      	ldr	r6, [r4, #0]
 8014c8c:	6961      	ldr	r1, [r4, #20]
 8014c8e:	1d18      	adds	r0, r3, #4
 8014c90:	6028      	str	r0, [r5, #0]
 8014c92:	0635      	lsls	r5, r6, #24
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	d501      	bpl.n	8014c9c <_printf_i+0x1c4>
 8014c98:	6019      	str	r1, [r3, #0]
 8014c9a:	e002      	b.n	8014ca2 <_printf_i+0x1ca>
 8014c9c:	0670      	lsls	r0, r6, #25
 8014c9e:	d5fb      	bpl.n	8014c98 <_printf_i+0x1c0>
 8014ca0:	8019      	strh	r1, [r3, #0]
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	6123      	str	r3, [r4, #16]
 8014ca6:	4615      	mov	r5, r2
 8014ca8:	e7bc      	b.n	8014c24 <_printf_i+0x14c>
 8014caa:	682b      	ldr	r3, [r5, #0]
 8014cac:	1d1a      	adds	r2, r3, #4
 8014cae:	602a      	str	r2, [r5, #0]
 8014cb0:	681d      	ldr	r5, [r3, #0]
 8014cb2:	6862      	ldr	r2, [r4, #4]
 8014cb4:	2100      	movs	r1, #0
 8014cb6:	4628      	mov	r0, r5
 8014cb8:	f7eb fb3a 	bl	8000330 <memchr>
 8014cbc:	b108      	cbz	r0, 8014cc2 <_printf_i+0x1ea>
 8014cbe:	1b40      	subs	r0, r0, r5
 8014cc0:	6060      	str	r0, [r4, #4]
 8014cc2:	6863      	ldr	r3, [r4, #4]
 8014cc4:	6123      	str	r3, [r4, #16]
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ccc:	e7aa      	b.n	8014c24 <_printf_i+0x14c>
 8014cce:	6923      	ldr	r3, [r4, #16]
 8014cd0:	462a      	mov	r2, r5
 8014cd2:	4649      	mov	r1, r9
 8014cd4:	4640      	mov	r0, r8
 8014cd6:	47d0      	blx	sl
 8014cd8:	3001      	adds	r0, #1
 8014cda:	d0ad      	beq.n	8014c38 <_printf_i+0x160>
 8014cdc:	6823      	ldr	r3, [r4, #0]
 8014cde:	079b      	lsls	r3, r3, #30
 8014ce0:	d413      	bmi.n	8014d0a <_printf_i+0x232>
 8014ce2:	68e0      	ldr	r0, [r4, #12]
 8014ce4:	9b03      	ldr	r3, [sp, #12]
 8014ce6:	4298      	cmp	r0, r3
 8014ce8:	bfb8      	it	lt
 8014cea:	4618      	movlt	r0, r3
 8014cec:	e7a6      	b.n	8014c3c <_printf_i+0x164>
 8014cee:	2301      	movs	r3, #1
 8014cf0:	4632      	mov	r2, r6
 8014cf2:	4649      	mov	r1, r9
 8014cf4:	4640      	mov	r0, r8
 8014cf6:	47d0      	blx	sl
 8014cf8:	3001      	adds	r0, #1
 8014cfa:	d09d      	beq.n	8014c38 <_printf_i+0x160>
 8014cfc:	3501      	adds	r5, #1
 8014cfe:	68e3      	ldr	r3, [r4, #12]
 8014d00:	9903      	ldr	r1, [sp, #12]
 8014d02:	1a5b      	subs	r3, r3, r1
 8014d04:	42ab      	cmp	r3, r5
 8014d06:	dcf2      	bgt.n	8014cee <_printf_i+0x216>
 8014d08:	e7eb      	b.n	8014ce2 <_printf_i+0x20a>
 8014d0a:	2500      	movs	r5, #0
 8014d0c:	f104 0619 	add.w	r6, r4, #25
 8014d10:	e7f5      	b.n	8014cfe <_printf_i+0x226>
 8014d12:	bf00      	nop
 8014d14:	0802ca58 	.word	0x0802ca58
 8014d18:	0802ca69 	.word	0x0802ca69

08014d1c <_scanf_float>:
 8014d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d20:	b087      	sub	sp, #28
 8014d22:	4617      	mov	r7, r2
 8014d24:	9303      	str	r3, [sp, #12]
 8014d26:	688b      	ldr	r3, [r1, #8]
 8014d28:	1e5a      	subs	r2, r3, #1
 8014d2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014d2e:	bf83      	ittte	hi
 8014d30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014d34:	195b      	addhi	r3, r3, r5
 8014d36:	9302      	strhi	r3, [sp, #8]
 8014d38:	2300      	movls	r3, #0
 8014d3a:	bf86      	itte	hi
 8014d3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014d40:	608b      	strhi	r3, [r1, #8]
 8014d42:	9302      	strls	r3, [sp, #8]
 8014d44:	680b      	ldr	r3, [r1, #0]
 8014d46:	468b      	mov	fp, r1
 8014d48:	2500      	movs	r5, #0
 8014d4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014d4e:	f84b 3b1c 	str.w	r3, [fp], #28
 8014d52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014d56:	4680      	mov	r8, r0
 8014d58:	460c      	mov	r4, r1
 8014d5a:	465e      	mov	r6, fp
 8014d5c:	46aa      	mov	sl, r5
 8014d5e:	46a9      	mov	r9, r5
 8014d60:	9501      	str	r5, [sp, #4]
 8014d62:	68a2      	ldr	r2, [r4, #8]
 8014d64:	b152      	cbz	r2, 8014d7c <_scanf_float+0x60>
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	781b      	ldrb	r3, [r3, #0]
 8014d6a:	2b4e      	cmp	r3, #78	; 0x4e
 8014d6c:	d864      	bhi.n	8014e38 <_scanf_float+0x11c>
 8014d6e:	2b40      	cmp	r3, #64	; 0x40
 8014d70:	d83c      	bhi.n	8014dec <_scanf_float+0xd0>
 8014d72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014d76:	b2c8      	uxtb	r0, r1
 8014d78:	280e      	cmp	r0, #14
 8014d7a:	d93a      	bls.n	8014df2 <_scanf_float+0xd6>
 8014d7c:	f1b9 0f00 	cmp.w	r9, #0
 8014d80:	d003      	beq.n	8014d8a <_scanf_float+0x6e>
 8014d82:	6823      	ldr	r3, [r4, #0]
 8014d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014d88:	6023      	str	r3, [r4, #0]
 8014d8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d8e:	f1ba 0f01 	cmp.w	sl, #1
 8014d92:	f200 8113 	bhi.w	8014fbc <_scanf_float+0x2a0>
 8014d96:	455e      	cmp	r6, fp
 8014d98:	f200 8105 	bhi.w	8014fa6 <_scanf_float+0x28a>
 8014d9c:	2501      	movs	r5, #1
 8014d9e:	4628      	mov	r0, r5
 8014da0:	b007      	add	sp, #28
 8014da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014da6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014daa:	2a0d      	cmp	r2, #13
 8014dac:	d8e6      	bhi.n	8014d7c <_scanf_float+0x60>
 8014dae:	a101      	add	r1, pc, #4	; (adr r1, 8014db4 <_scanf_float+0x98>)
 8014db0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014db4:	08014ef3 	.word	0x08014ef3
 8014db8:	08014d7d 	.word	0x08014d7d
 8014dbc:	08014d7d 	.word	0x08014d7d
 8014dc0:	08014d7d 	.word	0x08014d7d
 8014dc4:	08014f53 	.word	0x08014f53
 8014dc8:	08014f2b 	.word	0x08014f2b
 8014dcc:	08014d7d 	.word	0x08014d7d
 8014dd0:	08014d7d 	.word	0x08014d7d
 8014dd4:	08014f01 	.word	0x08014f01
 8014dd8:	08014d7d 	.word	0x08014d7d
 8014ddc:	08014d7d 	.word	0x08014d7d
 8014de0:	08014d7d 	.word	0x08014d7d
 8014de4:	08014d7d 	.word	0x08014d7d
 8014de8:	08014eb9 	.word	0x08014eb9
 8014dec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014df0:	e7db      	b.n	8014daa <_scanf_float+0x8e>
 8014df2:	290e      	cmp	r1, #14
 8014df4:	d8c2      	bhi.n	8014d7c <_scanf_float+0x60>
 8014df6:	a001      	add	r0, pc, #4	; (adr r0, 8014dfc <_scanf_float+0xe0>)
 8014df8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014dfc:	08014eab 	.word	0x08014eab
 8014e00:	08014d7d 	.word	0x08014d7d
 8014e04:	08014eab 	.word	0x08014eab
 8014e08:	08014f3f 	.word	0x08014f3f
 8014e0c:	08014d7d 	.word	0x08014d7d
 8014e10:	08014e59 	.word	0x08014e59
 8014e14:	08014e95 	.word	0x08014e95
 8014e18:	08014e95 	.word	0x08014e95
 8014e1c:	08014e95 	.word	0x08014e95
 8014e20:	08014e95 	.word	0x08014e95
 8014e24:	08014e95 	.word	0x08014e95
 8014e28:	08014e95 	.word	0x08014e95
 8014e2c:	08014e95 	.word	0x08014e95
 8014e30:	08014e95 	.word	0x08014e95
 8014e34:	08014e95 	.word	0x08014e95
 8014e38:	2b6e      	cmp	r3, #110	; 0x6e
 8014e3a:	d809      	bhi.n	8014e50 <_scanf_float+0x134>
 8014e3c:	2b60      	cmp	r3, #96	; 0x60
 8014e3e:	d8b2      	bhi.n	8014da6 <_scanf_float+0x8a>
 8014e40:	2b54      	cmp	r3, #84	; 0x54
 8014e42:	d077      	beq.n	8014f34 <_scanf_float+0x218>
 8014e44:	2b59      	cmp	r3, #89	; 0x59
 8014e46:	d199      	bne.n	8014d7c <_scanf_float+0x60>
 8014e48:	2d07      	cmp	r5, #7
 8014e4a:	d197      	bne.n	8014d7c <_scanf_float+0x60>
 8014e4c:	2508      	movs	r5, #8
 8014e4e:	e029      	b.n	8014ea4 <_scanf_float+0x188>
 8014e50:	2b74      	cmp	r3, #116	; 0x74
 8014e52:	d06f      	beq.n	8014f34 <_scanf_float+0x218>
 8014e54:	2b79      	cmp	r3, #121	; 0x79
 8014e56:	e7f6      	b.n	8014e46 <_scanf_float+0x12a>
 8014e58:	6821      	ldr	r1, [r4, #0]
 8014e5a:	05c8      	lsls	r0, r1, #23
 8014e5c:	d51a      	bpl.n	8014e94 <_scanf_float+0x178>
 8014e5e:	9b02      	ldr	r3, [sp, #8]
 8014e60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014e64:	6021      	str	r1, [r4, #0]
 8014e66:	f109 0901 	add.w	r9, r9, #1
 8014e6a:	b11b      	cbz	r3, 8014e74 <_scanf_float+0x158>
 8014e6c:	3b01      	subs	r3, #1
 8014e6e:	3201      	adds	r2, #1
 8014e70:	9302      	str	r3, [sp, #8]
 8014e72:	60a2      	str	r2, [r4, #8]
 8014e74:	68a3      	ldr	r3, [r4, #8]
 8014e76:	3b01      	subs	r3, #1
 8014e78:	60a3      	str	r3, [r4, #8]
 8014e7a:	6923      	ldr	r3, [r4, #16]
 8014e7c:	3301      	adds	r3, #1
 8014e7e:	6123      	str	r3, [r4, #16]
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	3b01      	subs	r3, #1
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	607b      	str	r3, [r7, #4]
 8014e88:	f340 8084 	ble.w	8014f94 <_scanf_float+0x278>
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	3301      	adds	r3, #1
 8014e90:	603b      	str	r3, [r7, #0]
 8014e92:	e766      	b.n	8014d62 <_scanf_float+0x46>
 8014e94:	eb1a 0f05 	cmn.w	sl, r5
 8014e98:	f47f af70 	bne.w	8014d7c <_scanf_float+0x60>
 8014e9c:	6822      	ldr	r2, [r4, #0]
 8014e9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8014ea2:	6022      	str	r2, [r4, #0]
 8014ea4:	f806 3b01 	strb.w	r3, [r6], #1
 8014ea8:	e7e4      	b.n	8014e74 <_scanf_float+0x158>
 8014eaa:	6822      	ldr	r2, [r4, #0]
 8014eac:	0610      	lsls	r0, r2, #24
 8014eae:	f57f af65 	bpl.w	8014d7c <_scanf_float+0x60>
 8014eb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014eb6:	e7f4      	b.n	8014ea2 <_scanf_float+0x186>
 8014eb8:	f1ba 0f00 	cmp.w	sl, #0
 8014ebc:	d10e      	bne.n	8014edc <_scanf_float+0x1c0>
 8014ebe:	f1b9 0f00 	cmp.w	r9, #0
 8014ec2:	d10e      	bne.n	8014ee2 <_scanf_float+0x1c6>
 8014ec4:	6822      	ldr	r2, [r4, #0]
 8014ec6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014eca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014ece:	d108      	bne.n	8014ee2 <_scanf_float+0x1c6>
 8014ed0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014ed4:	6022      	str	r2, [r4, #0]
 8014ed6:	f04f 0a01 	mov.w	sl, #1
 8014eda:	e7e3      	b.n	8014ea4 <_scanf_float+0x188>
 8014edc:	f1ba 0f02 	cmp.w	sl, #2
 8014ee0:	d055      	beq.n	8014f8e <_scanf_float+0x272>
 8014ee2:	2d01      	cmp	r5, #1
 8014ee4:	d002      	beq.n	8014eec <_scanf_float+0x1d0>
 8014ee6:	2d04      	cmp	r5, #4
 8014ee8:	f47f af48 	bne.w	8014d7c <_scanf_float+0x60>
 8014eec:	3501      	adds	r5, #1
 8014eee:	b2ed      	uxtb	r5, r5
 8014ef0:	e7d8      	b.n	8014ea4 <_scanf_float+0x188>
 8014ef2:	f1ba 0f01 	cmp.w	sl, #1
 8014ef6:	f47f af41 	bne.w	8014d7c <_scanf_float+0x60>
 8014efa:	f04f 0a02 	mov.w	sl, #2
 8014efe:	e7d1      	b.n	8014ea4 <_scanf_float+0x188>
 8014f00:	b97d      	cbnz	r5, 8014f22 <_scanf_float+0x206>
 8014f02:	f1b9 0f00 	cmp.w	r9, #0
 8014f06:	f47f af3c 	bne.w	8014d82 <_scanf_float+0x66>
 8014f0a:	6822      	ldr	r2, [r4, #0]
 8014f0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014f10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014f14:	f47f af39 	bne.w	8014d8a <_scanf_float+0x6e>
 8014f18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014f1c:	6022      	str	r2, [r4, #0]
 8014f1e:	2501      	movs	r5, #1
 8014f20:	e7c0      	b.n	8014ea4 <_scanf_float+0x188>
 8014f22:	2d03      	cmp	r5, #3
 8014f24:	d0e2      	beq.n	8014eec <_scanf_float+0x1d0>
 8014f26:	2d05      	cmp	r5, #5
 8014f28:	e7de      	b.n	8014ee8 <_scanf_float+0x1cc>
 8014f2a:	2d02      	cmp	r5, #2
 8014f2c:	f47f af26 	bne.w	8014d7c <_scanf_float+0x60>
 8014f30:	2503      	movs	r5, #3
 8014f32:	e7b7      	b.n	8014ea4 <_scanf_float+0x188>
 8014f34:	2d06      	cmp	r5, #6
 8014f36:	f47f af21 	bne.w	8014d7c <_scanf_float+0x60>
 8014f3a:	2507      	movs	r5, #7
 8014f3c:	e7b2      	b.n	8014ea4 <_scanf_float+0x188>
 8014f3e:	6822      	ldr	r2, [r4, #0]
 8014f40:	0591      	lsls	r1, r2, #22
 8014f42:	f57f af1b 	bpl.w	8014d7c <_scanf_float+0x60>
 8014f46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014f4a:	6022      	str	r2, [r4, #0]
 8014f4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8014f50:	e7a8      	b.n	8014ea4 <_scanf_float+0x188>
 8014f52:	6822      	ldr	r2, [r4, #0]
 8014f54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8014f58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014f5c:	d006      	beq.n	8014f6c <_scanf_float+0x250>
 8014f5e:	0550      	lsls	r0, r2, #21
 8014f60:	f57f af0c 	bpl.w	8014d7c <_scanf_float+0x60>
 8014f64:	f1b9 0f00 	cmp.w	r9, #0
 8014f68:	f43f af0f 	beq.w	8014d8a <_scanf_float+0x6e>
 8014f6c:	0591      	lsls	r1, r2, #22
 8014f6e:	bf58      	it	pl
 8014f70:	9901      	ldrpl	r1, [sp, #4]
 8014f72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014f76:	bf58      	it	pl
 8014f78:	eba9 0101 	subpl.w	r1, r9, r1
 8014f7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014f80:	bf58      	it	pl
 8014f82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014f86:	6022      	str	r2, [r4, #0]
 8014f88:	f04f 0900 	mov.w	r9, #0
 8014f8c:	e78a      	b.n	8014ea4 <_scanf_float+0x188>
 8014f8e:	f04f 0a03 	mov.w	sl, #3
 8014f92:	e787      	b.n	8014ea4 <_scanf_float+0x188>
 8014f94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014f98:	4639      	mov	r1, r7
 8014f9a:	4640      	mov	r0, r8
 8014f9c:	4798      	blx	r3
 8014f9e:	2800      	cmp	r0, #0
 8014fa0:	f43f aedf 	beq.w	8014d62 <_scanf_float+0x46>
 8014fa4:	e6ea      	b.n	8014d7c <_scanf_float+0x60>
 8014fa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014faa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014fae:	463a      	mov	r2, r7
 8014fb0:	4640      	mov	r0, r8
 8014fb2:	4798      	blx	r3
 8014fb4:	6923      	ldr	r3, [r4, #16]
 8014fb6:	3b01      	subs	r3, #1
 8014fb8:	6123      	str	r3, [r4, #16]
 8014fba:	e6ec      	b.n	8014d96 <_scanf_float+0x7a>
 8014fbc:	1e6b      	subs	r3, r5, #1
 8014fbe:	2b06      	cmp	r3, #6
 8014fc0:	d825      	bhi.n	801500e <_scanf_float+0x2f2>
 8014fc2:	2d02      	cmp	r5, #2
 8014fc4:	d836      	bhi.n	8015034 <_scanf_float+0x318>
 8014fc6:	455e      	cmp	r6, fp
 8014fc8:	f67f aee8 	bls.w	8014d9c <_scanf_float+0x80>
 8014fcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014fd0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014fd4:	463a      	mov	r2, r7
 8014fd6:	4640      	mov	r0, r8
 8014fd8:	4798      	blx	r3
 8014fda:	6923      	ldr	r3, [r4, #16]
 8014fdc:	3b01      	subs	r3, #1
 8014fde:	6123      	str	r3, [r4, #16]
 8014fe0:	e7f1      	b.n	8014fc6 <_scanf_float+0x2aa>
 8014fe2:	9802      	ldr	r0, [sp, #8]
 8014fe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014fe8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014fec:	9002      	str	r0, [sp, #8]
 8014fee:	463a      	mov	r2, r7
 8014ff0:	4640      	mov	r0, r8
 8014ff2:	4798      	blx	r3
 8014ff4:	6923      	ldr	r3, [r4, #16]
 8014ff6:	3b01      	subs	r3, #1
 8014ff8:	6123      	str	r3, [r4, #16]
 8014ffa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ffe:	fa5f fa8a 	uxtb.w	sl, sl
 8015002:	f1ba 0f02 	cmp.w	sl, #2
 8015006:	d1ec      	bne.n	8014fe2 <_scanf_float+0x2c6>
 8015008:	3d03      	subs	r5, #3
 801500a:	b2ed      	uxtb	r5, r5
 801500c:	1b76      	subs	r6, r6, r5
 801500e:	6823      	ldr	r3, [r4, #0]
 8015010:	05da      	lsls	r2, r3, #23
 8015012:	d52f      	bpl.n	8015074 <_scanf_float+0x358>
 8015014:	055b      	lsls	r3, r3, #21
 8015016:	d510      	bpl.n	801503a <_scanf_float+0x31e>
 8015018:	455e      	cmp	r6, fp
 801501a:	f67f aebf 	bls.w	8014d9c <_scanf_float+0x80>
 801501e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015022:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015026:	463a      	mov	r2, r7
 8015028:	4640      	mov	r0, r8
 801502a:	4798      	blx	r3
 801502c:	6923      	ldr	r3, [r4, #16]
 801502e:	3b01      	subs	r3, #1
 8015030:	6123      	str	r3, [r4, #16]
 8015032:	e7f1      	b.n	8015018 <_scanf_float+0x2fc>
 8015034:	46aa      	mov	sl, r5
 8015036:	9602      	str	r6, [sp, #8]
 8015038:	e7df      	b.n	8014ffa <_scanf_float+0x2de>
 801503a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801503e:	6923      	ldr	r3, [r4, #16]
 8015040:	2965      	cmp	r1, #101	; 0x65
 8015042:	f103 33ff 	add.w	r3, r3, #4294967295
 8015046:	f106 35ff 	add.w	r5, r6, #4294967295
 801504a:	6123      	str	r3, [r4, #16]
 801504c:	d00c      	beq.n	8015068 <_scanf_float+0x34c>
 801504e:	2945      	cmp	r1, #69	; 0x45
 8015050:	d00a      	beq.n	8015068 <_scanf_float+0x34c>
 8015052:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015056:	463a      	mov	r2, r7
 8015058:	4640      	mov	r0, r8
 801505a:	4798      	blx	r3
 801505c:	6923      	ldr	r3, [r4, #16]
 801505e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015062:	3b01      	subs	r3, #1
 8015064:	1eb5      	subs	r5, r6, #2
 8015066:	6123      	str	r3, [r4, #16]
 8015068:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801506c:	463a      	mov	r2, r7
 801506e:	4640      	mov	r0, r8
 8015070:	4798      	blx	r3
 8015072:	462e      	mov	r6, r5
 8015074:	6825      	ldr	r5, [r4, #0]
 8015076:	f015 0510 	ands.w	r5, r5, #16
 801507a:	d14d      	bne.n	8015118 <_scanf_float+0x3fc>
 801507c:	7035      	strb	r5, [r6, #0]
 801507e:	6823      	ldr	r3, [r4, #0]
 8015080:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015088:	d11a      	bne.n	80150c0 <_scanf_float+0x3a4>
 801508a:	9b01      	ldr	r3, [sp, #4]
 801508c:	454b      	cmp	r3, r9
 801508e:	eba3 0209 	sub.w	r2, r3, r9
 8015092:	d122      	bne.n	80150da <_scanf_float+0x3be>
 8015094:	2200      	movs	r2, #0
 8015096:	4659      	mov	r1, fp
 8015098:	4640      	mov	r0, r8
 801509a:	f002 ffbb 	bl	8018014 <_strtod_r>
 801509e:	9b03      	ldr	r3, [sp, #12]
 80150a0:	6821      	ldr	r1, [r4, #0]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	f011 0f02 	tst.w	r1, #2
 80150a8:	f103 0204 	add.w	r2, r3, #4
 80150ac:	d020      	beq.n	80150f0 <_scanf_float+0x3d4>
 80150ae:	9903      	ldr	r1, [sp, #12]
 80150b0:	600a      	str	r2, [r1, #0]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	ed83 0b00 	vstr	d0, [r3]
 80150b8:	68e3      	ldr	r3, [r4, #12]
 80150ba:	3301      	adds	r3, #1
 80150bc:	60e3      	str	r3, [r4, #12]
 80150be:	e66e      	b.n	8014d9e <_scanf_float+0x82>
 80150c0:	9b04      	ldr	r3, [sp, #16]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d0e6      	beq.n	8015094 <_scanf_float+0x378>
 80150c6:	9905      	ldr	r1, [sp, #20]
 80150c8:	230a      	movs	r3, #10
 80150ca:	462a      	mov	r2, r5
 80150cc:	3101      	adds	r1, #1
 80150ce:	4640      	mov	r0, r8
 80150d0:	f003 f828 	bl	8018124 <_strtol_r>
 80150d4:	9b04      	ldr	r3, [sp, #16]
 80150d6:	9e05      	ldr	r6, [sp, #20]
 80150d8:	1ac2      	subs	r2, r0, r3
 80150da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80150de:	429e      	cmp	r6, r3
 80150e0:	bf28      	it	cs
 80150e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80150e6:	490d      	ldr	r1, [pc, #52]	; (801511c <_scanf_float+0x400>)
 80150e8:	4630      	mov	r0, r6
 80150ea:	f000 f97f 	bl	80153ec <siprintf>
 80150ee:	e7d1      	b.n	8015094 <_scanf_float+0x378>
 80150f0:	f011 0f04 	tst.w	r1, #4
 80150f4:	9903      	ldr	r1, [sp, #12]
 80150f6:	600a      	str	r2, [r1, #0]
 80150f8:	d1db      	bne.n	80150b2 <_scanf_float+0x396>
 80150fa:	eeb4 0b40 	vcmp.f64	d0, d0
 80150fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015102:	681e      	ldr	r6, [r3, #0]
 8015104:	d705      	bvc.n	8015112 <_scanf_float+0x3f6>
 8015106:	4806      	ldr	r0, [pc, #24]	; (8015120 <_scanf_float+0x404>)
 8015108:	f000 feb4 	bl	8015e74 <nanf>
 801510c:	ed86 0a00 	vstr	s0, [r6]
 8015110:	e7d2      	b.n	80150b8 <_scanf_float+0x39c>
 8015112:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015116:	e7f9      	b.n	801510c <_scanf_float+0x3f0>
 8015118:	2500      	movs	r5, #0
 801511a:	e640      	b.n	8014d9e <_scanf_float+0x82>
 801511c:	0802ca7a 	.word	0x0802ca7a
 8015120:	0802d125 	.word	0x0802d125

08015124 <std>:
 8015124:	2300      	movs	r3, #0
 8015126:	b510      	push	{r4, lr}
 8015128:	4604      	mov	r4, r0
 801512a:	e9c0 3300 	strd	r3, r3, [r0]
 801512e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015132:	6083      	str	r3, [r0, #8]
 8015134:	8181      	strh	r1, [r0, #12]
 8015136:	6643      	str	r3, [r0, #100]	; 0x64
 8015138:	81c2      	strh	r2, [r0, #14]
 801513a:	6183      	str	r3, [r0, #24]
 801513c:	4619      	mov	r1, r3
 801513e:	2208      	movs	r2, #8
 8015140:	305c      	adds	r0, #92	; 0x5c
 8015142:	f000 fa4d 	bl	80155e0 <memset>
 8015146:	4b0d      	ldr	r3, [pc, #52]	; (801517c <std+0x58>)
 8015148:	6263      	str	r3, [r4, #36]	; 0x24
 801514a:	4b0d      	ldr	r3, [pc, #52]	; (8015180 <std+0x5c>)
 801514c:	62a3      	str	r3, [r4, #40]	; 0x28
 801514e:	4b0d      	ldr	r3, [pc, #52]	; (8015184 <std+0x60>)
 8015150:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015152:	4b0d      	ldr	r3, [pc, #52]	; (8015188 <std+0x64>)
 8015154:	6323      	str	r3, [r4, #48]	; 0x30
 8015156:	4b0d      	ldr	r3, [pc, #52]	; (801518c <std+0x68>)
 8015158:	6224      	str	r4, [r4, #32]
 801515a:	429c      	cmp	r4, r3
 801515c:	d006      	beq.n	801516c <std+0x48>
 801515e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8015162:	4294      	cmp	r4, r2
 8015164:	d002      	beq.n	801516c <std+0x48>
 8015166:	33d0      	adds	r3, #208	; 0xd0
 8015168:	429c      	cmp	r4, r3
 801516a:	d105      	bne.n	8015178 <std+0x54>
 801516c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015174:	f000 be6a 	b.w	8015e4c <__retarget_lock_init_recursive>
 8015178:	bd10      	pop	{r4, pc}
 801517a:	bf00      	nop
 801517c:	0801542d 	.word	0x0801542d
 8015180:	08015453 	.word	0x08015453
 8015184:	0801548b 	.word	0x0801548b
 8015188:	080154af 	.word	0x080154af
 801518c:	24031388 	.word	0x24031388

08015190 <stdio_exit_handler>:
 8015190:	4a02      	ldr	r2, [pc, #8]	; (801519c <stdio_exit_handler+0xc>)
 8015192:	4903      	ldr	r1, [pc, #12]	; (80151a0 <stdio_exit_handler+0x10>)
 8015194:	4803      	ldr	r0, [pc, #12]	; (80151a4 <stdio_exit_handler+0x14>)
 8015196:	f000 b869 	b.w	801526c <_fwalk_sglue>
 801519a:	bf00      	nop
 801519c:	24000014 	.word	0x24000014
 80151a0:	080188d5 	.word	0x080188d5
 80151a4:	2400018c 	.word	0x2400018c

080151a8 <cleanup_stdio>:
 80151a8:	6841      	ldr	r1, [r0, #4]
 80151aa:	4b0c      	ldr	r3, [pc, #48]	; (80151dc <cleanup_stdio+0x34>)
 80151ac:	4299      	cmp	r1, r3
 80151ae:	b510      	push	{r4, lr}
 80151b0:	4604      	mov	r4, r0
 80151b2:	d001      	beq.n	80151b8 <cleanup_stdio+0x10>
 80151b4:	f003 fb8e 	bl	80188d4 <_fflush_r>
 80151b8:	68a1      	ldr	r1, [r4, #8]
 80151ba:	4b09      	ldr	r3, [pc, #36]	; (80151e0 <cleanup_stdio+0x38>)
 80151bc:	4299      	cmp	r1, r3
 80151be:	d002      	beq.n	80151c6 <cleanup_stdio+0x1e>
 80151c0:	4620      	mov	r0, r4
 80151c2:	f003 fb87 	bl	80188d4 <_fflush_r>
 80151c6:	68e1      	ldr	r1, [r4, #12]
 80151c8:	4b06      	ldr	r3, [pc, #24]	; (80151e4 <cleanup_stdio+0x3c>)
 80151ca:	4299      	cmp	r1, r3
 80151cc:	d004      	beq.n	80151d8 <cleanup_stdio+0x30>
 80151ce:	4620      	mov	r0, r4
 80151d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151d4:	f003 bb7e 	b.w	80188d4 <_fflush_r>
 80151d8:	bd10      	pop	{r4, pc}
 80151da:	bf00      	nop
 80151dc:	24031388 	.word	0x24031388
 80151e0:	240313f0 	.word	0x240313f0
 80151e4:	24031458 	.word	0x24031458

080151e8 <global_stdio_init.part.0>:
 80151e8:	b510      	push	{r4, lr}
 80151ea:	4b0b      	ldr	r3, [pc, #44]	; (8015218 <global_stdio_init.part.0+0x30>)
 80151ec:	4c0b      	ldr	r4, [pc, #44]	; (801521c <global_stdio_init.part.0+0x34>)
 80151ee:	4a0c      	ldr	r2, [pc, #48]	; (8015220 <global_stdio_init.part.0+0x38>)
 80151f0:	601a      	str	r2, [r3, #0]
 80151f2:	4620      	mov	r0, r4
 80151f4:	2200      	movs	r2, #0
 80151f6:	2104      	movs	r1, #4
 80151f8:	f7ff ff94 	bl	8015124 <std>
 80151fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015200:	2201      	movs	r2, #1
 8015202:	2109      	movs	r1, #9
 8015204:	f7ff ff8e 	bl	8015124 <std>
 8015208:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801520c:	2202      	movs	r2, #2
 801520e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015212:	2112      	movs	r1, #18
 8015214:	f7ff bf86 	b.w	8015124 <std>
 8015218:	240314c0 	.word	0x240314c0
 801521c:	24031388 	.word	0x24031388
 8015220:	08015191 	.word	0x08015191

08015224 <__sfp_lock_acquire>:
 8015224:	4801      	ldr	r0, [pc, #4]	; (801522c <__sfp_lock_acquire+0x8>)
 8015226:	f000 be13 	b.w	8015e50 <__retarget_lock_acquire_recursive>
 801522a:	bf00      	nop
 801522c:	240314ca 	.word	0x240314ca

08015230 <__sfp_lock_release>:
 8015230:	4801      	ldr	r0, [pc, #4]	; (8015238 <__sfp_lock_release+0x8>)
 8015232:	f000 be0f 	b.w	8015e54 <__retarget_lock_release_recursive>
 8015236:	bf00      	nop
 8015238:	240314ca 	.word	0x240314ca

0801523c <__sinit>:
 801523c:	b510      	push	{r4, lr}
 801523e:	4604      	mov	r4, r0
 8015240:	f7ff fff0 	bl	8015224 <__sfp_lock_acquire>
 8015244:	6a23      	ldr	r3, [r4, #32]
 8015246:	b11b      	cbz	r3, 8015250 <__sinit+0x14>
 8015248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801524c:	f7ff bff0 	b.w	8015230 <__sfp_lock_release>
 8015250:	4b04      	ldr	r3, [pc, #16]	; (8015264 <__sinit+0x28>)
 8015252:	6223      	str	r3, [r4, #32]
 8015254:	4b04      	ldr	r3, [pc, #16]	; (8015268 <__sinit+0x2c>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d1f5      	bne.n	8015248 <__sinit+0xc>
 801525c:	f7ff ffc4 	bl	80151e8 <global_stdio_init.part.0>
 8015260:	e7f2      	b.n	8015248 <__sinit+0xc>
 8015262:	bf00      	nop
 8015264:	080151a9 	.word	0x080151a9
 8015268:	240314c0 	.word	0x240314c0

0801526c <_fwalk_sglue>:
 801526c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015270:	4607      	mov	r7, r0
 8015272:	4688      	mov	r8, r1
 8015274:	4614      	mov	r4, r2
 8015276:	2600      	movs	r6, #0
 8015278:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801527c:	f1b9 0901 	subs.w	r9, r9, #1
 8015280:	d505      	bpl.n	801528e <_fwalk_sglue+0x22>
 8015282:	6824      	ldr	r4, [r4, #0]
 8015284:	2c00      	cmp	r4, #0
 8015286:	d1f7      	bne.n	8015278 <_fwalk_sglue+0xc>
 8015288:	4630      	mov	r0, r6
 801528a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801528e:	89ab      	ldrh	r3, [r5, #12]
 8015290:	2b01      	cmp	r3, #1
 8015292:	d907      	bls.n	80152a4 <_fwalk_sglue+0x38>
 8015294:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015298:	3301      	adds	r3, #1
 801529a:	d003      	beq.n	80152a4 <_fwalk_sglue+0x38>
 801529c:	4629      	mov	r1, r5
 801529e:	4638      	mov	r0, r7
 80152a0:	47c0      	blx	r8
 80152a2:	4306      	orrs	r6, r0
 80152a4:	3568      	adds	r5, #104	; 0x68
 80152a6:	e7e9      	b.n	801527c <_fwalk_sglue+0x10>

080152a8 <iprintf>:
 80152a8:	b40f      	push	{r0, r1, r2, r3}
 80152aa:	b507      	push	{r0, r1, r2, lr}
 80152ac:	4906      	ldr	r1, [pc, #24]	; (80152c8 <iprintf+0x20>)
 80152ae:	ab04      	add	r3, sp, #16
 80152b0:	6808      	ldr	r0, [r1, #0]
 80152b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80152b6:	6881      	ldr	r1, [r0, #8]
 80152b8:	9301      	str	r3, [sp, #4]
 80152ba:	f003 f96b 	bl	8018594 <_vfiprintf_r>
 80152be:	b003      	add	sp, #12
 80152c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80152c4:	b004      	add	sp, #16
 80152c6:	4770      	bx	lr
 80152c8:	240001d8 	.word	0x240001d8

080152cc <_puts_r>:
 80152cc:	6a03      	ldr	r3, [r0, #32]
 80152ce:	b570      	push	{r4, r5, r6, lr}
 80152d0:	6884      	ldr	r4, [r0, #8]
 80152d2:	4605      	mov	r5, r0
 80152d4:	460e      	mov	r6, r1
 80152d6:	b90b      	cbnz	r3, 80152dc <_puts_r+0x10>
 80152d8:	f7ff ffb0 	bl	801523c <__sinit>
 80152dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80152de:	07db      	lsls	r3, r3, #31
 80152e0:	d405      	bmi.n	80152ee <_puts_r+0x22>
 80152e2:	89a3      	ldrh	r3, [r4, #12]
 80152e4:	0598      	lsls	r0, r3, #22
 80152e6:	d402      	bmi.n	80152ee <_puts_r+0x22>
 80152e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152ea:	f000 fdb1 	bl	8015e50 <__retarget_lock_acquire_recursive>
 80152ee:	89a3      	ldrh	r3, [r4, #12]
 80152f0:	0719      	lsls	r1, r3, #28
 80152f2:	d513      	bpl.n	801531c <_puts_r+0x50>
 80152f4:	6923      	ldr	r3, [r4, #16]
 80152f6:	b18b      	cbz	r3, 801531c <_puts_r+0x50>
 80152f8:	3e01      	subs	r6, #1
 80152fa:	68a3      	ldr	r3, [r4, #8]
 80152fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015300:	3b01      	subs	r3, #1
 8015302:	60a3      	str	r3, [r4, #8]
 8015304:	b9e9      	cbnz	r1, 8015342 <_puts_r+0x76>
 8015306:	2b00      	cmp	r3, #0
 8015308:	da2e      	bge.n	8015368 <_puts_r+0x9c>
 801530a:	4622      	mov	r2, r4
 801530c:	210a      	movs	r1, #10
 801530e:	4628      	mov	r0, r5
 8015310:	f000 f8d1 	bl	80154b6 <__swbuf_r>
 8015314:	3001      	adds	r0, #1
 8015316:	d007      	beq.n	8015328 <_puts_r+0x5c>
 8015318:	250a      	movs	r5, #10
 801531a:	e007      	b.n	801532c <_puts_r+0x60>
 801531c:	4621      	mov	r1, r4
 801531e:	4628      	mov	r0, r5
 8015320:	f000 f906 	bl	8015530 <__swsetup_r>
 8015324:	2800      	cmp	r0, #0
 8015326:	d0e7      	beq.n	80152f8 <_puts_r+0x2c>
 8015328:	f04f 35ff 	mov.w	r5, #4294967295
 801532c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801532e:	07da      	lsls	r2, r3, #31
 8015330:	d405      	bmi.n	801533e <_puts_r+0x72>
 8015332:	89a3      	ldrh	r3, [r4, #12]
 8015334:	059b      	lsls	r3, r3, #22
 8015336:	d402      	bmi.n	801533e <_puts_r+0x72>
 8015338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801533a:	f000 fd8b 	bl	8015e54 <__retarget_lock_release_recursive>
 801533e:	4628      	mov	r0, r5
 8015340:	bd70      	pop	{r4, r5, r6, pc}
 8015342:	2b00      	cmp	r3, #0
 8015344:	da04      	bge.n	8015350 <_puts_r+0x84>
 8015346:	69a2      	ldr	r2, [r4, #24]
 8015348:	429a      	cmp	r2, r3
 801534a:	dc06      	bgt.n	801535a <_puts_r+0x8e>
 801534c:	290a      	cmp	r1, #10
 801534e:	d004      	beq.n	801535a <_puts_r+0x8e>
 8015350:	6823      	ldr	r3, [r4, #0]
 8015352:	1c5a      	adds	r2, r3, #1
 8015354:	6022      	str	r2, [r4, #0]
 8015356:	7019      	strb	r1, [r3, #0]
 8015358:	e7cf      	b.n	80152fa <_puts_r+0x2e>
 801535a:	4622      	mov	r2, r4
 801535c:	4628      	mov	r0, r5
 801535e:	f000 f8aa 	bl	80154b6 <__swbuf_r>
 8015362:	3001      	adds	r0, #1
 8015364:	d1c9      	bne.n	80152fa <_puts_r+0x2e>
 8015366:	e7df      	b.n	8015328 <_puts_r+0x5c>
 8015368:	6823      	ldr	r3, [r4, #0]
 801536a:	250a      	movs	r5, #10
 801536c:	1c5a      	adds	r2, r3, #1
 801536e:	6022      	str	r2, [r4, #0]
 8015370:	701d      	strb	r5, [r3, #0]
 8015372:	e7db      	b.n	801532c <_puts_r+0x60>

08015374 <puts>:
 8015374:	4b02      	ldr	r3, [pc, #8]	; (8015380 <puts+0xc>)
 8015376:	4601      	mov	r1, r0
 8015378:	6818      	ldr	r0, [r3, #0]
 801537a:	f7ff bfa7 	b.w	80152cc <_puts_r>
 801537e:	bf00      	nop
 8015380:	240001d8 	.word	0x240001d8

08015384 <sniprintf>:
 8015384:	b40c      	push	{r2, r3}
 8015386:	b530      	push	{r4, r5, lr}
 8015388:	4b17      	ldr	r3, [pc, #92]	; (80153e8 <sniprintf+0x64>)
 801538a:	1e0c      	subs	r4, r1, #0
 801538c:	681d      	ldr	r5, [r3, #0]
 801538e:	b09d      	sub	sp, #116	; 0x74
 8015390:	da08      	bge.n	80153a4 <sniprintf+0x20>
 8015392:	238b      	movs	r3, #139	; 0x8b
 8015394:	602b      	str	r3, [r5, #0]
 8015396:	f04f 30ff 	mov.w	r0, #4294967295
 801539a:	b01d      	add	sp, #116	; 0x74
 801539c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80153a0:	b002      	add	sp, #8
 80153a2:	4770      	bx	lr
 80153a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80153a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80153ac:	bf14      	ite	ne
 80153ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80153b2:	4623      	moveq	r3, r4
 80153b4:	9304      	str	r3, [sp, #16]
 80153b6:	9307      	str	r3, [sp, #28]
 80153b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80153bc:	9002      	str	r0, [sp, #8]
 80153be:	9006      	str	r0, [sp, #24]
 80153c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80153c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80153c6:	ab21      	add	r3, sp, #132	; 0x84
 80153c8:	a902      	add	r1, sp, #8
 80153ca:	4628      	mov	r0, r5
 80153cc:	9301      	str	r3, [sp, #4]
 80153ce:	f002 ffb9 	bl	8018344 <_svfiprintf_r>
 80153d2:	1c43      	adds	r3, r0, #1
 80153d4:	bfbc      	itt	lt
 80153d6:	238b      	movlt	r3, #139	; 0x8b
 80153d8:	602b      	strlt	r3, [r5, #0]
 80153da:	2c00      	cmp	r4, #0
 80153dc:	d0dd      	beq.n	801539a <sniprintf+0x16>
 80153de:	9b02      	ldr	r3, [sp, #8]
 80153e0:	2200      	movs	r2, #0
 80153e2:	701a      	strb	r2, [r3, #0]
 80153e4:	e7d9      	b.n	801539a <sniprintf+0x16>
 80153e6:	bf00      	nop
 80153e8:	240001d8 	.word	0x240001d8

080153ec <siprintf>:
 80153ec:	b40e      	push	{r1, r2, r3}
 80153ee:	b500      	push	{lr}
 80153f0:	b09c      	sub	sp, #112	; 0x70
 80153f2:	ab1d      	add	r3, sp, #116	; 0x74
 80153f4:	9002      	str	r0, [sp, #8]
 80153f6:	9006      	str	r0, [sp, #24]
 80153f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80153fc:	4809      	ldr	r0, [pc, #36]	; (8015424 <siprintf+0x38>)
 80153fe:	9107      	str	r1, [sp, #28]
 8015400:	9104      	str	r1, [sp, #16]
 8015402:	4909      	ldr	r1, [pc, #36]	; (8015428 <siprintf+0x3c>)
 8015404:	f853 2b04 	ldr.w	r2, [r3], #4
 8015408:	9105      	str	r1, [sp, #20]
 801540a:	6800      	ldr	r0, [r0, #0]
 801540c:	9301      	str	r3, [sp, #4]
 801540e:	a902      	add	r1, sp, #8
 8015410:	f002 ff98 	bl	8018344 <_svfiprintf_r>
 8015414:	9b02      	ldr	r3, [sp, #8]
 8015416:	2200      	movs	r2, #0
 8015418:	701a      	strb	r2, [r3, #0]
 801541a:	b01c      	add	sp, #112	; 0x70
 801541c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015420:	b003      	add	sp, #12
 8015422:	4770      	bx	lr
 8015424:	240001d8 	.word	0x240001d8
 8015428:	ffff0208 	.word	0xffff0208

0801542c <__sread>:
 801542c:	b510      	push	{r4, lr}
 801542e:	460c      	mov	r4, r1
 8015430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015434:	f000 fcac 	bl	8015d90 <_read_r>
 8015438:	2800      	cmp	r0, #0
 801543a:	bfab      	itete	ge
 801543c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801543e:	89a3      	ldrhlt	r3, [r4, #12]
 8015440:	181b      	addge	r3, r3, r0
 8015442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015446:	bfac      	ite	ge
 8015448:	6563      	strge	r3, [r4, #84]	; 0x54
 801544a:	81a3      	strhlt	r3, [r4, #12]
 801544c:	bd10      	pop	{r4, pc}

0801544e <__seofread>:
 801544e:	2000      	movs	r0, #0
 8015450:	4770      	bx	lr

08015452 <__swrite>:
 8015452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015456:	461f      	mov	r7, r3
 8015458:	898b      	ldrh	r3, [r1, #12]
 801545a:	05db      	lsls	r3, r3, #23
 801545c:	4605      	mov	r5, r0
 801545e:	460c      	mov	r4, r1
 8015460:	4616      	mov	r6, r2
 8015462:	d505      	bpl.n	8015470 <__swrite+0x1e>
 8015464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015468:	2302      	movs	r3, #2
 801546a:	2200      	movs	r2, #0
 801546c:	f000 fc7e 	bl	8015d6c <_lseek_r>
 8015470:	89a3      	ldrh	r3, [r4, #12]
 8015472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801547a:	81a3      	strh	r3, [r4, #12]
 801547c:	4632      	mov	r2, r6
 801547e:	463b      	mov	r3, r7
 8015480:	4628      	mov	r0, r5
 8015482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015486:	f000 bca5 	b.w	8015dd4 <_write_r>

0801548a <__sseek>:
 801548a:	b510      	push	{r4, lr}
 801548c:	460c      	mov	r4, r1
 801548e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015492:	f000 fc6b 	bl	8015d6c <_lseek_r>
 8015496:	1c43      	adds	r3, r0, #1
 8015498:	89a3      	ldrh	r3, [r4, #12]
 801549a:	bf15      	itete	ne
 801549c:	6560      	strne	r0, [r4, #84]	; 0x54
 801549e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80154a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80154a6:	81a3      	strheq	r3, [r4, #12]
 80154a8:	bf18      	it	ne
 80154aa:	81a3      	strhne	r3, [r4, #12]
 80154ac:	bd10      	pop	{r4, pc}

080154ae <__sclose>:
 80154ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154b2:	f000 bc4b 	b.w	8015d4c <_close_r>

080154b6 <__swbuf_r>:
 80154b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154b8:	460e      	mov	r6, r1
 80154ba:	4614      	mov	r4, r2
 80154bc:	4605      	mov	r5, r0
 80154be:	b118      	cbz	r0, 80154c8 <__swbuf_r+0x12>
 80154c0:	6a03      	ldr	r3, [r0, #32]
 80154c2:	b90b      	cbnz	r3, 80154c8 <__swbuf_r+0x12>
 80154c4:	f7ff feba 	bl	801523c <__sinit>
 80154c8:	69a3      	ldr	r3, [r4, #24]
 80154ca:	60a3      	str	r3, [r4, #8]
 80154cc:	89a3      	ldrh	r3, [r4, #12]
 80154ce:	071a      	lsls	r2, r3, #28
 80154d0:	d525      	bpl.n	801551e <__swbuf_r+0x68>
 80154d2:	6923      	ldr	r3, [r4, #16]
 80154d4:	b31b      	cbz	r3, 801551e <__swbuf_r+0x68>
 80154d6:	6823      	ldr	r3, [r4, #0]
 80154d8:	6922      	ldr	r2, [r4, #16]
 80154da:	1a98      	subs	r0, r3, r2
 80154dc:	6963      	ldr	r3, [r4, #20]
 80154de:	b2f6      	uxtb	r6, r6
 80154e0:	4283      	cmp	r3, r0
 80154e2:	4637      	mov	r7, r6
 80154e4:	dc04      	bgt.n	80154f0 <__swbuf_r+0x3a>
 80154e6:	4621      	mov	r1, r4
 80154e8:	4628      	mov	r0, r5
 80154ea:	f003 f9f3 	bl	80188d4 <_fflush_r>
 80154ee:	b9e0      	cbnz	r0, 801552a <__swbuf_r+0x74>
 80154f0:	68a3      	ldr	r3, [r4, #8]
 80154f2:	3b01      	subs	r3, #1
 80154f4:	60a3      	str	r3, [r4, #8]
 80154f6:	6823      	ldr	r3, [r4, #0]
 80154f8:	1c5a      	adds	r2, r3, #1
 80154fa:	6022      	str	r2, [r4, #0]
 80154fc:	701e      	strb	r6, [r3, #0]
 80154fe:	6962      	ldr	r2, [r4, #20]
 8015500:	1c43      	adds	r3, r0, #1
 8015502:	429a      	cmp	r2, r3
 8015504:	d004      	beq.n	8015510 <__swbuf_r+0x5a>
 8015506:	89a3      	ldrh	r3, [r4, #12]
 8015508:	07db      	lsls	r3, r3, #31
 801550a:	d506      	bpl.n	801551a <__swbuf_r+0x64>
 801550c:	2e0a      	cmp	r6, #10
 801550e:	d104      	bne.n	801551a <__swbuf_r+0x64>
 8015510:	4621      	mov	r1, r4
 8015512:	4628      	mov	r0, r5
 8015514:	f003 f9de 	bl	80188d4 <_fflush_r>
 8015518:	b938      	cbnz	r0, 801552a <__swbuf_r+0x74>
 801551a:	4638      	mov	r0, r7
 801551c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801551e:	4621      	mov	r1, r4
 8015520:	4628      	mov	r0, r5
 8015522:	f000 f805 	bl	8015530 <__swsetup_r>
 8015526:	2800      	cmp	r0, #0
 8015528:	d0d5      	beq.n	80154d6 <__swbuf_r+0x20>
 801552a:	f04f 37ff 	mov.w	r7, #4294967295
 801552e:	e7f4      	b.n	801551a <__swbuf_r+0x64>

08015530 <__swsetup_r>:
 8015530:	b538      	push	{r3, r4, r5, lr}
 8015532:	4b2a      	ldr	r3, [pc, #168]	; (80155dc <__swsetup_r+0xac>)
 8015534:	4605      	mov	r5, r0
 8015536:	6818      	ldr	r0, [r3, #0]
 8015538:	460c      	mov	r4, r1
 801553a:	b118      	cbz	r0, 8015544 <__swsetup_r+0x14>
 801553c:	6a03      	ldr	r3, [r0, #32]
 801553e:	b90b      	cbnz	r3, 8015544 <__swsetup_r+0x14>
 8015540:	f7ff fe7c 	bl	801523c <__sinit>
 8015544:	89a3      	ldrh	r3, [r4, #12]
 8015546:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801554a:	0718      	lsls	r0, r3, #28
 801554c:	d422      	bmi.n	8015594 <__swsetup_r+0x64>
 801554e:	06d9      	lsls	r1, r3, #27
 8015550:	d407      	bmi.n	8015562 <__swsetup_r+0x32>
 8015552:	2309      	movs	r3, #9
 8015554:	602b      	str	r3, [r5, #0]
 8015556:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801555a:	81a3      	strh	r3, [r4, #12]
 801555c:	f04f 30ff 	mov.w	r0, #4294967295
 8015560:	e034      	b.n	80155cc <__swsetup_r+0x9c>
 8015562:	0758      	lsls	r0, r3, #29
 8015564:	d512      	bpl.n	801558c <__swsetup_r+0x5c>
 8015566:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015568:	b141      	cbz	r1, 801557c <__swsetup_r+0x4c>
 801556a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801556e:	4299      	cmp	r1, r3
 8015570:	d002      	beq.n	8015578 <__swsetup_r+0x48>
 8015572:	4628      	mov	r0, r5
 8015574:	f001 fa78 	bl	8016a68 <_free_r>
 8015578:	2300      	movs	r3, #0
 801557a:	6363      	str	r3, [r4, #52]	; 0x34
 801557c:	89a3      	ldrh	r3, [r4, #12]
 801557e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015582:	81a3      	strh	r3, [r4, #12]
 8015584:	2300      	movs	r3, #0
 8015586:	6063      	str	r3, [r4, #4]
 8015588:	6923      	ldr	r3, [r4, #16]
 801558a:	6023      	str	r3, [r4, #0]
 801558c:	89a3      	ldrh	r3, [r4, #12]
 801558e:	f043 0308 	orr.w	r3, r3, #8
 8015592:	81a3      	strh	r3, [r4, #12]
 8015594:	6923      	ldr	r3, [r4, #16]
 8015596:	b94b      	cbnz	r3, 80155ac <__swsetup_r+0x7c>
 8015598:	89a3      	ldrh	r3, [r4, #12]
 801559a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801559e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80155a2:	d003      	beq.n	80155ac <__swsetup_r+0x7c>
 80155a4:	4621      	mov	r1, r4
 80155a6:	4628      	mov	r0, r5
 80155a8:	f003 f9e2 	bl	8018970 <__smakebuf_r>
 80155ac:	89a0      	ldrh	r0, [r4, #12]
 80155ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80155b2:	f010 0301 	ands.w	r3, r0, #1
 80155b6:	d00a      	beq.n	80155ce <__swsetup_r+0x9e>
 80155b8:	2300      	movs	r3, #0
 80155ba:	60a3      	str	r3, [r4, #8]
 80155bc:	6963      	ldr	r3, [r4, #20]
 80155be:	425b      	negs	r3, r3
 80155c0:	61a3      	str	r3, [r4, #24]
 80155c2:	6923      	ldr	r3, [r4, #16]
 80155c4:	b943      	cbnz	r3, 80155d8 <__swsetup_r+0xa8>
 80155c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80155ca:	d1c4      	bne.n	8015556 <__swsetup_r+0x26>
 80155cc:	bd38      	pop	{r3, r4, r5, pc}
 80155ce:	0781      	lsls	r1, r0, #30
 80155d0:	bf58      	it	pl
 80155d2:	6963      	ldrpl	r3, [r4, #20]
 80155d4:	60a3      	str	r3, [r4, #8]
 80155d6:	e7f4      	b.n	80155c2 <__swsetup_r+0x92>
 80155d8:	2000      	movs	r0, #0
 80155da:	e7f7      	b.n	80155cc <__swsetup_r+0x9c>
 80155dc:	240001d8 	.word	0x240001d8

080155e0 <memset>:
 80155e0:	4402      	add	r2, r0
 80155e2:	4603      	mov	r3, r0
 80155e4:	4293      	cmp	r3, r2
 80155e6:	d100      	bne.n	80155ea <memset+0xa>
 80155e8:	4770      	bx	lr
 80155ea:	f803 1b01 	strb.w	r1, [r3], #1
 80155ee:	e7f9      	b.n	80155e4 <memset+0x4>

080155f0 <is_leap_year>:
 80155f0:	0783      	lsls	r3, r0, #30
 80155f2:	d10f      	bne.n	8015614 <is_leap_year+0x24>
 80155f4:	2264      	movs	r2, #100	; 0x64
 80155f6:	fb90 f3f2 	sdiv	r3, r0, r2
 80155fa:	fb02 0313 	mls	r3, r2, r3, r0
 80155fe:	b95b      	cbnz	r3, 8015618 <is_leap_year+0x28>
 8015600:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015604:	fb90 f2f3 	sdiv	r2, r0, r3
 8015608:	fb03 0012 	mls	r0, r3, r2, r0
 801560c:	fab0 f080 	clz	r0, r0
 8015610:	0940      	lsrs	r0, r0, #5
 8015612:	4770      	bx	lr
 8015614:	2000      	movs	r0, #0
 8015616:	4770      	bx	lr
 8015618:	2001      	movs	r0, #1
 801561a:	4770      	bx	lr

0801561c <first_day>:
 801561c:	b570      	push	{r4, r5, r6, lr}
 801561e:	2104      	movs	r1, #4
 8015620:	4604      	mov	r4, r0
 8015622:	f240 75b1 	movw	r5, #1969	; 0x7b1
 8015626:	2607      	movs	r6, #7
 8015628:	3c01      	subs	r4, #1
 801562a:	42ac      	cmp	r4, r5
 801562c:	dc01      	bgt.n	8015632 <first_day+0x16>
 801562e:	4608      	mov	r0, r1
 8015630:	bd70      	pop	{r4, r5, r6, pc}
 8015632:	4620      	mov	r0, r4
 8015634:	f7ff ffdc 	bl	80155f0 <is_leap_year>
 8015638:	f201 116d 	addw	r1, r1, #365	; 0x16d
 801563c:	4401      	add	r1, r0
 801563e:	fb91 f3f6 	sdiv	r3, r1, r6
 8015642:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8015646:	1ac9      	subs	r1, r1, r3
 8015648:	e7ee      	b.n	8015628 <first_day+0xc>

0801564a <match_string>:
 801564a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801564e:	4605      	mov	r5, r0
 8015650:	4690      	mov	r8, r2
 8015652:	1f0c      	subs	r4, r1, #4
 8015654:	2600      	movs	r6, #0
 8015656:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801565a:	b910      	cbnz	r0, 8015662 <match_string+0x18>
 801565c:	f04f 36ff 	mov.w	r6, #4294967295
 8015660:	e00c      	b.n	801567c <match_string+0x32>
 8015662:	f7ea feb5 	bl	80003d0 <strlen>
 8015666:	6821      	ldr	r1, [r4, #0]
 8015668:	4607      	mov	r7, r0
 801566a:	4602      	mov	r2, r0
 801566c:	4643      	mov	r3, r8
 801566e:	6828      	ldr	r0, [r5, #0]
 8015670:	f003 f9e6 	bl	8018a40 <strncasecmp_l>
 8015674:	b928      	cbnz	r0, 8015682 <match_string+0x38>
 8015676:	682b      	ldr	r3, [r5, #0]
 8015678:	443b      	add	r3, r7
 801567a:	602b      	str	r3, [r5, #0]
 801567c:	4630      	mov	r0, r6
 801567e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015682:	3601      	adds	r6, #1
 8015684:	e7e7      	b.n	8015656 <match_string+0xc>
	...

08015688 <strptime_l>:
 8015688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801568c:	b087      	sub	sp, #28
 801568e:	f8df 9334 	ldr.w	r9, [pc, #820]	; 80159c4 <strptime_l+0x33c>
 8015692:	4fc5      	ldr	r7, [pc, #788]	; (80159a8 <strptime_l+0x320>)
 8015694:	9001      	str	r0, [sp, #4]
 8015696:	460e      	mov	r6, r1
 8015698:	4614      	mov	r4, r2
 801569a:	461d      	mov	r5, r3
 801569c:	f04f 0800 	mov.w	r8, #0
 80156a0:	7832      	ldrb	r2, [r6, #0]
 80156a2:	bb7a      	cbnz	r2, 8015704 <strptime_l+0x7c>
 80156a4:	f008 0307 	and.w	r3, r8, #7
 80156a8:	2b07      	cmp	r3, #7
 80156aa:	f040 830f 	bne.w	8015ccc <strptime_l+0x644>
 80156ae:	f018 0f10 	tst.w	r8, #16
 80156b2:	d112      	bne.n	80156da <strptime_l+0x52>
 80156b4:	4bbd      	ldr	r3, [pc, #756]	; (80159ac <strptime_l+0x324>)
 80156b6:	6925      	ldr	r5, [r4, #16]
 80156b8:	6960      	ldr	r0, [r4, #20]
 80156ba:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 80156be:	68e3      	ldr	r3, [r4, #12]
 80156c0:	4419      	add	r1, r3
 80156c2:	61e1      	str	r1, [r4, #28]
 80156c4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80156c8:	f7ff ff92 	bl	80155f0 <is_leap_year>
 80156cc:	b108      	cbz	r0, 80156d2 <strptime_l+0x4a>
 80156ce:	2d01      	cmp	r5, #1
 80156d0:	dc01      	bgt.n	80156d6 <strptime_l+0x4e>
 80156d2:	3901      	subs	r1, #1
 80156d4:	61e1      	str	r1, [r4, #28]
 80156d6:	f048 0810 	orr.w	r8, r8, #16
 80156da:	f008 081c 	and.w	r8, r8, #28
 80156de:	f1b8 0f14 	cmp.w	r8, #20
 80156e2:	d10d      	bne.n	8015700 <strptime_l+0x78>
 80156e4:	6960      	ldr	r0, [r4, #20]
 80156e6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80156ea:	f7ff ff97 	bl	801561c <first_day>
 80156ee:	69e3      	ldr	r3, [r4, #28]
 80156f0:	4418      	add	r0, r3
 80156f2:	2307      	movs	r3, #7
 80156f4:	fb90 f3f3 	sdiv	r3, r0, r3
 80156f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80156fc:	1ac0      	subs	r0, r0, r3
 80156fe:	61a0      	str	r0, [r4, #24]
 8015700:	9801      	ldr	r0, [sp, #4]
 8015702:	e221      	b.n	8015b48 <strptime_l+0x4c0>
 8015704:	f819 3002 	ldrb.w	r3, [r9, r2]
 8015708:	0719      	lsls	r1, r3, #28
 801570a:	d50a      	bpl.n	8015722 <strptime_l+0x9a>
 801570c:	9b01      	ldr	r3, [sp, #4]
 801570e:	781a      	ldrb	r2, [r3, #0]
 8015710:	f819 2002 	ldrb.w	r2, [r9, r2]
 8015714:	0712      	lsls	r2, r2, #28
 8015716:	d401      	bmi.n	801571c <strptime_l+0x94>
 8015718:	3601      	adds	r6, #1
 801571a:	e7c1      	b.n	80156a0 <strptime_l+0x18>
 801571c:	3301      	adds	r3, #1
 801571e:	9301      	str	r3, [sp, #4]
 8015720:	e7f4      	b.n	801570c <strptime_l+0x84>
 8015722:	2a25      	cmp	r2, #37	; 0x25
 8015724:	f040 82c8 	bne.w	8015cb8 <strptime_l+0x630>
 8015728:	7873      	ldrb	r3, [r6, #1]
 801572a:	2b00      	cmp	r3, #0
 801572c:	f000 82c4 	beq.w	8015cb8 <strptime_l+0x630>
 8015730:	2b45      	cmp	r3, #69	; 0x45
 8015732:	f000 80bb 	beq.w	80158ac <strptime_l+0x224>
 8015736:	2b4f      	cmp	r3, #79	; 0x4f
 8015738:	f000 80b8 	beq.w	80158ac <strptime_l+0x224>
 801573c:	3601      	adds	r6, #1
 801573e:	f1a3 0225 	sub.w	r2, r3, #37	; 0x25
 8015742:	b2d1      	uxtb	r1, r2
 8015744:	2954      	cmp	r1, #84	; 0x54
 8015746:	f200 82aa 	bhi.w	8015c9e <strptime_l+0x616>
 801574a:	2a54      	cmp	r2, #84	; 0x54
 801574c:	f200 82a7 	bhi.w	8015c9e <strptime_l+0x616>
 8015750:	a101      	add	r1, pc, #4	; (adr r1, 8015758 <strptime_l+0xd0>)
 8015752:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015756:	bf00      	nop
 8015758:	08015c97 	.word	0x08015c97
 801575c:	08015c9f 	.word	0x08015c9f
 8015760:	08015c9f 	.word	0x08015c9f
 8015764:	08015c9f 	.word	0x08015c9f
 8015768:	08015c9f 	.word	0x08015c9f
 801576c:	08015c9f 	.word	0x08015c9f
 8015770:	08015c9f 	.word	0x08015c9f
 8015774:	08015c9f 	.word	0x08015c9f
 8015778:	08015c9f 	.word	0x08015c9f
 801577c:	08015c9f 	.word	0x08015c9f
 8015780:	08015c9f 	.word	0x08015c9f
 8015784:	08015c9f 	.word	0x08015c9f
 8015788:	08015c9f 	.word	0x08015c9f
 801578c:	08015c9f 	.word	0x08015c9f
 8015790:	08015c9f 	.word	0x08015c9f
 8015794:	08015c9f 	.word	0x08015c9f
 8015798:	08015c9f 	.word	0x08015c9f
 801579c:	08015c9f 	.word	0x08015c9f
 80157a0:	08015c9f 	.word	0x08015c9f
 80157a4:	08015c9f 	.word	0x08015c9f
 80157a8:	08015c9f 	.word	0x08015c9f
 80157ac:	08015c9f 	.word	0x08015c9f
 80157b0:	08015c9f 	.word	0x08015c9f
 80157b4:	08015c9f 	.word	0x08015c9f
 80157b8:	08015c9f 	.word	0x08015c9f
 80157bc:	08015c9f 	.word	0x08015c9f
 80157c0:	08015c9f 	.word	0x08015c9f
 80157c4:	08015c9f 	.word	0x08015c9f
 80157c8:	080158bb 	.word	0x080158bb
 80157cc:	080158d9 	.word	0x080158d9
 80157d0:	080158f7 	.word	0x080158f7
 80157d4:	08015935 	.word	0x08015935
 80157d8:	08015c9f 	.word	0x08015c9f
 80157dc:	08015967 	.word	0x08015967
 80157e0:	08015c9f 	.word	0x08015c9f
 80157e4:	0801598b 	.word	0x0801598b
 80157e8:	080159c9 	.word	0x080159c9
 80157ec:	08015c9f 	.word	0x08015c9f
 80157f0:	08015c9f 	.word	0x08015c9f
 80157f4:	08015c9f 	.word	0x08015c9f
 80157f8:	08015a27 	.word	0x08015a27
 80157fc:	08015c9f 	.word	0x08015c9f
 8015800:	08015c9f 	.word	0x08015c9f
 8015804:	08015c9f 	.word	0x08015c9f
 8015808:	08015c9f 	.word	0x08015c9f
 801580c:	08015a87 	.word	0x08015a87
 8015810:	08015aef 	.word	0x08015aef
 8015814:	08015b0f 	.word	0x08015b0f
 8015818:	08015b4f 	.word	0x08015b4f
 801581c:	08015b8d 	.word	0x08015b8d
 8015820:	08015bdf 	.word	0x08015bdf
 8015824:	08015c4d 	.word	0x08015c4d
 8015828:	08015c7d 	.word	0x08015c7d
 801582c:	08015719 	.word	0x08015719
 8015830:	08015c9f 	.word	0x08015c9f
 8015834:	08015c9f 	.word	0x08015c9f
 8015838:	08015c9f 	.word	0x08015c9f
 801583c:	08015c9f 	.word	0x08015c9f
 8015840:	08015c9f 	.word	0x08015c9f
 8015844:	08015c9f 	.word	0x08015c9f
 8015848:	080158d3 	.word	0x080158d3
 801584c:	080158f1 	.word	0x080158f1
 8015850:	08015917 	.word	0x08015917
 8015854:	08015947 	.word	0x08015947
 8015858:	08015947 	.word	0x08015947
 801585c:	08015c9f 	.word	0x08015c9f
 8015860:	08015c9f 	.word	0x08015c9f
 8015864:	080158f1 	.word	0x080158f1
 8015868:	08015c9f 	.word	0x08015c9f
 801586c:	080159e7 	.word	0x080159e7
 8015870:	0801598b 	.word	0x0801598b
 8015874:	080159c9 	.word	0x080159c9
 8015878:	08015a09 	.word	0x08015a09
 801587c:	08015a41 	.word	0x08015a41
 8015880:	08015c9f 	.word	0x08015c9f
 8015884:	08015a4d 	.word	0x08015a4d
 8015888:	08015c9f 	.word	0x08015c9f
 801588c:	08015a6f 	.word	0x08015a6f
 8015890:	08015a8f 	.word	0x08015a8f
 8015894:	08015b07 	.word	0x08015b07
 8015898:	08015b17 	.word	0x08015b17
 801589c:	08015c9f 	.word	0x08015c9f
 80158a0:	08015b33 	.word	0x08015b33
 80158a4:	08015c43 	.word	0x08015c43
 80158a8:	08015c57 	.word	0x08015c57
 80158ac:	78b3      	ldrb	r3, [r6, #2]
 80158ae:	1cb2      	adds	r2, r6, #2
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	f000 81ef 	beq.w	8015c94 <strptime_l+0x60c>
 80158b6:	4616      	mov	r6, r2
 80158b8:	e741      	b.n	801573e <strptime_l+0xb6>
 80158ba:	493d      	ldr	r1, [pc, #244]	; (80159b0 <strptime_l+0x328>)
 80158bc:	462a      	mov	r2, r5
 80158be:	a801      	add	r0, sp, #4
 80158c0:	f7ff fec3 	bl	801564a <match_string>
 80158c4:	2800      	cmp	r0, #0
 80158c6:	f2c0 813e 	blt.w	8015b46 <strptime_l+0x4be>
 80158ca:	61a0      	str	r0, [r4, #24]
 80158cc:	f048 0808 	orr.w	r8, r8, #8
 80158d0:	e722      	b.n	8015718 <strptime_l+0x90>
 80158d2:	4938      	ldr	r1, [pc, #224]	; (80159b4 <strptime_l+0x32c>)
 80158d4:	462a      	mov	r2, r5
 80158d6:	e7f2      	b.n	80158be <strptime_l+0x236>
 80158d8:	4937      	ldr	r1, [pc, #220]	; (80159b8 <strptime_l+0x330>)
 80158da:	462a      	mov	r2, r5
 80158dc:	a801      	add	r0, sp, #4
 80158de:	f7ff feb4 	bl	801564a <match_string>
 80158e2:	2800      	cmp	r0, #0
 80158e4:	f2c0 812f 	blt.w	8015b46 <strptime_l+0x4be>
 80158e8:	6120      	str	r0, [r4, #16]
 80158ea:	f048 0802 	orr.w	r8, r8, #2
 80158ee:	e713      	b.n	8015718 <strptime_l+0x90>
 80158f0:	462a      	mov	r2, r5
 80158f2:	4639      	mov	r1, r7
 80158f4:	e7f2      	b.n	80158dc <strptime_l+0x254>
 80158f6:	462b      	mov	r3, r5
 80158f8:	220a      	movs	r2, #10
 80158fa:	9801      	ldr	r0, [sp, #4]
 80158fc:	a903      	add	r1, sp, #12
 80158fe:	f002 fc13 	bl	8018128 <strtol_l>
 8015902:	9b03      	ldr	r3, [sp, #12]
 8015904:	9a01      	ldr	r2, [sp, #4]
 8015906:	4293      	cmp	r3, r2
 8015908:	f000 811d 	beq.w	8015b46 <strptime_l+0x4be>
 801590c:	2264      	movs	r2, #100	; 0x64
 801590e:	4350      	muls	r0, r2
 8015910:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8015914:	e1ad      	b.n	8015c72 <strptime_l+0x5ea>
 8015916:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801591a:	9801      	ldr	r0, [sp, #4]
 801591c:	462b      	mov	r3, r5
 801591e:	4622      	mov	r2, r4
 8015920:	f7ff feb2 	bl	8015688 <strptime_l>
 8015924:	9003      	str	r0, [sp, #12]
 8015926:	2800      	cmp	r0, #0
 8015928:	f000 810d 	beq.w	8015b46 <strptime_l+0x4be>
 801592c:	9001      	str	r0, [sp, #4]
 801592e:	f048 080f 	orr.w	r8, r8, #15
 8015932:	e6f1      	b.n	8015718 <strptime_l+0x90>
 8015934:	4921      	ldr	r1, [pc, #132]	; (80159bc <strptime_l+0x334>)
 8015936:	462b      	mov	r3, r5
 8015938:	4622      	mov	r2, r4
 801593a:	9801      	ldr	r0, [sp, #4]
 801593c:	f7ff fea4 	bl	8015688 <strptime_l>
 8015940:	9003      	str	r0, [sp, #12]
 8015942:	b9f0      	cbnz	r0, 8015982 <strptime_l+0x2fa>
 8015944:	e0ff      	b.n	8015b46 <strptime_l+0x4be>
 8015946:	462b      	mov	r3, r5
 8015948:	220a      	movs	r2, #10
 801594a:	9801      	ldr	r0, [sp, #4]
 801594c:	a903      	add	r1, sp, #12
 801594e:	f002 fbeb 	bl	8018128 <strtol_l>
 8015952:	9b03      	ldr	r3, [sp, #12]
 8015954:	9a01      	ldr	r2, [sp, #4]
 8015956:	4293      	cmp	r3, r2
 8015958:	f000 80f5 	beq.w	8015b46 <strptime_l+0x4be>
 801595c:	60e0      	str	r0, [r4, #12]
 801595e:	9301      	str	r3, [sp, #4]
 8015960:	f048 0801 	orr.w	r8, r8, #1
 8015964:	e6d8      	b.n	8015718 <strptime_l+0x90>
 8015966:	4916      	ldr	r1, [pc, #88]	; (80159c0 <strptime_l+0x338>)
 8015968:	9801      	ldr	r0, [sp, #4]
 801596a:	462b      	mov	r3, r5
 801596c:	4622      	mov	r2, r4
 801596e:	f7ff fe8b 	bl	8015688 <strptime_l>
 8015972:	9003      	str	r0, [sp, #12]
 8015974:	2800      	cmp	r0, #0
 8015976:	f000 80e6 	beq.w	8015b46 <strptime_l+0x4be>
 801597a:	9b01      	ldr	r3, [sp, #4]
 801597c:	4298      	cmp	r0, r3
 801597e:	f000 80e2 	beq.w	8015b46 <strptime_l+0x4be>
 8015982:	9001      	str	r0, [sp, #4]
 8015984:	f048 0807 	orr.w	r8, r8, #7
 8015988:	e6c6      	b.n	8015718 <strptime_l+0x90>
 801598a:	462b      	mov	r3, r5
 801598c:	220a      	movs	r2, #10
 801598e:	9801      	ldr	r0, [sp, #4]
 8015990:	a903      	add	r1, sp, #12
 8015992:	f002 fbc9 	bl	8018128 <strtol_l>
 8015996:	9b03      	ldr	r3, [sp, #12]
 8015998:	9a01      	ldr	r2, [sp, #4]
 801599a:	4293      	cmp	r3, r2
 801599c:	f000 80d3 	beq.w	8015b46 <strptime_l+0x4be>
 80159a0:	60a0      	str	r0, [r4, #8]
 80159a2:	9301      	str	r3, [sp, #4]
 80159a4:	e6b8      	b.n	8015718 <strptime_l+0x90>
 80159a6:	bf00      	nop
 80159a8:	0802cbf4 	.word	0x0802cbf4
 80159ac:	0802caa0 	.word	0x0802caa0
 80159b0:	0802cc70 	.word	0x0802cc70
 80159b4:	0802cc54 	.word	0x0802cc54
 80159b8:	0802cc24 	.word	0x0802cc24
 80159bc:	0802ca7f 	.word	0x0802ca7f
 80159c0:	0802ca88 	.word	0x0802ca88
 80159c4:	0802cf29 	.word	0x0802cf29
 80159c8:	462b      	mov	r3, r5
 80159ca:	220a      	movs	r2, #10
 80159cc:	9801      	ldr	r0, [sp, #4]
 80159ce:	a903      	add	r1, sp, #12
 80159d0:	f002 fbaa 	bl	8018128 <strtol_l>
 80159d4:	9b03      	ldr	r3, [sp, #12]
 80159d6:	9a01      	ldr	r2, [sp, #4]
 80159d8:	4293      	cmp	r3, r2
 80159da:	f000 80b4 	beq.w	8015b46 <strptime_l+0x4be>
 80159de:	280c      	cmp	r0, #12
 80159e0:	bf08      	it	eq
 80159e2:	2000      	moveq	r0, #0
 80159e4:	e7dc      	b.n	80159a0 <strptime_l+0x318>
 80159e6:	462b      	mov	r3, r5
 80159e8:	220a      	movs	r2, #10
 80159ea:	9801      	ldr	r0, [sp, #4]
 80159ec:	a903      	add	r1, sp, #12
 80159ee:	f002 fb9b 	bl	8018128 <strtol_l>
 80159f2:	9b03      	ldr	r3, [sp, #12]
 80159f4:	9a01      	ldr	r2, [sp, #4]
 80159f6:	4293      	cmp	r3, r2
 80159f8:	f000 80a5 	beq.w	8015b46 <strptime_l+0x4be>
 80159fc:	3801      	subs	r0, #1
 80159fe:	61e0      	str	r0, [r4, #28]
 8015a00:	9301      	str	r3, [sp, #4]
 8015a02:	f048 0810 	orr.w	r8, r8, #16
 8015a06:	e687      	b.n	8015718 <strptime_l+0x90>
 8015a08:	462b      	mov	r3, r5
 8015a0a:	220a      	movs	r2, #10
 8015a0c:	9801      	ldr	r0, [sp, #4]
 8015a0e:	a903      	add	r1, sp, #12
 8015a10:	f002 fb8a 	bl	8018128 <strtol_l>
 8015a14:	9b03      	ldr	r3, [sp, #12]
 8015a16:	9a01      	ldr	r2, [sp, #4]
 8015a18:	4293      	cmp	r3, r2
 8015a1a:	f000 8094 	beq.w	8015b46 <strptime_l+0x4be>
 8015a1e:	3801      	subs	r0, #1
 8015a20:	6120      	str	r0, [r4, #16]
 8015a22:	9301      	str	r3, [sp, #4]
 8015a24:	e761      	b.n	80158ea <strptime_l+0x262>
 8015a26:	462b      	mov	r3, r5
 8015a28:	220a      	movs	r2, #10
 8015a2a:	9801      	ldr	r0, [sp, #4]
 8015a2c:	a903      	add	r1, sp, #12
 8015a2e:	f002 fb7b 	bl	8018128 <strtol_l>
 8015a32:	9b03      	ldr	r3, [sp, #12]
 8015a34:	9a01      	ldr	r2, [sp, #4]
 8015a36:	4293      	cmp	r3, r2
 8015a38:	f000 8085 	beq.w	8015b46 <strptime_l+0x4be>
 8015a3c:	6060      	str	r0, [r4, #4]
 8015a3e:	e7b0      	b.n	80159a2 <strptime_l+0x31a>
 8015a40:	9b01      	ldr	r3, [sp, #4]
 8015a42:	781a      	ldrb	r2, [r3, #0]
 8015a44:	2a0a      	cmp	r2, #10
 8015a46:	f000 812f 	beq.w	8015ca8 <strptime_l+0x620>
 8015a4a:	e07c      	b.n	8015b46 <strptime_l+0x4be>
 8015a4c:	499c      	ldr	r1, [pc, #624]	; (8015cc0 <strptime_l+0x638>)
 8015a4e:	462a      	mov	r2, r5
 8015a50:	a801      	add	r0, sp, #4
 8015a52:	f7ff fdfa 	bl	801564a <match_string>
 8015a56:	2800      	cmp	r0, #0
 8015a58:	db75      	blt.n	8015b46 <strptime_l+0x4be>
 8015a5a:	68a3      	ldr	r3, [r4, #8]
 8015a5c:	b92b      	cbnz	r3, 8015a6a <strptime_l+0x3e2>
 8015a5e:	2801      	cmp	r0, #1
 8015a60:	f47f ae5a 	bne.w	8015718 <strptime_l+0x90>
 8015a64:	230c      	movs	r3, #12
 8015a66:	60a3      	str	r3, [r4, #8]
 8015a68:	e656      	b.n	8015718 <strptime_l+0x90>
 8015a6a:	330c      	adds	r3, #12
 8015a6c:	e7fb      	b.n	8015a66 <strptime_l+0x3de>
 8015a6e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8015a72:	462b      	mov	r3, r5
 8015a74:	4622      	mov	r2, r4
 8015a76:	9801      	ldr	r0, [sp, #4]
 8015a78:	f7ff fe06 	bl	8015688 <strptime_l>
 8015a7c:	9003      	str	r0, [sp, #12]
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	d061      	beq.n	8015b46 <strptime_l+0x4be>
 8015a82:	9001      	str	r0, [sp, #4]
 8015a84:	e648      	b.n	8015718 <strptime_l+0x90>
 8015a86:	498f      	ldr	r1, [pc, #572]	; (8015cc4 <strptime_l+0x63c>)
 8015a88:	462b      	mov	r3, r5
 8015a8a:	4622      	mov	r2, r4
 8015a8c:	e7f3      	b.n	8015a76 <strptime_l+0x3ee>
 8015a8e:	f000 f9b3 	bl	8015df8 <__errno>
 8015a92:	f8d0 b000 	ldr.w	fp, [r0]
 8015a96:	f000 f9af 	bl	8015df8 <__errno>
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	6003      	str	r3, [r0, #0]
 8015a9e:	220a      	movs	r2, #10
 8015aa0:	462b      	mov	r3, r5
 8015aa2:	9801      	ldr	r0, [sp, #4]
 8015aa4:	a903      	add	r1, sp, #12
 8015aa6:	f002 fbe9 	bl	801827c <strtoll_l>
 8015aaa:	9a03      	ldr	r2, [sp, #12]
 8015aac:	9b01      	ldr	r3, [sp, #4]
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015ab4:	4680      	mov	r8, r0
 8015ab6:	468a      	mov	sl, r1
 8015ab8:	d045      	beq.n	8015b46 <strptime_l+0x4be>
 8015aba:	f000 f99d 	bl	8015df8 <__errno>
 8015abe:	6803      	ldr	r3, [r0, #0]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d140      	bne.n	8015b46 <strptime_l+0x4be>
 8015ac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ac8:	4553      	cmp	r3, sl
 8015aca:	bf08      	it	eq
 8015acc:	4542      	cmpeq	r2, r8
 8015ace:	d13a      	bne.n	8015b46 <strptime_l+0x4be>
 8015ad0:	4621      	mov	r1, r4
 8015ad2:	a804      	add	r0, sp, #16
 8015ad4:	f002 ffd0 	bl	8018a78 <localtime_r>
 8015ad8:	4284      	cmp	r4, r0
 8015ada:	d134      	bne.n	8015b46 <strptime_l+0x4be>
 8015adc:	f000 f98c 	bl	8015df8 <__errno>
 8015ae0:	9b03      	ldr	r3, [sp, #12]
 8015ae2:	f8c0 b000 	str.w	fp, [r0]
 8015ae6:	f04f 081f 	mov.w	r8, #31
 8015aea:	9301      	str	r3, [sp, #4]
 8015aec:	e614      	b.n	8015718 <strptime_l+0x90>
 8015aee:	462b      	mov	r3, r5
 8015af0:	220a      	movs	r2, #10
 8015af2:	9801      	ldr	r0, [sp, #4]
 8015af4:	a903      	add	r1, sp, #12
 8015af6:	f002 fb17 	bl	8018128 <strtol_l>
 8015afa:	9b03      	ldr	r3, [sp, #12]
 8015afc:	9a01      	ldr	r2, [sp, #4]
 8015afe:	4293      	cmp	r3, r2
 8015b00:	d021      	beq.n	8015b46 <strptime_l+0x4be>
 8015b02:	6020      	str	r0, [r4, #0]
 8015b04:	e74d      	b.n	80159a2 <strptime_l+0x31a>
 8015b06:	9b01      	ldr	r3, [sp, #4]
 8015b08:	781a      	ldrb	r2, [r3, #0]
 8015b0a:	2a09      	cmp	r2, #9
 8015b0c:	e79b      	b.n	8015a46 <strptime_l+0x3be>
 8015b0e:	496e      	ldr	r1, [pc, #440]	; (8015cc8 <strptime_l+0x640>)
 8015b10:	462b      	mov	r3, r5
 8015b12:	4622      	mov	r2, r4
 8015b14:	e7af      	b.n	8015a76 <strptime_l+0x3ee>
 8015b16:	462b      	mov	r3, r5
 8015b18:	220a      	movs	r2, #10
 8015b1a:	9801      	ldr	r0, [sp, #4]
 8015b1c:	a903      	add	r1, sp, #12
 8015b1e:	f002 fb03 	bl	8018128 <strtol_l>
 8015b22:	9b03      	ldr	r3, [sp, #12]
 8015b24:	9a01      	ldr	r2, [sp, #4]
 8015b26:	4293      	cmp	r3, r2
 8015b28:	d00d      	beq.n	8015b46 <strptime_l+0x4be>
 8015b2a:	3801      	subs	r0, #1
 8015b2c:	61a0      	str	r0, [r4, #24]
 8015b2e:	9301      	str	r3, [sp, #4]
 8015b30:	e6cc      	b.n	80158cc <strptime_l+0x244>
 8015b32:	462b      	mov	r3, r5
 8015b34:	220a      	movs	r2, #10
 8015b36:	9801      	ldr	r0, [sp, #4]
 8015b38:	a903      	add	r1, sp, #12
 8015b3a:	f002 faf5 	bl	8018128 <strtol_l>
 8015b3e:	9b03      	ldr	r3, [sp, #12]
 8015b40:	9a01      	ldr	r2, [sp, #4]
 8015b42:	4293      	cmp	r3, r2
 8015b44:	d1f2      	bne.n	8015b2c <strptime_l+0x4a4>
 8015b46:	2000      	movs	r0, #0
 8015b48:	b007      	add	sp, #28
 8015b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b4e:	462b      	mov	r3, r5
 8015b50:	9801      	ldr	r0, [sp, #4]
 8015b52:	220a      	movs	r2, #10
 8015b54:	a903      	add	r1, sp, #12
 8015b56:	f002 fae7 	bl	8018128 <strtol_l>
 8015b5a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8015b5e:	9b01      	ldr	r3, [sp, #4]
 8015b60:	459b      	cmp	fp, r3
 8015b62:	4682      	mov	sl, r0
 8015b64:	d0ef      	beq.n	8015b46 <strptime_l+0x4be>
 8015b66:	6960      	ldr	r0, [r4, #20]
 8015b68:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8015b6c:	f7ff fd56 	bl	801561c <first_day>
 8015b70:	69a3      	ldr	r3, [r4, #24]
 8015b72:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8015b76:	4453      	add	r3, sl
 8015b78:	1a1b      	subs	r3, r3, r0
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	61e3      	str	r3, [r4, #28]
 8015b7e:	da02      	bge.n	8015b86 <strptime_l+0x4fe>
 8015b80:	61a0      	str	r0, [r4, #24]
 8015b82:	2300      	movs	r3, #0
 8015b84:	61e3      	str	r3, [r4, #28]
 8015b86:	f8cd b004 	str.w	fp, [sp, #4]
 8015b8a:	e73a      	b.n	8015a02 <strptime_l+0x37a>
 8015b8c:	462b      	mov	r3, r5
 8015b8e:	9801      	ldr	r0, [sp, #4]
 8015b90:	220a      	movs	r2, #10
 8015b92:	a903      	add	r1, sp, #12
 8015b94:	f002 fac8 	bl	8018128 <strtol_l>
 8015b98:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8015b9c:	9b01      	ldr	r3, [sp, #4]
 8015b9e:	459b      	cmp	fp, r3
 8015ba0:	4682      	mov	sl, r0
 8015ba2:	d0d0      	beq.n	8015b46 <strptime_l+0x4be>
 8015ba4:	6960      	ldr	r0, [r4, #20]
 8015ba6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8015baa:	f7ff fd37 	bl	801561c <first_day>
 8015bae:	2307      	movs	r3, #7
 8015bb0:	3006      	adds	r0, #6
 8015bb2:	fb90 f3f3 	sdiv	r3, r0, r3
 8015bb6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8015bba:	1ac1      	subs	r1, r0, r3
 8015bbc:	2903      	cmp	r1, #3
 8015bbe:	f10a 30ff 	add.w	r0, sl, #4294967295
 8015bc2:	bfcc      	ite	gt
 8015bc4:	2200      	movgt	r2, #0
 8015bc6:	2207      	movle	r2, #7
 8015bc8:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8015bcc:	4413      	add	r3, r2
 8015bce:	69a2      	ldr	r2, [r4, #24]
 8015bd0:	4413      	add	r3, r2
 8015bd2:	1a5b      	subs	r3, r3, r1
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	61e3      	str	r3, [r4, #28]
 8015bd8:	dad5      	bge.n	8015b86 <strptime_l+0x4fe>
 8015bda:	61a1      	str	r1, [r4, #24]
 8015bdc:	e7d1      	b.n	8015b82 <strptime_l+0x4fa>
 8015bde:	462b      	mov	r3, r5
 8015be0:	9801      	ldr	r0, [sp, #4]
 8015be2:	220a      	movs	r2, #10
 8015be4:	a903      	add	r1, sp, #12
 8015be6:	f002 fa9f 	bl	8018128 <strtol_l>
 8015bea:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8015bee:	9b01      	ldr	r3, [sp, #4]
 8015bf0:	459a      	cmp	sl, r3
 8015bf2:	4683      	mov	fp, r0
 8015bf4:	d0a7      	beq.n	8015b46 <strptime_l+0x4be>
 8015bf6:	6960      	ldr	r0, [r4, #20]
 8015bf8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8015bfc:	f7ff fd0e 	bl	801561c <first_day>
 8015c00:	2107      	movs	r1, #7
 8015c02:	3006      	adds	r0, #6
 8015c04:	fb90 f2f1 	sdiv	r2, r0, r1
 8015c08:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8015c0c:	1a83      	subs	r3, r0, r2
 8015c0e:	69a2      	ldr	r2, [r4, #24]
 8015c10:	3206      	adds	r2, #6
 8015c12:	fb92 f0f1 	sdiv	r0, r2, r1
 8015c16:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8015c1a:	1a10      	subs	r0, r2, r0
 8015c1c:	ebcb 0bcb 	rsb	fp, fp, fp, lsl #3
 8015c20:	4458      	add	r0, fp
 8015c22:	1ac0      	subs	r0, r0, r3
 8015c24:	2800      	cmp	r0, #0
 8015c26:	61e0      	str	r0, [r4, #28]
 8015c28:	da08      	bge.n	8015c3c <strptime_l+0x5b4>
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	fb93 f1f1 	sdiv	r1, r3, r1
 8015c30:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8015c34:	1a5b      	subs	r3, r3, r1
 8015c36:	61a3      	str	r3, [r4, #24]
 8015c38:	2300      	movs	r3, #0
 8015c3a:	61e3      	str	r3, [r4, #28]
 8015c3c:	f8cd a004 	str.w	sl, [sp, #4]
 8015c40:	e6df      	b.n	8015a02 <strptime_l+0x37a>
 8015c42:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8015c46:	462b      	mov	r3, r5
 8015c48:	4622      	mov	r2, r4
 8015c4a:	e676      	b.n	801593a <strptime_l+0x2b2>
 8015c4c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015c50:	462b      	mov	r3, r5
 8015c52:	4622      	mov	r2, r4
 8015c54:	e70f      	b.n	8015a76 <strptime_l+0x3ee>
 8015c56:	462b      	mov	r3, r5
 8015c58:	220a      	movs	r2, #10
 8015c5a:	9801      	ldr	r0, [sp, #4]
 8015c5c:	a903      	add	r1, sp, #12
 8015c5e:	f002 fa63 	bl	8018128 <strtol_l>
 8015c62:	9b03      	ldr	r3, [sp, #12]
 8015c64:	9a01      	ldr	r2, [sp, #4]
 8015c66:	4293      	cmp	r3, r2
 8015c68:	f43f af6d 	beq.w	8015b46 <strptime_l+0x4be>
 8015c6c:	2845      	cmp	r0, #69	; 0x45
 8015c6e:	dc00      	bgt.n	8015c72 <strptime_l+0x5ea>
 8015c70:	3064      	adds	r0, #100	; 0x64
 8015c72:	6160      	str	r0, [r4, #20]
 8015c74:	9301      	str	r3, [sp, #4]
 8015c76:	f048 0804 	orr.w	r8, r8, #4
 8015c7a:	e54d      	b.n	8015718 <strptime_l+0x90>
 8015c7c:	462b      	mov	r3, r5
 8015c7e:	220a      	movs	r2, #10
 8015c80:	9801      	ldr	r0, [sp, #4]
 8015c82:	a903      	add	r1, sp, #12
 8015c84:	f002 fa50 	bl	8018128 <strtol_l>
 8015c88:	9b03      	ldr	r3, [sp, #12]
 8015c8a:	9a01      	ldr	r2, [sp, #4]
 8015c8c:	4293      	cmp	r3, r2
 8015c8e:	f47f ae3f 	bne.w	8015910 <strptime_l+0x288>
 8015c92:	e758      	b.n	8015b46 <strptime_l+0x4be>
 8015c94:	3601      	adds	r6, #1
 8015c96:	9b01      	ldr	r3, [sp, #4]
 8015c98:	781a      	ldrb	r2, [r3, #0]
 8015c9a:	2a25      	cmp	r2, #37	; 0x25
 8015c9c:	e6d3      	b.n	8015a46 <strptime_l+0x3be>
 8015c9e:	9a01      	ldr	r2, [sp, #4]
 8015ca0:	7811      	ldrb	r1, [r2, #0]
 8015ca2:	2925      	cmp	r1, #37	; 0x25
 8015ca4:	d102      	bne.n	8015cac <strptime_l+0x624>
 8015ca6:	9b01      	ldr	r3, [sp, #4]
 8015ca8:	3301      	adds	r3, #1
 8015caa:	e67a      	b.n	80159a2 <strptime_l+0x31a>
 8015cac:	1c51      	adds	r1, r2, #1
 8015cae:	9101      	str	r1, [sp, #4]
 8015cb0:	7852      	ldrb	r2, [r2, #1]
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	d0f7      	beq.n	8015ca6 <strptime_l+0x61e>
 8015cb6:	e746      	b.n	8015b46 <strptime_l+0x4be>
 8015cb8:	9b01      	ldr	r3, [sp, #4]
 8015cba:	7819      	ldrb	r1, [r3, #0]
 8015cbc:	4291      	cmp	r1, r2
 8015cbe:	e6c2      	b.n	8015a46 <strptime_l+0x3be>
 8015cc0:	0802cc98 	.word	0x0802cc98
 8015cc4:	0802ca91 	.word	0x0802ca91
 8015cc8:	0802ca97 	.word	0x0802ca97
 8015ccc:	f008 0314 	and.w	r3, r8, #20
 8015cd0:	2b14      	cmp	r3, #20
 8015cd2:	f47f ad02 	bne.w	80156da <strptime_l+0x52>
 8015cd6:	f018 0302 	ands.w	r3, r8, #2
 8015cda:	d103      	bne.n	8015ce4 <strptime_l+0x65c>
 8015cdc:	69e1      	ldr	r1, [r4, #28]
 8015cde:	291e      	cmp	r1, #30
 8015ce0:	dc17      	bgt.n	8015d12 <strptime_l+0x68a>
 8015ce2:	6123      	str	r3, [r4, #16]
 8015ce4:	f018 0f01 	tst.w	r8, #1
 8015ce8:	f47f acf7 	bne.w	80156da <strptime_l+0x52>
 8015cec:	6925      	ldr	r5, [r4, #16]
 8015cee:	4b11      	ldr	r3, [pc, #68]	; (8015d34 <strptime_l+0x6ac>)
 8015cf0:	69e1      	ldr	r1, [r4, #28]
 8015cf2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8015cf6:	6960      	ldr	r0, [r4, #20]
 8015cf8:	1ac9      	subs	r1, r1, r3
 8015cfa:	60e1      	str	r1, [r4, #12]
 8015cfc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8015d00:	f7ff fc76 	bl	80155f0 <is_leap_year>
 8015d04:	b110      	cbz	r0, 8015d0c <strptime_l+0x684>
 8015d06:	2d01      	cmp	r5, #1
 8015d08:	f73f ace7 	bgt.w	80156da <strptime_l+0x52>
 8015d0c:	3101      	adds	r1, #1
 8015d0e:	60e1      	str	r1, [r4, #12]
 8015d10:	e4e3      	b.n	80156da <strptime_l+0x52>
 8015d12:	6960      	ldr	r0, [r4, #20]
 8015d14:	4d07      	ldr	r5, [pc, #28]	; (8015d34 <strptime_l+0x6ac>)
 8015d16:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8015d1a:	f7ff fc69 	bl	80155f0 <is_leap_year>
 8015d1e:	2302      	movs	r3, #2
 8015d20:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8015d24:	4402      	add	r2, r0
 8015d26:	4291      	cmp	r1, r2
 8015d28:	db02      	blt.n	8015d30 <strptime_l+0x6a8>
 8015d2a:	3301      	adds	r3, #1
 8015d2c:	2b0c      	cmp	r3, #12
 8015d2e:	d1f7      	bne.n	8015d20 <strptime_l+0x698>
 8015d30:	3b01      	subs	r3, #1
 8015d32:	e7d6      	b.n	8015ce2 <strptime_l+0x65a>
 8015d34:	0802caa0 	.word	0x0802caa0

08015d38 <strptime>:
 8015d38:	4b01      	ldr	r3, [pc, #4]	; (8015d40 <strptime+0x8>)
 8015d3a:	f7ff bca5 	b.w	8015688 <strptime_l>
 8015d3e:	bf00      	nop
 8015d40:	24000020 	.word	0x24000020

08015d44 <_localeconv_r>:
 8015d44:	4800      	ldr	r0, [pc, #0]	; (8015d48 <_localeconv_r+0x4>)
 8015d46:	4770      	bx	lr
 8015d48:	24000110 	.word	0x24000110

08015d4c <_close_r>:
 8015d4c:	b538      	push	{r3, r4, r5, lr}
 8015d4e:	4d06      	ldr	r5, [pc, #24]	; (8015d68 <_close_r+0x1c>)
 8015d50:	2300      	movs	r3, #0
 8015d52:	4604      	mov	r4, r0
 8015d54:	4608      	mov	r0, r1
 8015d56:	602b      	str	r3, [r5, #0]
 8015d58:	f7ec fb09 	bl	800236e <_close>
 8015d5c:	1c43      	adds	r3, r0, #1
 8015d5e:	d102      	bne.n	8015d66 <_close_r+0x1a>
 8015d60:	682b      	ldr	r3, [r5, #0]
 8015d62:	b103      	cbz	r3, 8015d66 <_close_r+0x1a>
 8015d64:	6023      	str	r3, [r4, #0]
 8015d66:	bd38      	pop	{r3, r4, r5, pc}
 8015d68:	240314c4 	.word	0x240314c4

08015d6c <_lseek_r>:
 8015d6c:	b538      	push	{r3, r4, r5, lr}
 8015d6e:	4d07      	ldr	r5, [pc, #28]	; (8015d8c <_lseek_r+0x20>)
 8015d70:	4604      	mov	r4, r0
 8015d72:	4608      	mov	r0, r1
 8015d74:	4611      	mov	r1, r2
 8015d76:	2200      	movs	r2, #0
 8015d78:	602a      	str	r2, [r5, #0]
 8015d7a:	461a      	mov	r2, r3
 8015d7c:	f7ec fb1e 	bl	80023bc <_lseek>
 8015d80:	1c43      	adds	r3, r0, #1
 8015d82:	d102      	bne.n	8015d8a <_lseek_r+0x1e>
 8015d84:	682b      	ldr	r3, [r5, #0]
 8015d86:	b103      	cbz	r3, 8015d8a <_lseek_r+0x1e>
 8015d88:	6023      	str	r3, [r4, #0]
 8015d8a:	bd38      	pop	{r3, r4, r5, pc}
 8015d8c:	240314c4 	.word	0x240314c4

08015d90 <_read_r>:
 8015d90:	b538      	push	{r3, r4, r5, lr}
 8015d92:	4d07      	ldr	r5, [pc, #28]	; (8015db0 <_read_r+0x20>)
 8015d94:	4604      	mov	r4, r0
 8015d96:	4608      	mov	r0, r1
 8015d98:	4611      	mov	r1, r2
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	602a      	str	r2, [r5, #0]
 8015d9e:	461a      	mov	r2, r3
 8015da0:	f7ec faac 	bl	80022fc <_read>
 8015da4:	1c43      	adds	r3, r0, #1
 8015da6:	d102      	bne.n	8015dae <_read_r+0x1e>
 8015da8:	682b      	ldr	r3, [r5, #0]
 8015daa:	b103      	cbz	r3, 8015dae <_read_r+0x1e>
 8015dac:	6023      	str	r3, [r4, #0]
 8015dae:	bd38      	pop	{r3, r4, r5, pc}
 8015db0:	240314c4 	.word	0x240314c4

08015db4 <_sbrk_r>:
 8015db4:	b538      	push	{r3, r4, r5, lr}
 8015db6:	4d06      	ldr	r5, [pc, #24]	; (8015dd0 <_sbrk_r+0x1c>)
 8015db8:	2300      	movs	r3, #0
 8015dba:	4604      	mov	r4, r0
 8015dbc:	4608      	mov	r0, r1
 8015dbe:	602b      	str	r3, [r5, #0]
 8015dc0:	f7ec fb0a 	bl	80023d8 <_sbrk>
 8015dc4:	1c43      	adds	r3, r0, #1
 8015dc6:	d102      	bne.n	8015dce <_sbrk_r+0x1a>
 8015dc8:	682b      	ldr	r3, [r5, #0]
 8015dca:	b103      	cbz	r3, 8015dce <_sbrk_r+0x1a>
 8015dcc:	6023      	str	r3, [r4, #0]
 8015dce:	bd38      	pop	{r3, r4, r5, pc}
 8015dd0:	240314c4 	.word	0x240314c4

08015dd4 <_write_r>:
 8015dd4:	b538      	push	{r3, r4, r5, lr}
 8015dd6:	4d07      	ldr	r5, [pc, #28]	; (8015df4 <_write_r+0x20>)
 8015dd8:	4604      	mov	r4, r0
 8015dda:	4608      	mov	r0, r1
 8015ddc:	4611      	mov	r1, r2
 8015dde:	2200      	movs	r2, #0
 8015de0:	602a      	str	r2, [r5, #0]
 8015de2:	461a      	mov	r2, r3
 8015de4:	f7ec faa7 	bl	8002336 <_write>
 8015de8:	1c43      	adds	r3, r0, #1
 8015dea:	d102      	bne.n	8015df2 <_write_r+0x1e>
 8015dec:	682b      	ldr	r3, [r5, #0]
 8015dee:	b103      	cbz	r3, 8015df2 <_write_r+0x1e>
 8015df0:	6023      	str	r3, [r4, #0]
 8015df2:	bd38      	pop	{r3, r4, r5, pc}
 8015df4:	240314c4 	.word	0x240314c4

08015df8 <__errno>:
 8015df8:	4b01      	ldr	r3, [pc, #4]	; (8015e00 <__errno+0x8>)
 8015dfa:	6818      	ldr	r0, [r3, #0]
 8015dfc:	4770      	bx	lr
 8015dfe:	bf00      	nop
 8015e00:	240001d8 	.word	0x240001d8

08015e04 <__libc_init_array>:
 8015e04:	b570      	push	{r4, r5, r6, lr}
 8015e06:	4d0d      	ldr	r5, [pc, #52]	; (8015e3c <__libc_init_array+0x38>)
 8015e08:	4c0d      	ldr	r4, [pc, #52]	; (8015e40 <__libc_init_array+0x3c>)
 8015e0a:	1b64      	subs	r4, r4, r5
 8015e0c:	10a4      	asrs	r4, r4, #2
 8015e0e:	2600      	movs	r6, #0
 8015e10:	42a6      	cmp	r6, r4
 8015e12:	d109      	bne.n	8015e28 <__libc_init_array+0x24>
 8015e14:	4d0b      	ldr	r5, [pc, #44]	; (8015e44 <__libc_init_array+0x40>)
 8015e16:	4c0c      	ldr	r4, [pc, #48]	; (8015e48 <__libc_init_array+0x44>)
 8015e18:	f004 fbb2 	bl	801a580 <_init>
 8015e1c:	1b64      	subs	r4, r4, r5
 8015e1e:	10a4      	asrs	r4, r4, #2
 8015e20:	2600      	movs	r6, #0
 8015e22:	42a6      	cmp	r6, r4
 8015e24:	d105      	bne.n	8015e32 <__libc_init_array+0x2e>
 8015e26:	bd70      	pop	{r4, r5, r6, pc}
 8015e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e2c:	4798      	blx	r3
 8015e2e:	3601      	adds	r6, #1
 8015e30:	e7ee      	b.n	8015e10 <__libc_init_array+0xc>
 8015e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e36:	4798      	blx	r3
 8015e38:	3601      	adds	r6, #1
 8015e3a:	e7f2      	b.n	8015e22 <__libc_init_array+0x1e>
 8015e3c:	0802d1ac 	.word	0x0802d1ac
 8015e40:	0802d1ac 	.word	0x0802d1ac
 8015e44:	0802d1ac 	.word	0x0802d1ac
 8015e48:	0802d1b0 	.word	0x0802d1b0

08015e4c <__retarget_lock_init_recursive>:
 8015e4c:	4770      	bx	lr

08015e4e <__retarget_lock_acquire>:
 8015e4e:	4770      	bx	lr

08015e50 <__retarget_lock_acquire_recursive>:
 8015e50:	4770      	bx	lr

08015e52 <__retarget_lock_release>:
 8015e52:	4770      	bx	lr

08015e54 <__retarget_lock_release_recursive>:
 8015e54:	4770      	bx	lr

08015e56 <memcpy>:
 8015e56:	440a      	add	r2, r1
 8015e58:	4291      	cmp	r1, r2
 8015e5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8015e5e:	d100      	bne.n	8015e62 <memcpy+0xc>
 8015e60:	4770      	bx	lr
 8015e62:	b510      	push	{r4, lr}
 8015e64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e6c:	4291      	cmp	r1, r2
 8015e6e:	d1f9      	bne.n	8015e64 <memcpy+0xe>
 8015e70:	bd10      	pop	{r4, pc}
	...

08015e74 <nanf>:
 8015e74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015e7c <nanf+0x8>
 8015e78:	4770      	bx	lr
 8015e7a:	bf00      	nop
 8015e7c:	7fc00000 	.word	0x7fc00000

08015e80 <quorem>:
 8015e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e84:	6903      	ldr	r3, [r0, #16]
 8015e86:	690c      	ldr	r4, [r1, #16]
 8015e88:	42a3      	cmp	r3, r4
 8015e8a:	4607      	mov	r7, r0
 8015e8c:	db7e      	blt.n	8015f8c <quorem+0x10c>
 8015e8e:	3c01      	subs	r4, #1
 8015e90:	f101 0814 	add.w	r8, r1, #20
 8015e94:	f100 0514 	add.w	r5, r0, #20
 8015e98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015e9c:	9301      	str	r3, [sp, #4]
 8015e9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015ea2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	429a      	cmp	r2, r3
 8015eaa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015eae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015eb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8015eb6:	d331      	bcc.n	8015f1c <quorem+0x9c>
 8015eb8:	f04f 0e00 	mov.w	lr, #0
 8015ebc:	4640      	mov	r0, r8
 8015ebe:	46ac      	mov	ip, r5
 8015ec0:	46f2      	mov	sl, lr
 8015ec2:	f850 2b04 	ldr.w	r2, [r0], #4
 8015ec6:	b293      	uxth	r3, r2
 8015ec8:	fb06 e303 	mla	r3, r6, r3, lr
 8015ecc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015ed0:	0c1a      	lsrs	r2, r3, #16
 8015ed2:	b29b      	uxth	r3, r3
 8015ed4:	ebaa 0303 	sub.w	r3, sl, r3
 8015ed8:	f8dc a000 	ldr.w	sl, [ip]
 8015edc:	fa13 f38a 	uxtah	r3, r3, sl
 8015ee0:	fb06 220e 	mla	r2, r6, lr, r2
 8015ee4:	9300      	str	r3, [sp, #0]
 8015ee6:	9b00      	ldr	r3, [sp, #0]
 8015ee8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015eec:	b292      	uxth	r2, r2
 8015eee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015ef2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015ef6:	f8bd 3000 	ldrh.w	r3, [sp]
 8015efa:	4581      	cmp	r9, r0
 8015efc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f00:	f84c 3b04 	str.w	r3, [ip], #4
 8015f04:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015f08:	d2db      	bcs.n	8015ec2 <quorem+0x42>
 8015f0a:	f855 300b 	ldr.w	r3, [r5, fp]
 8015f0e:	b92b      	cbnz	r3, 8015f1c <quorem+0x9c>
 8015f10:	9b01      	ldr	r3, [sp, #4]
 8015f12:	3b04      	subs	r3, #4
 8015f14:	429d      	cmp	r5, r3
 8015f16:	461a      	mov	r2, r3
 8015f18:	d32c      	bcc.n	8015f74 <quorem+0xf4>
 8015f1a:	613c      	str	r4, [r7, #16]
 8015f1c:	4638      	mov	r0, r7
 8015f1e:	f001 f8c7 	bl	80170b0 <__mcmp>
 8015f22:	2800      	cmp	r0, #0
 8015f24:	db22      	blt.n	8015f6c <quorem+0xec>
 8015f26:	3601      	adds	r6, #1
 8015f28:	4629      	mov	r1, r5
 8015f2a:	2000      	movs	r0, #0
 8015f2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8015f30:	f8d1 c000 	ldr.w	ip, [r1]
 8015f34:	b293      	uxth	r3, r2
 8015f36:	1ac3      	subs	r3, r0, r3
 8015f38:	0c12      	lsrs	r2, r2, #16
 8015f3a:	fa13 f38c 	uxtah	r3, r3, ip
 8015f3e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8015f42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015f46:	b29b      	uxth	r3, r3
 8015f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f4c:	45c1      	cmp	r9, r8
 8015f4e:	f841 3b04 	str.w	r3, [r1], #4
 8015f52:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015f56:	d2e9      	bcs.n	8015f2c <quorem+0xac>
 8015f58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015f5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015f60:	b922      	cbnz	r2, 8015f6c <quorem+0xec>
 8015f62:	3b04      	subs	r3, #4
 8015f64:	429d      	cmp	r5, r3
 8015f66:	461a      	mov	r2, r3
 8015f68:	d30a      	bcc.n	8015f80 <quorem+0x100>
 8015f6a:	613c      	str	r4, [r7, #16]
 8015f6c:	4630      	mov	r0, r6
 8015f6e:	b003      	add	sp, #12
 8015f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f74:	6812      	ldr	r2, [r2, #0]
 8015f76:	3b04      	subs	r3, #4
 8015f78:	2a00      	cmp	r2, #0
 8015f7a:	d1ce      	bne.n	8015f1a <quorem+0x9a>
 8015f7c:	3c01      	subs	r4, #1
 8015f7e:	e7c9      	b.n	8015f14 <quorem+0x94>
 8015f80:	6812      	ldr	r2, [r2, #0]
 8015f82:	3b04      	subs	r3, #4
 8015f84:	2a00      	cmp	r2, #0
 8015f86:	d1f0      	bne.n	8015f6a <quorem+0xea>
 8015f88:	3c01      	subs	r4, #1
 8015f8a:	e7eb      	b.n	8015f64 <quorem+0xe4>
 8015f8c:	2000      	movs	r0, #0
 8015f8e:	e7ee      	b.n	8015f6e <quorem+0xee>

08015f90 <_dtoa_r>:
 8015f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f94:	ed2d 8b02 	vpush	{d8}
 8015f98:	69c5      	ldr	r5, [r0, #28]
 8015f9a:	b091      	sub	sp, #68	; 0x44
 8015f9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015fa0:	ec59 8b10 	vmov	r8, r9, d0
 8015fa4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015fa6:	9106      	str	r1, [sp, #24]
 8015fa8:	4606      	mov	r6, r0
 8015faa:	9208      	str	r2, [sp, #32]
 8015fac:	930c      	str	r3, [sp, #48]	; 0x30
 8015fae:	b975      	cbnz	r5, 8015fce <_dtoa_r+0x3e>
 8015fb0:	2010      	movs	r0, #16
 8015fb2:	f7fe f9bd 	bl	8014330 <malloc>
 8015fb6:	4602      	mov	r2, r0
 8015fb8:	61f0      	str	r0, [r6, #28]
 8015fba:	b920      	cbnz	r0, 8015fc6 <_dtoa_r+0x36>
 8015fbc:	4ba6      	ldr	r3, [pc, #664]	; (8016258 <_dtoa_r+0x2c8>)
 8015fbe:	21ef      	movs	r1, #239	; 0xef
 8015fc0:	48a6      	ldr	r0, [pc, #664]	; (801625c <_dtoa_r+0x2cc>)
 8015fc2:	f003 f959 	bl	8019278 <__assert_func>
 8015fc6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015fca:	6005      	str	r5, [r0, #0]
 8015fcc:	60c5      	str	r5, [r0, #12]
 8015fce:	69f3      	ldr	r3, [r6, #28]
 8015fd0:	6819      	ldr	r1, [r3, #0]
 8015fd2:	b151      	cbz	r1, 8015fea <_dtoa_r+0x5a>
 8015fd4:	685a      	ldr	r2, [r3, #4]
 8015fd6:	604a      	str	r2, [r1, #4]
 8015fd8:	2301      	movs	r3, #1
 8015fda:	4093      	lsls	r3, r2
 8015fdc:	608b      	str	r3, [r1, #8]
 8015fde:	4630      	mov	r0, r6
 8015fe0:	f000 fde0 	bl	8016ba4 <_Bfree>
 8015fe4:	69f3      	ldr	r3, [r6, #28]
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	601a      	str	r2, [r3, #0]
 8015fea:	f1b9 0300 	subs.w	r3, r9, #0
 8015fee:	bfbb      	ittet	lt
 8015ff0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015ff4:	9303      	strlt	r3, [sp, #12]
 8015ff6:	2300      	movge	r3, #0
 8015ff8:	2201      	movlt	r2, #1
 8015ffa:	bfac      	ite	ge
 8015ffc:	6023      	strge	r3, [r4, #0]
 8015ffe:	6022      	strlt	r2, [r4, #0]
 8016000:	4b97      	ldr	r3, [pc, #604]	; (8016260 <_dtoa_r+0x2d0>)
 8016002:	9c03      	ldr	r4, [sp, #12]
 8016004:	43a3      	bics	r3, r4
 8016006:	d11c      	bne.n	8016042 <_dtoa_r+0xb2>
 8016008:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801600a:	f242 730f 	movw	r3, #9999	; 0x270f
 801600e:	6013      	str	r3, [r2, #0]
 8016010:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8016014:	ea53 0308 	orrs.w	r3, r3, r8
 8016018:	f000 84fb 	beq.w	8016a12 <_dtoa_r+0xa82>
 801601c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801601e:	b963      	cbnz	r3, 801603a <_dtoa_r+0xaa>
 8016020:	4b90      	ldr	r3, [pc, #576]	; (8016264 <_dtoa_r+0x2d4>)
 8016022:	e020      	b.n	8016066 <_dtoa_r+0xd6>
 8016024:	4b90      	ldr	r3, [pc, #576]	; (8016268 <_dtoa_r+0x2d8>)
 8016026:	9301      	str	r3, [sp, #4]
 8016028:	3308      	adds	r3, #8
 801602a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801602c:	6013      	str	r3, [r2, #0]
 801602e:	9801      	ldr	r0, [sp, #4]
 8016030:	b011      	add	sp, #68	; 0x44
 8016032:	ecbd 8b02 	vpop	{d8}
 8016036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801603a:	4b8a      	ldr	r3, [pc, #552]	; (8016264 <_dtoa_r+0x2d4>)
 801603c:	9301      	str	r3, [sp, #4]
 801603e:	3303      	adds	r3, #3
 8016040:	e7f3      	b.n	801602a <_dtoa_r+0x9a>
 8016042:	ed9d 8b02 	vldr	d8, [sp, #8]
 8016046:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801604a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801604e:	d10c      	bne.n	801606a <_dtoa_r+0xda>
 8016050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016052:	2301      	movs	r3, #1
 8016054:	6013      	str	r3, [r2, #0]
 8016056:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016058:	2b00      	cmp	r3, #0
 801605a:	f000 84d7 	beq.w	8016a0c <_dtoa_r+0xa7c>
 801605e:	4b83      	ldr	r3, [pc, #524]	; (801626c <_dtoa_r+0x2dc>)
 8016060:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016062:	6013      	str	r3, [r2, #0]
 8016064:	3b01      	subs	r3, #1
 8016066:	9301      	str	r3, [sp, #4]
 8016068:	e7e1      	b.n	801602e <_dtoa_r+0x9e>
 801606a:	aa0e      	add	r2, sp, #56	; 0x38
 801606c:	a90f      	add	r1, sp, #60	; 0x3c
 801606e:	4630      	mov	r0, r6
 8016070:	eeb0 0b48 	vmov.f64	d0, d8
 8016074:	f001 f932 	bl	80172dc <__d2b>
 8016078:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801607c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801607e:	4605      	mov	r5, r0
 8016080:	2b00      	cmp	r3, #0
 8016082:	d046      	beq.n	8016112 <_dtoa_r+0x182>
 8016084:	eeb0 7b48 	vmov.f64	d7, d8
 8016088:	ee18 1a90 	vmov	r1, s17
 801608c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8016090:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8016094:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8016098:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801609c:	2000      	movs	r0, #0
 801609e:	ee07 1a90 	vmov	s15, r1
 80160a2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80160a6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8016240 <_dtoa_r+0x2b0>
 80160aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80160ae:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8016248 <_dtoa_r+0x2b8>
 80160b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80160b6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8016250 <_dtoa_r+0x2c0>
 80160ba:	ee07 3a90 	vmov	s15, r3
 80160be:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80160c2:	eeb0 7b46 	vmov.f64	d7, d6
 80160c6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80160ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80160ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80160d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160d6:	ee16 ba90 	vmov	fp, s13
 80160da:	9009      	str	r0, [sp, #36]	; 0x24
 80160dc:	d508      	bpl.n	80160f0 <_dtoa_r+0x160>
 80160de:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80160e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80160e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160ea:	bf18      	it	ne
 80160ec:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80160f0:	f1bb 0f16 	cmp.w	fp, #22
 80160f4:	d82b      	bhi.n	801614e <_dtoa_r+0x1be>
 80160f6:	495e      	ldr	r1, [pc, #376]	; (8016270 <_dtoa_r+0x2e0>)
 80160f8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80160fc:	ed91 7b00 	vldr	d7, [r1]
 8016100:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016108:	d501      	bpl.n	801610e <_dtoa_r+0x17e>
 801610a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801610e:	2100      	movs	r1, #0
 8016110:	e01e      	b.n	8016150 <_dtoa_r+0x1c0>
 8016112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016114:	4413      	add	r3, r2
 8016116:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801611a:	2920      	cmp	r1, #32
 801611c:	bfc1      	itttt	gt
 801611e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8016122:	408c      	lslgt	r4, r1
 8016124:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8016128:	fa28 f101 	lsrgt.w	r1, r8, r1
 801612c:	bfd6      	itet	le
 801612e:	f1c1 0120 	rsble	r1, r1, #32
 8016132:	4321      	orrgt	r1, r4
 8016134:	fa08 f101 	lslle.w	r1, r8, r1
 8016138:	ee07 1a90 	vmov	s15, r1
 801613c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016140:	3b01      	subs	r3, #1
 8016142:	ee17 1a90 	vmov	r1, s15
 8016146:	2001      	movs	r0, #1
 8016148:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801614c:	e7a7      	b.n	801609e <_dtoa_r+0x10e>
 801614e:	2101      	movs	r1, #1
 8016150:	1ad2      	subs	r2, r2, r3
 8016152:	1e53      	subs	r3, r2, #1
 8016154:	9305      	str	r3, [sp, #20]
 8016156:	bf45      	ittet	mi
 8016158:	f1c2 0301 	rsbmi	r3, r2, #1
 801615c:	9304      	strmi	r3, [sp, #16]
 801615e:	2300      	movpl	r3, #0
 8016160:	2300      	movmi	r3, #0
 8016162:	bf4c      	ite	mi
 8016164:	9305      	strmi	r3, [sp, #20]
 8016166:	9304      	strpl	r3, [sp, #16]
 8016168:	f1bb 0f00 	cmp.w	fp, #0
 801616c:	910b      	str	r1, [sp, #44]	; 0x2c
 801616e:	db18      	blt.n	80161a2 <_dtoa_r+0x212>
 8016170:	9b05      	ldr	r3, [sp, #20]
 8016172:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8016176:	445b      	add	r3, fp
 8016178:	9305      	str	r3, [sp, #20]
 801617a:	2300      	movs	r3, #0
 801617c:	9a06      	ldr	r2, [sp, #24]
 801617e:	2a09      	cmp	r2, #9
 8016180:	d848      	bhi.n	8016214 <_dtoa_r+0x284>
 8016182:	2a05      	cmp	r2, #5
 8016184:	bfc4      	itt	gt
 8016186:	3a04      	subgt	r2, #4
 8016188:	9206      	strgt	r2, [sp, #24]
 801618a:	9a06      	ldr	r2, [sp, #24]
 801618c:	f1a2 0202 	sub.w	r2, r2, #2
 8016190:	bfcc      	ite	gt
 8016192:	2400      	movgt	r4, #0
 8016194:	2401      	movle	r4, #1
 8016196:	2a03      	cmp	r2, #3
 8016198:	d847      	bhi.n	801622a <_dtoa_r+0x29a>
 801619a:	e8df f002 	tbb	[pc, r2]
 801619e:	2d0b      	.short	0x2d0b
 80161a0:	392b      	.short	0x392b
 80161a2:	9b04      	ldr	r3, [sp, #16]
 80161a4:	2200      	movs	r2, #0
 80161a6:	eba3 030b 	sub.w	r3, r3, fp
 80161aa:	9304      	str	r3, [sp, #16]
 80161ac:	920a      	str	r2, [sp, #40]	; 0x28
 80161ae:	f1cb 0300 	rsb	r3, fp, #0
 80161b2:	e7e3      	b.n	801617c <_dtoa_r+0x1ec>
 80161b4:	2200      	movs	r2, #0
 80161b6:	9207      	str	r2, [sp, #28]
 80161b8:	9a08      	ldr	r2, [sp, #32]
 80161ba:	2a00      	cmp	r2, #0
 80161bc:	dc38      	bgt.n	8016230 <_dtoa_r+0x2a0>
 80161be:	f04f 0a01 	mov.w	sl, #1
 80161c2:	46d1      	mov	r9, sl
 80161c4:	4652      	mov	r2, sl
 80161c6:	f8cd a020 	str.w	sl, [sp, #32]
 80161ca:	69f7      	ldr	r7, [r6, #28]
 80161cc:	2100      	movs	r1, #0
 80161ce:	2004      	movs	r0, #4
 80161d0:	f100 0c14 	add.w	ip, r0, #20
 80161d4:	4594      	cmp	ip, r2
 80161d6:	d930      	bls.n	801623a <_dtoa_r+0x2aa>
 80161d8:	6079      	str	r1, [r7, #4]
 80161da:	4630      	mov	r0, r6
 80161dc:	930d      	str	r3, [sp, #52]	; 0x34
 80161de:	f000 fca1 	bl	8016b24 <_Balloc>
 80161e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161e4:	9001      	str	r0, [sp, #4]
 80161e6:	4602      	mov	r2, r0
 80161e8:	2800      	cmp	r0, #0
 80161ea:	d145      	bne.n	8016278 <_dtoa_r+0x2e8>
 80161ec:	4b21      	ldr	r3, [pc, #132]	; (8016274 <_dtoa_r+0x2e4>)
 80161ee:	f240 11af 	movw	r1, #431	; 0x1af
 80161f2:	e6e5      	b.n	8015fc0 <_dtoa_r+0x30>
 80161f4:	2201      	movs	r2, #1
 80161f6:	e7de      	b.n	80161b6 <_dtoa_r+0x226>
 80161f8:	2200      	movs	r2, #0
 80161fa:	9207      	str	r2, [sp, #28]
 80161fc:	9a08      	ldr	r2, [sp, #32]
 80161fe:	eb0b 0a02 	add.w	sl, fp, r2
 8016202:	f10a 0901 	add.w	r9, sl, #1
 8016206:	464a      	mov	r2, r9
 8016208:	2a01      	cmp	r2, #1
 801620a:	bfb8      	it	lt
 801620c:	2201      	movlt	r2, #1
 801620e:	e7dc      	b.n	80161ca <_dtoa_r+0x23a>
 8016210:	2201      	movs	r2, #1
 8016212:	e7f2      	b.n	80161fa <_dtoa_r+0x26a>
 8016214:	2401      	movs	r4, #1
 8016216:	2200      	movs	r2, #0
 8016218:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801621c:	f04f 3aff 	mov.w	sl, #4294967295
 8016220:	2100      	movs	r1, #0
 8016222:	46d1      	mov	r9, sl
 8016224:	2212      	movs	r2, #18
 8016226:	9108      	str	r1, [sp, #32]
 8016228:	e7cf      	b.n	80161ca <_dtoa_r+0x23a>
 801622a:	2201      	movs	r2, #1
 801622c:	9207      	str	r2, [sp, #28]
 801622e:	e7f5      	b.n	801621c <_dtoa_r+0x28c>
 8016230:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016234:	46d1      	mov	r9, sl
 8016236:	4652      	mov	r2, sl
 8016238:	e7c7      	b.n	80161ca <_dtoa_r+0x23a>
 801623a:	3101      	adds	r1, #1
 801623c:	0040      	lsls	r0, r0, #1
 801623e:	e7c7      	b.n	80161d0 <_dtoa_r+0x240>
 8016240:	636f4361 	.word	0x636f4361
 8016244:	3fd287a7 	.word	0x3fd287a7
 8016248:	8b60c8b3 	.word	0x8b60c8b3
 801624c:	3fc68a28 	.word	0x3fc68a28
 8016250:	509f79fb 	.word	0x509f79fb
 8016254:	3fd34413 	.word	0x3fd34413
 8016258:	0802ccfd 	.word	0x0802ccfd
 801625c:	0802cd14 	.word	0x0802cd14
 8016260:	7ff00000 	.word	0x7ff00000
 8016264:	0802ccf9 	.word	0x0802ccf9
 8016268:	0802ccf0 	.word	0x0802ccf0
 801626c:	0802d19d 	.word	0x0802d19d
 8016270:	0802ce00 	.word	0x0802ce00
 8016274:	0802cd6c 	.word	0x0802cd6c
 8016278:	69f2      	ldr	r2, [r6, #28]
 801627a:	9901      	ldr	r1, [sp, #4]
 801627c:	6011      	str	r1, [r2, #0]
 801627e:	f1b9 0f0e 	cmp.w	r9, #14
 8016282:	d86c      	bhi.n	801635e <_dtoa_r+0x3ce>
 8016284:	2c00      	cmp	r4, #0
 8016286:	d06a      	beq.n	801635e <_dtoa_r+0x3ce>
 8016288:	f1bb 0f00 	cmp.w	fp, #0
 801628c:	f340 80a0 	ble.w	80163d0 <_dtoa_r+0x440>
 8016290:	4ac1      	ldr	r2, [pc, #772]	; (8016598 <_dtoa_r+0x608>)
 8016292:	f00b 010f 	and.w	r1, fp, #15
 8016296:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801629a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801629e:	ed92 7b00 	vldr	d7, [r2]
 80162a2:	ea4f 122b 	mov.w	r2, fp, asr #4
 80162a6:	f000 8087 	beq.w	80163b8 <_dtoa_r+0x428>
 80162aa:	49bc      	ldr	r1, [pc, #752]	; (801659c <_dtoa_r+0x60c>)
 80162ac:	ed91 6b08 	vldr	d6, [r1, #32]
 80162b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80162b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80162b8:	f002 020f 	and.w	r2, r2, #15
 80162bc:	2103      	movs	r1, #3
 80162be:	48b7      	ldr	r0, [pc, #732]	; (801659c <_dtoa_r+0x60c>)
 80162c0:	2a00      	cmp	r2, #0
 80162c2:	d17b      	bne.n	80163bc <_dtoa_r+0x42c>
 80162c4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80162c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80162cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80162d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80162d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80162d6:	2a00      	cmp	r2, #0
 80162d8:	f000 80a0 	beq.w	801641c <_dtoa_r+0x48c>
 80162dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80162e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80162e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162e8:	f140 8098 	bpl.w	801641c <_dtoa_r+0x48c>
 80162ec:	f1b9 0f00 	cmp.w	r9, #0
 80162f0:	f000 8094 	beq.w	801641c <_dtoa_r+0x48c>
 80162f4:	f1ba 0f00 	cmp.w	sl, #0
 80162f8:	dd2f      	ble.n	801635a <_dtoa_r+0x3ca>
 80162fa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80162fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016302:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016306:	f10b 32ff 	add.w	r2, fp, #4294967295
 801630a:	3101      	adds	r1, #1
 801630c:	4654      	mov	r4, sl
 801630e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016312:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8016316:	ee07 1a90 	vmov	s15, r1
 801631a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801631e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8016322:	ee15 7a90 	vmov	r7, s11
 8016326:	ec51 0b15 	vmov	r0, r1, d5
 801632a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801632e:	2c00      	cmp	r4, #0
 8016330:	d177      	bne.n	8016422 <_dtoa_r+0x492>
 8016332:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8016336:	ee36 6b47 	vsub.f64	d6, d6, d7
 801633a:	ec41 0b17 	vmov	d7, r0, r1
 801633e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016346:	f300 826a 	bgt.w	801681e <_dtoa_r+0x88e>
 801634a:	eeb1 7b47 	vneg.f64	d7, d7
 801634e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016356:	f100 8260 	bmi.w	801681a <_dtoa_r+0x88a>
 801635a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801635e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016360:	2a00      	cmp	r2, #0
 8016362:	f2c0 811d 	blt.w	80165a0 <_dtoa_r+0x610>
 8016366:	f1bb 0f0e 	cmp.w	fp, #14
 801636a:	f300 8119 	bgt.w	80165a0 <_dtoa_r+0x610>
 801636e:	4b8a      	ldr	r3, [pc, #552]	; (8016598 <_dtoa_r+0x608>)
 8016370:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016374:	ed93 6b00 	vldr	d6, [r3]
 8016378:	9b08      	ldr	r3, [sp, #32]
 801637a:	2b00      	cmp	r3, #0
 801637c:	f280 80b7 	bge.w	80164ee <_dtoa_r+0x55e>
 8016380:	f1b9 0f00 	cmp.w	r9, #0
 8016384:	f300 80b3 	bgt.w	80164ee <_dtoa_r+0x55e>
 8016388:	f040 8246 	bne.w	8016818 <_dtoa_r+0x888>
 801638c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8016390:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016394:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016398:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801639c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163a0:	464c      	mov	r4, r9
 80163a2:	464f      	mov	r7, r9
 80163a4:	f280 821c 	bge.w	80167e0 <_dtoa_r+0x850>
 80163a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80163ac:	2331      	movs	r3, #49	; 0x31
 80163ae:	f808 3b01 	strb.w	r3, [r8], #1
 80163b2:	f10b 0b01 	add.w	fp, fp, #1
 80163b6:	e218      	b.n	80167ea <_dtoa_r+0x85a>
 80163b8:	2102      	movs	r1, #2
 80163ba:	e780      	b.n	80162be <_dtoa_r+0x32e>
 80163bc:	07d4      	lsls	r4, r2, #31
 80163be:	d504      	bpl.n	80163ca <_dtoa_r+0x43a>
 80163c0:	ed90 6b00 	vldr	d6, [r0]
 80163c4:	3101      	adds	r1, #1
 80163c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80163ca:	1052      	asrs	r2, r2, #1
 80163cc:	3008      	adds	r0, #8
 80163ce:	e777      	b.n	80162c0 <_dtoa_r+0x330>
 80163d0:	d022      	beq.n	8016418 <_dtoa_r+0x488>
 80163d2:	f1cb 0200 	rsb	r2, fp, #0
 80163d6:	4970      	ldr	r1, [pc, #448]	; (8016598 <_dtoa_r+0x608>)
 80163d8:	f002 000f 	and.w	r0, r2, #15
 80163dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80163e0:	ed91 7b00 	vldr	d7, [r1]
 80163e4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80163e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80163ec:	486b      	ldr	r0, [pc, #428]	; (801659c <_dtoa_r+0x60c>)
 80163ee:	1112      	asrs	r2, r2, #4
 80163f0:	2400      	movs	r4, #0
 80163f2:	2102      	movs	r1, #2
 80163f4:	b92a      	cbnz	r2, 8016402 <_dtoa_r+0x472>
 80163f6:	2c00      	cmp	r4, #0
 80163f8:	f43f af6a 	beq.w	80162d0 <_dtoa_r+0x340>
 80163fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016400:	e766      	b.n	80162d0 <_dtoa_r+0x340>
 8016402:	07d7      	lsls	r7, r2, #31
 8016404:	d505      	bpl.n	8016412 <_dtoa_r+0x482>
 8016406:	ed90 6b00 	vldr	d6, [r0]
 801640a:	3101      	adds	r1, #1
 801640c:	2401      	movs	r4, #1
 801640e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016412:	1052      	asrs	r2, r2, #1
 8016414:	3008      	adds	r0, #8
 8016416:	e7ed      	b.n	80163f4 <_dtoa_r+0x464>
 8016418:	2102      	movs	r1, #2
 801641a:	e759      	b.n	80162d0 <_dtoa_r+0x340>
 801641c:	465a      	mov	r2, fp
 801641e:	464c      	mov	r4, r9
 8016420:	e775      	b.n	801630e <_dtoa_r+0x37e>
 8016422:	ec41 0b17 	vmov	d7, r0, r1
 8016426:	495c      	ldr	r1, [pc, #368]	; (8016598 <_dtoa_r+0x608>)
 8016428:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801642c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8016430:	9901      	ldr	r1, [sp, #4]
 8016432:	440c      	add	r4, r1
 8016434:	9907      	ldr	r1, [sp, #28]
 8016436:	b351      	cbz	r1, 801648e <_dtoa_r+0x4fe>
 8016438:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801643c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8016440:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016444:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8016448:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801644c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8016450:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016454:	ee14 1a90 	vmov	r1, s9
 8016458:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801645c:	3130      	adds	r1, #48	; 0x30
 801645e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016462:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801646a:	f808 1b01 	strb.w	r1, [r8], #1
 801646e:	d439      	bmi.n	80164e4 <_dtoa_r+0x554>
 8016470:	ee32 5b46 	vsub.f64	d5, d2, d6
 8016474:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8016478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801647c:	d472      	bmi.n	8016564 <_dtoa_r+0x5d4>
 801647e:	45a0      	cmp	r8, r4
 8016480:	f43f af6b 	beq.w	801635a <_dtoa_r+0x3ca>
 8016484:	ee27 7b03 	vmul.f64	d7, d7, d3
 8016488:	ee26 6b03 	vmul.f64	d6, d6, d3
 801648c:	e7e0      	b.n	8016450 <_dtoa_r+0x4c0>
 801648e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016492:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016496:	4620      	mov	r0, r4
 8016498:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801649c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80164a0:	ee14 1a90 	vmov	r1, s9
 80164a4:	3130      	adds	r1, #48	; 0x30
 80164a6:	f808 1b01 	strb.w	r1, [r8], #1
 80164aa:	45a0      	cmp	r8, r4
 80164ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80164b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80164b4:	d118      	bne.n	80164e8 <_dtoa_r+0x558>
 80164b6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80164ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 80164be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80164c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164c6:	dc4d      	bgt.n	8016564 <_dtoa_r+0x5d4>
 80164c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80164cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80164d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164d4:	f57f af41 	bpl.w	801635a <_dtoa_r+0x3ca>
 80164d8:	4680      	mov	r8, r0
 80164da:	3801      	subs	r0, #1
 80164dc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80164e0:	2b30      	cmp	r3, #48	; 0x30
 80164e2:	d0f9      	beq.n	80164d8 <_dtoa_r+0x548>
 80164e4:	4693      	mov	fp, r2
 80164e6:	e02a      	b.n	801653e <_dtoa_r+0x5ae>
 80164e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80164ec:	e7d6      	b.n	801649c <_dtoa_r+0x50c>
 80164ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80164f2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80164f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80164fa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80164fe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8016502:	ee15 3a10 	vmov	r3, s10
 8016506:	3330      	adds	r3, #48	; 0x30
 8016508:	f808 3b01 	strb.w	r3, [r8], #1
 801650c:	9b01      	ldr	r3, [sp, #4]
 801650e:	eba8 0303 	sub.w	r3, r8, r3
 8016512:	4599      	cmp	r9, r3
 8016514:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8016518:	eea3 7b46 	vfms.f64	d7, d3, d6
 801651c:	d133      	bne.n	8016586 <_dtoa_r+0x5f6>
 801651e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016522:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801652a:	dc1a      	bgt.n	8016562 <_dtoa_r+0x5d2>
 801652c:	eeb4 7b46 	vcmp.f64	d7, d6
 8016530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016534:	d103      	bne.n	801653e <_dtoa_r+0x5ae>
 8016536:	ee15 3a10 	vmov	r3, s10
 801653a:	07d9      	lsls	r1, r3, #31
 801653c:	d411      	bmi.n	8016562 <_dtoa_r+0x5d2>
 801653e:	4629      	mov	r1, r5
 8016540:	4630      	mov	r0, r6
 8016542:	f000 fb2f 	bl	8016ba4 <_Bfree>
 8016546:	2300      	movs	r3, #0
 8016548:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801654a:	f888 3000 	strb.w	r3, [r8]
 801654e:	f10b 0301 	add.w	r3, fp, #1
 8016552:	6013      	str	r3, [r2, #0]
 8016554:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016556:	2b00      	cmp	r3, #0
 8016558:	f43f ad69 	beq.w	801602e <_dtoa_r+0x9e>
 801655c:	f8c3 8000 	str.w	r8, [r3]
 8016560:	e565      	b.n	801602e <_dtoa_r+0x9e>
 8016562:	465a      	mov	r2, fp
 8016564:	4643      	mov	r3, r8
 8016566:	4698      	mov	r8, r3
 8016568:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801656c:	2939      	cmp	r1, #57	; 0x39
 801656e:	d106      	bne.n	801657e <_dtoa_r+0x5ee>
 8016570:	9901      	ldr	r1, [sp, #4]
 8016572:	4299      	cmp	r1, r3
 8016574:	d1f7      	bne.n	8016566 <_dtoa_r+0x5d6>
 8016576:	9801      	ldr	r0, [sp, #4]
 8016578:	2130      	movs	r1, #48	; 0x30
 801657a:	3201      	adds	r2, #1
 801657c:	7001      	strb	r1, [r0, #0]
 801657e:	7819      	ldrb	r1, [r3, #0]
 8016580:	3101      	adds	r1, #1
 8016582:	7019      	strb	r1, [r3, #0]
 8016584:	e7ae      	b.n	80164e4 <_dtoa_r+0x554>
 8016586:	ee27 7b04 	vmul.f64	d7, d7, d4
 801658a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801658e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016592:	d1b2      	bne.n	80164fa <_dtoa_r+0x56a>
 8016594:	e7d3      	b.n	801653e <_dtoa_r+0x5ae>
 8016596:	bf00      	nop
 8016598:	0802ce00 	.word	0x0802ce00
 801659c:	0802cdd8 	.word	0x0802cdd8
 80165a0:	9907      	ldr	r1, [sp, #28]
 80165a2:	2900      	cmp	r1, #0
 80165a4:	f000 80d0 	beq.w	8016748 <_dtoa_r+0x7b8>
 80165a8:	9906      	ldr	r1, [sp, #24]
 80165aa:	2901      	cmp	r1, #1
 80165ac:	f300 80b4 	bgt.w	8016718 <_dtoa_r+0x788>
 80165b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80165b2:	2900      	cmp	r1, #0
 80165b4:	f000 80ac 	beq.w	8016710 <_dtoa_r+0x780>
 80165b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80165bc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80165c0:	461c      	mov	r4, r3
 80165c2:	9309      	str	r3, [sp, #36]	; 0x24
 80165c4:	9b04      	ldr	r3, [sp, #16]
 80165c6:	4413      	add	r3, r2
 80165c8:	9304      	str	r3, [sp, #16]
 80165ca:	9b05      	ldr	r3, [sp, #20]
 80165cc:	2101      	movs	r1, #1
 80165ce:	4413      	add	r3, r2
 80165d0:	4630      	mov	r0, r6
 80165d2:	9305      	str	r3, [sp, #20]
 80165d4:	f000 fbe6 	bl	8016da4 <__i2b>
 80165d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165da:	4607      	mov	r7, r0
 80165dc:	f1b8 0f00 	cmp.w	r8, #0
 80165e0:	d00d      	beq.n	80165fe <_dtoa_r+0x66e>
 80165e2:	9a05      	ldr	r2, [sp, #20]
 80165e4:	2a00      	cmp	r2, #0
 80165e6:	dd0a      	ble.n	80165fe <_dtoa_r+0x66e>
 80165e8:	4542      	cmp	r2, r8
 80165ea:	9904      	ldr	r1, [sp, #16]
 80165ec:	bfa8      	it	ge
 80165ee:	4642      	movge	r2, r8
 80165f0:	1a89      	subs	r1, r1, r2
 80165f2:	9104      	str	r1, [sp, #16]
 80165f4:	9905      	ldr	r1, [sp, #20]
 80165f6:	eba8 0802 	sub.w	r8, r8, r2
 80165fa:	1a8a      	subs	r2, r1, r2
 80165fc:	9205      	str	r2, [sp, #20]
 80165fe:	b303      	cbz	r3, 8016642 <_dtoa_r+0x6b2>
 8016600:	9a07      	ldr	r2, [sp, #28]
 8016602:	2a00      	cmp	r2, #0
 8016604:	f000 80a5 	beq.w	8016752 <_dtoa_r+0x7c2>
 8016608:	2c00      	cmp	r4, #0
 801660a:	dd13      	ble.n	8016634 <_dtoa_r+0x6a4>
 801660c:	4639      	mov	r1, r7
 801660e:	4622      	mov	r2, r4
 8016610:	4630      	mov	r0, r6
 8016612:	930d      	str	r3, [sp, #52]	; 0x34
 8016614:	f000 fc86 	bl	8016f24 <__pow5mult>
 8016618:	462a      	mov	r2, r5
 801661a:	4601      	mov	r1, r0
 801661c:	4607      	mov	r7, r0
 801661e:	4630      	mov	r0, r6
 8016620:	f000 fbd6 	bl	8016dd0 <__multiply>
 8016624:	4629      	mov	r1, r5
 8016626:	9009      	str	r0, [sp, #36]	; 0x24
 8016628:	4630      	mov	r0, r6
 801662a:	f000 fabb 	bl	8016ba4 <_Bfree>
 801662e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016632:	4615      	mov	r5, r2
 8016634:	1b1a      	subs	r2, r3, r4
 8016636:	d004      	beq.n	8016642 <_dtoa_r+0x6b2>
 8016638:	4629      	mov	r1, r5
 801663a:	4630      	mov	r0, r6
 801663c:	f000 fc72 	bl	8016f24 <__pow5mult>
 8016640:	4605      	mov	r5, r0
 8016642:	2101      	movs	r1, #1
 8016644:	4630      	mov	r0, r6
 8016646:	f000 fbad 	bl	8016da4 <__i2b>
 801664a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801664c:	2b00      	cmp	r3, #0
 801664e:	4604      	mov	r4, r0
 8016650:	f340 8081 	ble.w	8016756 <_dtoa_r+0x7c6>
 8016654:	461a      	mov	r2, r3
 8016656:	4601      	mov	r1, r0
 8016658:	4630      	mov	r0, r6
 801665a:	f000 fc63 	bl	8016f24 <__pow5mult>
 801665e:	9b06      	ldr	r3, [sp, #24]
 8016660:	2b01      	cmp	r3, #1
 8016662:	4604      	mov	r4, r0
 8016664:	dd7a      	ble.n	801675c <_dtoa_r+0x7cc>
 8016666:	2300      	movs	r3, #0
 8016668:	9309      	str	r3, [sp, #36]	; 0x24
 801666a:	6922      	ldr	r2, [r4, #16]
 801666c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016670:	6910      	ldr	r0, [r2, #16]
 8016672:	f000 fb49 	bl	8016d08 <__hi0bits>
 8016676:	f1c0 0020 	rsb	r0, r0, #32
 801667a:	9b05      	ldr	r3, [sp, #20]
 801667c:	4418      	add	r0, r3
 801667e:	f010 001f 	ands.w	r0, r0, #31
 8016682:	f000 8093 	beq.w	80167ac <_dtoa_r+0x81c>
 8016686:	f1c0 0220 	rsb	r2, r0, #32
 801668a:	2a04      	cmp	r2, #4
 801668c:	f340 8085 	ble.w	801679a <_dtoa_r+0x80a>
 8016690:	9b04      	ldr	r3, [sp, #16]
 8016692:	f1c0 001c 	rsb	r0, r0, #28
 8016696:	4403      	add	r3, r0
 8016698:	9304      	str	r3, [sp, #16]
 801669a:	9b05      	ldr	r3, [sp, #20]
 801669c:	4480      	add	r8, r0
 801669e:	4403      	add	r3, r0
 80166a0:	9305      	str	r3, [sp, #20]
 80166a2:	9b04      	ldr	r3, [sp, #16]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	dd05      	ble.n	80166b4 <_dtoa_r+0x724>
 80166a8:	4629      	mov	r1, r5
 80166aa:	461a      	mov	r2, r3
 80166ac:	4630      	mov	r0, r6
 80166ae:	f000 fc93 	bl	8016fd8 <__lshift>
 80166b2:	4605      	mov	r5, r0
 80166b4:	9b05      	ldr	r3, [sp, #20]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	dd05      	ble.n	80166c6 <_dtoa_r+0x736>
 80166ba:	4621      	mov	r1, r4
 80166bc:	461a      	mov	r2, r3
 80166be:	4630      	mov	r0, r6
 80166c0:	f000 fc8a 	bl	8016fd8 <__lshift>
 80166c4:	4604      	mov	r4, r0
 80166c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d071      	beq.n	80167b0 <_dtoa_r+0x820>
 80166cc:	4621      	mov	r1, r4
 80166ce:	4628      	mov	r0, r5
 80166d0:	f000 fcee 	bl	80170b0 <__mcmp>
 80166d4:	2800      	cmp	r0, #0
 80166d6:	da6b      	bge.n	80167b0 <_dtoa_r+0x820>
 80166d8:	2300      	movs	r3, #0
 80166da:	4629      	mov	r1, r5
 80166dc:	220a      	movs	r2, #10
 80166de:	4630      	mov	r0, r6
 80166e0:	f000 fa82 	bl	8016be8 <__multadd>
 80166e4:	9b07      	ldr	r3, [sp, #28]
 80166e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80166ea:	4605      	mov	r5, r0
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	f000 8197 	beq.w	8016a20 <_dtoa_r+0xa90>
 80166f2:	4639      	mov	r1, r7
 80166f4:	2300      	movs	r3, #0
 80166f6:	220a      	movs	r2, #10
 80166f8:	4630      	mov	r0, r6
 80166fa:	f000 fa75 	bl	8016be8 <__multadd>
 80166fe:	f1ba 0f00 	cmp.w	sl, #0
 8016702:	4607      	mov	r7, r0
 8016704:	f300 8093 	bgt.w	801682e <_dtoa_r+0x89e>
 8016708:	9b06      	ldr	r3, [sp, #24]
 801670a:	2b02      	cmp	r3, #2
 801670c:	dc57      	bgt.n	80167be <_dtoa_r+0x82e>
 801670e:	e08e      	b.n	801682e <_dtoa_r+0x89e>
 8016710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016712:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016716:	e751      	b.n	80165bc <_dtoa_r+0x62c>
 8016718:	f109 34ff 	add.w	r4, r9, #4294967295
 801671c:	42a3      	cmp	r3, r4
 801671e:	bfbf      	itttt	lt
 8016720:	1ae2      	sublt	r2, r4, r3
 8016722:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8016724:	189b      	addlt	r3, r3, r2
 8016726:	930a      	strlt	r3, [sp, #40]	; 0x28
 8016728:	bfae      	itee	ge
 801672a:	1b1c      	subge	r4, r3, r4
 801672c:	4623      	movlt	r3, r4
 801672e:	2400      	movlt	r4, #0
 8016730:	f1b9 0f00 	cmp.w	r9, #0
 8016734:	bfb5      	itete	lt
 8016736:	9a04      	ldrlt	r2, [sp, #16]
 8016738:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801673c:	eba2 0809 	sublt.w	r8, r2, r9
 8016740:	464a      	movge	r2, r9
 8016742:	bfb8      	it	lt
 8016744:	2200      	movlt	r2, #0
 8016746:	e73c      	b.n	80165c2 <_dtoa_r+0x632>
 8016748:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801674c:	9f07      	ldr	r7, [sp, #28]
 801674e:	461c      	mov	r4, r3
 8016750:	e744      	b.n	80165dc <_dtoa_r+0x64c>
 8016752:	461a      	mov	r2, r3
 8016754:	e770      	b.n	8016638 <_dtoa_r+0x6a8>
 8016756:	9b06      	ldr	r3, [sp, #24]
 8016758:	2b01      	cmp	r3, #1
 801675a:	dc18      	bgt.n	801678e <_dtoa_r+0x7fe>
 801675c:	9b02      	ldr	r3, [sp, #8]
 801675e:	b9b3      	cbnz	r3, 801678e <_dtoa_r+0x7fe>
 8016760:	9b03      	ldr	r3, [sp, #12]
 8016762:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8016766:	b9a2      	cbnz	r2, 8016792 <_dtoa_r+0x802>
 8016768:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801676c:	0d12      	lsrs	r2, r2, #20
 801676e:	0512      	lsls	r2, r2, #20
 8016770:	b18a      	cbz	r2, 8016796 <_dtoa_r+0x806>
 8016772:	9b04      	ldr	r3, [sp, #16]
 8016774:	3301      	adds	r3, #1
 8016776:	9304      	str	r3, [sp, #16]
 8016778:	9b05      	ldr	r3, [sp, #20]
 801677a:	3301      	adds	r3, #1
 801677c:	9305      	str	r3, [sp, #20]
 801677e:	2301      	movs	r3, #1
 8016780:	9309      	str	r3, [sp, #36]	; 0x24
 8016782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016784:	2b00      	cmp	r3, #0
 8016786:	f47f af70 	bne.w	801666a <_dtoa_r+0x6da>
 801678a:	2001      	movs	r0, #1
 801678c:	e775      	b.n	801667a <_dtoa_r+0x6ea>
 801678e:	2300      	movs	r3, #0
 8016790:	e7f6      	b.n	8016780 <_dtoa_r+0x7f0>
 8016792:	9b02      	ldr	r3, [sp, #8]
 8016794:	e7f4      	b.n	8016780 <_dtoa_r+0x7f0>
 8016796:	9209      	str	r2, [sp, #36]	; 0x24
 8016798:	e7f3      	b.n	8016782 <_dtoa_r+0x7f2>
 801679a:	d082      	beq.n	80166a2 <_dtoa_r+0x712>
 801679c:	9b04      	ldr	r3, [sp, #16]
 801679e:	321c      	adds	r2, #28
 80167a0:	4413      	add	r3, r2
 80167a2:	9304      	str	r3, [sp, #16]
 80167a4:	9b05      	ldr	r3, [sp, #20]
 80167a6:	4490      	add	r8, r2
 80167a8:	4413      	add	r3, r2
 80167aa:	e779      	b.n	80166a0 <_dtoa_r+0x710>
 80167ac:	4602      	mov	r2, r0
 80167ae:	e7f5      	b.n	801679c <_dtoa_r+0x80c>
 80167b0:	f1b9 0f00 	cmp.w	r9, #0
 80167b4:	dc36      	bgt.n	8016824 <_dtoa_r+0x894>
 80167b6:	9b06      	ldr	r3, [sp, #24]
 80167b8:	2b02      	cmp	r3, #2
 80167ba:	dd33      	ble.n	8016824 <_dtoa_r+0x894>
 80167bc:	46ca      	mov	sl, r9
 80167be:	f1ba 0f00 	cmp.w	sl, #0
 80167c2:	d10d      	bne.n	80167e0 <_dtoa_r+0x850>
 80167c4:	4621      	mov	r1, r4
 80167c6:	4653      	mov	r3, sl
 80167c8:	2205      	movs	r2, #5
 80167ca:	4630      	mov	r0, r6
 80167cc:	f000 fa0c 	bl	8016be8 <__multadd>
 80167d0:	4601      	mov	r1, r0
 80167d2:	4604      	mov	r4, r0
 80167d4:	4628      	mov	r0, r5
 80167d6:	f000 fc6b 	bl	80170b0 <__mcmp>
 80167da:	2800      	cmp	r0, #0
 80167dc:	f73f ade4 	bgt.w	80163a8 <_dtoa_r+0x418>
 80167e0:	9b08      	ldr	r3, [sp, #32]
 80167e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80167e6:	ea6f 0b03 	mvn.w	fp, r3
 80167ea:	f04f 0900 	mov.w	r9, #0
 80167ee:	4621      	mov	r1, r4
 80167f0:	4630      	mov	r0, r6
 80167f2:	f000 f9d7 	bl	8016ba4 <_Bfree>
 80167f6:	2f00      	cmp	r7, #0
 80167f8:	f43f aea1 	beq.w	801653e <_dtoa_r+0x5ae>
 80167fc:	f1b9 0f00 	cmp.w	r9, #0
 8016800:	d005      	beq.n	801680e <_dtoa_r+0x87e>
 8016802:	45b9      	cmp	r9, r7
 8016804:	d003      	beq.n	801680e <_dtoa_r+0x87e>
 8016806:	4649      	mov	r1, r9
 8016808:	4630      	mov	r0, r6
 801680a:	f000 f9cb 	bl	8016ba4 <_Bfree>
 801680e:	4639      	mov	r1, r7
 8016810:	4630      	mov	r0, r6
 8016812:	f000 f9c7 	bl	8016ba4 <_Bfree>
 8016816:	e692      	b.n	801653e <_dtoa_r+0x5ae>
 8016818:	2400      	movs	r4, #0
 801681a:	4627      	mov	r7, r4
 801681c:	e7e0      	b.n	80167e0 <_dtoa_r+0x850>
 801681e:	4693      	mov	fp, r2
 8016820:	4627      	mov	r7, r4
 8016822:	e5c1      	b.n	80163a8 <_dtoa_r+0x418>
 8016824:	9b07      	ldr	r3, [sp, #28]
 8016826:	46ca      	mov	sl, r9
 8016828:	2b00      	cmp	r3, #0
 801682a:	f000 8100 	beq.w	8016a2e <_dtoa_r+0xa9e>
 801682e:	f1b8 0f00 	cmp.w	r8, #0
 8016832:	dd05      	ble.n	8016840 <_dtoa_r+0x8b0>
 8016834:	4639      	mov	r1, r7
 8016836:	4642      	mov	r2, r8
 8016838:	4630      	mov	r0, r6
 801683a:	f000 fbcd 	bl	8016fd8 <__lshift>
 801683e:	4607      	mov	r7, r0
 8016840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016842:	2b00      	cmp	r3, #0
 8016844:	d05d      	beq.n	8016902 <_dtoa_r+0x972>
 8016846:	6879      	ldr	r1, [r7, #4]
 8016848:	4630      	mov	r0, r6
 801684a:	f000 f96b 	bl	8016b24 <_Balloc>
 801684e:	4680      	mov	r8, r0
 8016850:	b928      	cbnz	r0, 801685e <_dtoa_r+0x8ce>
 8016852:	4b82      	ldr	r3, [pc, #520]	; (8016a5c <_dtoa_r+0xacc>)
 8016854:	4602      	mov	r2, r0
 8016856:	f240 21ef 	movw	r1, #751	; 0x2ef
 801685a:	f7ff bbb1 	b.w	8015fc0 <_dtoa_r+0x30>
 801685e:	693a      	ldr	r2, [r7, #16]
 8016860:	3202      	adds	r2, #2
 8016862:	0092      	lsls	r2, r2, #2
 8016864:	f107 010c 	add.w	r1, r7, #12
 8016868:	300c      	adds	r0, #12
 801686a:	f7ff faf4 	bl	8015e56 <memcpy>
 801686e:	2201      	movs	r2, #1
 8016870:	4641      	mov	r1, r8
 8016872:	4630      	mov	r0, r6
 8016874:	f000 fbb0 	bl	8016fd8 <__lshift>
 8016878:	9b01      	ldr	r3, [sp, #4]
 801687a:	3301      	adds	r3, #1
 801687c:	9304      	str	r3, [sp, #16]
 801687e:	9b01      	ldr	r3, [sp, #4]
 8016880:	4453      	add	r3, sl
 8016882:	9308      	str	r3, [sp, #32]
 8016884:	9b02      	ldr	r3, [sp, #8]
 8016886:	f003 0301 	and.w	r3, r3, #1
 801688a:	46b9      	mov	r9, r7
 801688c:	9307      	str	r3, [sp, #28]
 801688e:	4607      	mov	r7, r0
 8016890:	9b04      	ldr	r3, [sp, #16]
 8016892:	4621      	mov	r1, r4
 8016894:	3b01      	subs	r3, #1
 8016896:	4628      	mov	r0, r5
 8016898:	9302      	str	r3, [sp, #8]
 801689a:	f7ff faf1 	bl	8015e80 <quorem>
 801689e:	4603      	mov	r3, r0
 80168a0:	3330      	adds	r3, #48	; 0x30
 80168a2:	9005      	str	r0, [sp, #20]
 80168a4:	4649      	mov	r1, r9
 80168a6:	4628      	mov	r0, r5
 80168a8:	9309      	str	r3, [sp, #36]	; 0x24
 80168aa:	f000 fc01 	bl	80170b0 <__mcmp>
 80168ae:	463a      	mov	r2, r7
 80168b0:	4682      	mov	sl, r0
 80168b2:	4621      	mov	r1, r4
 80168b4:	4630      	mov	r0, r6
 80168b6:	f000 fc17 	bl	80170e8 <__mdiff>
 80168ba:	68c2      	ldr	r2, [r0, #12]
 80168bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168be:	4680      	mov	r8, r0
 80168c0:	bb0a      	cbnz	r2, 8016906 <_dtoa_r+0x976>
 80168c2:	4601      	mov	r1, r0
 80168c4:	4628      	mov	r0, r5
 80168c6:	f000 fbf3 	bl	80170b0 <__mcmp>
 80168ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168cc:	4602      	mov	r2, r0
 80168ce:	4641      	mov	r1, r8
 80168d0:	4630      	mov	r0, r6
 80168d2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80168d6:	f000 f965 	bl	8016ba4 <_Bfree>
 80168da:	9b06      	ldr	r3, [sp, #24]
 80168dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80168de:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80168e2:	ea43 0102 	orr.w	r1, r3, r2
 80168e6:	9b07      	ldr	r3, [sp, #28]
 80168e8:	4319      	orrs	r1, r3
 80168ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168ec:	d10d      	bne.n	801690a <_dtoa_r+0x97a>
 80168ee:	2b39      	cmp	r3, #57	; 0x39
 80168f0:	d029      	beq.n	8016946 <_dtoa_r+0x9b6>
 80168f2:	f1ba 0f00 	cmp.w	sl, #0
 80168f6:	dd01      	ble.n	80168fc <_dtoa_r+0x96c>
 80168f8:	9b05      	ldr	r3, [sp, #20]
 80168fa:	3331      	adds	r3, #49	; 0x31
 80168fc:	9a02      	ldr	r2, [sp, #8]
 80168fe:	7013      	strb	r3, [r2, #0]
 8016900:	e775      	b.n	80167ee <_dtoa_r+0x85e>
 8016902:	4638      	mov	r0, r7
 8016904:	e7b8      	b.n	8016878 <_dtoa_r+0x8e8>
 8016906:	2201      	movs	r2, #1
 8016908:	e7e1      	b.n	80168ce <_dtoa_r+0x93e>
 801690a:	f1ba 0f00 	cmp.w	sl, #0
 801690e:	db06      	blt.n	801691e <_dtoa_r+0x98e>
 8016910:	9906      	ldr	r1, [sp, #24]
 8016912:	ea41 0a0a 	orr.w	sl, r1, sl
 8016916:	9907      	ldr	r1, [sp, #28]
 8016918:	ea5a 0a01 	orrs.w	sl, sl, r1
 801691c:	d120      	bne.n	8016960 <_dtoa_r+0x9d0>
 801691e:	2a00      	cmp	r2, #0
 8016920:	ddec      	ble.n	80168fc <_dtoa_r+0x96c>
 8016922:	4629      	mov	r1, r5
 8016924:	2201      	movs	r2, #1
 8016926:	4630      	mov	r0, r6
 8016928:	9304      	str	r3, [sp, #16]
 801692a:	f000 fb55 	bl	8016fd8 <__lshift>
 801692e:	4621      	mov	r1, r4
 8016930:	4605      	mov	r5, r0
 8016932:	f000 fbbd 	bl	80170b0 <__mcmp>
 8016936:	2800      	cmp	r0, #0
 8016938:	9b04      	ldr	r3, [sp, #16]
 801693a:	dc02      	bgt.n	8016942 <_dtoa_r+0x9b2>
 801693c:	d1de      	bne.n	80168fc <_dtoa_r+0x96c>
 801693e:	07da      	lsls	r2, r3, #31
 8016940:	d5dc      	bpl.n	80168fc <_dtoa_r+0x96c>
 8016942:	2b39      	cmp	r3, #57	; 0x39
 8016944:	d1d8      	bne.n	80168f8 <_dtoa_r+0x968>
 8016946:	9a02      	ldr	r2, [sp, #8]
 8016948:	2339      	movs	r3, #57	; 0x39
 801694a:	7013      	strb	r3, [r2, #0]
 801694c:	4643      	mov	r3, r8
 801694e:	4698      	mov	r8, r3
 8016950:	3b01      	subs	r3, #1
 8016952:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8016956:	2a39      	cmp	r2, #57	; 0x39
 8016958:	d051      	beq.n	80169fe <_dtoa_r+0xa6e>
 801695a:	3201      	adds	r2, #1
 801695c:	701a      	strb	r2, [r3, #0]
 801695e:	e746      	b.n	80167ee <_dtoa_r+0x85e>
 8016960:	2a00      	cmp	r2, #0
 8016962:	dd03      	ble.n	801696c <_dtoa_r+0x9dc>
 8016964:	2b39      	cmp	r3, #57	; 0x39
 8016966:	d0ee      	beq.n	8016946 <_dtoa_r+0x9b6>
 8016968:	3301      	adds	r3, #1
 801696a:	e7c7      	b.n	80168fc <_dtoa_r+0x96c>
 801696c:	9a04      	ldr	r2, [sp, #16]
 801696e:	9908      	ldr	r1, [sp, #32]
 8016970:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016974:	428a      	cmp	r2, r1
 8016976:	d02b      	beq.n	80169d0 <_dtoa_r+0xa40>
 8016978:	4629      	mov	r1, r5
 801697a:	2300      	movs	r3, #0
 801697c:	220a      	movs	r2, #10
 801697e:	4630      	mov	r0, r6
 8016980:	f000 f932 	bl	8016be8 <__multadd>
 8016984:	45b9      	cmp	r9, r7
 8016986:	4605      	mov	r5, r0
 8016988:	f04f 0300 	mov.w	r3, #0
 801698c:	f04f 020a 	mov.w	r2, #10
 8016990:	4649      	mov	r1, r9
 8016992:	4630      	mov	r0, r6
 8016994:	d107      	bne.n	80169a6 <_dtoa_r+0xa16>
 8016996:	f000 f927 	bl	8016be8 <__multadd>
 801699a:	4681      	mov	r9, r0
 801699c:	4607      	mov	r7, r0
 801699e:	9b04      	ldr	r3, [sp, #16]
 80169a0:	3301      	adds	r3, #1
 80169a2:	9304      	str	r3, [sp, #16]
 80169a4:	e774      	b.n	8016890 <_dtoa_r+0x900>
 80169a6:	f000 f91f 	bl	8016be8 <__multadd>
 80169aa:	4639      	mov	r1, r7
 80169ac:	4681      	mov	r9, r0
 80169ae:	2300      	movs	r3, #0
 80169b0:	220a      	movs	r2, #10
 80169b2:	4630      	mov	r0, r6
 80169b4:	f000 f918 	bl	8016be8 <__multadd>
 80169b8:	4607      	mov	r7, r0
 80169ba:	e7f0      	b.n	801699e <_dtoa_r+0xa0e>
 80169bc:	f1ba 0f00 	cmp.w	sl, #0
 80169c0:	9a01      	ldr	r2, [sp, #4]
 80169c2:	bfcc      	ite	gt
 80169c4:	46d0      	movgt	r8, sl
 80169c6:	f04f 0801 	movle.w	r8, #1
 80169ca:	4490      	add	r8, r2
 80169cc:	f04f 0900 	mov.w	r9, #0
 80169d0:	4629      	mov	r1, r5
 80169d2:	2201      	movs	r2, #1
 80169d4:	4630      	mov	r0, r6
 80169d6:	9302      	str	r3, [sp, #8]
 80169d8:	f000 fafe 	bl	8016fd8 <__lshift>
 80169dc:	4621      	mov	r1, r4
 80169de:	4605      	mov	r5, r0
 80169e0:	f000 fb66 	bl	80170b0 <__mcmp>
 80169e4:	2800      	cmp	r0, #0
 80169e6:	dcb1      	bgt.n	801694c <_dtoa_r+0x9bc>
 80169e8:	d102      	bne.n	80169f0 <_dtoa_r+0xa60>
 80169ea:	9b02      	ldr	r3, [sp, #8]
 80169ec:	07db      	lsls	r3, r3, #31
 80169ee:	d4ad      	bmi.n	801694c <_dtoa_r+0x9bc>
 80169f0:	4643      	mov	r3, r8
 80169f2:	4698      	mov	r8, r3
 80169f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80169f8:	2a30      	cmp	r2, #48	; 0x30
 80169fa:	d0fa      	beq.n	80169f2 <_dtoa_r+0xa62>
 80169fc:	e6f7      	b.n	80167ee <_dtoa_r+0x85e>
 80169fe:	9a01      	ldr	r2, [sp, #4]
 8016a00:	429a      	cmp	r2, r3
 8016a02:	d1a4      	bne.n	801694e <_dtoa_r+0x9be>
 8016a04:	f10b 0b01 	add.w	fp, fp, #1
 8016a08:	2331      	movs	r3, #49	; 0x31
 8016a0a:	e778      	b.n	80168fe <_dtoa_r+0x96e>
 8016a0c:	4b14      	ldr	r3, [pc, #80]	; (8016a60 <_dtoa_r+0xad0>)
 8016a0e:	f7ff bb2a 	b.w	8016066 <_dtoa_r+0xd6>
 8016a12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	f47f ab05 	bne.w	8016024 <_dtoa_r+0x94>
 8016a1a:	4b12      	ldr	r3, [pc, #72]	; (8016a64 <_dtoa_r+0xad4>)
 8016a1c:	f7ff bb23 	b.w	8016066 <_dtoa_r+0xd6>
 8016a20:	f1ba 0f00 	cmp.w	sl, #0
 8016a24:	dc03      	bgt.n	8016a2e <_dtoa_r+0xa9e>
 8016a26:	9b06      	ldr	r3, [sp, #24]
 8016a28:	2b02      	cmp	r3, #2
 8016a2a:	f73f aec8 	bgt.w	80167be <_dtoa_r+0x82e>
 8016a2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016a32:	4621      	mov	r1, r4
 8016a34:	4628      	mov	r0, r5
 8016a36:	f7ff fa23 	bl	8015e80 <quorem>
 8016a3a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016a3e:	f808 3b01 	strb.w	r3, [r8], #1
 8016a42:	9a01      	ldr	r2, [sp, #4]
 8016a44:	eba8 0202 	sub.w	r2, r8, r2
 8016a48:	4592      	cmp	sl, r2
 8016a4a:	ddb7      	ble.n	80169bc <_dtoa_r+0xa2c>
 8016a4c:	4629      	mov	r1, r5
 8016a4e:	2300      	movs	r3, #0
 8016a50:	220a      	movs	r2, #10
 8016a52:	4630      	mov	r0, r6
 8016a54:	f000 f8c8 	bl	8016be8 <__multadd>
 8016a58:	4605      	mov	r5, r0
 8016a5a:	e7ea      	b.n	8016a32 <_dtoa_r+0xaa2>
 8016a5c:	0802cd6c 	.word	0x0802cd6c
 8016a60:	0802d19c 	.word	0x0802d19c
 8016a64:	0802ccf0 	.word	0x0802ccf0

08016a68 <_free_r>:
 8016a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a6a:	2900      	cmp	r1, #0
 8016a6c:	d044      	beq.n	8016af8 <_free_r+0x90>
 8016a6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a72:	9001      	str	r0, [sp, #4]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	f1a1 0404 	sub.w	r4, r1, #4
 8016a7a:	bfb8      	it	lt
 8016a7c:	18e4      	addlt	r4, r4, r3
 8016a7e:	f7fd fd07 	bl	8014490 <__malloc_lock>
 8016a82:	4a1e      	ldr	r2, [pc, #120]	; (8016afc <_free_r+0x94>)
 8016a84:	9801      	ldr	r0, [sp, #4]
 8016a86:	6813      	ldr	r3, [r2, #0]
 8016a88:	b933      	cbnz	r3, 8016a98 <_free_r+0x30>
 8016a8a:	6063      	str	r3, [r4, #4]
 8016a8c:	6014      	str	r4, [r2, #0]
 8016a8e:	b003      	add	sp, #12
 8016a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a94:	f7fd bd02 	b.w	801449c <__malloc_unlock>
 8016a98:	42a3      	cmp	r3, r4
 8016a9a:	d908      	bls.n	8016aae <_free_r+0x46>
 8016a9c:	6825      	ldr	r5, [r4, #0]
 8016a9e:	1961      	adds	r1, r4, r5
 8016aa0:	428b      	cmp	r3, r1
 8016aa2:	bf01      	itttt	eq
 8016aa4:	6819      	ldreq	r1, [r3, #0]
 8016aa6:	685b      	ldreq	r3, [r3, #4]
 8016aa8:	1949      	addeq	r1, r1, r5
 8016aaa:	6021      	streq	r1, [r4, #0]
 8016aac:	e7ed      	b.n	8016a8a <_free_r+0x22>
 8016aae:	461a      	mov	r2, r3
 8016ab0:	685b      	ldr	r3, [r3, #4]
 8016ab2:	b10b      	cbz	r3, 8016ab8 <_free_r+0x50>
 8016ab4:	42a3      	cmp	r3, r4
 8016ab6:	d9fa      	bls.n	8016aae <_free_r+0x46>
 8016ab8:	6811      	ldr	r1, [r2, #0]
 8016aba:	1855      	adds	r5, r2, r1
 8016abc:	42a5      	cmp	r5, r4
 8016abe:	d10b      	bne.n	8016ad8 <_free_r+0x70>
 8016ac0:	6824      	ldr	r4, [r4, #0]
 8016ac2:	4421      	add	r1, r4
 8016ac4:	1854      	adds	r4, r2, r1
 8016ac6:	42a3      	cmp	r3, r4
 8016ac8:	6011      	str	r1, [r2, #0]
 8016aca:	d1e0      	bne.n	8016a8e <_free_r+0x26>
 8016acc:	681c      	ldr	r4, [r3, #0]
 8016ace:	685b      	ldr	r3, [r3, #4]
 8016ad0:	6053      	str	r3, [r2, #4]
 8016ad2:	440c      	add	r4, r1
 8016ad4:	6014      	str	r4, [r2, #0]
 8016ad6:	e7da      	b.n	8016a8e <_free_r+0x26>
 8016ad8:	d902      	bls.n	8016ae0 <_free_r+0x78>
 8016ada:	230c      	movs	r3, #12
 8016adc:	6003      	str	r3, [r0, #0]
 8016ade:	e7d6      	b.n	8016a8e <_free_r+0x26>
 8016ae0:	6825      	ldr	r5, [r4, #0]
 8016ae2:	1961      	adds	r1, r4, r5
 8016ae4:	428b      	cmp	r3, r1
 8016ae6:	bf04      	itt	eq
 8016ae8:	6819      	ldreq	r1, [r3, #0]
 8016aea:	685b      	ldreq	r3, [r3, #4]
 8016aec:	6063      	str	r3, [r4, #4]
 8016aee:	bf04      	itt	eq
 8016af0:	1949      	addeq	r1, r1, r5
 8016af2:	6021      	streq	r1, [r4, #0]
 8016af4:	6054      	str	r4, [r2, #4]
 8016af6:	e7ca      	b.n	8016a8e <_free_r+0x26>
 8016af8:	b003      	add	sp, #12
 8016afa:	bd30      	pop	{r4, r5, pc}
 8016afc:	24031380 	.word	0x24031380

08016b00 <__ascii_mbtowc>:
 8016b00:	b082      	sub	sp, #8
 8016b02:	b901      	cbnz	r1, 8016b06 <__ascii_mbtowc+0x6>
 8016b04:	a901      	add	r1, sp, #4
 8016b06:	b142      	cbz	r2, 8016b1a <__ascii_mbtowc+0x1a>
 8016b08:	b14b      	cbz	r3, 8016b1e <__ascii_mbtowc+0x1e>
 8016b0a:	7813      	ldrb	r3, [r2, #0]
 8016b0c:	600b      	str	r3, [r1, #0]
 8016b0e:	7812      	ldrb	r2, [r2, #0]
 8016b10:	1e10      	subs	r0, r2, #0
 8016b12:	bf18      	it	ne
 8016b14:	2001      	movne	r0, #1
 8016b16:	b002      	add	sp, #8
 8016b18:	4770      	bx	lr
 8016b1a:	4610      	mov	r0, r2
 8016b1c:	e7fb      	b.n	8016b16 <__ascii_mbtowc+0x16>
 8016b1e:	f06f 0001 	mvn.w	r0, #1
 8016b22:	e7f8      	b.n	8016b16 <__ascii_mbtowc+0x16>

08016b24 <_Balloc>:
 8016b24:	b570      	push	{r4, r5, r6, lr}
 8016b26:	69c6      	ldr	r6, [r0, #28]
 8016b28:	4604      	mov	r4, r0
 8016b2a:	460d      	mov	r5, r1
 8016b2c:	b976      	cbnz	r6, 8016b4c <_Balloc+0x28>
 8016b2e:	2010      	movs	r0, #16
 8016b30:	f7fd fbfe 	bl	8014330 <malloc>
 8016b34:	4602      	mov	r2, r0
 8016b36:	61e0      	str	r0, [r4, #28]
 8016b38:	b920      	cbnz	r0, 8016b44 <_Balloc+0x20>
 8016b3a:	4b18      	ldr	r3, [pc, #96]	; (8016b9c <_Balloc+0x78>)
 8016b3c:	4818      	ldr	r0, [pc, #96]	; (8016ba0 <_Balloc+0x7c>)
 8016b3e:	216b      	movs	r1, #107	; 0x6b
 8016b40:	f002 fb9a 	bl	8019278 <__assert_func>
 8016b44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016b48:	6006      	str	r6, [r0, #0]
 8016b4a:	60c6      	str	r6, [r0, #12]
 8016b4c:	69e6      	ldr	r6, [r4, #28]
 8016b4e:	68f3      	ldr	r3, [r6, #12]
 8016b50:	b183      	cbz	r3, 8016b74 <_Balloc+0x50>
 8016b52:	69e3      	ldr	r3, [r4, #28]
 8016b54:	68db      	ldr	r3, [r3, #12]
 8016b56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016b5a:	b9b8      	cbnz	r0, 8016b8c <_Balloc+0x68>
 8016b5c:	2101      	movs	r1, #1
 8016b5e:	fa01 f605 	lsl.w	r6, r1, r5
 8016b62:	1d72      	adds	r2, r6, #5
 8016b64:	0092      	lsls	r2, r2, #2
 8016b66:	4620      	mov	r0, r4
 8016b68:	f002 fba4 	bl	80192b4 <_calloc_r>
 8016b6c:	b160      	cbz	r0, 8016b88 <_Balloc+0x64>
 8016b6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016b72:	e00e      	b.n	8016b92 <_Balloc+0x6e>
 8016b74:	2221      	movs	r2, #33	; 0x21
 8016b76:	2104      	movs	r1, #4
 8016b78:	4620      	mov	r0, r4
 8016b7a:	f002 fb9b 	bl	80192b4 <_calloc_r>
 8016b7e:	69e3      	ldr	r3, [r4, #28]
 8016b80:	60f0      	str	r0, [r6, #12]
 8016b82:	68db      	ldr	r3, [r3, #12]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d1e4      	bne.n	8016b52 <_Balloc+0x2e>
 8016b88:	2000      	movs	r0, #0
 8016b8a:	bd70      	pop	{r4, r5, r6, pc}
 8016b8c:	6802      	ldr	r2, [r0, #0]
 8016b8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016b92:	2300      	movs	r3, #0
 8016b94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016b98:	e7f7      	b.n	8016b8a <_Balloc+0x66>
 8016b9a:	bf00      	nop
 8016b9c:	0802ccfd 	.word	0x0802ccfd
 8016ba0:	0802cd7d 	.word	0x0802cd7d

08016ba4 <_Bfree>:
 8016ba4:	b570      	push	{r4, r5, r6, lr}
 8016ba6:	69c6      	ldr	r6, [r0, #28]
 8016ba8:	4605      	mov	r5, r0
 8016baa:	460c      	mov	r4, r1
 8016bac:	b976      	cbnz	r6, 8016bcc <_Bfree+0x28>
 8016bae:	2010      	movs	r0, #16
 8016bb0:	f7fd fbbe 	bl	8014330 <malloc>
 8016bb4:	4602      	mov	r2, r0
 8016bb6:	61e8      	str	r0, [r5, #28]
 8016bb8:	b920      	cbnz	r0, 8016bc4 <_Bfree+0x20>
 8016bba:	4b09      	ldr	r3, [pc, #36]	; (8016be0 <_Bfree+0x3c>)
 8016bbc:	4809      	ldr	r0, [pc, #36]	; (8016be4 <_Bfree+0x40>)
 8016bbe:	218f      	movs	r1, #143	; 0x8f
 8016bc0:	f002 fb5a 	bl	8019278 <__assert_func>
 8016bc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016bc8:	6006      	str	r6, [r0, #0]
 8016bca:	60c6      	str	r6, [r0, #12]
 8016bcc:	b13c      	cbz	r4, 8016bde <_Bfree+0x3a>
 8016bce:	69eb      	ldr	r3, [r5, #28]
 8016bd0:	6862      	ldr	r2, [r4, #4]
 8016bd2:	68db      	ldr	r3, [r3, #12]
 8016bd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016bd8:	6021      	str	r1, [r4, #0]
 8016bda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016bde:	bd70      	pop	{r4, r5, r6, pc}
 8016be0:	0802ccfd 	.word	0x0802ccfd
 8016be4:	0802cd7d 	.word	0x0802cd7d

08016be8 <__multadd>:
 8016be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bec:	690d      	ldr	r5, [r1, #16]
 8016bee:	4607      	mov	r7, r0
 8016bf0:	460c      	mov	r4, r1
 8016bf2:	461e      	mov	r6, r3
 8016bf4:	f101 0c14 	add.w	ip, r1, #20
 8016bf8:	2000      	movs	r0, #0
 8016bfa:	f8dc 3000 	ldr.w	r3, [ip]
 8016bfe:	b299      	uxth	r1, r3
 8016c00:	fb02 6101 	mla	r1, r2, r1, r6
 8016c04:	0c1e      	lsrs	r6, r3, #16
 8016c06:	0c0b      	lsrs	r3, r1, #16
 8016c08:	fb02 3306 	mla	r3, r2, r6, r3
 8016c0c:	b289      	uxth	r1, r1
 8016c0e:	3001      	adds	r0, #1
 8016c10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016c14:	4285      	cmp	r5, r0
 8016c16:	f84c 1b04 	str.w	r1, [ip], #4
 8016c1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016c1e:	dcec      	bgt.n	8016bfa <__multadd+0x12>
 8016c20:	b30e      	cbz	r6, 8016c66 <__multadd+0x7e>
 8016c22:	68a3      	ldr	r3, [r4, #8]
 8016c24:	42ab      	cmp	r3, r5
 8016c26:	dc19      	bgt.n	8016c5c <__multadd+0x74>
 8016c28:	6861      	ldr	r1, [r4, #4]
 8016c2a:	4638      	mov	r0, r7
 8016c2c:	3101      	adds	r1, #1
 8016c2e:	f7ff ff79 	bl	8016b24 <_Balloc>
 8016c32:	4680      	mov	r8, r0
 8016c34:	b928      	cbnz	r0, 8016c42 <__multadd+0x5a>
 8016c36:	4602      	mov	r2, r0
 8016c38:	4b0c      	ldr	r3, [pc, #48]	; (8016c6c <__multadd+0x84>)
 8016c3a:	480d      	ldr	r0, [pc, #52]	; (8016c70 <__multadd+0x88>)
 8016c3c:	21ba      	movs	r1, #186	; 0xba
 8016c3e:	f002 fb1b 	bl	8019278 <__assert_func>
 8016c42:	6922      	ldr	r2, [r4, #16]
 8016c44:	3202      	adds	r2, #2
 8016c46:	f104 010c 	add.w	r1, r4, #12
 8016c4a:	0092      	lsls	r2, r2, #2
 8016c4c:	300c      	adds	r0, #12
 8016c4e:	f7ff f902 	bl	8015e56 <memcpy>
 8016c52:	4621      	mov	r1, r4
 8016c54:	4638      	mov	r0, r7
 8016c56:	f7ff ffa5 	bl	8016ba4 <_Bfree>
 8016c5a:	4644      	mov	r4, r8
 8016c5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016c60:	3501      	adds	r5, #1
 8016c62:	615e      	str	r6, [r3, #20]
 8016c64:	6125      	str	r5, [r4, #16]
 8016c66:	4620      	mov	r0, r4
 8016c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c6c:	0802cd6c 	.word	0x0802cd6c
 8016c70:	0802cd7d 	.word	0x0802cd7d

08016c74 <__s2b>:
 8016c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c78:	460c      	mov	r4, r1
 8016c7a:	4615      	mov	r5, r2
 8016c7c:	461f      	mov	r7, r3
 8016c7e:	2209      	movs	r2, #9
 8016c80:	3308      	adds	r3, #8
 8016c82:	4606      	mov	r6, r0
 8016c84:	fb93 f3f2 	sdiv	r3, r3, r2
 8016c88:	2100      	movs	r1, #0
 8016c8a:	2201      	movs	r2, #1
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	db09      	blt.n	8016ca4 <__s2b+0x30>
 8016c90:	4630      	mov	r0, r6
 8016c92:	f7ff ff47 	bl	8016b24 <_Balloc>
 8016c96:	b940      	cbnz	r0, 8016caa <__s2b+0x36>
 8016c98:	4602      	mov	r2, r0
 8016c9a:	4b19      	ldr	r3, [pc, #100]	; (8016d00 <__s2b+0x8c>)
 8016c9c:	4819      	ldr	r0, [pc, #100]	; (8016d04 <__s2b+0x90>)
 8016c9e:	21d3      	movs	r1, #211	; 0xd3
 8016ca0:	f002 faea 	bl	8019278 <__assert_func>
 8016ca4:	0052      	lsls	r2, r2, #1
 8016ca6:	3101      	adds	r1, #1
 8016ca8:	e7f0      	b.n	8016c8c <__s2b+0x18>
 8016caa:	9b08      	ldr	r3, [sp, #32]
 8016cac:	6143      	str	r3, [r0, #20]
 8016cae:	2d09      	cmp	r5, #9
 8016cb0:	f04f 0301 	mov.w	r3, #1
 8016cb4:	6103      	str	r3, [r0, #16]
 8016cb6:	dd16      	ble.n	8016ce6 <__s2b+0x72>
 8016cb8:	f104 0909 	add.w	r9, r4, #9
 8016cbc:	46c8      	mov	r8, r9
 8016cbe:	442c      	add	r4, r5
 8016cc0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016cc4:	4601      	mov	r1, r0
 8016cc6:	3b30      	subs	r3, #48	; 0x30
 8016cc8:	220a      	movs	r2, #10
 8016cca:	4630      	mov	r0, r6
 8016ccc:	f7ff ff8c 	bl	8016be8 <__multadd>
 8016cd0:	45a0      	cmp	r8, r4
 8016cd2:	d1f5      	bne.n	8016cc0 <__s2b+0x4c>
 8016cd4:	f1a5 0408 	sub.w	r4, r5, #8
 8016cd8:	444c      	add	r4, r9
 8016cda:	1b2d      	subs	r5, r5, r4
 8016cdc:	1963      	adds	r3, r4, r5
 8016cde:	42bb      	cmp	r3, r7
 8016ce0:	db04      	blt.n	8016cec <__s2b+0x78>
 8016ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ce6:	340a      	adds	r4, #10
 8016ce8:	2509      	movs	r5, #9
 8016cea:	e7f6      	b.n	8016cda <__s2b+0x66>
 8016cec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016cf0:	4601      	mov	r1, r0
 8016cf2:	3b30      	subs	r3, #48	; 0x30
 8016cf4:	220a      	movs	r2, #10
 8016cf6:	4630      	mov	r0, r6
 8016cf8:	f7ff ff76 	bl	8016be8 <__multadd>
 8016cfc:	e7ee      	b.n	8016cdc <__s2b+0x68>
 8016cfe:	bf00      	nop
 8016d00:	0802cd6c 	.word	0x0802cd6c
 8016d04:	0802cd7d 	.word	0x0802cd7d

08016d08 <__hi0bits>:
 8016d08:	0c03      	lsrs	r3, r0, #16
 8016d0a:	041b      	lsls	r3, r3, #16
 8016d0c:	b9d3      	cbnz	r3, 8016d44 <__hi0bits+0x3c>
 8016d0e:	0400      	lsls	r0, r0, #16
 8016d10:	2310      	movs	r3, #16
 8016d12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016d16:	bf04      	itt	eq
 8016d18:	0200      	lsleq	r0, r0, #8
 8016d1a:	3308      	addeq	r3, #8
 8016d1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016d20:	bf04      	itt	eq
 8016d22:	0100      	lsleq	r0, r0, #4
 8016d24:	3304      	addeq	r3, #4
 8016d26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016d2a:	bf04      	itt	eq
 8016d2c:	0080      	lsleq	r0, r0, #2
 8016d2e:	3302      	addeq	r3, #2
 8016d30:	2800      	cmp	r0, #0
 8016d32:	db05      	blt.n	8016d40 <__hi0bits+0x38>
 8016d34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016d38:	f103 0301 	add.w	r3, r3, #1
 8016d3c:	bf08      	it	eq
 8016d3e:	2320      	moveq	r3, #32
 8016d40:	4618      	mov	r0, r3
 8016d42:	4770      	bx	lr
 8016d44:	2300      	movs	r3, #0
 8016d46:	e7e4      	b.n	8016d12 <__hi0bits+0xa>

08016d48 <__lo0bits>:
 8016d48:	6803      	ldr	r3, [r0, #0]
 8016d4a:	f013 0207 	ands.w	r2, r3, #7
 8016d4e:	d00c      	beq.n	8016d6a <__lo0bits+0x22>
 8016d50:	07d9      	lsls	r1, r3, #31
 8016d52:	d422      	bmi.n	8016d9a <__lo0bits+0x52>
 8016d54:	079a      	lsls	r2, r3, #30
 8016d56:	bf49      	itett	mi
 8016d58:	085b      	lsrmi	r3, r3, #1
 8016d5a:	089b      	lsrpl	r3, r3, #2
 8016d5c:	6003      	strmi	r3, [r0, #0]
 8016d5e:	2201      	movmi	r2, #1
 8016d60:	bf5c      	itt	pl
 8016d62:	6003      	strpl	r3, [r0, #0]
 8016d64:	2202      	movpl	r2, #2
 8016d66:	4610      	mov	r0, r2
 8016d68:	4770      	bx	lr
 8016d6a:	b299      	uxth	r1, r3
 8016d6c:	b909      	cbnz	r1, 8016d72 <__lo0bits+0x2a>
 8016d6e:	0c1b      	lsrs	r3, r3, #16
 8016d70:	2210      	movs	r2, #16
 8016d72:	b2d9      	uxtb	r1, r3
 8016d74:	b909      	cbnz	r1, 8016d7a <__lo0bits+0x32>
 8016d76:	3208      	adds	r2, #8
 8016d78:	0a1b      	lsrs	r3, r3, #8
 8016d7a:	0719      	lsls	r1, r3, #28
 8016d7c:	bf04      	itt	eq
 8016d7e:	091b      	lsreq	r3, r3, #4
 8016d80:	3204      	addeq	r2, #4
 8016d82:	0799      	lsls	r1, r3, #30
 8016d84:	bf04      	itt	eq
 8016d86:	089b      	lsreq	r3, r3, #2
 8016d88:	3202      	addeq	r2, #2
 8016d8a:	07d9      	lsls	r1, r3, #31
 8016d8c:	d403      	bmi.n	8016d96 <__lo0bits+0x4e>
 8016d8e:	085b      	lsrs	r3, r3, #1
 8016d90:	f102 0201 	add.w	r2, r2, #1
 8016d94:	d003      	beq.n	8016d9e <__lo0bits+0x56>
 8016d96:	6003      	str	r3, [r0, #0]
 8016d98:	e7e5      	b.n	8016d66 <__lo0bits+0x1e>
 8016d9a:	2200      	movs	r2, #0
 8016d9c:	e7e3      	b.n	8016d66 <__lo0bits+0x1e>
 8016d9e:	2220      	movs	r2, #32
 8016da0:	e7e1      	b.n	8016d66 <__lo0bits+0x1e>
	...

08016da4 <__i2b>:
 8016da4:	b510      	push	{r4, lr}
 8016da6:	460c      	mov	r4, r1
 8016da8:	2101      	movs	r1, #1
 8016daa:	f7ff febb 	bl	8016b24 <_Balloc>
 8016dae:	4602      	mov	r2, r0
 8016db0:	b928      	cbnz	r0, 8016dbe <__i2b+0x1a>
 8016db2:	4b05      	ldr	r3, [pc, #20]	; (8016dc8 <__i2b+0x24>)
 8016db4:	4805      	ldr	r0, [pc, #20]	; (8016dcc <__i2b+0x28>)
 8016db6:	f240 1145 	movw	r1, #325	; 0x145
 8016dba:	f002 fa5d 	bl	8019278 <__assert_func>
 8016dbe:	2301      	movs	r3, #1
 8016dc0:	6144      	str	r4, [r0, #20]
 8016dc2:	6103      	str	r3, [r0, #16]
 8016dc4:	bd10      	pop	{r4, pc}
 8016dc6:	bf00      	nop
 8016dc8:	0802cd6c 	.word	0x0802cd6c
 8016dcc:	0802cd7d 	.word	0x0802cd7d

08016dd0 <__multiply>:
 8016dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dd4:	4691      	mov	r9, r2
 8016dd6:	690a      	ldr	r2, [r1, #16]
 8016dd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016ddc:	429a      	cmp	r2, r3
 8016dde:	bfb8      	it	lt
 8016de0:	460b      	movlt	r3, r1
 8016de2:	460c      	mov	r4, r1
 8016de4:	bfbc      	itt	lt
 8016de6:	464c      	movlt	r4, r9
 8016de8:	4699      	movlt	r9, r3
 8016dea:	6927      	ldr	r7, [r4, #16]
 8016dec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016df0:	68a3      	ldr	r3, [r4, #8]
 8016df2:	6861      	ldr	r1, [r4, #4]
 8016df4:	eb07 060a 	add.w	r6, r7, sl
 8016df8:	42b3      	cmp	r3, r6
 8016dfa:	b085      	sub	sp, #20
 8016dfc:	bfb8      	it	lt
 8016dfe:	3101      	addlt	r1, #1
 8016e00:	f7ff fe90 	bl	8016b24 <_Balloc>
 8016e04:	b930      	cbnz	r0, 8016e14 <__multiply+0x44>
 8016e06:	4602      	mov	r2, r0
 8016e08:	4b44      	ldr	r3, [pc, #272]	; (8016f1c <__multiply+0x14c>)
 8016e0a:	4845      	ldr	r0, [pc, #276]	; (8016f20 <__multiply+0x150>)
 8016e0c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8016e10:	f002 fa32 	bl	8019278 <__assert_func>
 8016e14:	f100 0514 	add.w	r5, r0, #20
 8016e18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016e1c:	462b      	mov	r3, r5
 8016e1e:	2200      	movs	r2, #0
 8016e20:	4543      	cmp	r3, r8
 8016e22:	d321      	bcc.n	8016e68 <__multiply+0x98>
 8016e24:	f104 0314 	add.w	r3, r4, #20
 8016e28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016e2c:	f109 0314 	add.w	r3, r9, #20
 8016e30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016e34:	9202      	str	r2, [sp, #8]
 8016e36:	1b3a      	subs	r2, r7, r4
 8016e38:	3a15      	subs	r2, #21
 8016e3a:	f022 0203 	bic.w	r2, r2, #3
 8016e3e:	3204      	adds	r2, #4
 8016e40:	f104 0115 	add.w	r1, r4, #21
 8016e44:	428f      	cmp	r7, r1
 8016e46:	bf38      	it	cc
 8016e48:	2204      	movcc	r2, #4
 8016e4a:	9201      	str	r2, [sp, #4]
 8016e4c:	9a02      	ldr	r2, [sp, #8]
 8016e4e:	9303      	str	r3, [sp, #12]
 8016e50:	429a      	cmp	r2, r3
 8016e52:	d80c      	bhi.n	8016e6e <__multiply+0x9e>
 8016e54:	2e00      	cmp	r6, #0
 8016e56:	dd03      	ble.n	8016e60 <__multiply+0x90>
 8016e58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d05b      	beq.n	8016f18 <__multiply+0x148>
 8016e60:	6106      	str	r6, [r0, #16]
 8016e62:	b005      	add	sp, #20
 8016e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e68:	f843 2b04 	str.w	r2, [r3], #4
 8016e6c:	e7d8      	b.n	8016e20 <__multiply+0x50>
 8016e6e:	f8b3 a000 	ldrh.w	sl, [r3]
 8016e72:	f1ba 0f00 	cmp.w	sl, #0
 8016e76:	d024      	beq.n	8016ec2 <__multiply+0xf2>
 8016e78:	f104 0e14 	add.w	lr, r4, #20
 8016e7c:	46a9      	mov	r9, r5
 8016e7e:	f04f 0c00 	mov.w	ip, #0
 8016e82:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016e86:	f8d9 1000 	ldr.w	r1, [r9]
 8016e8a:	fa1f fb82 	uxth.w	fp, r2
 8016e8e:	b289      	uxth	r1, r1
 8016e90:	fb0a 110b 	mla	r1, sl, fp, r1
 8016e94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016e98:	f8d9 2000 	ldr.w	r2, [r9]
 8016e9c:	4461      	add	r1, ip
 8016e9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016ea2:	fb0a c20b 	mla	r2, sl, fp, ip
 8016ea6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016eaa:	b289      	uxth	r1, r1
 8016eac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016eb0:	4577      	cmp	r7, lr
 8016eb2:	f849 1b04 	str.w	r1, [r9], #4
 8016eb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016eba:	d8e2      	bhi.n	8016e82 <__multiply+0xb2>
 8016ebc:	9a01      	ldr	r2, [sp, #4]
 8016ebe:	f845 c002 	str.w	ip, [r5, r2]
 8016ec2:	9a03      	ldr	r2, [sp, #12]
 8016ec4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016ec8:	3304      	adds	r3, #4
 8016eca:	f1b9 0f00 	cmp.w	r9, #0
 8016ece:	d021      	beq.n	8016f14 <__multiply+0x144>
 8016ed0:	6829      	ldr	r1, [r5, #0]
 8016ed2:	f104 0c14 	add.w	ip, r4, #20
 8016ed6:	46ae      	mov	lr, r5
 8016ed8:	f04f 0a00 	mov.w	sl, #0
 8016edc:	f8bc b000 	ldrh.w	fp, [ip]
 8016ee0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016ee4:	fb09 220b 	mla	r2, r9, fp, r2
 8016ee8:	4452      	add	r2, sl
 8016eea:	b289      	uxth	r1, r1
 8016eec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016ef0:	f84e 1b04 	str.w	r1, [lr], #4
 8016ef4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016ef8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016efc:	f8be 1000 	ldrh.w	r1, [lr]
 8016f00:	fb09 110a 	mla	r1, r9, sl, r1
 8016f04:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8016f08:	4567      	cmp	r7, ip
 8016f0a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016f0e:	d8e5      	bhi.n	8016edc <__multiply+0x10c>
 8016f10:	9a01      	ldr	r2, [sp, #4]
 8016f12:	50a9      	str	r1, [r5, r2]
 8016f14:	3504      	adds	r5, #4
 8016f16:	e799      	b.n	8016e4c <__multiply+0x7c>
 8016f18:	3e01      	subs	r6, #1
 8016f1a:	e79b      	b.n	8016e54 <__multiply+0x84>
 8016f1c:	0802cd6c 	.word	0x0802cd6c
 8016f20:	0802cd7d 	.word	0x0802cd7d

08016f24 <__pow5mult>:
 8016f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f28:	4615      	mov	r5, r2
 8016f2a:	f012 0203 	ands.w	r2, r2, #3
 8016f2e:	4606      	mov	r6, r0
 8016f30:	460f      	mov	r7, r1
 8016f32:	d007      	beq.n	8016f44 <__pow5mult+0x20>
 8016f34:	4c25      	ldr	r4, [pc, #148]	; (8016fcc <__pow5mult+0xa8>)
 8016f36:	3a01      	subs	r2, #1
 8016f38:	2300      	movs	r3, #0
 8016f3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016f3e:	f7ff fe53 	bl	8016be8 <__multadd>
 8016f42:	4607      	mov	r7, r0
 8016f44:	10ad      	asrs	r5, r5, #2
 8016f46:	d03d      	beq.n	8016fc4 <__pow5mult+0xa0>
 8016f48:	69f4      	ldr	r4, [r6, #28]
 8016f4a:	b97c      	cbnz	r4, 8016f6c <__pow5mult+0x48>
 8016f4c:	2010      	movs	r0, #16
 8016f4e:	f7fd f9ef 	bl	8014330 <malloc>
 8016f52:	4602      	mov	r2, r0
 8016f54:	61f0      	str	r0, [r6, #28]
 8016f56:	b928      	cbnz	r0, 8016f64 <__pow5mult+0x40>
 8016f58:	4b1d      	ldr	r3, [pc, #116]	; (8016fd0 <__pow5mult+0xac>)
 8016f5a:	481e      	ldr	r0, [pc, #120]	; (8016fd4 <__pow5mult+0xb0>)
 8016f5c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016f60:	f002 f98a 	bl	8019278 <__assert_func>
 8016f64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016f68:	6004      	str	r4, [r0, #0]
 8016f6a:	60c4      	str	r4, [r0, #12]
 8016f6c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016f70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016f74:	b94c      	cbnz	r4, 8016f8a <__pow5mult+0x66>
 8016f76:	f240 2171 	movw	r1, #625	; 0x271
 8016f7a:	4630      	mov	r0, r6
 8016f7c:	f7ff ff12 	bl	8016da4 <__i2b>
 8016f80:	2300      	movs	r3, #0
 8016f82:	f8c8 0008 	str.w	r0, [r8, #8]
 8016f86:	4604      	mov	r4, r0
 8016f88:	6003      	str	r3, [r0, #0]
 8016f8a:	f04f 0900 	mov.w	r9, #0
 8016f8e:	07eb      	lsls	r3, r5, #31
 8016f90:	d50a      	bpl.n	8016fa8 <__pow5mult+0x84>
 8016f92:	4639      	mov	r1, r7
 8016f94:	4622      	mov	r2, r4
 8016f96:	4630      	mov	r0, r6
 8016f98:	f7ff ff1a 	bl	8016dd0 <__multiply>
 8016f9c:	4639      	mov	r1, r7
 8016f9e:	4680      	mov	r8, r0
 8016fa0:	4630      	mov	r0, r6
 8016fa2:	f7ff fdff 	bl	8016ba4 <_Bfree>
 8016fa6:	4647      	mov	r7, r8
 8016fa8:	106d      	asrs	r5, r5, #1
 8016faa:	d00b      	beq.n	8016fc4 <__pow5mult+0xa0>
 8016fac:	6820      	ldr	r0, [r4, #0]
 8016fae:	b938      	cbnz	r0, 8016fc0 <__pow5mult+0x9c>
 8016fb0:	4622      	mov	r2, r4
 8016fb2:	4621      	mov	r1, r4
 8016fb4:	4630      	mov	r0, r6
 8016fb6:	f7ff ff0b 	bl	8016dd0 <__multiply>
 8016fba:	6020      	str	r0, [r4, #0]
 8016fbc:	f8c0 9000 	str.w	r9, [r0]
 8016fc0:	4604      	mov	r4, r0
 8016fc2:	e7e4      	b.n	8016f8e <__pow5mult+0x6a>
 8016fc4:	4638      	mov	r0, r7
 8016fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fca:	bf00      	nop
 8016fcc:	0802cec8 	.word	0x0802cec8
 8016fd0:	0802ccfd 	.word	0x0802ccfd
 8016fd4:	0802cd7d 	.word	0x0802cd7d

08016fd8 <__lshift>:
 8016fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fdc:	460c      	mov	r4, r1
 8016fde:	6849      	ldr	r1, [r1, #4]
 8016fe0:	6923      	ldr	r3, [r4, #16]
 8016fe2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016fe6:	68a3      	ldr	r3, [r4, #8]
 8016fe8:	4607      	mov	r7, r0
 8016fea:	4691      	mov	r9, r2
 8016fec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016ff0:	f108 0601 	add.w	r6, r8, #1
 8016ff4:	42b3      	cmp	r3, r6
 8016ff6:	db0b      	blt.n	8017010 <__lshift+0x38>
 8016ff8:	4638      	mov	r0, r7
 8016ffa:	f7ff fd93 	bl	8016b24 <_Balloc>
 8016ffe:	4605      	mov	r5, r0
 8017000:	b948      	cbnz	r0, 8017016 <__lshift+0x3e>
 8017002:	4602      	mov	r2, r0
 8017004:	4b28      	ldr	r3, [pc, #160]	; (80170a8 <__lshift+0xd0>)
 8017006:	4829      	ldr	r0, [pc, #164]	; (80170ac <__lshift+0xd4>)
 8017008:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801700c:	f002 f934 	bl	8019278 <__assert_func>
 8017010:	3101      	adds	r1, #1
 8017012:	005b      	lsls	r3, r3, #1
 8017014:	e7ee      	b.n	8016ff4 <__lshift+0x1c>
 8017016:	2300      	movs	r3, #0
 8017018:	f100 0114 	add.w	r1, r0, #20
 801701c:	f100 0210 	add.w	r2, r0, #16
 8017020:	4618      	mov	r0, r3
 8017022:	4553      	cmp	r3, sl
 8017024:	db33      	blt.n	801708e <__lshift+0xb6>
 8017026:	6920      	ldr	r0, [r4, #16]
 8017028:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801702c:	f104 0314 	add.w	r3, r4, #20
 8017030:	f019 091f 	ands.w	r9, r9, #31
 8017034:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017038:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801703c:	d02b      	beq.n	8017096 <__lshift+0xbe>
 801703e:	f1c9 0e20 	rsb	lr, r9, #32
 8017042:	468a      	mov	sl, r1
 8017044:	2200      	movs	r2, #0
 8017046:	6818      	ldr	r0, [r3, #0]
 8017048:	fa00 f009 	lsl.w	r0, r0, r9
 801704c:	4310      	orrs	r0, r2
 801704e:	f84a 0b04 	str.w	r0, [sl], #4
 8017052:	f853 2b04 	ldr.w	r2, [r3], #4
 8017056:	459c      	cmp	ip, r3
 8017058:	fa22 f20e 	lsr.w	r2, r2, lr
 801705c:	d8f3      	bhi.n	8017046 <__lshift+0x6e>
 801705e:	ebac 0304 	sub.w	r3, ip, r4
 8017062:	3b15      	subs	r3, #21
 8017064:	f023 0303 	bic.w	r3, r3, #3
 8017068:	3304      	adds	r3, #4
 801706a:	f104 0015 	add.w	r0, r4, #21
 801706e:	4584      	cmp	ip, r0
 8017070:	bf38      	it	cc
 8017072:	2304      	movcc	r3, #4
 8017074:	50ca      	str	r2, [r1, r3]
 8017076:	b10a      	cbz	r2, 801707c <__lshift+0xa4>
 8017078:	f108 0602 	add.w	r6, r8, #2
 801707c:	3e01      	subs	r6, #1
 801707e:	4638      	mov	r0, r7
 8017080:	612e      	str	r6, [r5, #16]
 8017082:	4621      	mov	r1, r4
 8017084:	f7ff fd8e 	bl	8016ba4 <_Bfree>
 8017088:	4628      	mov	r0, r5
 801708a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801708e:	f842 0f04 	str.w	r0, [r2, #4]!
 8017092:	3301      	adds	r3, #1
 8017094:	e7c5      	b.n	8017022 <__lshift+0x4a>
 8017096:	3904      	subs	r1, #4
 8017098:	f853 2b04 	ldr.w	r2, [r3], #4
 801709c:	f841 2f04 	str.w	r2, [r1, #4]!
 80170a0:	459c      	cmp	ip, r3
 80170a2:	d8f9      	bhi.n	8017098 <__lshift+0xc0>
 80170a4:	e7ea      	b.n	801707c <__lshift+0xa4>
 80170a6:	bf00      	nop
 80170a8:	0802cd6c 	.word	0x0802cd6c
 80170ac:	0802cd7d 	.word	0x0802cd7d

080170b0 <__mcmp>:
 80170b0:	b530      	push	{r4, r5, lr}
 80170b2:	6902      	ldr	r2, [r0, #16]
 80170b4:	690c      	ldr	r4, [r1, #16]
 80170b6:	1b12      	subs	r2, r2, r4
 80170b8:	d10e      	bne.n	80170d8 <__mcmp+0x28>
 80170ba:	f100 0314 	add.w	r3, r0, #20
 80170be:	3114      	adds	r1, #20
 80170c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80170c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80170c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80170cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80170d0:	42a5      	cmp	r5, r4
 80170d2:	d003      	beq.n	80170dc <__mcmp+0x2c>
 80170d4:	d305      	bcc.n	80170e2 <__mcmp+0x32>
 80170d6:	2201      	movs	r2, #1
 80170d8:	4610      	mov	r0, r2
 80170da:	bd30      	pop	{r4, r5, pc}
 80170dc:	4283      	cmp	r3, r0
 80170de:	d3f3      	bcc.n	80170c8 <__mcmp+0x18>
 80170e0:	e7fa      	b.n	80170d8 <__mcmp+0x28>
 80170e2:	f04f 32ff 	mov.w	r2, #4294967295
 80170e6:	e7f7      	b.n	80170d8 <__mcmp+0x28>

080170e8 <__mdiff>:
 80170e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170ec:	460c      	mov	r4, r1
 80170ee:	4606      	mov	r6, r0
 80170f0:	4611      	mov	r1, r2
 80170f2:	4620      	mov	r0, r4
 80170f4:	4690      	mov	r8, r2
 80170f6:	f7ff ffdb 	bl	80170b0 <__mcmp>
 80170fa:	1e05      	subs	r5, r0, #0
 80170fc:	d110      	bne.n	8017120 <__mdiff+0x38>
 80170fe:	4629      	mov	r1, r5
 8017100:	4630      	mov	r0, r6
 8017102:	f7ff fd0f 	bl	8016b24 <_Balloc>
 8017106:	b930      	cbnz	r0, 8017116 <__mdiff+0x2e>
 8017108:	4b3a      	ldr	r3, [pc, #232]	; (80171f4 <__mdiff+0x10c>)
 801710a:	4602      	mov	r2, r0
 801710c:	f240 2137 	movw	r1, #567	; 0x237
 8017110:	4839      	ldr	r0, [pc, #228]	; (80171f8 <__mdiff+0x110>)
 8017112:	f002 f8b1 	bl	8019278 <__assert_func>
 8017116:	2301      	movs	r3, #1
 8017118:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801711c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017120:	bfa4      	itt	ge
 8017122:	4643      	movge	r3, r8
 8017124:	46a0      	movge	r8, r4
 8017126:	4630      	mov	r0, r6
 8017128:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801712c:	bfa6      	itte	ge
 801712e:	461c      	movge	r4, r3
 8017130:	2500      	movge	r5, #0
 8017132:	2501      	movlt	r5, #1
 8017134:	f7ff fcf6 	bl	8016b24 <_Balloc>
 8017138:	b920      	cbnz	r0, 8017144 <__mdiff+0x5c>
 801713a:	4b2e      	ldr	r3, [pc, #184]	; (80171f4 <__mdiff+0x10c>)
 801713c:	4602      	mov	r2, r0
 801713e:	f240 2145 	movw	r1, #581	; 0x245
 8017142:	e7e5      	b.n	8017110 <__mdiff+0x28>
 8017144:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017148:	6926      	ldr	r6, [r4, #16]
 801714a:	60c5      	str	r5, [r0, #12]
 801714c:	f104 0914 	add.w	r9, r4, #20
 8017150:	f108 0514 	add.w	r5, r8, #20
 8017154:	f100 0e14 	add.w	lr, r0, #20
 8017158:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801715c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017160:	f108 0210 	add.w	r2, r8, #16
 8017164:	46f2      	mov	sl, lr
 8017166:	2100      	movs	r1, #0
 8017168:	f859 3b04 	ldr.w	r3, [r9], #4
 801716c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017170:	fa11 f88b 	uxtah	r8, r1, fp
 8017174:	b299      	uxth	r1, r3
 8017176:	0c1b      	lsrs	r3, r3, #16
 8017178:	eba8 0801 	sub.w	r8, r8, r1
 801717c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017180:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017184:	fa1f f888 	uxth.w	r8, r8
 8017188:	1419      	asrs	r1, r3, #16
 801718a:	454e      	cmp	r6, r9
 801718c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017190:	f84a 3b04 	str.w	r3, [sl], #4
 8017194:	d8e8      	bhi.n	8017168 <__mdiff+0x80>
 8017196:	1b33      	subs	r3, r6, r4
 8017198:	3b15      	subs	r3, #21
 801719a:	f023 0303 	bic.w	r3, r3, #3
 801719e:	3304      	adds	r3, #4
 80171a0:	3415      	adds	r4, #21
 80171a2:	42a6      	cmp	r6, r4
 80171a4:	bf38      	it	cc
 80171a6:	2304      	movcc	r3, #4
 80171a8:	441d      	add	r5, r3
 80171aa:	4473      	add	r3, lr
 80171ac:	469e      	mov	lr, r3
 80171ae:	462e      	mov	r6, r5
 80171b0:	4566      	cmp	r6, ip
 80171b2:	d30e      	bcc.n	80171d2 <__mdiff+0xea>
 80171b4:	f10c 0203 	add.w	r2, ip, #3
 80171b8:	1b52      	subs	r2, r2, r5
 80171ba:	f022 0203 	bic.w	r2, r2, #3
 80171be:	3d03      	subs	r5, #3
 80171c0:	45ac      	cmp	ip, r5
 80171c2:	bf38      	it	cc
 80171c4:	2200      	movcc	r2, #0
 80171c6:	4413      	add	r3, r2
 80171c8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80171cc:	b17a      	cbz	r2, 80171ee <__mdiff+0x106>
 80171ce:	6107      	str	r7, [r0, #16]
 80171d0:	e7a4      	b.n	801711c <__mdiff+0x34>
 80171d2:	f856 8b04 	ldr.w	r8, [r6], #4
 80171d6:	fa11 f288 	uxtah	r2, r1, r8
 80171da:	1414      	asrs	r4, r2, #16
 80171dc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80171e0:	b292      	uxth	r2, r2
 80171e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80171e6:	f84e 2b04 	str.w	r2, [lr], #4
 80171ea:	1421      	asrs	r1, r4, #16
 80171ec:	e7e0      	b.n	80171b0 <__mdiff+0xc8>
 80171ee:	3f01      	subs	r7, #1
 80171f0:	e7ea      	b.n	80171c8 <__mdiff+0xe0>
 80171f2:	bf00      	nop
 80171f4:	0802cd6c 	.word	0x0802cd6c
 80171f8:	0802cd7d 	.word	0x0802cd7d

080171fc <__ulp>:
 80171fc:	b082      	sub	sp, #8
 80171fe:	ed8d 0b00 	vstr	d0, [sp]
 8017202:	9a01      	ldr	r2, [sp, #4]
 8017204:	4b0f      	ldr	r3, [pc, #60]	; (8017244 <__ulp+0x48>)
 8017206:	4013      	ands	r3, r2
 8017208:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801720c:	2b00      	cmp	r3, #0
 801720e:	dc08      	bgt.n	8017222 <__ulp+0x26>
 8017210:	425b      	negs	r3, r3
 8017212:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8017216:	ea4f 5223 	mov.w	r2, r3, asr #20
 801721a:	da04      	bge.n	8017226 <__ulp+0x2a>
 801721c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017220:	4113      	asrs	r3, r2
 8017222:	2200      	movs	r2, #0
 8017224:	e008      	b.n	8017238 <__ulp+0x3c>
 8017226:	f1a2 0314 	sub.w	r3, r2, #20
 801722a:	2b1e      	cmp	r3, #30
 801722c:	bfda      	itte	le
 801722e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8017232:	40da      	lsrle	r2, r3
 8017234:	2201      	movgt	r2, #1
 8017236:	2300      	movs	r3, #0
 8017238:	4619      	mov	r1, r3
 801723a:	4610      	mov	r0, r2
 801723c:	ec41 0b10 	vmov	d0, r0, r1
 8017240:	b002      	add	sp, #8
 8017242:	4770      	bx	lr
 8017244:	7ff00000 	.word	0x7ff00000

08017248 <__b2d>:
 8017248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801724c:	6906      	ldr	r6, [r0, #16]
 801724e:	f100 0814 	add.w	r8, r0, #20
 8017252:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017256:	1f37      	subs	r7, r6, #4
 8017258:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801725c:	4610      	mov	r0, r2
 801725e:	f7ff fd53 	bl	8016d08 <__hi0bits>
 8017262:	f1c0 0320 	rsb	r3, r0, #32
 8017266:	280a      	cmp	r0, #10
 8017268:	600b      	str	r3, [r1, #0]
 801726a:	491b      	ldr	r1, [pc, #108]	; (80172d8 <__b2d+0x90>)
 801726c:	dc15      	bgt.n	801729a <__b2d+0x52>
 801726e:	f1c0 0c0b 	rsb	ip, r0, #11
 8017272:	fa22 f30c 	lsr.w	r3, r2, ip
 8017276:	45b8      	cmp	r8, r7
 8017278:	ea43 0501 	orr.w	r5, r3, r1
 801727c:	bf34      	ite	cc
 801727e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017282:	2300      	movcs	r3, #0
 8017284:	3015      	adds	r0, #21
 8017286:	fa02 f000 	lsl.w	r0, r2, r0
 801728a:	fa23 f30c 	lsr.w	r3, r3, ip
 801728e:	4303      	orrs	r3, r0
 8017290:	461c      	mov	r4, r3
 8017292:	ec45 4b10 	vmov	d0, r4, r5
 8017296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801729a:	45b8      	cmp	r8, r7
 801729c:	bf3a      	itte	cc
 801729e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80172a2:	f1a6 0708 	subcc.w	r7, r6, #8
 80172a6:	2300      	movcs	r3, #0
 80172a8:	380b      	subs	r0, #11
 80172aa:	d012      	beq.n	80172d2 <__b2d+0x8a>
 80172ac:	f1c0 0120 	rsb	r1, r0, #32
 80172b0:	fa23 f401 	lsr.w	r4, r3, r1
 80172b4:	4082      	lsls	r2, r0
 80172b6:	4322      	orrs	r2, r4
 80172b8:	4547      	cmp	r7, r8
 80172ba:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80172be:	bf8c      	ite	hi
 80172c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80172c4:	2200      	movls	r2, #0
 80172c6:	4083      	lsls	r3, r0
 80172c8:	40ca      	lsrs	r2, r1
 80172ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80172ce:	4313      	orrs	r3, r2
 80172d0:	e7de      	b.n	8017290 <__b2d+0x48>
 80172d2:	ea42 0501 	orr.w	r5, r2, r1
 80172d6:	e7db      	b.n	8017290 <__b2d+0x48>
 80172d8:	3ff00000 	.word	0x3ff00000

080172dc <__d2b>:
 80172dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80172e0:	460f      	mov	r7, r1
 80172e2:	2101      	movs	r1, #1
 80172e4:	ec59 8b10 	vmov	r8, r9, d0
 80172e8:	4616      	mov	r6, r2
 80172ea:	f7ff fc1b 	bl	8016b24 <_Balloc>
 80172ee:	4604      	mov	r4, r0
 80172f0:	b930      	cbnz	r0, 8017300 <__d2b+0x24>
 80172f2:	4602      	mov	r2, r0
 80172f4:	4b24      	ldr	r3, [pc, #144]	; (8017388 <__d2b+0xac>)
 80172f6:	4825      	ldr	r0, [pc, #148]	; (801738c <__d2b+0xb0>)
 80172f8:	f240 310f 	movw	r1, #783	; 0x30f
 80172fc:	f001 ffbc 	bl	8019278 <__assert_func>
 8017300:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017304:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017308:	bb2d      	cbnz	r5, 8017356 <__d2b+0x7a>
 801730a:	9301      	str	r3, [sp, #4]
 801730c:	f1b8 0300 	subs.w	r3, r8, #0
 8017310:	d026      	beq.n	8017360 <__d2b+0x84>
 8017312:	4668      	mov	r0, sp
 8017314:	9300      	str	r3, [sp, #0]
 8017316:	f7ff fd17 	bl	8016d48 <__lo0bits>
 801731a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801731e:	b1e8      	cbz	r0, 801735c <__d2b+0x80>
 8017320:	f1c0 0320 	rsb	r3, r0, #32
 8017324:	fa02 f303 	lsl.w	r3, r2, r3
 8017328:	430b      	orrs	r3, r1
 801732a:	40c2      	lsrs	r2, r0
 801732c:	6163      	str	r3, [r4, #20]
 801732e:	9201      	str	r2, [sp, #4]
 8017330:	9b01      	ldr	r3, [sp, #4]
 8017332:	61a3      	str	r3, [r4, #24]
 8017334:	2b00      	cmp	r3, #0
 8017336:	bf14      	ite	ne
 8017338:	2202      	movne	r2, #2
 801733a:	2201      	moveq	r2, #1
 801733c:	6122      	str	r2, [r4, #16]
 801733e:	b1bd      	cbz	r5, 8017370 <__d2b+0x94>
 8017340:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017344:	4405      	add	r5, r0
 8017346:	603d      	str	r5, [r7, #0]
 8017348:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801734c:	6030      	str	r0, [r6, #0]
 801734e:	4620      	mov	r0, r4
 8017350:	b003      	add	sp, #12
 8017352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801735a:	e7d6      	b.n	801730a <__d2b+0x2e>
 801735c:	6161      	str	r1, [r4, #20]
 801735e:	e7e7      	b.n	8017330 <__d2b+0x54>
 8017360:	a801      	add	r0, sp, #4
 8017362:	f7ff fcf1 	bl	8016d48 <__lo0bits>
 8017366:	9b01      	ldr	r3, [sp, #4]
 8017368:	6163      	str	r3, [r4, #20]
 801736a:	3020      	adds	r0, #32
 801736c:	2201      	movs	r2, #1
 801736e:	e7e5      	b.n	801733c <__d2b+0x60>
 8017370:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017374:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017378:	6038      	str	r0, [r7, #0]
 801737a:	6918      	ldr	r0, [r3, #16]
 801737c:	f7ff fcc4 	bl	8016d08 <__hi0bits>
 8017380:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017384:	e7e2      	b.n	801734c <__d2b+0x70>
 8017386:	bf00      	nop
 8017388:	0802cd6c 	.word	0x0802cd6c
 801738c:	0802cd7d 	.word	0x0802cd7d

08017390 <__ratio>:
 8017390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017394:	4688      	mov	r8, r1
 8017396:	4669      	mov	r1, sp
 8017398:	4681      	mov	r9, r0
 801739a:	f7ff ff55 	bl	8017248 <__b2d>
 801739e:	a901      	add	r1, sp, #4
 80173a0:	4640      	mov	r0, r8
 80173a2:	ec55 4b10 	vmov	r4, r5, d0
 80173a6:	ee10 aa10 	vmov	sl, s0
 80173aa:	f7ff ff4d 	bl	8017248 <__b2d>
 80173ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80173b2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80173b6:	1ad2      	subs	r2, r2, r3
 80173b8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80173bc:	1a5b      	subs	r3, r3, r1
 80173be:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80173c2:	ec57 6b10 	vmov	r6, r7, d0
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	bfd6      	itet	le
 80173ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80173ce:	462a      	movgt	r2, r5
 80173d0:	463a      	movle	r2, r7
 80173d2:	46ab      	mov	fp, r5
 80173d4:	bfd6      	itet	le
 80173d6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80173da:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80173de:	ee00 3a90 	vmovle	s1, r3
 80173e2:	ec4b ab17 	vmov	d7, sl, fp
 80173e6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80173ea:	b003      	add	sp, #12
 80173ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080173f0 <__copybits>:
 80173f0:	3901      	subs	r1, #1
 80173f2:	b570      	push	{r4, r5, r6, lr}
 80173f4:	1149      	asrs	r1, r1, #5
 80173f6:	6914      	ldr	r4, [r2, #16]
 80173f8:	3101      	adds	r1, #1
 80173fa:	f102 0314 	add.w	r3, r2, #20
 80173fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017402:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017406:	1f05      	subs	r5, r0, #4
 8017408:	42a3      	cmp	r3, r4
 801740a:	d30c      	bcc.n	8017426 <__copybits+0x36>
 801740c:	1aa3      	subs	r3, r4, r2
 801740e:	3b11      	subs	r3, #17
 8017410:	f023 0303 	bic.w	r3, r3, #3
 8017414:	3211      	adds	r2, #17
 8017416:	42a2      	cmp	r2, r4
 8017418:	bf88      	it	hi
 801741a:	2300      	movhi	r3, #0
 801741c:	4418      	add	r0, r3
 801741e:	2300      	movs	r3, #0
 8017420:	4288      	cmp	r0, r1
 8017422:	d305      	bcc.n	8017430 <__copybits+0x40>
 8017424:	bd70      	pop	{r4, r5, r6, pc}
 8017426:	f853 6b04 	ldr.w	r6, [r3], #4
 801742a:	f845 6f04 	str.w	r6, [r5, #4]!
 801742e:	e7eb      	b.n	8017408 <__copybits+0x18>
 8017430:	f840 3b04 	str.w	r3, [r0], #4
 8017434:	e7f4      	b.n	8017420 <__copybits+0x30>

08017436 <__any_on>:
 8017436:	f100 0214 	add.w	r2, r0, #20
 801743a:	6900      	ldr	r0, [r0, #16]
 801743c:	114b      	asrs	r3, r1, #5
 801743e:	4298      	cmp	r0, r3
 8017440:	b510      	push	{r4, lr}
 8017442:	db11      	blt.n	8017468 <__any_on+0x32>
 8017444:	dd0a      	ble.n	801745c <__any_on+0x26>
 8017446:	f011 011f 	ands.w	r1, r1, #31
 801744a:	d007      	beq.n	801745c <__any_on+0x26>
 801744c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017450:	fa24 f001 	lsr.w	r0, r4, r1
 8017454:	fa00 f101 	lsl.w	r1, r0, r1
 8017458:	428c      	cmp	r4, r1
 801745a:	d10b      	bne.n	8017474 <__any_on+0x3e>
 801745c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017460:	4293      	cmp	r3, r2
 8017462:	d803      	bhi.n	801746c <__any_on+0x36>
 8017464:	2000      	movs	r0, #0
 8017466:	bd10      	pop	{r4, pc}
 8017468:	4603      	mov	r3, r0
 801746a:	e7f7      	b.n	801745c <__any_on+0x26>
 801746c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017470:	2900      	cmp	r1, #0
 8017472:	d0f5      	beq.n	8017460 <__any_on+0x2a>
 8017474:	2001      	movs	r0, #1
 8017476:	e7f6      	b.n	8017466 <__any_on+0x30>

08017478 <sulp>:
 8017478:	b570      	push	{r4, r5, r6, lr}
 801747a:	4604      	mov	r4, r0
 801747c:	460d      	mov	r5, r1
 801747e:	4616      	mov	r6, r2
 8017480:	ec45 4b10 	vmov	d0, r4, r5
 8017484:	f7ff feba 	bl	80171fc <__ulp>
 8017488:	b17e      	cbz	r6, 80174aa <sulp+0x32>
 801748a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801748e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017492:	2b00      	cmp	r3, #0
 8017494:	dd09      	ble.n	80174aa <sulp+0x32>
 8017496:	051b      	lsls	r3, r3, #20
 8017498:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801749c:	2000      	movs	r0, #0
 801749e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80174a2:	ec41 0b17 	vmov	d7, r0, r1
 80174a6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80174aa:	bd70      	pop	{r4, r5, r6, pc}
 80174ac:	0000      	movs	r0, r0
	...

080174b0 <_strtod_l>:
 80174b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174b4:	ed2d 8b0e 	vpush	{d8-d14}
 80174b8:	b097      	sub	sp, #92	; 0x5c
 80174ba:	4604      	mov	r4, r0
 80174bc:	920d      	str	r2, [sp, #52]	; 0x34
 80174be:	2200      	movs	r2, #0
 80174c0:	9212      	str	r2, [sp, #72]	; 0x48
 80174c2:	468a      	mov	sl, r1
 80174c4:	f04f 0800 	mov.w	r8, #0
 80174c8:	f04f 0900 	mov.w	r9, #0
 80174cc:	460a      	mov	r2, r1
 80174ce:	9211      	str	r2, [sp, #68]	; 0x44
 80174d0:	7811      	ldrb	r1, [r2, #0]
 80174d2:	292b      	cmp	r1, #43	; 0x2b
 80174d4:	d04c      	beq.n	8017570 <_strtod_l+0xc0>
 80174d6:	d839      	bhi.n	801754c <_strtod_l+0x9c>
 80174d8:	290d      	cmp	r1, #13
 80174da:	d833      	bhi.n	8017544 <_strtod_l+0x94>
 80174dc:	2908      	cmp	r1, #8
 80174de:	d833      	bhi.n	8017548 <_strtod_l+0x98>
 80174e0:	2900      	cmp	r1, #0
 80174e2:	d03c      	beq.n	801755e <_strtod_l+0xae>
 80174e4:	2200      	movs	r2, #0
 80174e6:	9208      	str	r2, [sp, #32]
 80174e8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80174ea:	7832      	ldrb	r2, [r6, #0]
 80174ec:	2a30      	cmp	r2, #48	; 0x30
 80174ee:	f040 80b8 	bne.w	8017662 <_strtod_l+0x1b2>
 80174f2:	7872      	ldrb	r2, [r6, #1]
 80174f4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80174f8:	2a58      	cmp	r2, #88	; 0x58
 80174fa:	d170      	bne.n	80175de <_strtod_l+0x12e>
 80174fc:	9302      	str	r3, [sp, #8]
 80174fe:	9b08      	ldr	r3, [sp, #32]
 8017500:	9301      	str	r3, [sp, #4]
 8017502:	ab12      	add	r3, sp, #72	; 0x48
 8017504:	9300      	str	r3, [sp, #0]
 8017506:	4a91      	ldr	r2, [pc, #580]	; (801774c <_strtod_l+0x29c>)
 8017508:	ab13      	add	r3, sp, #76	; 0x4c
 801750a:	a911      	add	r1, sp, #68	; 0x44
 801750c:	4620      	mov	r0, r4
 801750e:	f001 ff4f 	bl	80193b0 <__gethex>
 8017512:	f010 070f 	ands.w	r7, r0, #15
 8017516:	4605      	mov	r5, r0
 8017518:	d005      	beq.n	8017526 <_strtod_l+0x76>
 801751a:	2f06      	cmp	r7, #6
 801751c:	d12a      	bne.n	8017574 <_strtod_l+0xc4>
 801751e:	3601      	adds	r6, #1
 8017520:	2300      	movs	r3, #0
 8017522:	9611      	str	r6, [sp, #68]	; 0x44
 8017524:	9308      	str	r3, [sp, #32]
 8017526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017528:	2b00      	cmp	r3, #0
 801752a:	f040 8555 	bne.w	8017fd8 <_strtod_l+0xb28>
 801752e:	9b08      	ldr	r3, [sp, #32]
 8017530:	ec49 8b10 	vmov	d0, r8, r9
 8017534:	b1cb      	cbz	r3, 801756a <_strtod_l+0xba>
 8017536:	eeb1 0b40 	vneg.f64	d0, d0
 801753a:	b017      	add	sp, #92	; 0x5c
 801753c:	ecbd 8b0e 	vpop	{d8-d14}
 8017540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017544:	2920      	cmp	r1, #32
 8017546:	d1cd      	bne.n	80174e4 <_strtod_l+0x34>
 8017548:	3201      	adds	r2, #1
 801754a:	e7c0      	b.n	80174ce <_strtod_l+0x1e>
 801754c:	292d      	cmp	r1, #45	; 0x2d
 801754e:	d1c9      	bne.n	80174e4 <_strtod_l+0x34>
 8017550:	2101      	movs	r1, #1
 8017552:	9108      	str	r1, [sp, #32]
 8017554:	1c51      	adds	r1, r2, #1
 8017556:	9111      	str	r1, [sp, #68]	; 0x44
 8017558:	7852      	ldrb	r2, [r2, #1]
 801755a:	2a00      	cmp	r2, #0
 801755c:	d1c4      	bne.n	80174e8 <_strtod_l+0x38>
 801755e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017560:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8017564:	2b00      	cmp	r3, #0
 8017566:	f040 8535 	bne.w	8017fd4 <_strtod_l+0xb24>
 801756a:	ec49 8b10 	vmov	d0, r8, r9
 801756e:	e7e4      	b.n	801753a <_strtod_l+0x8a>
 8017570:	2100      	movs	r1, #0
 8017572:	e7ee      	b.n	8017552 <_strtod_l+0xa2>
 8017574:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017576:	b13a      	cbz	r2, 8017588 <_strtod_l+0xd8>
 8017578:	2135      	movs	r1, #53	; 0x35
 801757a:	a814      	add	r0, sp, #80	; 0x50
 801757c:	f7ff ff38 	bl	80173f0 <__copybits>
 8017580:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017582:	4620      	mov	r0, r4
 8017584:	f7ff fb0e 	bl	8016ba4 <_Bfree>
 8017588:	1e7b      	subs	r3, r7, #1
 801758a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801758c:	2b04      	cmp	r3, #4
 801758e:	d806      	bhi.n	801759e <_strtod_l+0xee>
 8017590:	e8df f003 	tbb	[pc, r3]
 8017594:	201d0314 	.word	0x201d0314
 8017598:	14          	.byte	0x14
 8017599:	00          	.byte	0x00
 801759a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801759e:	05eb      	lsls	r3, r5, #23
 80175a0:	bf48      	it	mi
 80175a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80175a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80175aa:	0d1b      	lsrs	r3, r3, #20
 80175ac:	051b      	lsls	r3, r3, #20
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d1b9      	bne.n	8017526 <_strtod_l+0x76>
 80175b2:	f7fe fc21 	bl	8015df8 <__errno>
 80175b6:	2322      	movs	r3, #34	; 0x22
 80175b8:	6003      	str	r3, [r0, #0]
 80175ba:	e7b4      	b.n	8017526 <_strtod_l+0x76>
 80175bc:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80175c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80175c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80175c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80175cc:	e7e7      	b.n	801759e <_strtod_l+0xee>
 80175ce:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8017754 <_strtod_l+0x2a4>
 80175d2:	e7e4      	b.n	801759e <_strtod_l+0xee>
 80175d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80175d8:	f04f 38ff 	mov.w	r8, #4294967295
 80175dc:	e7df      	b.n	801759e <_strtod_l+0xee>
 80175de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175e0:	1c5a      	adds	r2, r3, #1
 80175e2:	9211      	str	r2, [sp, #68]	; 0x44
 80175e4:	785b      	ldrb	r3, [r3, #1]
 80175e6:	2b30      	cmp	r3, #48	; 0x30
 80175e8:	d0f9      	beq.n	80175de <_strtod_l+0x12e>
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d09b      	beq.n	8017526 <_strtod_l+0x76>
 80175ee:	2301      	movs	r3, #1
 80175f0:	9306      	str	r3, [sp, #24]
 80175f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175f4:	9309      	str	r3, [sp, #36]	; 0x24
 80175f6:	2300      	movs	r3, #0
 80175f8:	9305      	str	r3, [sp, #20]
 80175fa:	9307      	str	r3, [sp, #28]
 80175fc:	461e      	mov	r6, r3
 80175fe:	220a      	movs	r2, #10
 8017600:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017602:	7805      	ldrb	r5, [r0, #0]
 8017604:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8017608:	b2d9      	uxtb	r1, r3
 801760a:	2909      	cmp	r1, #9
 801760c:	d92b      	bls.n	8017666 <_strtod_l+0x1b6>
 801760e:	4950      	ldr	r1, [pc, #320]	; (8017750 <_strtod_l+0x2a0>)
 8017610:	2201      	movs	r2, #1
 8017612:	f001 fa03 	bl	8018a1c <strncmp>
 8017616:	2800      	cmp	r0, #0
 8017618:	d035      	beq.n	8017686 <_strtod_l+0x1d6>
 801761a:	2000      	movs	r0, #0
 801761c:	462a      	mov	r2, r5
 801761e:	4633      	mov	r3, r6
 8017620:	4683      	mov	fp, r0
 8017622:	4601      	mov	r1, r0
 8017624:	2a65      	cmp	r2, #101	; 0x65
 8017626:	d001      	beq.n	801762c <_strtod_l+0x17c>
 8017628:	2a45      	cmp	r2, #69	; 0x45
 801762a:	d118      	bne.n	801765e <_strtod_l+0x1ae>
 801762c:	b91b      	cbnz	r3, 8017636 <_strtod_l+0x186>
 801762e:	9b06      	ldr	r3, [sp, #24]
 8017630:	4303      	orrs	r3, r0
 8017632:	d094      	beq.n	801755e <_strtod_l+0xae>
 8017634:	2300      	movs	r3, #0
 8017636:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801763a:	f10a 0201 	add.w	r2, sl, #1
 801763e:	9211      	str	r2, [sp, #68]	; 0x44
 8017640:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8017644:	2a2b      	cmp	r2, #43	; 0x2b
 8017646:	d075      	beq.n	8017734 <_strtod_l+0x284>
 8017648:	2a2d      	cmp	r2, #45	; 0x2d
 801764a:	d07b      	beq.n	8017744 <_strtod_l+0x294>
 801764c:	f04f 0e00 	mov.w	lr, #0
 8017650:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8017654:	2d09      	cmp	r5, #9
 8017656:	f240 8083 	bls.w	8017760 <_strtod_l+0x2b0>
 801765a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801765e:	2500      	movs	r5, #0
 8017660:	e09e      	b.n	80177a0 <_strtod_l+0x2f0>
 8017662:	2300      	movs	r3, #0
 8017664:	e7c4      	b.n	80175f0 <_strtod_l+0x140>
 8017666:	2e08      	cmp	r6, #8
 8017668:	bfd5      	itete	le
 801766a:	9907      	ldrle	r1, [sp, #28]
 801766c:	9905      	ldrgt	r1, [sp, #20]
 801766e:	fb02 3301 	mlale	r3, r2, r1, r3
 8017672:	fb02 3301 	mlagt	r3, r2, r1, r3
 8017676:	f100 0001 	add.w	r0, r0, #1
 801767a:	bfd4      	ite	le
 801767c:	9307      	strle	r3, [sp, #28]
 801767e:	9305      	strgt	r3, [sp, #20]
 8017680:	3601      	adds	r6, #1
 8017682:	9011      	str	r0, [sp, #68]	; 0x44
 8017684:	e7bc      	b.n	8017600 <_strtod_l+0x150>
 8017686:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017688:	1c5a      	adds	r2, r3, #1
 801768a:	9211      	str	r2, [sp, #68]	; 0x44
 801768c:	785a      	ldrb	r2, [r3, #1]
 801768e:	b3ae      	cbz	r6, 80176fc <_strtod_l+0x24c>
 8017690:	4683      	mov	fp, r0
 8017692:	4633      	mov	r3, r6
 8017694:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8017698:	2909      	cmp	r1, #9
 801769a:	d912      	bls.n	80176c2 <_strtod_l+0x212>
 801769c:	2101      	movs	r1, #1
 801769e:	e7c1      	b.n	8017624 <_strtod_l+0x174>
 80176a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80176a2:	1c5a      	adds	r2, r3, #1
 80176a4:	9211      	str	r2, [sp, #68]	; 0x44
 80176a6:	785a      	ldrb	r2, [r3, #1]
 80176a8:	3001      	adds	r0, #1
 80176aa:	2a30      	cmp	r2, #48	; 0x30
 80176ac:	d0f8      	beq.n	80176a0 <_strtod_l+0x1f0>
 80176ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80176b2:	2b08      	cmp	r3, #8
 80176b4:	f200 8495 	bhi.w	8017fe2 <_strtod_l+0xb32>
 80176b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80176ba:	9309      	str	r3, [sp, #36]	; 0x24
 80176bc:	4683      	mov	fp, r0
 80176be:	2000      	movs	r0, #0
 80176c0:	4603      	mov	r3, r0
 80176c2:	3a30      	subs	r2, #48	; 0x30
 80176c4:	f100 0101 	add.w	r1, r0, #1
 80176c8:	d012      	beq.n	80176f0 <_strtod_l+0x240>
 80176ca:	448b      	add	fp, r1
 80176cc:	eb00 0c03 	add.w	ip, r0, r3
 80176d0:	4619      	mov	r1, r3
 80176d2:	250a      	movs	r5, #10
 80176d4:	4561      	cmp	r1, ip
 80176d6:	d113      	bne.n	8017700 <_strtod_l+0x250>
 80176d8:	1819      	adds	r1, r3, r0
 80176da:	2908      	cmp	r1, #8
 80176dc:	f103 0301 	add.w	r3, r3, #1
 80176e0:	4403      	add	r3, r0
 80176e2:	dc1b      	bgt.n	801771c <_strtod_l+0x26c>
 80176e4:	9807      	ldr	r0, [sp, #28]
 80176e6:	210a      	movs	r1, #10
 80176e8:	fb01 2200 	mla	r2, r1, r0, r2
 80176ec:	9207      	str	r2, [sp, #28]
 80176ee:	2100      	movs	r1, #0
 80176f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80176f2:	1c50      	adds	r0, r2, #1
 80176f4:	9011      	str	r0, [sp, #68]	; 0x44
 80176f6:	7852      	ldrb	r2, [r2, #1]
 80176f8:	4608      	mov	r0, r1
 80176fa:	e7cb      	b.n	8017694 <_strtod_l+0x1e4>
 80176fc:	4630      	mov	r0, r6
 80176fe:	e7d4      	b.n	80176aa <_strtod_l+0x1fa>
 8017700:	2908      	cmp	r1, #8
 8017702:	f101 0101 	add.w	r1, r1, #1
 8017706:	dc03      	bgt.n	8017710 <_strtod_l+0x260>
 8017708:	9f07      	ldr	r7, [sp, #28]
 801770a:	436f      	muls	r7, r5
 801770c:	9707      	str	r7, [sp, #28]
 801770e:	e7e1      	b.n	80176d4 <_strtod_l+0x224>
 8017710:	2910      	cmp	r1, #16
 8017712:	bfde      	ittt	le
 8017714:	9f05      	ldrle	r7, [sp, #20]
 8017716:	436f      	mulle	r7, r5
 8017718:	9705      	strle	r7, [sp, #20]
 801771a:	e7db      	b.n	80176d4 <_strtod_l+0x224>
 801771c:	2b10      	cmp	r3, #16
 801771e:	bfdf      	itttt	le
 8017720:	9805      	ldrle	r0, [sp, #20]
 8017722:	210a      	movle	r1, #10
 8017724:	fb01 2200 	mlale	r2, r1, r0, r2
 8017728:	9205      	strle	r2, [sp, #20]
 801772a:	e7e0      	b.n	80176ee <_strtod_l+0x23e>
 801772c:	f04f 0b00 	mov.w	fp, #0
 8017730:	2101      	movs	r1, #1
 8017732:	e77c      	b.n	801762e <_strtod_l+0x17e>
 8017734:	f04f 0e00 	mov.w	lr, #0
 8017738:	f10a 0202 	add.w	r2, sl, #2
 801773c:	9211      	str	r2, [sp, #68]	; 0x44
 801773e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8017742:	e785      	b.n	8017650 <_strtod_l+0x1a0>
 8017744:	f04f 0e01 	mov.w	lr, #1
 8017748:	e7f6      	b.n	8017738 <_strtod_l+0x288>
 801774a:	bf00      	nop
 801774c:	0802ced4 	.word	0x0802ced4
 8017750:	0802cad8 	.word	0x0802cad8
 8017754:	7ff00000 	.word	0x7ff00000
 8017758:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801775a:	1c55      	adds	r5, r2, #1
 801775c:	9511      	str	r5, [sp, #68]	; 0x44
 801775e:	7852      	ldrb	r2, [r2, #1]
 8017760:	2a30      	cmp	r2, #48	; 0x30
 8017762:	d0f9      	beq.n	8017758 <_strtod_l+0x2a8>
 8017764:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8017768:	2d08      	cmp	r5, #8
 801776a:	f63f af78 	bhi.w	801765e <_strtod_l+0x1ae>
 801776e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8017772:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017774:	920a      	str	r2, [sp, #40]	; 0x28
 8017776:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017778:	1c55      	adds	r5, r2, #1
 801777a:	9511      	str	r5, [sp, #68]	; 0x44
 801777c:	7852      	ldrb	r2, [r2, #1]
 801777e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8017782:	2f09      	cmp	r7, #9
 8017784:	d937      	bls.n	80177f6 <_strtod_l+0x346>
 8017786:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017788:	1bed      	subs	r5, r5, r7
 801778a:	2d08      	cmp	r5, #8
 801778c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8017790:	dc02      	bgt.n	8017798 <_strtod_l+0x2e8>
 8017792:	4565      	cmp	r5, ip
 8017794:	bfa8      	it	ge
 8017796:	4665      	movge	r5, ip
 8017798:	f1be 0f00 	cmp.w	lr, #0
 801779c:	d000      	beq.n	80177a0 <_strtod_l+0x2f0>
 801779e:	426d      	negs	r5, r5
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d14d      	bne.n	8017840 <_strtod_l+0x390>
 80177a4:	9b06      	ldr	r3, [sp, #24]
 80177a6:	4303      	orrs	r3, r0
 80177a8:	f47f aebd 	bne.w	8017526 <_strtod_l+0x76>
 80177ac:	2900      	cmp	r1, #0
 80177ae:	f47f aed6 	bne.w	801755e <_strtod_l+0xae>
 80177b2:	2a69      	cmp	r2, #105	; 0x69
 80177b4:	d027      	beq.n	8017806 <_strtod_l+0x356>
 80177b6:	dc24      	bgt.n	8017802 <_strtod_l+0x352>
 80177b8:	2a49      	cmp	r2, #73	; 0x49
 80177ba:	d024      	beq.n	8017806 <_strtod_l+0x356>
 80177bc:	2a4e      	cmp	r2, #78	; 0x4e
 80177be:	f47f aece 	bne.w	801755e <_strtod_l+0xae>
 80177c2:	4995      	ldr	r1, [pc, #596]	; (8017a18 <_strtod_l+0x568>)
 80177c4:	a811      	add	r0, sp, #68	; 0x44
 80177c6:	f002 f833 	bl	8019830 <__match>
 80177ca:	2800      	cmp	r0, #0
 80177cc:	f43f aec7 	beq.w	801755e <_strtod_l+0xae>
 80177d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80177d2:	781b      	ldrb	r3, [r3, #0]
 80177d4:	2b28      	cmp	r3, #40	; 0x28
 80177d6:	d12d      	bne.n	8017834 <_strtod_l+0x384>
 80177d8:	4990      	ldr	r1, [pc, #576]	; (8017a1c <_strtod_l+0x56c>)
 80177da:	aa14      	add	r2, sp, #80	; 0x50
 80177dc:	a811      	add	r0, sp, #68	; 0x44
 80177de:	f002 f83b 	bl	8019858 <__hexnan>
 80177e2:	2805      	cmp	r0, #5
 80177e4:	d126      	bne.n	8017834 <_strtod_l+0x384>
 80177e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80177e8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80177ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80177f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80177f4:	e697      	b.n	8017526 <_strtod_l+0x76>
 80177f6:	250a      	movs	r5, #10
 80177f8:	fb05 2c0c 	mla	ip, r5, ip, r2
 80177fc:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8017800:	e7b9      	b.n	8017776 <_strtod_l+0x2c6>
 8017802:	2a6e      	cmp	r2, #110	; 0x6e
 8017804:	e7db      	b.n	80177be <_strtod_l+0x30e>
 8017806:	4986      	ldr	r1, [pc, #536]	; (8017a20 <_strtod_l+0x570>)
 8017808:	a811      	add	r0, sp, #68	; 0x44
 801780a:	f002 f811 	bl	8019830 <__match>
 801780e:	2800      	cmp	r0, #0
 8017810:	f43f aea5 	beq.w	801755e <_strtod_l+0xae>
 8017814:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017816:	4983      	ldr	r1, [pc, #524]	; (8017a24 <_strtod_l+0x574>)
 8017818:	3b01      	subs	r3, #1
 801781a:	a811      	add	r0, sp, #68	; 0x44
 801781c:	9311      	str	r3, [sp, #68]	; 0x44
 801781e:	f002 f807 	bl	8019830 <__match>
 8017822:	b910      	cbnz	r0, 801782a <_strtod_l+0x37a>
 8017824:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017826:	3301      	adds	r3, #1
 8017828:	9311      	str	r3, [sp, #68]	; 0x44
 801782a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8017a38 <_strtod_l+0x588>
 801782e:	f04f 0800 	mov.w	r8, #0
 8017832:	e678      	b.n	8017526 <_strtod_l+0x76>
 8017834:	487c      	ldr	r0, [pc, #496]	; (8017a28 <_strtod_l+0x578>)
 8017836:	f001 fd17 	bl	8019268 <nan>
 801783a:	ec59 8b10 	vmov	r8, r9, d0
 801783e:	e672      	b.n	8017526 <_strtod_l+0x76>
 8017840:	eddd 7a07 	vldr	s15, [sp, #28]
 8017844:	eba5 020b 	sub.w	r2, r5, fp
 8017848:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801784c:	2e00      	cmp	r6, #0
 801784e:	bf08      	it	eq
 8017850:	461e      	moveq	r6, r3
 8017852:	2b10      	cmp	r3, #16
 8017854:	9206      	str	r2, [sp, #24]
 8017856:	461a      	mov	r2, r3
 8017858:	bfa8      	it	ge
 801785a:	2210      	movge	r2, #16
 801785c:	2b09      	cmp	r3, #9
 801785e:	ec59 8b17 	vmov	r8, r9, d7
 8017862:	dd0c      	ble.n	801787e <_strtod_l+0x3ce>
 8017864:	4971      	ldr	r1, [pc, #452]	; (8017a2c <_strtod_l+0x57c>)
 8017866:	eddd 6a05 	vldr	s13, [sp, #20]
 801786a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801786e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8017872:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8017876:	eea7 6b05 	vfma.f64	d6, d7, d5
 801787a:	ec59 8b16 	vmov	r8, r9, d6
 801787e:	2b0f      	cmp	r3, #15
 8017880:	dc37      	bgt.n	80178f2 <_strtod_l+0x442>
 8017882:	9906      	ldr	r1, [sp, #24]
 8017884:	2900      	cmp	r1, #0
 8017886:	f43f ae4e 	beq.w	8017526 <_strtod_l+0x76>
 801788a:	dd23      	ble.n	80178d4 <_strtod_l+0x424>
 801788c:	2916      	cmp	r1, #22
 801788e:	dc0b      	bgt.n	80178a8 <_strtod_l+0x3f8>
 8017890:	4b66      	ldr	r3, [pc, #408]	; (8017a2c <_strtod_l+0x57c>)
 8017892:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8017896:	ed93 7b00 	vldr	d7, [r3]
 801789a:	ec49 8b16 	vmov	d6, r8, r9
 801789e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80178a2:	ec59 8b17 	vmov	r8, r9, d7
 80178a6:	e63e      	b.n	8017526 <_strtod_l+0x76>
 80178a8:	9806      	ldr	r0, [sp, #24]
 80178aa:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80178ae:	4281      	cmp	r1, r0
 80178b0:	db1f      	blt.n	80178f2 <_strtod_l+0x442>
 80178b2:	4a5e      	ldr	r2, [pc, #376]	; (8017a2c <_strtod_l+0x57c>)
 80178b4:	f1c3 030f 	rsb	r3, r3, #15
 80178b8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80178bc:	ed91 7b00 	vldr	d7, [r1]
 80178c0:	ec49 8b16 	vmov	d6, r8, r9
 80178c4:	1ac3      	subs	r3, r0, r3
 80178c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80178ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80178ce:	ed92 6b00 	vldr	d6, [r2]
 80178d2:	e7e4      	b.n	801789e <_strtod_l+0x3ee>
 80178d4:	9906      	ldr	r1, [sp, #24]
 80178d6:	3116      	adds	r1, #22
 80178d8:	db0b      	blt.n	80178f2 <_strtod_l+0x442>
 80178da:	4b54      	ldr	r3, [pc, #336]	; (8017a2c <_strtod_l+0x57c>)
 80178dc:	ebab 0505 	sub.w	r5, fp, r5
 80178e0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80178e4:	ed95 7b00 	vldr	d7, [r5]
 80178e8:	ec49 8b16 	vmov	d6, r8, r9
 80178ec:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80178f0:	e7d7      	b.n	80178a2 <_strtod_l+0x3f2>
 80178f2:	9906      	ldr	r1, [sp, #24]
 80178f4:	1a9a      	subs	r2, r3, r2
 80178f6:	440a      	add	r2, r1
 80178f8:	2a00      	cmp	r2, #0
 80178fa:	dd6e      	ble.n	80179da <_strtod_l+0x52a>
 80178fc:	f012 000f 	ands.w	r0, r2, #15
 8017900:	d00a      	beq.n	8017918 <_strtod_l+0x468>
 8017902:	494a      	ldr	r1, [pc, #296]	; (8017a2c <_strtod_l+0x57c>)
 8017904:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017908:	ed91 7b00 	vldr	d7, [r1]
 801790c:	ec49 8b16 	vmov	d6, r8, r9
 8017910:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017914:	ec59 8b17 	vmov	r8, r9, d7
 8017918:	f032 020f 	bics.w	r2, r2, #15
 801791c:	d04e      	beq.n	80179bc <_strtod_l+0x50c>
 801791e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8017922:	dd22      	ble.n	801796a <_strtod_l+0x4ba>
 8017924:	2500      	movs	r5, #0
 8017926:	462e      	mov	r6, r5
 8017928:	9507      	str	r5, [sp, #28]
 801792a:	462f      	mov	r7, r5
 801792c:	2322      	movs	r3, #34	; 0x22
 801792e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8017a38 <_strtod_l+0x588>
 8017932:	6023      	str	r3, [r4, #0]
 8017934:	f04f 0800 	mov.w	r8, #0
 8017938:	9b07      	ldr	r3, [sp, #28]
 801793a:	2b00      	cmp	r3, #0
 801793c:	f43f adf3 	beq.w	8017526 <_strtod_l+0x76>
 8017940:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017942:	4620      	mov	r0, r4
 8017944:	f7ff f92e 	bl	8016ba4 <_Bfree>
 8017948:	4639      	mov	r1, r7
 801794a:	4620      	mov	r0, r4
 801794c:	f7ff f92a 	bl	8016ba4 <_Bfree>
 8017950:	4631      	mov	r1, r6
 8017952:	4620      	mov	r0, r4
 8017954:	f7ff f926 	bl	8016ba4 <_Bfree>
 8017958:	9907      	ldr	r1, [sp, #28]
 801795a:	4620      	mov	r0, r4
 801795c:	f7ff f922 	bl	8016ba4 <_Bfree>
 8017960:	4629      	mov	r1, r5
 8017962:	4620      	mov	r0, r4
 8017964:	f7ff f91e 	bl	8016ba4 <_Bfree>
 8017968:	e5dd      	b.n	8017526 <_strtod_l+0x76>
 801796a:	2000      	movs	r0, #0
 801796c:	ec49 8b17 	vmov	d7, r8, r9
 8017970:	4f2f      	ldr	r7, [pc, #188]	; (8017a30 <_strtod_l+0x580>)
 8017972:	1112      	asrs	r2, r2, #4
 8017974:	4601      	mov	r1, r0
 8017976:	2a01      	cmp	r2, #1
 8017978:	dc23      	bgt.n	80179c2 <_strtod_l+0x512>
 801797a:	b108      	cbz	r0, 8017980 <_strtod_l+0x4d0>
 801797c:	ec59 8b17 	vmov	r8, r9, d7
 8017980:	4a2b      	ldr	r2, [pc, #172]	; (8017a30 <_strtod_l+0x580>)
 8017982:	482c      	ldr	r0, [pc, #176]	; (8017a34 <_strtod_l+0x584>)
 8017984:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017988:	ed92 7b00 	vldr	d7, [r2]
 801798c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8017990:	ec49 8b16 	vmov	d6, r8, r9
 8017994:	4a28      	ldr	r2, [pc, #160]	; (8017a38 <_strtod_l+0x588>)
 8017996:	ee27 7b06 	vmul.f64	d7, d7, d6
 801799a:	ee17 1a90 	vmov	r1, s15
 801799e:	400a      	ands	r2, r1
 80179a0:	4282      	cmp	r2, r0
 80179a2:	ec59 8b17 	vmov	r8, r9, d7
 80179a6:	d8bd      	bhi.n	8017924 <_strtod_l+0x474>
 80179a8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80179ac:	4282      	cmp	r2, r0
 80179ae:	bf86      	itte	hi
 80179b0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8017a3c <_strtod_l+0x58c>
 80179b4:	f04f 38ff 	movhi.w	r8, #4294967295
 80179b8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80179bc:	2200      	movs	r2, #0
 80179be:	9205      	str	r2, [sp, #20]
 80179c0:	e076      	b.n	8017ab0 <_strtod_l+0x600>
 80179c2:	f012 0f01 	tst.w	r2, #1
 80179c6:	d004      	beq.n	80179d2 <_strtod_l+0x522>
 80179c8:	ed97 6b00 	vldr	d6, [r7]
 80179cc:	2001      	movs	r0, #1
 80179ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80179d2:	3101      	adds	r1, #1
 80179d4:	1052      	asrs	r2, r2, #1
 80179d6:	3708      	adds	r7, #8
 80179d8:	e7cd      	b.n	8017976 <_strtod_l+0x4c6>
 80179da:	d0ef      	beq.n	80179bc <_strtod_l+0x50c>
 80179dc:	4252      	negs	r2, r2
 80179de:	f012 000f 	ands.w	r0, r2, #15
 80179e2:	d00a      	beq.n	80179fa <_strtod_l+0x54a>
 80179e4:	4911      	ldr	r1, [pc, #68]	; (8017a2c <_strtod_l+0x57c>)
 80179e6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80179ea:	ed91 7b00 	vldr	d7, [r1]
 80179ee:	ec49 8b16 	vmov	d6, r8, r9
 80179f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80179f6:	ec59 8b17 	vmov	r8, r9, d7
 80179fa:	1112      	asrs	r2, r2, #4
 80179fc:	d0de      	beq.n	80179bc <_strtod_l+0x50c>
 80179fe:	2a1f      	cmp	r2, #31
 8017a00:	dd1e      	ble.n	8017a40 <_strtod_l+0x590>
 8017a02:	2500      	movs	r5, #0
 8017a04:	462e      	mov	r6, r5
 8017a06:	9507      	str	r5, [sp, #28]
 8017a08:	462f      	mov	r7, r5
 8017a0a:	2322      	movs	r3, #34	; 0x22
 8017a0c:	f04f 0800 	mov.w	r8, #0
 8017a10:	f04f 0900 	mov.w	r9, #0
 8017a14:	6023      	str	r3, [r4, #0]
 8017a16:	e78f      	b.n	8017938 <_strtod_l+0x488>
 8017a18:	0802cadb 	.word	0x0802cadb
 8017a1c:	0802cee8 	.word	0x0802cee8
 8017a20:	0802ca4d 	.word	0x0802ca4d
 8017a24:	0802ccf3 	.word	0x0802ccf3
 8017a28:	0802d125 	.word	0x0802d125
 8017a2c:	0802ce00 	.word	0x0802ce00
 8017a30:	0802cdd8 	.word	0x0802cdd8
 8017a34:	7ca00000 	.word	0x7ca00000
 8017a38:	7ff00000 	.word	0x7ff00000
 8017a3c:	7fefffff 	.word	0x7fefffff
 8017a40:	f012 0110 	ands.w	r1, r2, #16
 8017a44:	bf18      	it	ne
 8017a46:	216a      	movne	r1, #106	; 0x6a
 8017a48:	9105      	str	r1, [sp, #20]
 8017a4a:	ec49 8b17 	vmov	d7, r8, r9
 8017a4e:	49be      	ldr	r1, [pc, #760]	; (8017d48 <_strtod_l+0x898>)
 8017a50:	2000      	movs	r0, #0
 8017a52:	07d7      	lsls	r7, r2, #31
 8017a54:	d504      	bpl.n	8017a60 <_strtod_l+0x5b0>
 8017a56:	ed91 6b00 	vldr	d6, [r1]
 8017a5a:	2001      	movs	r0, #1
 8017a5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017a60:	1052      	asrs	r2, r2, #1
 8017a62:	f101 0108 	add.w	r1, r1, #8
 8017a66:	d1f4      	bne.n	8017a52 <_strtod_l+0x5a2>
 8017a68:	b108      	cbz	r0, 8017a6e <_strtod_l+0x5be>
 8017a6a:	ec59 8b17 	vmov	r8, r9, d7
 8017a6e:	9a05      	ldr	r2, [sp, #20]
 8017a70:	b1ba      	cbz	r2, 8017aa2 <_strtod_l+0x5f2>
 8017a72:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8017a76:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8017a7a:	2a00      	cmp	r2, #0
 8017a7c:	4648      	mov	r0, r9
 8017a7e:	dd10      	ble.n	8017aa2 <_strtod_l+0x5f2>
 8017a80:	2a1f      	cmp	r2, #31
 8017a82:	f340 812c 	ble.w	8017cde <_strtod_l+0x82e>
 8017a86:	2a34      	cmp	r2, #52	; 0x34
 8017a88:	bfde      	ittt	le
 8017a8a:	f04f 32ff 	movle.w	r2, #4294967295
 8017a8e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8017a92:	408a      	lslle	r2, r1
 8017a94:	f04f 0800 	mov.w	r8, #0
 8017a98:	bfcc      	ite	gt
 8017a9a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8017a9e:	ea02 0900 	andle.w	r9, r2, r0
 8017aa2:	ec49 8b17 	vmov	d7, r8, r9
 8017aa6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aae:	d0a8      	beq.n	8017a02 <_strtod_l+0x552>
 8017ab0:	9a07      	ldr	r2, [sp, #28]
 8017ab2:	9200      	str	r2, [sp, #0]
 8017ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ab6:	4632      	mov	r2, r6
 8017ab8:	4620      	mov	r0, r4
 8017aba:	f7ff f8db 	bl	8016c74 <__s2b>
 8017abe:	9007      	str	r0, [sp, #28]
 8017ac0:	2800      	cmp	r0, #0
 8017ac2:	f43f af2f 	beq.w	8017924 <_strtod_l+0x474>
 8017ac6:	9a06      	ldr	r2, [sp, #24]
 8017ac8:	2a00      	cmp	r2, #0
 8017aca:	ebab 0305 	sub.w	r3, fp, r5
 8017ace:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8017d28 <_strtod_l+0x878>
 8017ad2:	bfa8      	it	ge
 8017ad4:	2300      	movge	r3, #0
 8017ad6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8017d30 <_strtod_l+0x880>
 8017ada:	ed9f bb97 	vldr	d11, [pc, #604]	; 8017d38 <_strtod_l+0x888>
 8017ade:	9309      	str	r3, [sp, #36]	; 0x24
 8017ae0:	2500      	movs	r5, #0
 8017ae2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017ae6:	930c      	str	r3, [sp, #48]	; 0x30
 8017ae8:	462e      	mov	r6, r5
 8017aea:	9b07      	ldr	r3, [sp, #28]
 8017aec:	4620      	mov	r0, r4
 8017aee:	6859      	ldr	r1, [r3, #4]
 8017af0:	f7ff f818 	bl	8016b24 <_Balloc>
 8017af4:	4607      	mov	r7, r0
 8017af6:	2800      	cmp	r0, #0
 8017af8:	f43f af18 	beq.w	801792c <_strtod_l+0x47c>
 8017afc:	9b07      	ldr	r3, [sp, #28]
 8017afe:	691a      	ldr	r2, [r3, #16]
 8017b00:	3202      	adds	r2, #2
 8017b02:	f103 010c 	add.w	r1, r3, #12
 8017b06:	0092      	lsls	r2, r2, #2
 8017b08:	300c      	adds	r0, #12
 8017b0a:	f7fe f9a4 	bl	8015e56 <memcpy>
 8017b0e:	ec49 8b10 	vmov	d0, r8, r9
 8017b12:	aa14      	add	r2, sp, #80	; 0x50
 8017b14:	a913      	add	r1, sp, #76	; 0x4c
 8017b16:	4620      	mov	r0, r4
 8017b18:	f7ff fbe0 	bl	80172dc <__d2b>
 8017b1c:	ec49 8b18 	vmov	d8, r8, r9
 8017b20:	9012      	str	r0, [sp, #72]	; 0x48
 8017b22:	2800      	cmp	r0, #0
 8017b24:	f43f af02 	beq.w	801792c <_strtod_l+0x47c>
 8017b28:	2101      	movs	r1, #1
 8017b2a:	4620      	mov	r0, r4
 8017b2c:	f7ff f93a 	bl	8016da4 <__i2b>
 8017b30:	4606      	mov	r6, r0
 8017b32:	2800      	cmp	r0, #0
 8017b34:	f43f aefa 	beq.w	801792c <_strtod_l+0x47c>
 8017b38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017b3a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	bfab      	itete	ge
 8017b40:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8017b42:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8017b44:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8017b48:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8017b4c:	bfac      	ite	ge
 8017b4e:	eb03 0b02 	addge.w	fp, r3, r2
 8017b52:	eba2 0a03 	sublt.w	sl, r2, r3
 8017b56:	9a05      	ldr	r2, [sp, #20]
 8017b58:	1a9b      	subs	r3, r3, r2
 8017b5a:	440b      	add	r3, r1
 8017b5c:	4a7b      	ldr	r2, [pc, #492]	; (8017d4c <_strtod_l+0x89c>)
 8017b5e:	3b01      	subs	r3, #1
 8017b60:	4293      	cmp	r3, r2
 8017b62:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8017b66:	f280 80cd 	bge.w	8017d04 <_strtod_l+0x854>
 8017b6a:	1ad2      	subs	r2, r2, r3
 8017b6c:	2a1f      	cmp	r2, #31
 8017b6e:	eba1 0102 	sub.w	r1, r1, r2
 8017b72:	f04f 0001 	mov.w	r0, #1
 8017b76:	f300 80b9 	bgt.w	8017cec <_strtod_l+0x83c>
 8017b7a:	fa00 f302 	lsl.w	r3, r0, r2
 8017b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b80:	2300      	movs	r3, #0
 8017b82:	930a      	str	r3, [sp, #40]	; 0x28
 8017b84:	eb0b 0301 	add.w	r3, fp, r1
 8017b88:	9a05      	ldr	r2, [sp, #20]
 8017b8a:	459b      	cmp	fp, r3
 8017b8c:	448a      	add	sl, r1
 8017b8e:	4492      	add	sl, r2
 8017b90:	465a      	mov	r2, fp
 8017b92:	bfa8      	it	ge
 8017b94:	461a      	movge	r2, r3
 8017b96:	4552      	cmp	r2, sl
 8017b98:	bfa8      	it	ge
 8017b9a:	4652      	movge	r2, sl
 8017b9c:	2a00      	cmp	r2, #0
 8017b9e:	bfc2      	ittt	gt
 8017ba0:	1a9b      	subgt	r3, r3, r2
 8017ba2:	ebaa 0a02 	subgt.w	sl, sl, r2
 8017ba6:	ebab 0b02 	subgt.w	fp, fp, r2
 8017baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017bac:	2a00      	cmp	r2, #0
 8017bae:	dd18      	ble.n	8017be2 <_strtod_l+0x732>
 8017bb0:	4631      	mov	r1, r6
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8017bb6:	f7ff f9b5 	bl	8016f24 <__pow5mult>
 8017bba:	4606      	mov	r6, r0
 8017bbc:	2800      	cmp	r0, #0
 8017bbe:	f43f aeb5 	beq.w	801792c <_strtod_l+0x47c>
 8017bc2:	4601      	mov	r1, r0
 8017bc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017bc6:	4620      	mov	r0, r4
 8017bc8:	f7ff f902 	bl	8016dd0 <__multiply>
 8017bcc:	900e      	str	r0, [sp, #56]	; 0x38
 8017bce:	2800      	cmp	r0, #0
 8017bd0:	f43f aeac 	beq.w	801792c <_strtod_l+0x47c>
 8017bd4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017bd6:	4620      	mov	r0, r4
 8017bd8:	f7fe ffe4 	bl	8016ba4 <_Bfree>
 8017bdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017be0:	9212      	str	r2, [sp, #72]	; 0x48
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	f300 8093 	bgt.w	8017d0e <_strtod_l+0x85e>
 8017be8:	9b06      	ldr	r3, [sp, #24]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	dd08      	ble.n	8017c00 <_strtod_l+0x750>
 8017bee:	4639      	mov	r1, r7
 8017bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017bf2:	4620      	mov	r0, r4
 8017bf4:	f7ff f996 	bl	8016f24 <__pow5mult>
 8017bf8:	4607      	mov	r7, r0
 8017bfa:	2800      	cmp	r0, #0
 8017bfc:	f43f ae96 	beq.w	801792c <_strtod_l+0x47c>
 8017c00:	f1ba 0f00 	cmp.w	sl, #0
 8017c04:	dd08      	ble.n	8017c18 <_strtod_l+0x768>
 8017c06:	4639      	mov	r1, r7
 8017c08:	4652      	mov	r2, sl
 8017c0a:	4620      	mov	r0, r4
 8017c0c:	f7ff f9e4 	bl	8016fd8 <__lshift>
 8017c10:	4607      	mov	r7, r0
 8017c12:	2800      	cmp	r0, #0
 8017c14:	f43f ae8a 	beq.w	801792c <_strtod_l+0x47c>
 8017c18:	f1bb 0f00 	cmp.w	fp, #0
 8017c1c:	dd08      	ble.n	8017c30 <_strtod_l+0x780>
 8017c1e:	4631      	mov	r1, r6
 8017c20:	465a      	mov	r2, fp
 8017c22:	4620      	mov	r0, r4
 8017c24:	f7ff f9d8 	bl	8016fd8 <__lshift>
 8017c28:	4606      	mov	r6, r0
 8017c2a:	2800      	cmp	r0, #0
 8017c2c:	f43f ae7e 	beq.w	801792c <_strtod_l+0x47c>
 8017c30:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017c32:	463a      	mov	r2, r7
 8017c34:	4620      	mov	r0, r4
 8017c36:	f7ff fa57 	bl	80170e8 <__mdiff>
 8017c3a:	4605      	mov	r5, r0
 8017c3c:	2800      	cmp	r0, #0
 8017c3e:	f43f ae75 	beq.w	801792c <_strtod_l+0x47c>
 8017c42:	2300      	movs	r3, #0
 8017c44:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8017c48:	60c3      	str	r3, [r0, #12]
 8017c4a:	4631      	mov	r1, r6
 8017c4c:	f7ff fa30 	bl	80170b0 <__mcmp>
 8017c50:	2800      	cmp	r0, #0
 8017c52:	da7f      	bge.n	8017d54 <_strtod_l+0x8a4>
 8017c54:	ea5a 0a08 	orrs.w	sl, sl, r8
 8017c58:	f040 80a5 	bne.w	8017da6 <_strtod_l+0x8f6>
 8017c5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	f040 80a0 	bne.w	8017da6 <_strtod_l+0x8f6>
 8017c66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017c6a:	0d1b      	lsrs	r3, r3, #20
 8017c6c:	051b      	lsls	r3, r3, #20
 8017c6e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017c72:	f240 8098 	bls.w	8017da6 <_strtod_l+0x8f6>
 8017c76:	696b      	ldr	r3, [r5, #20]
 8017c78:	b91b      	cbnz	r3, 8017c82 <_strtod_l+0x7d2>
 8017c7a:	692b      	ldr	r3, [r5, #16]
 8017c7c:	2b01      	cmp	r3, #1
 8017c7e:	f340 8092 	ble.w	8017da6 <_strtod_l+0x8f6>
 8017c82:	4629      	mov	r1, r5
 8017c84:	2201      	movs	r2, #1
 8017c86:	4620      	mov	r0, r4
 8017c88:	f7ff f9a6 	bl	8016fd8 <__lshift>
 8017c8c:	4631      	mov	r1, r6
 8017c8e:	4605      	mov	r5, r0
 8017c90:	f7ff fa0e 	bl	80170b0 <__mcmp>
 8017c94:	2800      	cmp	r0, #0
 8017c96:	f340 8086 	ble.w	8017da6 <_strtod_l+0x8f6>
 8017c9a:	9905      	ldr	r1, [sp, #20]
 8017c9c:	4a2c      	ldr	r2, [pc, #176]	; (8017d50 <_strtod_l+0x8a0>)
 8017c9e:	464b      	mov	r3, r9
 8017ca0:	2900      	cmp	r1, #0
 8017ca2:	f000 809f 	beq.w	8017de4 <_strtod_l+0x934>
 8017ca6:	ea02 0109 	and.w	r1, r2, r9
 8017caa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017cae:	f300 8099 	bgt.w	8017de4 <_strtod_l+0x934>
 8017cb2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017cb6:	f77f aea8 	ble.w	8017a0a <_strtod_l+0x55a>
 8017cba:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8017d40 <_strtod_l+0x890>
 8017cbe:	ec49 8b16 	vmov	d6, r8, r9
 8017cc2:	4b23      	ldr	r3, [pc, #140]	; (8017d50 <_strtod_l+0x8a0>)
 8017cc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017cc8:	ee17 2a90 	vmov	r2, s15
 8017ccc:	4013      	ands	r3, r2
 8017cce:	ec59 8b17 	vmov	r8, r9, d7
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	f47f ae34 	bne.w	8017940 <_strtod_l+0x490>
 8017cd8:	2322      	movs	r3, #34	; 0x22
 8017cda:	6023      	str	r3, [r4, #0]
 8017cdc:	e630      	b.n	8017940 <_strtod_l+0x490>
 8017cde:	f04f 31ff 	mov.w	r1, #4294967295
 8017ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8017ce6:	ea02 0808 	and.w	r8, r2, r8
 8017cea:	e6da      	b.n	8017aa2 <_strtod_l+0x5f2>
 8017cec:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8017cf0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8017cf4:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8017cf8:	33e2      	adds	r3, #226	; 0xe2
 8017cfa:	fa00 f303 	lsl.w	r3, r0, r3
 8017cfe:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8017d02:	e73f      	b.n	8017b84 <_strtod_l+0x6d4>
 8017d04:	2200      	movs	r2, #0
 8017d06:	2301      	movs	r3, #1
 8017d08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017d0c:	e73a      	b.n	8017b84 <_strtod_l+0x6d4>
 8017d0e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017d10:	461a      	mov	r2, r3
 8017d12:	4620      	mov	r0, r4
 8017d14:	f7ff f960 	bl	8016fd8 <__lshift>
 8017d18:	9012      	str	r0, [sp, #72]	; 0x48
 8017d1a:	2800      	cmp	r0, #0
 8017d1c:	f47f af64 	bne.w	8017be8 <_strtod_l+0x738>
 8017d20:	e604      	b.n	801792c <_strtod_l+0x47c>
 8017d22:	bf00      	nop
 8017d24:	f3af 8000 	nop.w
 8017d28:	94a03595 	.word	0x94a03595
 8017d2c:	3fcfffff 	.word	0x3fcfffff
 8017d30:	94a03595 	.word	0x94a03595
 8017d34:	3fdfffff 	.word	0x3fdfffff
 8017d38:	35afe535 	.word	0x35afe535
 8017d3c:	3fe00000 	.word	0x3fe00000
 8017d40:	00000000 	.word	0x00000000
 8017d44:	39500000 	.word	0x39500000
 8017d48:	0802cf00 	.word	0x0802cf00
 8017d4c:	fffffc02 	.word	0xfffffc02
 8017d50:	7ff00000 	.word	0x7ff00000
 8017d54:	46cb      	mov	fp, r9
 8017d56:	d15f      	bne.n	8017e18 <_strtod_l+0x968>
 8017d58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017d5c:	f1ba 0f00 	cmp.w	sl, #0
 8017d60:	d02a      	beq.n	8017db8 <_strtod_l+0x908>
 8017d62:	4aa7      	ldr	r2, [pc, #668]	; (8018000 <_strtod_l+0xb50>)
 8017d64:	4293      	cmp	r3, r2
 8017d66:	d12b      	bne.n	8017dc0 <_strtod_l+0x910>
 8017d68:	9b05      	ldr	r3, [sp, #20]
 8017d6a:	4642      	mov	r2, r8
 8017d6c:	b1fb      	cbz	r3, 8017dae <_strtod_l+0x8fe>
 8017d6e:	4ba5      	ldr	r3, [pc, #660]	; (8018004 <_strtod_l+0xb54>)
 8017d70:	ea09 0303 	and.w	r3, r9, r3
 8017d74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017d78:	f04f 31ff 	mov.w	r1, #4294967295
 8017d7c:	d81a      	bhi.n	8017db4 <_strtod_l+0x904>
 8017d7e:	0d1b      	lsrs	r3, r3, #20
 8017d80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017d84:	fa01 f303 	lsl.w	r3, r1, r3
 8017d88:	429a      	cmp	r2, r3
 8017d8a:	d119      	bne.n	8017dc0 <_strtod_l+0x910>
 8017d8c:	4b9e      	ldr	r3, [pc, #632]	; (8018008 <_strtod_l+0xb58>)
 8017d8e:	459b      	cmp	fp, r3
 8017d90:	d102      	bne.n	8017d98 <_strtod_l+0x8e8>
 8017d92:	3201      	adds	r2, #1
 8017d94:	f43f adca 	beq.w	801792c <_strtod_l+0x47c>
 8017d98:	4b9a      	ldr	r3, [pc, #616]	; (8018004 <_strtod_l+0xb54>)
 8017d9a:	ea0b 0303 	and.w	r3, fp, r3
 8017d9e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8017da2:	f04f 0800 	mov.w	r8, #0
 8017da6:	9b05      	ldr	r3, [sp, #20]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d186      	bne.n	8017cba <_strtod_l+0x80a>
 8017dac:	e5c8      	b.n	8017940 <_strtod_l+0x490>
 8017dae:	f04f 33ff 	mov.w	r3, #4294967295
 8017db2:	e7e9      	b.n	8017d88 <_strtod_l+0x8d8>
 8017db4:	460b      	mov	r3, r1
 8017db6:	e7e7      	b.n	8017d88 <_strtod_l+0x8d8>
 8017db8:	ea53 0308 	orrs.w	r3, r3, r8
 8017dbc:	f43f af6d 	beq.w	8017c9a <_strtod_l+0x7ea>
 8017dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017dc2:	b1cb      	cbz	r3, 8017df8 <_strtod_l+0x948>
 8017dc4:	ea13 0f0b 	tst.w	r3, fp
 8017dc8:	d0ed      	beq.n	8017da6 <_strtod_l+0x8f6>
 8017dca:	9a05      	ldr	r2, [sp, #20]
 8017dcc:	4640      	mov	r0, r8
 8017dce:	4649      	mov	r1, r9
 8017dd0:	f1ba 0f00 	cmp.w	sl, #0
 8017dd4:	d014      	beq.n	8017e00 <_strtod_l+0x950>
 8017dd6:	f7ff fb4f 	bl	8017478 <sulp>
 8017dda:	ee38 7b00 	vadd.f64	d7, d8, d0
 8017dde:	ec59 8b17 	vmov	r8, r9, d7
 8017de2:	e7e0      	b.n	8017da6 <_strtod_l+0x8f6>
 8017de4:	4013      	ands	r3, r2
 8017de6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017dea:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8017dee:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017df2:	f04f 38ff 	mov.w	r8, #4294967295
 8017df6:	e7d6      	b.n	8017da6 <_strtod_l+0x8f6>
 8017df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dfa:	ea13 0f08 	tst.w	r3, r8
 8017dfe:	e7e3      	b.n	8017dc8 <_strtod_l+0x918>
 8017e00:	f7ff fb3a 	bl	8017478 <sulp>
 8017e04:	ee38 0b40 	vsub.f64	d0, d8, d0
 8017e08:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e10:	ec59 8b10 	vmov	r8, r9, d0
 8017e14:	d1c7      	bne.n	8017da6 <_strtod_l+0x8f6>
 8017e16:	e5f8      	b.n	8017a0a <_strtod_l+0x55a>
 8017e18:	4631      	mov	r1, r6
 8017e1a:	4628      	mov	r0, r5
 8017e1c:	f7ff fab8 	bl	8017390 <__ratio>
 8017e20:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8017e24:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e2c:	d85f      	bhi.n	8017eee <_strtod_l+0xa3e>
 8017e2e:	f1ba 0f00 	cmp.w	sl, #0
 8017e32:	d166      	bne.n	8017f02 <_strtod_l+0xa52>
 8017e34:	f1b8 0f00 	cmp.w	r8, #0
 8017e38:	d14d      	bne.n	8017ed6 <_strtod_l+0xa26>
 8017e3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017e3e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d162      	bne.n	8017f0c <_strtod_l+0xa5c>
 8017e46:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8017e4a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8017e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e52:	d401      	bmi.n	8017e58 <_strtod_l+0x9a8>
 8017e54:	ee20 db0d 	vmul.f64	d13, d0, d13
 8017e58:	eeb1 cb4d 	vneg.f64	d12, d13
 8017e5c:	4869      	ldr	r0, [pc, #420]	; (8018004 <_strtod_l+0xb54>)
 8017e5e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8018010 <_strtod_l+0xb60>
 8017e62:	ea0b 0100 	and.w	r1, fp, r0
 8017e66:	4561      	cmp	r1, ip
 8017e68:	ec53 2b1c 	vmov	r2, r3, d12
 8017e6c:	d17a      	bne.n	8017f64 <_strtod_l+0xab4>
 8017e6e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8017e72:	ec49 8b10 	vmov	d0, r8, r9
 8017e76:	910a      	str	r1, [sp, #40]	; 0x28
 8017e78:	f7ff f9c0 	bl	80171fc <__ulp>
 8017e7c:	ec49 8b1e 	vmov	d14, r8, r9
 8017e80:	4860      	ldr	r0, [pc, #384]	; (8018004 <_strtod_l+0xb54>)
 8017e82:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8017e86:	ee1e 3a90 	vmov	r3, s29
 8017e8a:	4a60      	ldr	r2, [pc, #384]	; (801800c <_strtod_l+0xb5c>)
 8017e8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017e8e:	4018      	ands	r0, r3
 8017e90:	4290      	cmp	r0, r2
 8017e92:	ec59 8b1e 	vmov	r8, r9, d14
 8017e96:	d93c      	bls.n	8017f12 <_strtod_l+0xa62>
 8017e98:	ee18 2a90 	vmov	r2, s17
 8017e9c:	4b5a      	ldr	r3, [pc, #360]	; (8018008 <_strtod_l+0xb58>)
 8017e9e:	429a      	cmp	r2, r3
 8017ea0:	d104      	bne.n	8017eac <_strtod_l+0x9fc>
 8017ea2:	ee18 3a10 	vmov	r3, s16
 8017ea6:	3301      	adds	r3, #1
 8017ea8:	f43f ad40 	beq.w	801792c <_strtod_l+0x47c>
 8017eac:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8018008 <_strtod_l+0xb58>
 8017eb0:	f04f 38ff 	mov.w	r8, #4294967295
 8017eb4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017eb6:	4620      	mov	r0, r4
 8017eb8:	f7fe fe74 	bl	8016ba4 <_Bfree>
 8017ebc:	4639      	mov	r1, r7
 8017ebe:	4620      	mov	r0, r4
 8017ec0:	f7fe fe70 	bl	8016ba4 <_Bfree>
 8017ec4:	4631      	mov	r1, r6
 8017ec6:	4620      	mov	r0, r4
 8017ec8:	f7fe fe6c 	bl	8016ba4 <_Bfree>
 8017ecc:	4629      	mov	r1, r5
 8017ece:	4620      	mov	r0, r4
 8017ed0:	f7fe fe68 	bl	8016ba4 <_Bfree>
 8017ed4:	e609      	b.n	8017aea <_strtod_l+0x63a>
 8017ed6:	f1b8 0f01 	cmp.w	r8, #1
 8017eda:	d103      	bne.n	8017ee4 <_strtod_l+0xa34>
 8017edc:	f1b9 0f00 	cmp.w	r9, #0
 8017ee0:	f43f ad93 	beq.w	8017a0a <_strtod_l+0x55a>
 8017ee4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8017ee8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8017eec:	e7b6      	b.n	8017e5c <_strtod_l+0x9ac>
 8017eee:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8017ef2:	ee20 db0d 	vmul.f64	d13, d0, d13
 8017ef6:	f1ba 0f00 	cmp.w	sl, #0
 8017efa:	d0ad      	beq.n	8017e58 <_strtod_l+0x9a8>
 8017efc:	eeb0 cb4d 	vmov.f64	d12, d13
 8017f00:	e7ac      	b.n	8017e5c <_strtod_l+0x9ac>
 8017f02:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8017f06:	eeb0 db4c 	vmov.f64	d13, d12
 8017f0a:	e7a7      	b.n	8017e5c <_strtod_l+0x9ac>
 8017f0c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8017f10:	e7a4      	b.n	8017e5c <_strtod_l+0x9ac>
 8017f12:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8017f16:	9b05      	ldr	r3, [sp, #20]
 8017f18:	46cb      	mov	fp, r9
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d1ca      	bne.n	8017eb4 <_strtod_l+0xa04>
 8017f1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017f22:	0d1b      	lsrs	r3, r3, #20
 8017f24:	051b      	lsls	r3, r3, #20
 8017f26:	4299      	cmp	r1, r3
 8017f28:	d1c4      	bne.n	8017eb4 <_strtod_l+0xa04>
 8017f2a:	ec51 0b1d 	vmov	r0, r1, d13
 8017f2e:	f7e8 fc7b 	bl	8000828 <__aeabi_d2lz>
 8017f32:	f7e8 fbe3 	bl	80006fc <__aeabi_l2d>
 8017f36:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8017f3a:	ec41 0b17 	vmov	d7, r0, r1
 8017f3e:	ea4b 0b08 	orr.w	fp, fp, r8
 8017f42:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8017f46:	ee3d db47 	vsub.f64	d13, d13, d7
 8017f4a:	d03c      	beq.n	8017fc6 <_strtod_l+0xb16>
 8017f4c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8017f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f54:	f53f acf4 	bmi.w	8017940 <_strtod_l+0x490>
 8017f58:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8017f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f60:	dda8      	ble.n	8017eb4 <_strtod_l+0xa04>
 8017f62:	e4ed      	b.n	8017940 <_strtod_l+0x490>
 8017f64:	9805      	ldr	r0, [sp, #20]
 8017f66:	b1f0      	cbz	r0, 8017fa6 <_strtod_l+0xaf6>
 8017f68:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8017f6c:	d81b      	bhi.n	8017fa6 <_strtod_l+0xaf6>
 8017f6e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8017ff8 <_strtod_l+0xb48>
 8017f72:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8017f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f7a:	d811      	bhi.n	8017fa0 <_strtod_l+0xaf0>
 8017f7c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8017f80:	ee1d 3a10 	vmov	r3, s26
 8017f84:	2b01      	cmp	r3, #1
 8017f86:	bf38      	it	cc
 8017f88:	2301      	movcc	r3, #1
 8017f8a:	ee0d 3a10 	vmov	s26, r3
 8017f8e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8017f92:	f1ba 0f00 	cmp.w	sl, #0
 8017f96:	d113      	bne.n	8017fc0 <_strtod_l+0xb10>
 8017f98:	eeb1 7b4d 	vneg.f64	d7, d13
 8017f9c:	ec53 2b17 	vmov	r2, r3, d7
 8017fa0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8017fa4:	1a43      	subs	r3, r0, r1
 8017fa6:	eeb0 0b48 	vmov.f64	d0, d8
 8017faa:	ec43 2b1c 	vmov	d12, r2, r3
 8017fae:	910a      	str	r1, [sp, #40]	; 0x28
 8017fb0:	f7ff f924 	bl	80171fc <__ulp>
 8017fb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017fb6:	eeac 8b00 	vfma.f64	d8, d12, d0
 8017fba:	ec59 8b18 	vmov	r8, r9, d8
 8017fbe:	e7aa      	b.n	8017f16 <_strtod_l+0xa66>
 8017fc0:	eeb0 7b4d 	vmov.f64	d7, d13
 8017fc4:	e7ea      	b.n	8017f9c <_strtod_l+0xaec>
 8017fc6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8017fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fce:	f57f af71 	bpl.w	8017eb4 <_strtod_l+0xa04>
 8017fd2:	e4b5      	b.n	8017940 <_strtod_l+0x490>
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	9308      	str	r3, [sp, #32]
 8017fd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017fda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017fdc:	6013      	str	r3, [r2, #0]
 8017fde:	f7ff baa6 	b.w	801752e <_strtod_l+0x7e>
 8017fe2:	2a65      	cmp	r2, #101	; 0x65
 8017fe4:	f43f aba2 	beq.w	801772c <_strtod_l+0x27c>
 8017fe8:	2a45      	cmp	r2, #69	; 0x45
 8017fea:	f43f ab9f 	beq.w	801772c <_strtod_l+0x27c>
 8017fee:	2101      	movs	r1, #1
 8017ff0:	f7ff bbd8 	b.w	80177a4 <_strtod_l+0x2f4>
 8017ff4:	f3af 8000 	nop.w
 8017ff8:	ffc00000 	.word	0xffc00000
 8017ffc:	41dfffff 	.word	0x41dfffff
 8018000:	000fffff 	.word	0x000fffff
 8018004:	7ff00000 	.word	0x7ff00000
 8018008:	7fefffff 	.word	0x7fefffff
 801800c:	7c9fffff 	.word	0x7c9fffff
 8018010:	7fe00000 	.word	0x7fe00000

08018014 <_strtod_r>:
 8018014:	4b01      	ldr	r3, [pc, #4]	; (801801c <_strtod_r+0x8>)
 8018016:	f7ff ba4b 	b.w	80174b0 <_strtod_l>
 801801a:	bf00      	nop
 801801c:	24000020 	.word	0x24000020

08018020 <_strtol_l.constprop.0>:
 8018020:	2b01      	cmp	r3, #1
 8018022:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018026:	d001      	beq.n	801802c <_strtol_l.constprop.0+0xc>
 8018028:	2b24      	cmp	r3, #36	; 0x24
 801802a:	d906      	bls.n	801803a <_strtol_l.constprop.0+0x1a>
 801802c:	f7fd fee4 	bl	8015df8 <__errno>
 8018030:	2316      	movs	r3, #22
 8018032:	6003      	str	r3, [r0, #0]
 8018034:	2000      	movs	r0, #0
 8018036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801803a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018120 <_strtol_l.constprop.0+0x100>
 801803e:	460d      	mov	r5, r1
 8018040:	462e      	mov	r6, r5
 8018042:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018046:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801804a:	f017 0708 	ands.w	r7, r7, #8
 801804e:	d1f7      	bne.n	8018040 <_strtol_l.constprop.0+0x20>
 8018050:	2c2d      	cmp	r4, #45	; 0x2d
 8018052:	d132      	bne.n	80180ba <_strtol_l.constprop.0+0x9a>
 8018054:	782c      	ldrb	r4, [r5, #0]
 8018056:	2701      	movs	r7, #1
 8018058:	1cb5      	adds	r5, r6, #2
 801805a:	2b00      	cmp	r3, #0
 801805c:	d05b      	beq.n	8018116 <_strtol_l.constprop.0+0xf6>
 801805e:	2b10      	cmp	r3, #16
 8018060:	d109      	bne.n	8018076 <_strtol_l.constprop.0+0x56>
 8018062:	2c30      	cmp	r4, #48	; 0x30
 8018064:	d107      	bne.n	8018076 <_strtol_l.constprop.0+0x56>
 8018066:	782c      	ldrb	r4, [r5, #0]
 8018068:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801806c:	2c58      	cmp	r4, #88	; 0x58
 801806e:	d14d      	bne.n	801810c <_strtol_l.constprop.0+0xec>
 8018070:	786c      	ldrb	r4, [r5, #1]
 8018072:	2310      	movs	r3, #16
 8018074:	3502      	adds	r5, #2
 8018076:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801807a:	f108 38ff 	add.w	r8, r8, #4294967295
 801807e:	f04f 0e00 	mov.w	lr, #0
 8018082:	fbb8 f9f3 	udiv	r9, r8, r3
 8018086:	4676      	mov	r6, lr
 8018088:	fb03 8a19 	mls	sl, r3, r9, r8
 801808c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018090:	f1bc 0f09 	cmp.w	ip, #9
 8018094:	d816      	bhi.n	80180c4 <_strtol_l.constprop.0+0xa4>
 8018096:	4664      	mov	r4, ip
 8018098:	42a3      	cmp	r3, r4
 801809a:	dd24      	ble.n	80180e6 <_strtol_l.constprop.0+0xc6>
 801809c:	f1be 3fff 	cmp.w	lr, #4294967295
 80180a0:	d008      	beq.n	80180b4 <_strtol_l.constprop.0+0x94>
 80180a2:	45b1      	cmp	r9, r6
 80180a4:	d31c      	bcc.n	80180e0 <_strtol_l.constprop.0+0xc0>
 80180a6:	d101      	bne.n	80180ac <_strtol_l.constprop.0+0x8c>
 80180a8:	45a2      	cmp	sl, r4
 80180aa:	db19      	blt.n	80180e0 <_strtol_l.constprop.0+0xc0>
 80180ac:	fb06 4603 	mla	r6, r6, r3, r4
 80180b0:	f04f 0e01 	mov.w	lr, #1
 80180b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80180b8:	e7e8      	b.n	801808c <_strtol_l.constprop.0+0x6c>
 80180ba:	2c2b      	cmp	r4, #43	; 0x2b
 80180bc:	bf04      	itt	eq
 80180be:	782c      	ldrbeq	r4, [r5, #0]
 80180c0:	1cb5      	addeq	r5, r6, #2
 80180c2:	e7ca      	b.n	801805a <_strtol_l.constprop.0+0x3a>
 80180c4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80180c8:	f1bc 0f19 	cmp.w	ip, #25
 80180cc:	d801      	bhi.n	80180d2 <_strtol_l.constprop.0+0xb2>
 80180ce:	3c37      	subs	r4, #55	; 0x37
 80180d0:	e7e2      	b.n	8018098 <_strtol_l.constprop.0+0x78>
 80180d2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80180d6:	f1bc 0f19 	cmp.w	ip, #25
 80180da:	d804      	bhi.n	80180e6 <_strtol_l.constprop.0+0xc6>
 80180dc:	3c57      	subs	r4, #87	; 0x57
 80180de:	e7db      	b.n	8018098 <_strtol_l.constprop.0+0x78>
 80180e0:	f04f 3eff 	mov.w	lr, #4294967295
 80180e4:	e7e6      	b.n	80180b4 <_strtol_l.constprop.0+0x94>
 80180e6:	f1be 3fff 	cmp.w	lr, #4294967295
 80180ea:	d105      	bne.n	80180f8 <_strtol_l.constprop.0+0xd8>
 80180ec:	2322      	movs	r3, #34	; 0x22
 80180ee:	6003      	str	r3, [r0, #0]
 80180f0:	4646      	mov	r6, r8
 80180f2:	b942      	cbnz	r2, 8018106 <_strtol_l.constprop.0+0xe6>
 80180f4:	4630      	mov	r0, r6
 80180f6:	e79e      	b.n	8018036 <_strtol_l.constprop.0+0x16>
 80180f8:	b107      	cbz	r7, 80180fc <_strtol_l.constprop.0+0xdc>
 80180fa:	4276      	negs	r6, r6
 80180fc:	2a00      	cmp	r2, #0
 80180fe:	d0f9      	beq.n	80180f4 <_strtol_l.constprop.0+0xd4>
 8018100:	f1be 0f00 	cmp.w	lr, #0
 8018104:	d000      	beq.n	8018108 <_strtol_l.constprop.0+0xe8>
 8018106:	1e69      	subs	r1, r5, #1
 8018108:	6011      	str	r1, [r2, #0]
 801810a:	e7f3      	b.n	80180f4 <_strtol_l.constprop.0+0xd4>
 801810c:	2430      	movs	r4, #48	; 0x30
 801810e:	2b00      	cmp	r3, #0
 8018110:	d1b1      	bne.n	8018076 <_strtol_l.constprop.0+0x56>
 8018112:	2308      	movs	r3, #8
 8018114:	e7af      	b.n	8018076 <_strtol_l.constprop.0+0x56>
 8018116:	2c30      	cmp	r4, #48	; 0x30
 8018118:	d0a5      	beq.n	8018066 <_strtol_l.constprop.0+0x46>
 801811a:	230a      	movs	r3, #10
 801811c:	e7ab      	b.n	8018076 <_strtol_l.constprop.0+0x56>
 801811e:	bf00      	nop
 8018120:	0802cf29 	.word	0x0802cf29

08018124 <_strtol_r>:
 8018124:	f7ff bf7c 	b.w	8018020 <_strtol_l.constprop.0>

08018128 <strtol_l>:
 8018128:	4613      	mov	r3, r2
 801812a:	460a      	mov	r2, r1
 801812c:	4601      	mov	r1, r0
 801812e:	4802      	ldr	r0, [pc, #8]	; (8018138 <strtol_l+0x10>)
 8018130:	6800      	ldr	r0, [r0, #0]
 8018132:	f7ff bf75 	b.w	8018020 <_strtol_l.constprop.0>
 8018136:	bf00      	nop
 8018138:	240001d8 	.word	0x240001d8

0801813c <__ascii_wctomb>:
 801813c:	b149      	cbz	r1, 8018152 <__ascii_wctomb+0x16>
 801813e:	2aff      	cmp	r2, #255	; 0xff
 8018140:	bf85      	ittet	hi
 8018142:	238a      	movhi	r3, #138	; 0x8a
 8018144:	6003      	strhi	r3, [r0, #0]
 8018146:	700a      	strbls	r2, [r1, #0]
 8018148:	f04f 30ff 	movhi.w	r0, #4294967295
 801814c:	bf98      	it	ls
 801814e:	2001      	movls	r0, #1
 8018150:	4770      	bx	lr
 8018152:	4608      	mov	r0, r1
 8018154:	4770      	bx	lr
	...

08018158 <_strtoll_l.constprop.0>:
 8018158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801815c:	b085      	sub	sp, #20
 801815e:	4688      	mov	r8, r1
 8018160:	9201      	str	r2, [sp, #4]
 8018162:	4a45      	ldr	r2, [pc, #276]	; (8018278 <_strtoll_l.constprop.0+0x120>)
 8018164:	9003      	str	r0, [sp, #12]
 8018166:	461e      	mov	r6, r3
 8018168:	460d      	mov	r5, r1
 801816a:	462b      	mov	r3, r5
 801816c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018170:	5d17      	ldrb	r7, [r2, r4]
 8018172:	f017 0708 	ands.w	r7, r7, #8
 8018176:	d1f8      	bne.n	801816a <_strtoll_l.constprop.0+0x12>
 8018178:	2c2d      	cmp	r4, #45	; 0x2d
 801817a:	d14a      	bne.n	8018212 <_strtoll_l.constprop.0+0xba>
 801817c:	782c      	ldrb	r4, [r5, #0]
 801817e:	2701      	movs	r7, #1
 8018180:	1c9d      	adds	r5, r3, #2
 8018182:	2e00      	cmp	r6, #0
 8018184:	d073      	beq.n	801826e <_strtoll_l.constprop.0+0x116>
 8018186:	2e10      	cmp	r6, #16
 8018188:	d109      	bne.n	801819e <_strtoll_l.constprop.0+0x46>
 801818a:	2c30      	cmp	r4, #48	; 0x30
 801818c:	d107      	bne.n	801819e <_strtoll_l.constprop.0+0x46>
 801818e:	782b      	ldrb	r3, [r5, #0]
 8018190:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018194:	2b58      	cmp	r3, #88	; 0x58
 8018196:	d165      	bne.n	8018264 <_strtoll_l.constprop.0+0x10c>
 8018198:	786c      	ldrb	r4, [r5, #1]
 801819a:	2610      	movs	r6, #16
 801819c:	3502      	adds	r5, #2
 801819e:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 80181a2:	f107 3bff 	add.w	fp, r7, #4294967295
 80181a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80181aa:	ea4f 79e6 	mov.w	r9, r6, asr #31
 80181ae:	4632      	mov	r2, r6
 80181b0:	464b      	mov	r3, r9
 80181b2:	4658      	mov	r0, fp
 80181b4:	4651      	mov	r1, sl
 80181b6:	f7e8 fb1f 	bl	80007f8 <__aeabi_uldivmod>
 80181ba:	9202      	str	r2, [sp, #8]
 80181bc:	2200      	movs	r2, #0
 80181be:	4684      	mov	ip, r0
 80181c0:	468e      	mov	lr, r1
 80181c2:	4610      	mov	r0, r2
 80181c4:	4611      	mov	r1, r2
 80181c6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80181ca:	2b09      	cmp	r3, #9
 80181cc:	d905      	bls.n	80181da <_strtoll_l.constprop.0+0x82>
 80181ce:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80181d2:	2b19      	cmp	r3, #25
 80181d4:	d822      	bhi.n	801821c <_strtoll_l.constprop.0+0xc4>
 80181d6:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
 80181da:	429e      	cmp	r6, r3
 80181dc:	dd28      	ble.n	8018230 <_strtoll_l.constprop.0+0xd8>
 80181de:	1c54      	adds	r4, r2, #1
 80181e0:	d014      	beq.n	801820c <_strtoll_l.constprop.0+0xb4>
 80181e2:	4584      	cmp	ip, r0
 80181e4:	eb7e 0201 	sbcs.w	r2, lr, r1
 80181e8:	d31f      	bcc.n	801822a <_strtoll_l.constprop.0+0xd2>
 80181ea:	458e      	cmp	lr, r1
 80181ec:	bf08      	it	eq
 80181ee:	4584      	cmpeq	ip, r0
 80181f0:	d102      	bne.n	80181f8 <_strtoll_l.constprop.0+0xa0>
 80181f2:	9a02      	ldr	r2, [sp, #8]
 80181f4:	429a      	cmp	r2, r3
 80181f6:	db18      	blt.n	801822a <_strtoll_l.constprop.0+0xd2>
 80181f8:	4371      	muls	r1, r6
 80181fa:	fb00 1109 	mla	r1, r0, r9, r1
 80181fe:	fba6 0200 	umull	r0, r2, r6, r0
 8018202:	440a      	add	r2, r1
 8018204:	1818      	adds	r0, r3, r0
 8018206:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 801820a:	2201      	movs	r2, #1
 801820c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018210:	e7d9      	b.n	80181c6 <_strtoll_l.constprop.0+0x6e>
 8018212:	2c2b      	cmp	r4, #43	; 0x2b
 8018214:	bf04      	itt	eq
 8018216:	782c      	ldrbeq	r4, [r5, #0]
 8018218:	1c9d      	addeq	r5, r3, #2
 801821a:	e7b2      	b.n	8018182 <_strtoll_l.constprop.0+0x2a>
 801821c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8018220:	2b19      	cmp	r3, #25
 8018222:	d805      	bhi.n	8018230 <_strtoll_l.constprop.0+0xd8>
 8018224:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 8018228:	e7d7      	b.n	80181da <_strtoll_l.constprop.0+0x82>
 801822a:	f04f 32ff 	mov.w	r2, #4294967295
 801822e:	e7ed      	b.n	801820c <_strtoll_l.constprop.0+0xb4>
 8018230:	1c53      	adds	r3, r2, #1
 8018232:	d109      	bne.n	8018248 <_strtoll_l.constprop.0+0xf0>
 8018234:	9a03      	ldr	r2, [sp, #12]
 8018236:	2322      	movs	r3, #34	; 0x22
 8018238:	6013      	str	r3, [r2, #0]
 801823a:	9b01      	ldr	r3, [sp, #4]
 801823c:	4658      	mov	r0, fp
 801823e:	4651      	mov	r1, sl
 8018240:	b953      	cbnz	r3, 8018258 <_strtoll_l.constprop.0+0x100>
 8018242:	b005      	add	sp, #20
 8018244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018248:	b117      	cbz	r7, 8018250 <_strtoll_l.constprop.0+0xf8>
 801824a:	4240      	negs	r0, r0
 801824c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018250:	9b01      	ldr	r3, [sp, #4]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d0f5      	beq.n	8018242 <_strtoll_l.constprop.0+0xea>
 8018256:	b10a      	cbz	r2, 801825c <_strtoll_l.constprop.0+0x104>
 8018258:	f105 38ff 	add.w	r8, r5, #4294967295
 801825c:	9b01      	ldr	r3, [sp, #4]
 801825e:	f8c3 8000 	str.w	r8, [r3]
 8018262:	e7ee      	b.n	8018242 <_strtoll_l.constprop.0+0xea>
 8018264:	2430      	movs	r4, #48	; 0x30
 8018266:	2e00      	cmp	r6, #0
 8018268:	d199      	bne.n	801819e <_strtoll_l.constprop.0+0x46>
 801826a:	2608      	movs	r6, #8
 801826c:	e797      	b.n	801819e <_strtoll_l.constprop.0+0x46>
 801826e:	2c30      	cmp	r4, #48	; 0x30
 8018270:	d08d      	beq.n	801818e <_strtoll_l.constprop.0+0x36>
 8018272:	260a      	movs	r6, #10
 8018274:	e793      	b.n	801819e <_strtoll_l.constprop.0+0x46>
 8018276:	bf00      	nop
 8018278:	0802cf29 	.word	0x0802cf29

0801827c <strtoll_l>:
 801827c:	4613      	mov	r3, r2
 801827e:	460a      	mov	r2, r1
 8018280:	4601      	mov	r1, r0
 8018282:	4802      	ldr	r0, [pc, #8]	; (801828c <strtoll_l+0x10>)
 8018284:	6800      	ldr	r0, [r0, #0]
 8018286:	f7ff bf67 	b.w	8018158 <_strtoll_l.constprop.0>
 801828a:	bf00      	nop
 801828c:	240001d8 	.word	0x240001d8

08018290 <__ssputs_r>:
 8018290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018294:	688e      	ldr	r6, [r1, #8]
 8018296:	461f      	mov	r7, r3
 8018298:	42be      	cmp	r6, r7
 801829a:	680b      	ldr	r3, [r1, #0]
 801829c:	4682      	mov	sl, r0
 801829e:	460c      	mov	r4, r1
 80182a0:	4690      	mov	r8, r2
 80182a2:	d82c      	bhi.n	80182fe <__ssputs_r+0x6e>
 80182a4:	898a      	ldrh	r2, [r1, #12]
 80182a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80182aa:	d026      	beq.n	80182fa <__ssputs_r+0x6a>
 80182ac:	6965      	ldr	r5, [r4, #20]
 80182ae:	6909      	ldr	r1, [r1, #16]
 80182b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80182b4:	eba3 0901 	sub.w	r9, r3, r1
 80182b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80182bc:	1c7b      	adds	r3, r7, #1
 80182be:	444b      	add	r3, r9
 80182c0:	106d      	asrs	r5, r5, #1
 80182c2:	429d      	cmp	r5, r3
 80182c4:	bf38      	it	cc
 80182c6:	461d      	movcc	r5, r3
 80182c8:	0553      	lsls	r3, r2, #21
 80182ca:	d527      	bpl.n	801831c <__ssputs_r+0x8c>
 80182cc:	4629      	mov	r1, r5
 80182ce:	f7fc f85f 	bl	8014390 <_malloc_r>
 80182d2:	4606      	mov	r6, r0
 80182d4:	b360      	cbz	r0, 8018330 <__ssputs_r+0xa0>
 80182d6:	6921      	ldr	r1, [r4, #16]
 80182d8:	464a      	mov	r2, r9
 80182da:	f7fd fdbc 	bl	8015e56 <memcpy>
 80182de:	89a3      	ldrh	r3, [r4, #12]
 80182e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80182e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80182e8:	81a3      	strh	r3, [r4, #12]
 80182ea:	6126      	str	r6, [r4, #16]
 80182ec:	6165      	str	r5, [r4, #20]
 80182ee:	444e      	add	r6, r9
 80182f0:	eba5 0509 	sub.w	r5, r5, r9
 80182f4:	6026      	str	r6, [r4, #0]
 80182f6:	60a5      	str	r5, [r4, #8]
 80182f8:	463e      	mov	r6, r7
 80182fa:	42be      	cmp	r6, r7
 80182fc:	d900      	bls.n	8018300 <__ssputs_r+0x70>
 80182fe:	463e      	mov	r6, r7
 8018300:	6820      	ldr	r0, [r4, #0]
 8018302:	4632      	mov	r2, r6
 8018304:	4641      	mov	r1, r8
 8018306:	f000 fb6f 	bl	80189e8 <memmove>
 801830a:	68a3      	ldr	r3, [r4, #8]
 801830c:	1b9b      	subs	r3, r3, r6
 801830e:	60a3      	str	r3, [r4, #8]
 8018310:	6823      	ldr	r3, [r4, #0]
 8018312:	4433      	add	r3, r6
 8018314:	6023      	str	r3, [r4, #0]
 8018316:	2000      	movs	r0, #0
 8018318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801831c:	462a      	mov	r2, r5
 801831e:	f001 fb7a 	bl	8019a16 <_realloc_r>
 8018322:	4606      	mov	r6, r0
 8018324:	2800      	cmp	r0, #0
 8018326:	d1e0      	bne.n	80182ea <__ssputs_r+0x5a>
 8018328:	6921      	ldr	r1, [r4, #16]
 801832a:	4650      	mov	r0, sl
 801832c:	f7fe fb9c 	bl	8016a68 <_free_r>
 8018330:	230c      	movs	r3, #12
 8018332:	f8ca 3000 	str.w	r3, [sl]
 8018336:	89a3      	ldrh	r3, [r4, #12]
 8018338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801833c:	81a3      	strh	r3, [r4, #12]
 801833e:	f04f 30ff 	mov.w	r0, #4294967295
 8018342:	e7e9      	b.n	8018318 <__ssputs_r+0x88>

08018344 <_svfiprintf_r>:
 8018344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018348:	4698      	mov	r8, r3
 801834a:	898b      	ldrh	r3, [r1, #12]
 801834c:	061b      	lsls	r3, r3, #24
 801834e:	b09d      	sub	sp, #116	; 0x74
 8018350:	4607      	mov	r7, r0
 8018352:	460d      	mov	r5, r1
 8018354:	4614      	mov	r4, r2
 8018356:	d50e      	bpl.n	8018376 <_svfiprintf_r+0x32>
 8018358:	690b      	ldr	r3, [r1, #16]
 801835a:	b963      	cbnz	r3, 8018376 <_svfiprintf_r+0x32>
 801835c:	2140      	movs	r1, #64	; 0x40
 801835e:	f7fc f817 	bl	8014390 <_malloc_r>
 8018362:	6028      	str	r0, [r5, #0]
 8018364:	6128      	str	r0, [r5, #16]
 8018366:	b920      	cbnz	r0, 8018372 <_svfiprintf_r+0x2e>
 8018368:	230c      	movs	r3, #12
 801836a:	603b      	str	r3, [r7, #0]
 801836c:	f04f 30ff 	mov.w	r0, #4294967295
 8018370:	e0d0      	b.n	8018514 <_svfiprintf_r+0x1d0>
 8018372:	2340      	movs	r3, #64	; 0x40
 8018374:	616b      	str	r3, [r5, #20]
 8018376:	2300      	movs	r3, #0
 8018378:	9309      	str	r3, [sp, #36]	; 0x24
 801837a:	2320      	movs	r3, #32
 801837c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018380:	f8cd 800c 	str.w	r8, [sp, #12]
 8018384:	2330      	movs	r3, #48	; 0x30
 8018386:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801852c <_svfiprintf_r+0x1e8>
 801838a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801838e:	f04f 0901 	mov.w	r9, #1
 8018392:	4623      	mov	r3, r4
 8018394:	469a      	mov	sl, r3
 8018396:	f813 2b01 	ldrb.w	r2, [r3], #1
 801839a:	b10a      	cbz	r2, 80183a0 <_svfiprintf_r+0x5c>
 801839c:	2a25      	cmp	r2, #37	; 0x25
 801839e:	d1f9      	bne.n	8018394 <_svfiprintf_r+0x50>
 80183a0:	ebba 0b04 	subs.w	fp, sl, r4
 80183a4:	d00b      	beq.n	80183be <_svfiprintf_r+0x7a>
 80183a6:	465b      	mov	r3, fp
 80183a8:	4622      	mov	r2, r4
 80183aa:	4629      	mov	r1, r5
 80183ac:	4638      	mov	r0, r7
 80183ae:	f7ff ff6f 	bl	8018290 <__ssputs_r>
 80183b2:	3001      	adds	r0, #1
 80183b4:	f000 80a9 	beq.w	801850a <_svfiprintf_r+0x1c6>
 80183b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80183ba:	445a      	add	r2, fp
 80183bc:	9209      	str	r2, [sp, #36]	; 0x24
 80183be:	f89a 3000 	ldrb.w	r3, [sl]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	f000 80a1 	beq.w	801850a <_svfiprintf_r+0x1c6>
 80183c8:	2300      	movs	r3, #0
 80183ca:	f04f 32ff 	mov.w	r2, #4294967295
 80183ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80183d2:	f10a 0a01 	add.w	sl, sl, #1
 80183d6:	9304      	str	r3, [sp, #16]
 80183d8:	9307      	str	r3, [sp, #28]
 80183da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80183de:	931a      	str	r3, [sp, #104]	; 0x68
 80183e0:	4654      	mov	r4, sl
 80183e2:	2205      	movs	r2, #5
 80183e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183e8:	4850      	ldr	r0, [pc, #320]	; (801852c <_svfiprintf_r+0x1e8>)
 80183ea:	f7e7 ffa1 	bl	8000330 <memchr>
 80183ee:	9a04      	ldr	r2, [sp, #16]
 80183f0:	b9d8      	cbnz	r0, 801842a <_svfiprintf_r+0xe6>
 80183f2:	06d0      	lsls	r0, r2, #27
 80183f4:	bf44      	itt	mi
 80183f6:	2320      	movmi	r3, #32
 80183f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80183fc:	0711      	lsls	r1, r2, #28
 80183fe:	bf44      	itt	mi
 8018400:	232b      	movmi	r3, #43	; 0x2b
 8018402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018406:	f89a 3000 	ldrb.w	r3, [sl]
 801840a:	2b2a      	cmp	r3, #42	; 0x2a
 801840c:	d015      	beq.n	801843a <_svfiprintf_r+0xf6>
 801840e:	9a07      	ldr	r2, [sp, #28]
 8018410:	4654      	mov	r4, sl
 8018412:	2000      	movs	r0, #0
 8018414:	f04f 0c0a 	mov.w	ip, #10
 8018418:	4621      	mov	r1, r4
 801841a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801841e:	3b30      	subs	r3, #48	; 0x30
 8018420:	2b09      	cmp	r3, #9
 8018422:	d94d      	bls.n	80184c0 <_svfiprintf_r+0x17c>
 8018424:	b1b0      	cbz	r0, 8018454 <_svfiprintf_r+0x110>
 8018426:	9207      	str	r2, [sp, #28]
 8018428:	e014      	b.n	8018454 <_svfiprintf_r+0x110>
 801842a:	eba0 0308 	sub.w	r3, r0, r8
 801842e:	fa09 f303 	lsl.w	r3, r9, r3
 8018432:	4313      	orrs	r3, r2
 8018434:	9304      	str	r3, [sp, #16]
 8018436:	46a2      	mov	sl, r4
 8018438:	e7d2      	b.n	80183e0 <_svfiprintf_r+0x9c>
 801843a:	9b03      	ldr	r3, [sp, #12]
 801843c:	1d19      	adds	r1, r3, #4
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	9103      	str	r1, [sp, #12]
 8018442:	2b00      	cmp	r3, #0
 8018444:	bfbb      	ittet	lt
 8018446:	425b      	neglt	r3, r3
 8018448:	f042 0202 	orrlt.w	r2, r2, #2
 801844c:	9307      	strge	r3, [sp, #28]
 801844e:	9307      	strlt	r3, [sp, #28]
 8018450:	bfb8      	it	lt
 8018452:	9204      	strlt	r2, [sp, #16]
 8018454:	7823      	ldrb	r3, [r4, #0]
 8018456:	2b2e      	cmp	r3, #46	; 0x2e
 8018458:	d10c      	bne.n	8018474 <_svfiprintf_r+0x130>
 801845a:	7863      	ldrb	r3, [r4, #1]
 801845c:	2b2a      	cmp	r3, #42	; 0x2a
 801845e:	d134      	bne.n	80184ca <_svfiprintf_r+0x186>
 8018460:	9b03      	ldr	r3, [sp, #12]
 8018462:	1d1a      	adds	r2, r3, #4
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	9203      	str	r2, [sp, #12]
 8018468:	2b00      	cmp	r3, #0
 801846a:	bfb8      	it	lt
 801846c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018470:	3402      	adds	r4, #2
 8018472:	9305      	str	r3, [sp, #20]
 8018474:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801853c <_svfiprintf_r+0x1f8>
 8018478:	7821      	ldrb	r1, [r4, #0]
 801847a:	2203      	movs	r2, #3
 801847c:	4650      	mov	r0, sl
 801847e:	f7e7 ff57 	bl	8000330 <memchr>
 8018482:	b138      	cbz	r0, 8018494 <_svfiprintf_r+0x150>
 8018484:	9b04      	ldr	r3, [sp, #16]
 8018486:	eba0 000a 	sub.w	r0, r0, sl
 801848a:	2240      	movs	r2, #64	; 0x40
 801848c:	4082      	lsls	r2, r0
 801848e:	4313      	orrs	r3, r2
 8018490:	3401      	adds	r4, #1
 8018492:	9304      	str	r3, [sp, #16]
 8018494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018498:	4825      	ldr	r0, [pc, #148]	; (8018530 <_svfiprintf_r+0x1ec>)
 801849a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801849e:	2206      	movs	r2, #6
 80184a0:	f7e7 ff46 	bl	8000330 <memchr>
 80184a4:	2800      	cmp	r0, #0
 80184a6:	d038      	beq.n	801851a <_svfiprintf_r+0x1d6>
 80184a8:	4b22      	ldr	r3, [pc, #136]	; (8018534 <_svfiprintf_r+0x1f0>)
 80184aa:	bb1b      	cbnz	r3, 80184f4 <_svfiprintf_r+0x1b0>
 80184ac:	9b03      	ldr	r3, [sp, #12]
 80184ae:	3307      	adds	r3, #7
 80184b0:	f023 0307 	bic.w	r3, r3, #7
 80184b4:	3308      	adds	r3, #8
 80184b6:	9303      	str	r3, [sp, #12]
 80184b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184ba:	4433      	add	r3, r6
 80184bc:	9309      	str	r3, [sp, #36]	; 0x24
 80184be:	e768      	b.n	8018392 <_svfiprintf_r+0x4e>
 80184c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80184c4:	460c      	mov	r4, r1
 80184c6:	2001      	movs	r0, #1
 80184c8:	e7a6      	b.n	8018418 <_svfiprintf_r+0xd4>
 80184ca:	2300      	movs	r3, #0
 80184cc:	3401      	adds	r4, #1
 80184ce:	9305      	str	r3, [sp, #20]
 80184d0:	4619      	mov	r1, r3
 80184d2:	f04f 0c0a 	mov.w	ip, #10
 80184d6:	4620      	mov	r0, r4
 80184d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80184dc:	3a30      	subs	r2, #48	; 0x30
 80184de:	2a09      	cmp	r2, #9
 80184e0:	d903      	bls.n	80184ea <_svfiprintf_r+0x1a6>
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d0c6      	beq.n	8018474 <_svfiprintf_r+0x130>
 80184e6:	9105      	str	r1, [sp, #20]
 80184e8:	e7c4      	b.n	8018474 <_svfiprintf_r+0x130>
 80184ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80184ee:	4604      	mov	r4, r0
 80184f0:	2301      	movs	r3, #1
 80184f2:	e7f0      	b.n	80184d6 <_svfiprintf_r+0x192>
 80184f4:	ab03      	add	r3, sp, #12
 80184f6:	9300      	str	r3, [sp, #0]
 80184f8:	462a      	mov	r2, r5
 80184fa:	4b0f      	ldr	r3, [pc, #60]	; (8018538 <_svfiprintf_r+0x1f4>)
 80184fc:	a904      	add	r1, sp, #16
 80184fe:	4638      	mov	r0, r7
 8018500:	f7fc f862 	bl	80145c8 <_printf_float>
 8018504:	1c42      	adds	r2, r0, #1
 8018506:	4606      	mov	r6, r0
 8018508:	d1d6      	bne.n	80184b8 <_svfiprintf_r+0x174>
 801850a:	89ab      	ldrh	r3, [r5, #12]
 801850c:	065b      	lsls	r3, r3, #25
 801850e:	f53f af2d 	bmi.w	801836c <_svfiprintf_r+0x28>
 8018512:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018514:	b01d      	add	sp, #116	; 0x74
 8018516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801851a:	ab03      	add	r3, sp, #12
 801851c:	9300      	str	r3, [sp, #0]
 801851e:	462a      	mov	r2, r5
 8018520:	4b05      	ldr	r3, [pc, #20]	; (8018538 <_svfiprintf_r+0x1f4>)
 8018522:	a904      	add	r1, sp, #16
 8018524:	4638      	mov	r0, r7
 8018526:	f7fc fad7 	bl	8014ad8 <_printf_i>
 801852a:	e7eb      	b.n	8018504 <_svfiprintf_r+0x1c0>
 801852c:	0802d029 	.word	0x0802d029
 8018530:	0802d033 	.word	0x0802d033
 8018534:	080145c9 	.word	0x080145c9
 8018538:	08018291 	.word	0x08018291
 801853c:	0802d02f 	.word	0x0802d02f

08018540 <__sfputc_r>:
 8018540:	6893      	ldr	r3, [r2, #8]
 8018542:	3b01      	subs	r3, #1
 8018544:	2b00      	cmp	r3, #0
 8018546:	b410      	push	{r4}
 8018548:	6093      	str	r3, [r2, #8]
 801854a:	da08      	bge.n	801855e <__sfputc_r+0x1e>
 801854c:	6994      	ldr	r4, [r2, #24]
 801854e:	42a3      	cmp	r3, r4
 8018550:	db01      	blt.n	8018556 <__sfputc_r+0x16>
 8018552:	290a      	cmp	r1, #10
 8018554:	d103      	bne.n	801855e <__sfputc_r+0x1e>
 8018556:	f85d 4b04 	ldr.w	r4, [sp], #4
 801855a:	f7fc bfac 	b.w	80154b6 <__swbuf_r>
 801855e:	6813      	ldr	r3, [r2, #0]
 8018560:	1c58      	adds	r0, r3, #1
 8018562:	6010      	str	r0, [r2, #0]
 8018564:	7019      	strb	r1, [r3, #0]
 8018566:	4608      	mov	r0, r1
 8018568:	f85d 4b04 	ldr.w	r4, [sp], #4
 801856c:	4770      	bx	lr

0801856e <__sfputs_r>:
 801856e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018570:	4606      	mov	r6, r0
 8018572:	460f      	mov	r7, r1
 8018574:	4614      	mov	r4, r2
 8018576:	18d5      	adds	r5, r2, r3
 8018578:	42ac      	cmp	r4, r5
 801857a:	d101      	bne.n	8018580 <__sfputs_r+0x12>
 801857c:	2000      	movs	r0, #0
 801857e:	e007      	b.n	8018590 <__sfputs_r+0x22>
 8018580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018584:	463a      	mov	r2, r7
 8018586:	4630      	mov	r0, r6
 8018588:	f7ff ffda 	bl	8018540 <__sfputc_r>
 801858c:	1c43      	adds	r3, r0, #1
 801858e:	d1f3      	bne.n	8018578 <__sfputs_r+0xa>
 8018590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018594 <_vfiprintf_r>:
 8018594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018598:	460d      	mov	r5, r1
 801859a:	b09d      	sub	sp, #116	; 0x74
 801859c:	4614      	mov	r4, r2
 801859e:	4698      	mov	r8, r3
 80185a0:	4606      	mov	r6, r0
 80185a2:	b118      	cbz	r0, 80185ac <_vfiprintf_r+0x18>
 80185a4:	6a03      	ldr	r3, [r0, #32]
 80185a6:	b90b      	cbnz	r3, 80185ac <_vfiprintf_r+0x18>
 80185a8:	f7fc fe48 	bl	801523c <__sinit>
 80185ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80185ae:	07d9      	lsls	r1, r3, #31
 80185b0:	d405      	bmi.n	80185be <_vfiprintf_r+0x2a>
 80185b2:	89ab      	ldrh	r3, [r5, #12]
 80185b4:	059a      	lsls	r2, r3, #22
 80185b6:	d402      	bmi.n	80185be <_vfiprintf_r+0x2a>
 80185b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80185ba:	f7fd fc49 	bl	8015e50 <__retarget_lock_acquire_recursive>
 80185be:	89ab      	ldrh	r3, [r5, #12]
 80185c0:	071b      	lsls	r3, r3, #28
 80185c2:	d501      	bpl.n	80185c8 <_vfiprintf_r+0x34>
 80185c4:	692b      	ldr	r3, [r5, #16]
 80185c6:	b99b      	cbnz	r3, 80185f0 <_vfiprintf_r+0x5c>
 80185c8:	4629      	mov	r1, r5
 80185ca:	4630      	mov	r0, r6
 80185cc:	f7fc ffb0 	bl	8015530 <__swsetup_r>
 80185d0:	b170      	cbz	r0, 80185f0 <_vfiprintf_r+0x5c>
 80185d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80185d4:	07dc      	lsls	r4, r3, #31
 80185d6:	d504      	bpl.n	80185e2 <_vfiprintf_r+0x4e>
 80185d8:	f04f 30ff 	mov.w	r0, #4294967295
 80185dc:	b01d      	add	sp, #116	; 0x74
 80185de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185e2:	89ab      	ldrh	r3, [r5, #12]
 80185e4:	0598      	lsls	r0, r3, #22
 80185e6:	d4f7      	bmi.n	80185d8 <_vfiprintf_r+0x44>
 80185e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80185ea:	f7fd fc33 	bl	8015e54 <__retarget_lock_release_recursive>
 80185ee:	e7f3      	b.n	80185d8 <_vfiprintf_r+0x44>
 80185f0:	2300      	movs	r3, #0
 80185f2:	9309      	str	r3, [sp, #36]	; 0x24
 80185f4:	2320      	movs	r3, #32
 80185f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80185fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80185fe:	2330      	movs	r3, #48	; 0x30
 8018600:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80187b4 <_vfiprintf_r+0x220>
 8018604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018608:	f04f 0901 	mov.w	r9, #1
 801860c:	4623      	mov	r3, r4
 801860e:	469a      	mov	sl, r3
 8018610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018614:	b10a      	cbz	r2, 801861a <_vfiprintf_r+0x86>
 8018616:	2a25      	cmp	r2, #37	; 0x25
 8018618:	d1f9      	bne.n	801860e <_vfiprintf_r+0x7a>
 801861a:	ebba 0b04 	subs.w	fp, sl, r4
 801861e:	d00b      	beq.n	8018638 <_vfiprintf_r+0xa4>
 8018620:	465b      	mov	r3, fp
 8018622:	4622      	mov	r2, r4
 8018624:	4629      	mov	r1, r5
 8018626:	4630      	mov	r0, r6
 8018628:	f7ff ffa1 	bl	801856e <__sfputs_r>
 801862c:	3001      	adds	r0, #1
 801862e:	f000 80a9 	beq.w	8018784 <_vfiprintf_r+0x1f0>
 8018632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018634:	445a      	add	r2, fp
 8018636:	9209      	str	r2, [sp, #36]	; 0x24
 8018638:	f89a 3000 	ldrb.w	r3, [sl]
 801863c:	2b00      	cmp	r3, #0
 801863e:	f000 80a1 	beq.w	8018784 <_vfiprintf_r+0x1f0>
 8018642:	2300      	movs	r3, #0
 8018644:	f04f 32ff 	mov.w	r2, #4294967295
 8018648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801864c:	f10a 0a01 	add.w	sl, sl, #1
 8018650:	9304      	str	r3, [sp, #16]
 8018652:	9307      	str	r3, [sp, #28]
 8018654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018658:	931a      	str	r3, [sp, #104]	; 0x68
 801865a:	4654      	mov	r4, sl
 801865c:	2205      	movs	r2, #5
 801865e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018662:	4854      	ldr	r0, [pc, #336]	; (80187b4 <_vfiprintf_r+0x220>)
 8018664:	f7e7 fe64 	bl	8000330 <memchr>
 8018668:	9a04      	ldr	r2, [sp, #16]
 801866a:	b9d8      	cbnz	r0, 80186a4 <_vfiprintf_r+0x110>
 801866c:	06d1      	lsls	r1, r2, #27
 801866e:	bf44      	itt	mi
 8018670:	2320      	movmi	r3, #32
 8018672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018676:	0713      	lsls	r3, r2, #28
 8018678:	bf44      	itt	mi
 801867a:	232b      	movmi	r3, #43	; 0x2b
 801867c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018680:	f89a 3000 	ldrb.w	r3, [sl]
 8018684:	2b2a      	cmp	r3, #42	; 0x2a
 8018686:	d015      	beq.n	80186b4 <_vfiprintf_r+0x120>
 8018688:	9a07      	ldr	r2, [sp, #28]
 801868a:	4654      	mov	r4, sl
 801868c:	2000      	movs	r0, #0
 801868e:	f04f 0c0a 	mov.w	ip, #10
 8018692:	4621      	mov	r1, r4
 8018694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018698:	3b30      	subs	r3, #48	; 0x30
 801869a:	2b09      	cmp	r3, #9
 801869c:	d94d      	bls.n	801873a <_vfiprintf_r+0x1a6>
 801869e:	b1b0      	cbz	r0, 80186ce <_vfiprintf_r+0x13a>
 80186a0:	9207      	str	r2, [sp, #28]
 80186a2:	e014      	b.n	80186ce <_vfiprintf_r+0x13a>
 80186a4:	eba0 0308 	sub.w	r3, r0, r8
 80186a8:	fa09 f303 	lsl.w	r3, r9, r3
 80186ac:	4313      	orrs	r3, r2
 80186ae:	9304      	str	r3, [sp, #16]
 80186b0:	46a2      	mov	sl, r4
 80186b2:	e7d2      	b.n	801865a <_vfiprintf_r+0xc6>
 80186b4:	9b03      	ldr	r3, [sp, #12]
 80186b6:	1d19      	adds	r1, r3, #4
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	9103      	str	r1, [sp, #12]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	bfbb      	ittet	lt
 80186c0:	425b      	neglt	r3, r3
 80186c2:	f042 0202 	orrlt.w	r2, r2, #2
 80186c6:	9307      	strge	r3, [sp, #28]
 80186c8:	9307      	strlt	r3, [sp, #28]
 80186ca:	bfb8      	it	lt
 80186cc:	9204      	strlt	r2, [sp, #16]
 80186ce:	7823      	ldrb	r3, [r4, #0]
 80186d0:	2b2e      	cmp	r3, #46	; 0x2e
 80186d2:	d10c      	bne.n	80186ee <_vfiprintf_r+0x15a>
 80186d4:	7863      	ldrb	r3, [r4, #1]
 80186d6:	2b2a      	cmp	r3, #42	; 0x2a
 80186d8:	d134      	bne.n	8018744 <_vfiprintf_r+0x1b0>
 80186da:	9b03      	ldr	r3, [sp, #12]
 80186dc:	1d1a      	adds	r2, r3, #4
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	9203      	str	r2, [sp, #12]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	bfb8      	it	lt
 80186e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80186ea:	3402      	adds	r4, #2
 80186ec:	9305      	str	r3, [sp, #20]
 80186ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80187c4 <_vfiprintf_r+0x230>
 80186f2:	7821      	ldrb	r1, [r4, #0]
 80186f4:	2203      	movs	r2, #3
 80186f6:	4650      	mov	r0, sl
 80186f8:	f7e7 fe1a 	bl	8000330 <memchr>
 80186fc:	b138      	cbz	r0, 801870e <_vfiprintf_r+0x17a>
 80186fe:	9b04      	ldr	r3, [sp, #16]
 8018700:	eba0 000a 	sub.w	r0, r0, sl
 8018704:	2240      	movs	r2, #64	; 0x40
 8018706:	4082      	lsls	r2, r0
 8018708:	4313      	orrs	r3, r2
 801870a:	3401      	adds	r4, #1
 801870c:	9304      	str	r3, [sp, #16]
 801870e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018712:	4829      	ldr	r0, [pc, #164]	; (80187b8 <_vfiprintf_r+0x224>)
 8018714:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018718:	2206      	movs	r2, #6
 801871a:	f7e7 fe09 	bl	8000330 <memchr>
 801871e:	2800      	cmp	r0, #0
 8018720:	d03f      	beq.n	80187a2 <_vfiprintf_r+0x20e>
 8018722:	4b26      	ldr	r3, [pc, #152]	; (80187bc <_vfiprintf_r+0x228>)
 8018724:	bb1b      	cbnz	r3, 801876e <_vfiprintf_r+0x1da>
 8018726:	9b03      	ldr	r3, [sp, #12]
 8018728:	3307      	adds	r3, #7
 801872a:	f023 0307 	bic.w	r3, r3, #7
 801872e:	3308      	adds	r3, #8
 8018730:	9303      	str	r3, [sp, #12]
 8018732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018734:	443b      	add	r3, r7
 8018736:	9309      	str	r3, [sp, #36]	; 0x24
 8018738:	e768      	b.n	801860c <_vfiprintf_r+0x78>
 801873a:	fb0c 3202 	mla	r2, ip, r2, r3
 801873e:	460c      	mov	r4, r1
 8018740:	2001      	movs	r0, #1
 8018742:	e7a6      	b.n	8018692 <_vfiprintf_r+0xfe>
 8018744:	2300      	movs	r3, #0
 8018746:	3401      	adds	r4, #1
 8018748:	9305      	str	r3, [sp, #20]
 801874a:	4619      	mov	r1, r3
 801874c:	f04f 0c0a 	mov.w	ip, #10
 8018750:	4620      	mov	r0, r4
 8018752:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018756:	3a30      	subs	r2, #48	; 0x30
 8018758:	2a09      	cmp	r2, #9
 801875a:	d903      	bls.n	8018764 <_vfiprintf_r+0x1d0>
 801875c:	2b00      	cmp	r3, #0
 801875e:	d0c6      	beq.n	80186ee <_vfiprintf_r+0x15a>
 8018760:	9105      	str	r1, [sp, #20]
 8018762:	e7c4      	b.n	80186ee <_vfiprintf_r+0x15a>
 8018764:	fb0c 2101 	mla	r1, ip, r1, r2
 8018768:	4604      	mov	r4, r0
 801876a:	2301      	movs	r3, #1
 801876c:	e7f0      	b.n	8018750 <_vfiprintf_r+0x1bc>
 801876e:	ab03      	add	r3, sp, #12
 8018770:	9300      	str	r3, [sp, #0]
 8018772:	462a      	mov	r2, r5
 8018774:	4b12      	ldr	r3, [pc, #72]	; (80187c0 <_vfiprintf_r+0x22c>)
 8018776:	a904      	add	r1, sp, #16
 8018778:	4630      	mov	r0, r6
 801877a:	f7fb ff25 	bl	80145c8 <_printf_float>
 801877e:	4607      	mov	r7, r0
 8018780:	1c78      	adds	r0, r7, #1
 8018782:	d1d6      	bne.n	8018732 <_vfiprintf_r+0x19e>
 8018784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018786:	07d9      	lsls	r1, r3, #31
 8018788:	d405      	bmi.n	8018796 <_vfiprintf_r+0x202>
 801878a:	89ab      	ldrh	r3, [r5, #12]
 801878c:	059a      	lsls	r2, r3, #22
 801878e:	d402      	bmi.n	8018796 <_vfiprintf_r+0x202>
 8018790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018792:	f7fd fb5f 	bl	8015e54 <__retarget_lock_release_recursive>
 8018796:	89ab      	ldrh	r3, [r5, #12]
 8018798:	065b      	lsls	r3, r3, #25
 801879a:	f53f af1d 	bmi.w	80185d8 <_vfiprintf_r+0x44>
 801879e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80187a0:	e71c      	b.n	80185dc <_vfiprintf_r+0x48>
 80187a2:	ab03      	add	r3, sp, #12
 80187a4:	9300      	str	r3, [sp, #0]
 80187a6:	462a      	mov	r2, r5
 80187a8:	4b05      	ldr	r3, [pc, #20]	; (80187c0 <_vfiprintf_r+0x22c>)
 80187aa:	a904      	add	r1, sp, #16
 80187ac:	4630      	mov	r0, r6
 80187ae:	f7fc f993 	bl	8014ad8 <_printf_i>
 80187b2:	e7e4      	b.n	801877e <_vfiprintf_r+0x1ea>
 80187b4:	0802d029 	.word	0x0802d029
 80187b8:	0802d033 	.word	0x0802d033
 80187bc:	080145c9 	.word	0x080145c9
 80187c0:	0801856f 	.word	0x0801856f
 80187c4:	0802d02f 	.word	0x0802d02f

080187c8 <__sflush_r>:
 80187c8:	898a      	ldrh	r2, [r1, #12]
 80187ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187ce:	4605      	mov	r5, r0
 80187d0:	0710      	lsls	r0, r2, #28
 80187d2:	460c      	mov	r4, r1
 80187d4:	d458      	bmi.n	8018888 <__sflush_r+0xc0>
 80187d6:	684b      	ldr	r3, [r1, #4]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	dc05      	bgt.n	80187e8 <__sflush_r+0x20>
 80187dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80187de:	2b00      	cmp	r3, #0
 80187e0:	dc02      	bgt.n	80187e8 <__sflush_r+0x20>
 80187e2:	2000      	movs	r0, #0
 80187e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80187ea:	2e00      	cmp	r6, #0
 80187ec:	d0f9      	beq.n	80187e2 <__sflush_r+0x1a>
 80187ee:	2300      	movs	r3, #0
 80187f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80187f4:	682f      	ldr	r7, [r5, #0]
 80187f6:	6a21      	ldr	r1, [r4, #32]
 80187f8:	602b      	str	r3, [r5, #0]
 80187fa:	d032      	beq.n	8018862 <__sflush_r+0x9a>
 80187fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80187fe:	89a3      	ldrh	r3, [r4, #12]
 8018800:	075a      	lsls	r2, r3, #29
 8018802:	d505      	bpl.n	8018810 <__sflush_r+0x48>
 8018804:	6863      	ldr	r3, [r4, #4]
 8018806:	1ac0      	subs	r0, r0, r3
 8018808:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801880a:	b10b      	cbz	r3, 8018810 <__sflush_r+0x48>
 801880c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801880e:	1ac0      	subs	r0, r0, r3
 8018810:	2300      	movs	r3, #0
 8018812:	4602      	mov	r2, r0
 8018814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018816:	6a21      	ldr	r1, [r4, #32]
 8018818:	4628      	mov	r0, r5
 801881a:	47b0      	blx	r6
 801881c:	1c43      	adds	r3, r0, #1
 801881e:	89a3      	ldrh	r3, [r4, #12]
 8018820:	d106      	bne.n	8018830 <__sflush_r+0x68>
 8018822:	6829      	ldr	r1, [r5, #0]
 8018824:	291d      	cmp	r1, #29
 8018826:	d82b      	bhi.n	8018880 <__sflush_r+0xb8>
 8018828:	4a29      	ldr	r2, [pc, #164]	; (80188d0 <__sflush_r+0x108>)
 801882a:	410a      	asrs	r2, r1
 801882c:	07d6      	lsls	r6, r2, #31
 801882e:	d427      	bmi.n	8018880 <__sflush_r+0xb8>
 8018830:	2200      	movs	r2, #0
 8018832:	6062      	str	r2, [r4, #4]
 8018834:	04d9      	lsls	r1, r3, #19
 8018836:	6922      	ldr	r2, [r4, #16]
 8018838:	6022      	str	r2, [r4, #0]
 801883a:	d504      	bpl.n	8018846 <__sflush_r+0x7e>
 801883c:	1c42      	adds	r2, r0, #1
 801883e:	d101      	bne.n	8018844 <__sflush_r+0x7c>
 8018840:	682b      	ldr	r3, [r5, #0]
 8018842:	b903      	cbnz	r3, 8018846 <__sflush_r+0x7e>
 8018844:	6560      	str	r0, [r4, #84]	; 0x54
 8018846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018848:	602f      	str	r7, [r5, #0]
 801884a:	2900      	cmp	r1, #0
 801884c:	d0c9      	beq.n	80187e2 <__sflush_r+0x1a>
 801884e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018852:	4299      	cmp	r1, r3
 8018854:	d002      	beq.n	801885c <__sflush_r+0x94>
 8018856:	4628      	mov	r0, r5
 8018858:	f7fe f906 	bl	8016a68 <_free_r>
 801885c:	2000      	movs	r0, #0
 801885e:	6360      	str	r0, [r4, #52]	; 0x34
 8018860:	e7c0      	b.n	80187e4 <__sflush_r+0x1c>
 8018862:	2301      	movs	r3, #1
 8018864:	4628      	mov	r0, r5
 8018866:	47b0      	blx	r6
 8018868:	1c41      	adds	r1, r0, #1
 801886a:	d1c8      	bne.n	80187fe <__sflush_r+0x36>
 801886c:	682b      	ldr	r3, [r5, #0]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d0c5      	beq.n	80187fe <__sflush_r+0x36>
 8018872:	2b1d      	cmp	r3, #29
 8018874:	d001      	beq.n	801887a <__sflush_r+0xb2>
 8018876:	2b16      	cmp	r3, #22
 8018878:	d101      	bne.n	801887e <__sflush_r+0xb6>
 801887a:	602f      	str	r7, [r5, #0]
 801887c:	e7b1      	b.n	80187e2 <__sflush_r+0x1a>
 801887e:	89a3      	ldrh	r3, [r4, #12]
 8018880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018884:	81a3      	strh	r3, [r4, #12]
 8018886:	e7ad      	b.n	80187e4 <__sflush_r+0x1c>
 8018888:	690f      	ldr	r7, [r1, #16]
 801888a:	2f00      	cmp	r7, #0
 801888c:	d0a9      	beq.n	80187e2 <__sflush_r+0x1a>
 801888e:	0793      	lsls	r3, r2, #30
 8018890:	680e      	ldr	r6, [r1, #0]
 8018892:	bf08      	it	eq
 8018894:	694b      	ldreq	r3, [r1, #20]
 8018896:	600f      	str	r7, [r1, #0]
 8018898:	bf18      	it	ne
 801889a:	2300      	movne	r3, #0
 801889c:	eba6 0807 	sub.w	r8, r6, r7
 80188a0:	608b      	str	r3, [r1, #8]
 80188a2:	f1b8 0f00 	cmp.w	r8, #0
 80188a6:	dd9c      	ble.n	80187e2 <__sflush_r+0x1a>
 80188a8:	6a21      	ldr	r1, [r4, #32]
 80188aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80188ac:	4643      	mov	r3, r8
 80188ae:	463a      	mov	r2, r7
 80188b0:	4628      	mov	r0, r5
 80188b2:	47b0      	blx	r6
 80188b4:	2800      	cmp	r0, #0
 80188b6:	dc06      	bgt.n	80188c6 <__sflush_r+0xfe>
 80188b8:	89a3      	ldrh	r3, [r4, #12]
 80188ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188be:	81a3      	strh	r3, [r4, #12]
 80188c0:	f04f 30ff 	mov.w	r0, #4294967295
 80188c4:	e78e      	b.n	80187e4 <__sflush_r+0x1c>
 80188c6:	4407      	add	r7, r0
 80188c8:	eba8 0800 	sub.w	r8, r8, r0
 80188cc:	e7e9      	b.n	80188a2 <__sflush_r+0xda>
 80188ce:	bf00      	nop
 80188d0:	dfbffffe 	.word	0xdfbffffe

080188d4 <_fflush_r>:
 80188d4:	b538      	push	{r3, r4, r5, lr}
 80188d6:	690b      	ldr	r3, [r1, #16]
 80188d8:	4605      	mov	r5, r0
 80188da:	460c      	mov	r4, r1
 80188dc:	b913      	cbnz	r3, 80188e4 <_fflush_r+0x10>
 80188de:	2500      	movs	r5, #0
 80188e0:	4628      	mov	r0, r5
 80188e2:	bd38      	pop	{r3, r4, r5, pc}
 80188e4:	b118      	cbz	r0, 80188ee <_fflush_r+0x1a>
 80188e6:	6a03      	ldr	r3, [r0, #32]
 80188e8:	b90b      	cbnz	r3, 80188ee <_fflush_r+0x1a>
 80188ea:	f7fc fca7 	bl	801523c <__sinit>
 80188ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d0f3      	beq.n	80188de <_fflush_r+0xa>
 80188f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80188f8:	07d0      	lsls	r0, r2, #31
 80188fa:	d404      	bmi.n	8018906 <_fflush_r+0x32>
 80188fc:	0599      	lsls	r1, r3, #22
 80188fe:	d402      	bmi.n	8018906 <_fflush_r+0x32>
 8018900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018902:	f7fd faa5 	bl	8015e50 <__retarget_lock_acquire_recursive>
 8018906:	4628      	mov	r0, r5
 8018908:	4621      	mov	r1, r4
 801890a:	f7ff ff5d 	bl	80187c8 <__sflush_r>
 801890e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018910:	07da      	lsls	r2, r3, #31
 8018912:	4605      	mov	r5, r0
 8018914:	d4e4      	bmi.n	80188e0 <_fflush_r+0xc>
 8018916:	89a3      	ldrh	r3, [r4, #12]
 8018918:	059b      	lsls	r3, r3, #22
 801891a:	d4e1      	bmi.n	80188e0 <_fflush_r+0xc>
 801891c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801891e:	f7fd fa99 	bl	8015e54 <__retarget_lock_release_recursive>
 8018922:	e7dd      	b.n	80188e0 <_fflush_r+0xc>

08018924 <__swhatbuf_r>:
 8018924:	b570      	push	{r4, r5, r6, lr}
 8018926:	460c      	mov	r4, r1
 8018928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801892c:	2900      	cmp	r1, #0
 801892e:	b096      	sub	sp, #88	; 0x58
 8018930:	4615      	mov	r5, r2
 8018932:	461e      	mov	r6, r3
 8018934:	da0d      	bge.n	8018952 <__swhatbuf_r+0x2e>
 8018936:	89a3      	ldrh	r3, [r4, #12]
 8018938:	f013 0f80 	tst.w	r3, #128	; 0x80
 801893c:	f04f 0100 	mov.w	r1, #0
 8018940:	bf0c      	ite	eq
 8018942:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018946:	2340      	movne	r3, #64	; 0x40
 8018948:	2000      	movs	r0, #0
 801894a:	6031      	str	r1, [r6, #0]
 801894c:	602b      	str	r3, [r5, #0]
 801894e:	b016      	add	sp, #88	; 0x58
 8018950:	bd70      	pop	{r4, r5, r6, pc}
 8018952:	466a      	mov	r2, sp
 8018954:	f000 fc5e 	bl	8019214 <_fstat_r>
 8018958:	2800      	cmp	r0, #0
 801895a:	dbec      	blt.n	8018936 <__swhatbuf_r+0x12>
 801895c:	9901      	ldr	r1, [sp, #4]
 801895e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018962:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018966:	4259      	negs	r1, r3
 8018968:	4159      	adcs	r1, r3
 801896a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801896e:	e7eb      	b.n	8018948 <__swhatbuf_r+0x24>

08018970 <__smakebuf_r>:
 8018970:	898b      	ldrh	r3, [r1, #12]
 8018972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018974:	079d      	lsls	r5, r3, #30
 8018976:	4606      	mov	r6, r0
 8018978:	460c      	mov	r4, r1
 801897a:	d507      	bpl.n	801898c <__smakebuf_r+0x1c>
 801897c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018980:	6023      	str	r3, [r4, #0]
 8018982:	6123      	str	r3, [r4, #16]
 8018984:	2301      	movs	r3, #1
 8018986:	6163      	str	r3, [r4, #20]
 8018988:	b002      	add	sp, #8
 801898a:	bd70      	pop	{r4, r5, r6, pc}
 801898c:	ab01      	add	r3, sp, #4
 801898e:	466a      	mov	r2, sp
 8018990:	f7ff ffc8 	bl	8018924 <__swhatbuf_r>
 8018994:	9900      	ldr	r1, [sp, #0]
 8018996:	4605      	mov	r5, r0
 8018998:	4630      	mov	r0, r6
 801899a:	f7fb fcf9 	bl	8014390 <_malloc_r>
 801899e:	b948      	cbnz	r0, 80189b4 <__smakebuf_r+0x44>
 80189a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189a4:	059a      	lsls	r2, r3, #22
 80189a6:	d4ef      	bmi.n	8018988 <__smakebuf_r+0x18>
 80189a8:	f023 0303 	bic.w	r3, r3, #3
 80189ac:	f043 0302 	orr.w	r3, r3, #2
 80189b0:	81a3      	strh	r3, [r4, #12]
 80189b2:	e7e3      	b.n	801897c <__smakebuf_r+0xc>
 80189b4:	89a3      	ldrh	r3, [r4, #12]
 80189b6:	6020      	str	r0, [r4, #0]
 80189b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80189bc:	81a3      	strh	r3, [r4, #12]
 80189be:	9b00      	ldr	r3, [sp, #0]
 80189c0:	6163      	str	r3, [r4, #20]
 80189c2:	9b01      	ldr	r3, [sp, #4]
 80189c4:	6120      	str	r0, [r4, #16]
 80189c6:	b15b      	cbz	r3, 80189e0 <__smakebuf_r+0x70>
 80189c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189cc:	4630      	mov	r0, r6
 80189ce:	f000 fc33 	bl	8019238 <_isatty_r>
 80189d2:	b128      	cbz	r0, 80189e0 <__smakebuf_r+0x70>
 80189d4:	89a3      	ldrh	r3, [r4, #12]
 80189d6:	f023 0303 	bic.w	r3, r3, #3
 80189da:	f043 0301 	orr.w	r3, r3, #1
 80189de:	81a3      	strh	r3, [r4, #12]
 80189e0:	89a3      	ldrh	r3, [r4, #12]
 80189e2:	431d      	orrs	r5, r3
 80189e4:	81a5      	strh	r5, [r4, #12]
 80189e6:	e7cf      	b.n	8018988 <__smakebuf_r+0x18>

080189e8 <memmove>:
 80189e8:	4288      	cmp	r0, r1
 80189ea:	b510      	push	{r4, lr}
 80189ec:	eb01 0402 	add.w	r4, r1, r2
 80189f0:	d902      	bls.n	80189f8 <memmove+0x10>
 80189f2:	4284      	cmp	r4, r0
 80189f4:	4623      	mov	r3, r4
 80189f6:	d807      	bhi.n	8018a08 <memmove+0x20>
 80189f8:	1e43      	subs	r3, r0, #1
 80189fa:	42a1      	cmp	r1, r4
 80189fc:	d008      	beq.n	8018a10 <memmove+0x28>
 80189fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018a06:	e7f8      	b.n	80189fa <memmove+0x12>
 8018a08:	4402      	add	r2, r0
 8018a0a:	4601      	mov	r1, r0
 8018a0c:	428a      	cmp	r2, r1
 8018a0e:	d100      	bne.n	8018a12 <memmove+0x2a>
 8018a10:	bd10      	pop	{r4, pc}
 8018a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018a1a:	e7f7      	b.n	8018a0c <memmove+0x24>

08018a1c <strncmp>:
 8018a1c:	b510      	push	{r4, lr}
 8018a1e:	b16a      	cbz	r2, 8018a3c <strncmp+0x20>
 8018a20:	3901      	subs	r1, #1
 8018a22:	1884      	adds	r4, r0, r2
 8018a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018a2c:	429a      	cmp	r2, r3
 8018a2e:	d103      	bne.n	8018a38 <strncmp+0x1c>
 8018a30:	42a0      	cmp	r0, r4
 8018a32:	d001      	beq.n	8018a38 <strncmp+0x1c>
 8018a34:	2a00      	cmp	r2, #0
 8018a36:	d1f5      	bne.n	8018a24 <strncmp+0x8>
 8018a38:	1ad0      	subs	r0, r2, r3
 8018a3a:	bd10      	pop	{r4, pc}
 8018a3c:	4610      	mov	r0, r2
 8018a3e:	e7fc      	b.n	8018a3a <strncmp+0x1e>

08018a40 <strncasecmp_l>:
 8018a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a44:	4605      	mov	r5, r0
 8018a46:	460e      	mov	r6, r1
 8018a48:	461f      	mov	r7, r3
 8018a4a:	eb00 0802 	add.w	r8, r0, r2
 8018a4e:	4545      	cmp	r5, r8
 8018a50:	d00e      	beq.n	8018a70 <strncasecmp_l+0x30>
 8018a52:	4639      	mov	r1, r7
 8018a54:	f815 0b01 	ldrb.w	r0, [r5], #1
 8018a58:	f001 f88a 	bl	8019b70 <tolower_l>
 8018a5c:	4639      	mov	r1, r7
 8018a5e:	4604      	mov	r4, r0
 8018a60:	f816 0b01 	ldrb.w	r0, [r6], #1
 8018a64:	f001 f884 	bl	8019b70 <tolower_l>
 8018a68:	1a24      	subs	r4, r4, r0
 8018a6a:	d102      	bne.n	8018a72 <strncasecmp_l+0x32>
 8018a6c:	2800      	cmp	r0, #0
 8018a6e:	d1ee      	bne.n	8018a4e <strncasecmp_l+0xe>
 8018a70:	2400      	movs	r4, #0
 8018a72:	4620      	mov	r0, r4
 8018a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018a78 <localtime_r>:
 8018a78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018a7c:	4680      	mov	r8, r0
 8018a7e:	9101      	str	r1, [sp, #4]
 8018a80:	f001 f8be 	bl	8019c00 <__gettzinfo>
 8018a84:	9901      	ldr	r1, [sp, #4]
 8018a86:	4605      	mov	r5, r0
 8018a88:	4640      	mov	r0, r8
 8018a8a:	f001 f8bd 	bl	8019c08 <gmtime_r>
 8018a8e:	6943      	ldr	r3, [r0, #20]
 8018a90:	0799      	lsls	r1, r3, #30
 8018a92:	4604      	mov	r4, r0
 8018a94:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8018a98:	d105      	bne.n	8018aa6 <localtime_r+0x2e>
 8018a9a:	2264      	movs	r2, #100	; 0x64
 8018a9c:	fb97 f3f2 	sdiv	r3, r7, r2
 8018aa0:	fb02 7313 	mls	r3, r2, r3, r7
 8018aa4:	bb7b      	cbnz	r3, 8018b06 <localtime_r+0x8e>
 8018aa6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8018aaa:	fb97 f3f2 	sdiv	r3, r7, r2
 8018aae:	fb02 7313 	mls	r3, r2, r3, r7
 8018ab2:	fab3 f383 	clz	r3, r3
 8018ab6:	095b      	lsrs	r3, r3, #5
 8018ab8:	4e68      	ldr	r6, [pc, #416]	; (8018c5c <localtime_r+0x1e4>)
 8018aba:	2230      	movs	r2, #48	; 0x30
 8018abc:	fb02 6603 	mla	r6, r2, r3, r6
 8018ac0:	f000 f976 	bl	8018db0 <__tz_lock>
 8018ac4:	f000 f980 	bl	8018dc8 <_tzset_unlocked>
 8018ac8:	4b65      	ldr	r3, [pc, #404]	; (8018c60 <localtime_r+0x1e8>)
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	b353      	cbz	r3, 8018b24 <localtime_r+0xac>
 8018ace:	686b      	ldr	r3, [r5, #4]
 8018ad0:	42bb      	cmp	r3, r7
 8018ad2:	d11a      	bne.n	8018b0a <localtime_r+0x92>
 8018ad4:	682f      	ldr	r7, [r5, #0]
 8018ad6:	e9d8 2300 	ldrd	r2, r3, [r8]
 8018ada:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8018ade:	b9e7      	cbnz	r7, 8018b1a <localtime_r+0xa2>
 8018ae0:	4282      	cmp	r2, r0
 8018ae2:	eb73 0101 	sbcs.w	r1, r3, r1
 8018ae6:	da25      	bge.n	8018b34 <localtime_r+0xbc>
 8018ae8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8018aec:	4282      	cmp	r2, r0
 8018aee:	eb73 0701 	sbcs.w	r7, r3, r1
 8018af2:	bfb4      	ite	lt
 8018af4:	2701      	movlt	r7, #1
 8018af6:	2700      	movge	r7, #0
 8018af8:	4282      	cmp	r2, r0
 8018afa:	eb73 0101 	sbcs.w	r1, r3, r1
 8018afe:	6227      	str	r7, [r4, #32]
 8018b00:	db1a      	blt.n	8018b38 <localtime_r+0xc0>
 8018b02:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8018b04:	e019      	b.n	8018b3a <localtime_r+0xc2>
 8018b06:	2301      	movs	r3, #1
 8018b08:	e7d6      	b.n	8018ab8 <localtime_r+0x40>
 8018b0a:	4638      	mov	r0, r7
 8018b0c:	f000 f8aa 	bl	8018c64 <__tzcalc_limits>
 8018b10:	2800      	cmp	r0, #0
 8018b12:	d1df      	bne.n	8018ad4 <localtime_r+0x5c>
 8018b14:	f04f 33ff 	mov.w	r3, #4294967295
 8018b18:	e004      	b.n	8018b24 <localtime_r+0xac>
 8018b1a:	4282      	cmp	r2, r0
 8018b1c:	eb73 0101 	sbcs.w	r1, r3, r1
 8018b20:	da02      	bge.n	8018b28 <localtime_r+0xb0>
 8018b22:	2300      	movs	r3, #0
 8018b24:	6223      	str	r3, [r4, #32]
 8018b26:	e7ec      	b.n	8018b02 <localtime_r+0x8a>
 8018b28:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8018b2c:	4282      	cmp	r2, r0
 8018b2e:	eb73 0101 	sbcs.w	r1, r3, r1
 8018b32:	daf6      	bge.n	8018b22 <localtime_r+0xaa>
 8018b34:	2301      	movs	r3, #1
 8018b36:	6223      	str	r3, [r4, #32]
 8018b38:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8018b3a:	6861      	ldr	r1, [r4, #4]
 8018b3c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8018b40:	fb93 f0f2 	sdiv	r0, r3, r2
 8018b44:	fb02 3310 	mls	r3, r2, r0, r3
 8018b48:	223c      	movs	r2, #60	; 0x3c
 8018b4a:	fb93 f5f2 	sdiv	r5, r3, r2
 8018b4e:	fb02 3215 	mls	r2, r2, r5, r3
 8018b52:	6823      	ldr	r3, [r4, #0]
 8018b54:	1a9b      	subs	r3, r3, r2
 8018b56:	68a2      	ldr	r2, [r4, #8]
 8018b58:	6023      	str	r3, [r4, #0]
 8018b5a:	1b49      	subs	r1, r1, r5
 8018b5c:	1a12      	subs	r2, r2, r0
 8018b5e:	2b3b      	cmp	r3, #59	; 0x3b
 8018b60:	6061      	str	r1, [r4, #4]
 8018b62:	60a2      	str	r2, [r4, #8]
 8018b64:	dd35      	ble.n	8018bd2 <localtime_r+0x15a>
 8018b66:	3101      	adds	r1, #1
 8018b68:	6061      	str	r1, [r4, #4]
 8018b6a:	3b3c      	subs	r3, #60	; 0x3c
 8018b6c:	6023      	str	r3, [r4, #0]
 8018b6e:	6863      	ldr	r3, [r4, #4]
 8018b70:	2b3b      	cmp	r3, #59	; 0x3b
 8018b72:	dd34      	ble.n	8018bde <localtime_r+0x166>
 8018b74:	3201      	adds	r2, #1
 8018b76:	60a2      	str	r2, [r4, #8]
 8018b78:	3b3c      	subs	r3, #60	; 0x3c
 8018b7a:	6063      	str	r3, [r4, #4]
 8018b7c:	68a3      	ldr	r3, [r4, #8]
 8018b7e:	2b17      	cmp	r3, #23
 8018b80:	dd33      	ble.n	8018bea <localtime_r+0x172>
 8018b82:	69e2      	ldr	r2, [r4, #28]
 8018b84:	3201      	adds	r2, #1
 8018b86:	61e2      	str	r2, [r4, #28]
 8018b88:	69a2      	ldr	r2, [r4, #24]
 8018b8a:	3201      	adds	r2, #1
 8018b8c:	2a07      	cmp	r2, #7
 8018b8e:	bfa8      	it	ge
 8018b90:	2200      	movge	r2, #0
 8018b92:	61a2      	str	r2, [r4, #24]
 8018b94:	68e2      	ldr	r2, [r4, #12]
 8018b96:	3b18      	subs	r3, #24
 8018b98:	3201      	adds	r2, #1
 8018b9a:	60a3      	str	r3, [r4, #8]
 8018b9c:	6923      	ldr	r3, [r4, #16]
 8018b9e:	60e2      	str	r2, [r4, #12]
 8018ba0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8018ba4:	428a      	cmp	r2, r1
 8018ba6:	dd0e      	ble.n	8018bc6 <localtime_r+0x14e>
 8018ba8:	2b0b      	cmp	r3, #11
 8018baa:	eba2 0201 	sub.w	r2, r2, r1
 8018bae:	60e2      	str	r2, [r4, #12]
 8018bb0:	f103 0201 	add.w	r2, r3, #1
 8018bb4:	bf09      	itett	eq
 8018bb6:	6963      	ldreq	r3, [r4, #20]
 8018bb8:	6122      	strne	r2, [r4, #16]
 8018bba:	2200      	moveq	r2, #0
 8018bbc:	3301      	addeq	r3, #1
 8018bbe:	bf02      	ittt	eq
 8018bc0:	6122      	streq	r2, [r4, #16]
 8018bc2:	6163      	streq	r3, [r4, #20]
 8018bc4:	61e2      	streq	r2, [r4, #28]
 8018bc6:	f000 f8f9 	bl	8018dbc <__tz_unlock>
 8018bca:	4620      	mov	r0, r4
 8018bcc:	b002      	add	sp, #8
 8018bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	dacb      	bge.n	8018b6e <localtime_r+0xf6>
 8018bd6:	3901      	subs	r1, #1
 8018bd8:	6061      	str	r1, [r4, #4]
 8018bda:	333c      	adds	r3, #60	; 0x3c
 8018bdc:	e7c6      	b.n	8018b6c <localtime_r+0xf4>
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	dacc      	bge.n	8018b7c <localtime_r+0x104>
 8018be2:	3a01      	subs	r2, #1
 8018be4:	60a2      	str	r2, [r4, #8]
 8018be6:	333c      	adds	r3, #60	; 0x3c
 8018be8:	e7c7      	b.n	8018b7a <localtime_r+0x102>
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	daeb      	bge.n	8018bc6 <localtime_r+0x14e>
 8018bee:	69e2      	ldr	r2, [r4, #28]
 8018bf0:	3a01      	subs	r2, #1
 8018bf2:	61e2      	str	r2, [r4, #28]
 8018bf4:	69a2      	ldr	r2, [r4, #24]
 8018bf6:	3a01      	subs	r2, #1
 8018bf8:	bf48      	it	mi
 8018bfa:	2206      	movmi	r2, #6
 8018bfc:	61a2      	str	r2, [r4, #24]
 8018bfe:	68e2      	ldr	r2, [r4, #12]
 8018c00:	3318      	adds	r3, #24
 8018c02:	3a01      	subs	r2, #1
 8018c04:	60e2      	str	r2, [r4, #12]
 8018c06:	60a3      	str	r3, [r4, #8]
 8018c08:	2a00      	cmp	r2, #0
 8018c0a:	d1dc      	bne.n	8018bc6 <localtime_r+0x14e>
 8018c0c:	6923      	ldr	r3, [r4, #16]
 8018c0e:	3b01      	subs	r3, #1
 8018c10:	d405      	bmi.n	8018c1e <localtime_r+0x1a6>
 8018c12:	6123      	str	r3, [r4, #16]
 8018c14:	6923      	ldr	r3, [r4, #16]
 8018c16:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018c1a:	60e3      	str	r3, [r4, #12]
 8018c1c:	e7d3      	b.n	8018bc6 <localtime_r+0x14e>
 8018c1e:	230b      	movs	r3, #11
 8018c20:	6123      	str	r3, [r4, #16]
 8018c22:	6963      	ldr	r3, [r4, #20]
 8018c24:	1e5a      	subs	r2, r3, #1
 8018c26:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8018c2a:	6162      	str	r2, [r4, #20]
 8018c2c:	079a      	lsls	r2, r3, #30
 8018c2e:	d105      	bne.n	8018c3c <localtime_r+0x1c4>
 8018c30:	2164      	movs	r1, #100	; 0x64
 8018c32:	fb93 f2f1 	sdiv	r2, r3, r1
 8018c36:	fb01 3212 	mls	r2, r1, r2, r3
 8018c3a:	b962      	cbnz	r2, 8018c56 <localtime_r+0x1de>
 8018c3c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8018c40:	fb93 f1f2 	sdiv	r1, r3, r2
 8018c44:	fb02 3311 	mls	r3, r2, r1, r3
 8018c48:	fab3 f383 	clz	r3, r3
 8018c4c:	095b      	lsrs	r3, r3, #5
 8018c4e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8018c52:	61e3      	str	r3, [r4, #28]
 8018c54:	e7de      	b.n	8018c14 <localtime_r+0x19c>
 8018c56:	2301      	movs	r3, #1
 8018c58:	e7f9      	b.n	8018c4e <localtime_r+0x1d6>
 8018c5a:	bf00      	nop
 8018c5c:	0802d03c 	.word	0x0802d03c
 8018c60:	240314e8 	.word	0x240314e8

08018c64 <__tzcalc_limits>:
 8018c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c68:	4605      	mov	r5, r0
 8018c6a:	f000 ffc9 	bl	8019c00 <__gettzinfo>
 8018c6e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8018c72:	429d      	cmp	r5, r3
 8018c74:	f340 8095 	ble.w	8018da2 <__tzcalc_limits+0x13e>
 8018c78:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8018c7c:	18ac      	adds	r4, r5, r2
 8018c7e:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8018c82:	f240 126d 	movw	r2, #365	; 0x16d
 8018c86:	10a4      	asrs	r4, r4, #2
 8018c88:	fb02 4403 	mla	r4, r2, r3, r4
 8018c8c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8018c90:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8018c94:	fb93 f3f2 	sdiv	r3, r3, r2
 8018c98:	441c      	add	r4, r3
 8018c9a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8018c9e:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8018ca2:	fb95 fcf3 	sdiv	ip, r5, r3
 8018ca6:	fb03 5c1c 	mls	ip, r3, ip, r5
 8018caa:	186a      	adds	r2, r5, r1
 8018cac:	fabc f68c 	clz	r6, ip
 8018cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8018cb4:	f005 0303 	and.w	r3, r5, #3
 8018cb8:	4414      	add	r4, r2
 8018cba:	2264      	movs	r2, #100	; 0x64
 8018cbc:	6045      	str	r5, [r0, #4]
 8018cbe:	fb95 f7f2 	sdiv	r7, r5, r2
 8018cc2:	0976      	lsrs	r6, r6, #5
 8018cc4:	fb02 5717 	mls	r7, r2, r7, r5
 8018cc8:	4601      	mov	r1, r0
 8018cca:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8018cce:	9300      	str	r3, [sp, #0]
 8018cd0:	f04f 0a07 	mov.w	sl, #7
 8018cd4:	7a0d      	ldrb	r5, [r1, #8]
 8018cd6:	694b      	ldr	r3, [r1, #20]
 8018cd8:	2d4a      	cmp	r5, #74	; 0x4a
 8018cda:	d12b      	bne.n	8018d34 <__tzcalc_limits+0xd0>
 8018cdc:	9a00      	ldr	r2, [sp, #0]
 8018cde:	18e5      	adds	r5, r4, r3
 8018ce0:	b902      	cbnz	r2, 8018ce4 <__tzcalc_limits+0x80>
 8018ce2:	b917      	cbnz	r7, 8018cea <__tzcalc_limits+0x86>
 8018ce4:	f1bc 0f00 	cmp.w	ip, #0
 8018ce8:	d122      	bne.n	8018d30 <__tzcalc_limits+0xcc>
 8018cea:	2b3b      	cmp	r3, #59	; 0x3b
 8018cec:	bfd4      	ite	le
 8018cee:	2300      	movle	r3, #0
 8018cf0:	2301      	movgt	r3, #1
 8018cf2:	442b      	add	r3, r5
 8018cf4:	3b01      	subs	r3, #1
 8018cf6:	698d      	ldr	r5, [r1, #24]
 8018cf8:	4a2b      	ldr	r2, [pc, #172]	; (8018da8 <__tzcalc_limits+0x144>)
 8018cfa:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8018cfe:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8018d02:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8018d04:	18ed      	adds	r5, r5, r3
 8018d06:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8018d0a:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8018d0e:	3128      	adds	r1, #40	; 0x28
 8018d10:	458b      	cmp	fp, r1
 8018d12:	d1df      	bne.n	8018cd4 <__tzcalc_limits+0x70>
 8018d14:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8018d18:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 8018d1c:	428c      	cmp	r4, r1
 8018d1e:	4193      	sbcs	r3, r2
 8018d20:	bfb4      	ite	lt
 8018d22:	2301      	movlt	r3, #1
 8018d24:	2300      	movge	r3, #0
 8018d26:	6003      	str	r3, [r0, #0]
 8018d28:	2001      	movs	r0, #1
 8018d2a:	b003      	add	sp, #12
 8018d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d30:	2300      	movs	r3, #0
 8018d32:	e7de      	b.n	8018cf2 <__tzcalc_limits+0x8e>
 8018d34:	2d44      	cmp	r5, #68	; 0x44
 8018d36:	d101      	bne.n	8018d3c <__tzcalc_limits+0xd8>
 8018d38:	4423      	add	r3, r4
 8018d3a:	e7dc      	b.n	8018cf6 <__tzcalc_limits+0x92>
 8018d3c:	9a00      	ldr	r2, [sp, #0]
 8018d3e:	bb52      	cbnz	r2, 8018d96 <__tzcalc_limits+0x132>
 8018d40:	2f00      	cmp	r7, #0
 8018d42:	bf0c      	ite	eq
 8018d44:	4635      	moveq	r5, r6
 8018d46:	2501      	movne	r5, #1
 8018d48:	68ca      	ldr	r2, [r1, #12]
 8018d4a:	9201      	str	r2, [sp, #4]
 8018d4c:	4a17      	ldr	r2, [pc, #92]	; (8018dac <__tzcalc_limits+0x148>)
 8018d4e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8018d52:	fb09 2505 	mla	r5, r9, r5, r2
 8018d56:	46a6      	mov	lr, r4
 8018d58:	f04f 0800 	mov.w	r8, #0
 8018d5c:	3d04      	subs	r5, #4
 8018d5e:	9a01      	ldr	r2, [sp, #4]
 8018d60:	f108 0801 	add.w	r8, r8, #1
 8018d64:	4542      	cmp	r2, r8
 8018d66:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8018d6a:	dc16      	bgt.n	8018d9a <__tzcalc_limits+0x136>
 8018d6c:	f10e 0504 	add.w	r5, lr, #4
 8018d70:	fb95 f8fa 	sdiv	r8, r5, sl
 8018d74:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8018d78:	eba5 0508 	sub.w	r5, r5, r8
 8018d7c:	1b5d      	subs	r5, r3, r5
 8018d7e:	690b      	ldr	r3, [r1, #16]
 8018d80:	f103 33ff 	add.w	r3, r3, #4294967295
 8018d84:	bf48      	it	mi
 8018d86:	3507      	addmi	r5, #7
 8018d88:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8018d8c:	442b      	add	r3, r5
 8018d8e:	454b      	cmp	r3, r9
 8018d90:	da05      	bge.n	8018d9e <__tzcalc_limits+0x13a>
 8018d92:	4473      	add	r3, lr
 8018d94:	e7af      	b.n	8018cf6 <__tzcalc_limits+0x92>
 8018d96:	4635      	mov	r5, r6
 8018d98:	e7d6      	b.n	8018d48 <__tzcalc_limits+0xe4>
 8018d9a:	44ce      	add	lr, r9
 8018d9c:	e7df      	b.n	8018d5e <__tzcalc_limits+0xfa>
 8018d9e:	3b07      	subs	r3, #7
 8018da0:	e7f5      	b.n	8018d8e <__tzcalc_limits+0x12a>
 8018da2:	2000      	movs	r0, #0
 8018da4:	e7c1      	b.n	8018d2a <__tzcalc_limits+0xc6>
 8018da6:	bf00      	nop
 8018da8:	00015180 	.word	0x00015180
 8018dac:	0802d03c 	.word	0x0802d03c

08018db0 <__tz_lock>:
 8018db0:	4801      	ldr	r0, [pc, #4]	; (8018db8 <__tz_lock+0x8>)
 8018db2:	f7fd b84c 	b.w	8015e4e <__retarget_lock_acquire>
 8018db6:	bf00      	nop
 8018db8:	240314cb 	.word	0x240314cb

08018dbc <__tz_unlock>:
 8018dbc:	4801      	ldr	r0, [pc, #4]	; (8018dc4 <__tz_unlock+0x8>)
 8018dbe:	f7fd b848 	b.w	8015e52 <__retarget_lock_release>
 8018dc2:	bf00      	nop
 8018dc4:	240314cb 	.word	0x240314cb

08018dc8 <_tzset_unlocked>:
 8018dc8:	4b01      	ldr	r3, [pc, #4]	; (8018dd0 <_tzset_unlocked+0x8>)
 8018dca:	6818      	ldr	r0, [r3, #0]
 8018dcc:	f000 b802 	b.w	8018dd4 <_tzset_unlocked_r>
 8018dd0:	240001d8 	.word	0x240001d8

08018dd4 <_tzset_unlocked_r>:
 8018dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dd8:	b08d      	sub	sp, #52	; 0x34
 8018dda:	4607      	mov	r7, r0
 8018ddc:	f000 ff10 	bl	8019c00 <__gettzinfo>
 8018de0:	49bb      	ldr	r1, [pc, #748]	; (80190d0 <_tzset_unlocked_r+0x2fc>)
 8018de2:	4dbc      	ldr	r5, [pc, #752]	; (80190d4 <_tzset_unlocked_r+0x300>)
 8018de4:	4604      	mov	r4, r0
 8018de6:	4638      	mov	r0, r7
 8018de8:	f000 fe0e 	bl	8019a08 <_getenv_r>
 8018dec:	4606      	mov	r6, r0
 8018dee:	bb10      	cbnz	r0, 8018e36 <_tzset_unlocked_r+0x62>
 8018df0:	4bb9      	ldr	r3, [pc, #740]	; (80190d8 <_tzset_unlocked_r+0x304>)
 8018df2:	4aba      	ldr	r2, [pc, #744]	; (80190dc <_tzset_unlocked_r+0x308>)
 8018df4:	6018      	str	r0, [r3, #0]
 8018df6:	4bba      	ldr	r3, [pc, #744]	; (80190e0 <_tzset_unlocked_r+0x30c>)
 8018df8:	62a0      	str	r0, [r4, #40]	; 0x28
 8018dfa:	6018      	str	r0, [r3, #0]
 8018dfc:	4bb9      	ldr	r3, [pc, #740]	; (80190e4 <_tzset_unlocked_r+0x310>)
 8018dfe:	6520      	str	r0, [r4, #80]	; 0x50
 8018e00:	e9c3 2200 	strd	r2, r2, [r3]
 8018e04:	214a      	movs	r1, #74	; 0x4a
 8018e06:	2200      	movs	r2, #0
 8018e08:	2300      	movs	r3, #0
 8018e0a:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8018e0e:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8018e12:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 8018e16:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8018e1a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8018e1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8018e22:	6828      	ldr	r0, [r5, #0]
 8018e24:	7221      	strb	r1, [r4, #8]
 8018e26:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8018e2a:	f7fb fa89 	bl	8014340 <free>
 8018e2e:	602e      	str	r6, [r5, #0]
 8018e30:	b00d      	add	sp, #52	; 0x34
 8018e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e36:	6829      	ldr	r1, [r5, #0]
 8018e38:	2900      	cmp	r1, #0
 8018e3a:	f040 808e 	bne.w	8018f5a <_tzset_unlocked_r+0x186>
 8018e3e:	6828      	ldr	r0, [r5, #0]
 8018e40:	f7fb fa7e 	bl	8014340 <free>
 8018e44:	4630      	mov	r0, r6
 8018e46:	f7e7 fac3 	bl	80003d0 <strlen>
 8018e4a:	1c41      	adds	r1, r0, #1
 8018e4c:	4638      	mov	r0, r7
 8018e4e:	f7fb fa9f 	bl	8014390 <_malloc_r>
 8018e52:	6028      	str	r0, [r5, #0]
 8018e54:	2800      	cmp	r0, #0
 8018e56:	f040 8086 	bne.w	8018f66 <_tzset_unlocked_r+0x192>
 8018e5a:	4aa1      	ldr	r2, [pc, #644]	; (80190e0 <_tzset_unlocked_r+0x30c>)
 8018e5c:	f8df 8284 	ldr.w	r8, [pc, #644]	; 80190e4 <_tzset_unlocked_r+0x310>
 8018e60:	f8df a274 	ldr.w	sl, [pc, #628]	; 80190d8 <_tzset_unlocked_r+0x304>
 8018e64:	2300      	movs	r3, #0
 8018e66:	6013      	str	r3, [r2, #0]
 8018e68:	4a9f      	ldr	r2, [pc, #636]	; (80190e8 <_tzset_unlocked_r+0x314>)
 8018e6a:	f8ca 3000 	str.w	r3, [sl]
 8018e6e:	2000      	movs	r0, #0
 8018e70:	2100      	movs	r1, #0
 8018e72:	e9c8 2200 	strd	r2, r2, [r8]
 8018e76:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8018e7a:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8018e7e:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8018e82:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8018e86:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8018e8a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8018e8e:	224a      	movs	r2, #74	; 0x4a
 8018e90:	7222      	strb	r2, [r4, #8]
 8018e92:	62a3      	str	r3, [r4, #40]	; 0x28
 8018e94:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8018e98:	6523      	str	r3, [r4, #80]	; 0x50
 8018e9a:	7833      	ldrb	r3, [r6, #0]
 8018e9c:	2b3a      	cmp	r3, #58	; 0x3a
 8018e9e:	bf08      	it	eq
 8018ea0:	3601      	addeq	r6, #1
 8018ea2:	7833      	ldrb	r3, [r6, #0]
 8018ea4:	2b3c      	cmp	r3, #60	; 0x3c
 8018ea6:	d162      	bne.n	8018f6e <_tzset_unlocked_r+0x19a>
 8018ea8:	1c75      	adds	r5, r6, #1
 8018eaa:	4a90      	ldr	r2, [pc, #576]	; (80190ec <_tzset_unlocked_r+0x318>)
 8018eac:	4990      	ldr	r1, [pc, #576]	; (80190f0 <_tzset_unlocked_r+0x31c>)
 8018eae:	ab0a      	add	r3, sp, #40	; 0x28
 8018eb0:	4628      	mov	r0, r5
 8018eb2:	f000 fe79 	bl	8019ba8 <siscanf>
 8018eb6:	2800      	cmp	r0, #0
 8018eb8:	ddba      	ble.n	8018e30 <_tzset_unlocked_r+0x5c>
 8018eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ebc:	1eda      	subs	r2, r3, #3
 8018ebe:	2a07      	cmp	r2, #7
 8018ec0:	d8b6      	bhi.n	8018e30 <_tzset_unlocked_r+0x5c>
 8018ec2:	5ceb      	ldrb	r3, [r5, r3]
 8018ec4:	2b3e      	cmp	r3, #62	; 0x3e
 8018ec6:	d1b3      	bne.n	8018e30 <_tzset_unlocked_r+0x5c>
 8018ec8:	3602      	adds	r6, #2
 8018eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ecc:	18f5      	adds	r5, r6, r3
 8018ece:	5cf3      	ldrb	r3, [r6, r3]
 8018ed0:	2b2d      	cmp	r3, #45	; 0x2d
 8018ed2:	d15a      	bne.n	8018f8a <_tzset_unlocked_r+0x1b6>
 8018ed4:	3501      	adds	r5, #1
 8018ed6:	f04f 39ff 	mov.w	r9, #4294967295
 8018eda:	2300      	movs	r3, #0
 8018edc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018ee0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018ee4:	af08      	add	r7, sp, #32
 8018ee6:	ab0a      	add	r3, sp, #40	; 0x28
 8018ee8:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8018eec:	9303      	str	r3, [sp, #12]
 8018eee:	f10d 031e 	add.w	r3, sp, #30
 8018ef2:	9300      	str	r3, [sp, #0]
 8018ef4:	497f      	ldr	r1, [pc, #508]	; (80190f4 <_tzset_unlocked_r+0x320>)
 8018ef6:	ab0a      	add	r3, sp, #40	; 0x28
 8018ef8:	aa07      	add	r2, sp, #28
 8018efa:	4628      	mov	r0, r5
 8018efc:	f000 fe54 	bl	8019ba8 <siscanf>
 8018f00:	2800      	cmp	r0, #0
 8018f02:	dd95      	ble.n	8018e30 <_tzset_unlocked_r+0x5c>
 8018f04:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018f08:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8018f0c:	223c      	movs	r2, #60	; 0x3c
 8018f0e:	fb02 6603 	mla	r6, r2, r3, r6
 8018f12:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8018f16:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8018f1a:	fb02 6603 	mla	r6, r2, r3, r6
 8018f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f20:	fb09 f606 	mul.w	r6, r9, r6
 8018f24:	eb05 0903 	add.w	r9, r5, r3
 8018f28:	5ceb      	ldrb	r3, [r5, r3]
 8018f2a:	2b3c      	cmp	r3, #60	; 0x3c
 8018f2c:	f040 80ec 	bne.w	8019108 <_tzset_unlocked_r+0x334>
 8018f30:	f109 0501 	add.w	r5, r9, #1
 8018f34:	4a70      	ldr	r2, [pc, #448]	; (80190f8 <_tzset_unlocked_r+0x324>)
 8018f36:	496e      	ldr	r1, [pc, #440]	; (80190f0 <_tzset_unlocked_r+0x31c>)
 8018f38:	ab0a      	add	r3, sp, #40	; 0x28
 8018f3a:	4628      	mov	r0, r5
 8018f3c:	f000 fe34 	bl	8019ba8 <siscanf>
 8018f40:	2800      	cmp	r0, #0
 8018f42:	dc28      	bgt.n	8018f96 <_tzset_unlocked_r+0x1c2>
 8018f44:	f899 3001 	ldrb.w	r3, [r9, #1]
 8018f48:	2b3e      	cmp	r3, #62	; 0x3e
 8018f4a:	d124      	bne.n	8018f96 <_tzset_unlocked_r+0x1c2>
 8018f4c:	4b67      	ldr	r3, [pc, #412]	; (80190ec <_tzset_unlocked_r+0x318>)
 8018f4e:	62a6      	str	r6, [r4, #40]	; 0x28
 8018f50:	e9c8 3300 	strd	r3, r3, [r8]
 8018f54:	f8ca 6000 	str.w	r6, [sl]
 8018f58:	e76a      	b.n	8018e30 <_tzset_unlocked_r+0x5c>
 8018f5a:	f7e7 f9d9 	bl	8000310 <strcmp>
 8018f5e:	2800      	cmp	r0, #0
 8018f60:	f47f af6d 	bne.w	8018e3e <_tzset_unlocked_r+0x6a>
 8018f64:	e764      	b.n	8018e30 <_tzset_unlocked_r+0x5c>
 8018f66:	4631      	mov	r1, r6
 8018f68:	f000 f976 	bl	8019258 <strcpy>
 8018f6c:	e775      	b.n	8018e5a <_tzset_unlocked_r+0x86>
 8018f6e:	4a5f      	ldr	r2, [pc, #380]	; (80190ec <_tzset_unlocked_r+0x318>)
 8018f70:	4962      	ldr	r1, [pc, #392]	; (80190fc <_tzset_unlocked_r+0x328>)
 8018f72:	ab0a      	add	r3, sp, #40	; 0x28
 8018f74:	4630      	mov	r0, r6
 8018f76:	f000 fe17 	bl	8019ba8 <siscanf>
 8018f7a:	2800      	cmp	r0, #0
 8018f7c:	f77f af58 	ble.w	8018e30 <_tzset_unlocked_r+0x5c>
 8018f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f82:	3b03      	subs	r3, #3
 8018f84:	2b07      	cmp	r3, #7
 8018f86:	d9a0      	bls.n	8018eca <_tzset_unlocked_r+0xf6>
 8018f88:	e752      	b.n	8018e30 <_tzset_unlocked_r+0x5c>
 8018f8a:	2b2b      	cmp	r3, #43	; 0x2b
 8018f8c:	bf08      	it	eq
 8018f8e:	3501      	addeq	r5, #1
 8018f90:	f04f 0901 	mov.w	r9, #1
 8018f94:	e7a1      	b.n	8018eda <_tzset_unlocked_r+0x106>
 8018f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f98:	1eda      	subs	r2, r3, #3
 8018f9a:	2a07      	cmp	r2, #7
 8018f9c:	f63f af48 	bhi.w	8018e30 <_tzset_unlocked_r+0x5c>
 8018fa0:	5ceb      	ldrb	r3, [r5, r3]
 8018fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8018fa4:	f47f af44 	bne.w	8018e30 <_tzset_unlocked_r+0x5c>
 8018fa8:	f109 0902 	add.w	r9, r9, #2
 8018fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018fae:	eb09 0503 	add.w	r5, r9, r3
 8018fb2:	f819 3003 	ldrb.w	r3, [r9, r3]
 8018fb6:	2b2d      	cmp	r3, #45	; 0x2d
 8018fb8:	f040 80b5 	bne.w	8019126 <_tzset_unlocked_r+0x352>
 8018fbc:	3501      	adds	r5, #1
 8018fbe:	f04f 39ff 	mov.w	r9, #4294967295
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018fc8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018fcc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8018fd2:	ab0a      	add	r3, sp, #40	; 0x28
 8018fd4:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8018fd8:	9301      	str	r3, [sp, #4]
 8018fda:	f10d 031e 	add.w	r3, sp, #30
 8018fde:	9300      	str	r3, [sp, #0]
 8018fe0:	4944      	ldr	r1, [pc, #272]	; (80190f4 <_tzset_unlocked_r+0x320>)
 8018fe2:	ab0a      	add	r3, sp, #40	; 0x28
 8018fe4:	aa07      	add	r2, sp, #28
 8018fe6:	4628      	mov	r0, r5
 8018fe8:	f000 fdde 	bl	8019ba8 <siscanf>
 8018fec:	2800      	cmp	r0, #0
 8018fee:	f300 80a0 	bgt.w	8019132 <_tzset_unlocked_r+0x35e>
 8018ff2:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 8018ff6:	9304      	str	r3, [sp, #16]
 8018ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ffa:	4627      	mov	r7, r4
 8018ffc:	441d      	add	r5, r3
 8018ffe:	f04f 0b00 	mov.w	fp, #0
 8019002:	782b      	ldrb	r3, [r5, #0]
 8019004:	2b2c      	cmp	r3, #44	; 0x2c
 8019006:	bf08      	it	eq
 8019008:	3501      	addeq	r5, #1
 801900a:	f895 9000 	ldrb.w	r9, [r5]
 801900e:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 8019012:	f040 80a1 	bne.w	8019158 <_tzset_unlocked_r+0x384>
 8019016:	ab0a      	add	r3, sp, #40	; 0x28
 8019018:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 801901c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8019020:	aa09      	add	r2, sp, #36	; 0x24
 8019022:	9200      	str	r2, [sp, #0]
 8019024:	4936      	ldr	r1, [pc, #216]	; (8019100 <_tzset_unlocked_r+0x32c>)
 8019026:	9303      	str	r3, [sp, #12]
 8019028:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801902c:	4628      	mov	r0, r5
 801902e:	f000 fdbb 	bl	8019ba8 <siscanf>
 8019032:	2803      	cmp	r0, #3
 8019034:	f47f aefc 	bne.w	8018e30 <_tzset_unlocked_r+0x5c>
 8019038:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801903c:	1e4b      	subs	r3, r1, #1
 801903e:	2b0b      	cmp	r3, #11
 8019040:	f63f aef6 	bhi.w	8018e30 <_tzset_unlocked_r+0x5c>
 8019044:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8019048:	1e53      	subs	r3, r2, #1
 801904a:	2b04      	cmp	r3, #4
 801904c:	f63f aef0 	bhi.w	8018e30 <_tzset_unlocked_r+0x5c>
 8019050:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8019054:	2b06      	cmp	r3, #6
 8019056:	f63f aeeb 	bhi.w	8018e30 <_tzset_unlocked_r+0x5c>
 801905a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801905e:	f887 9008 	strb.w	r9, [r7, #8]
 8019062:	617b      	str	r3, [r7, #20]
 8019064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019066:	eb05 0903 	add.w	r9, r5, r3
 801906a:	2500      	movs	r5, #0
 801906c:	2302      	movs	r3, #2
 801906e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019072:	f8ad 501e 	strh.w	r5, [sp, #30]
 8019076:	f8ad 5020 	strh.w	r5, [sp, #32]
 801907a:	950a      	str	r5, [sp, #40]	; 0x28
 801907c:	f899 3000 	ldrb.w	r3, [r9]
 8019080:	2b2f      	cmp	r3, #47	; 0x2f
 8019082:	f040 8095 	bne.w	80191b0 <_tzset_unlocked_r+0x3dc>
 8019086:	ab0a      	add	r3, sp, #40	; 0x28
 8019088:	aa08      	add	r2, sp, #32
 801908a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801908e:	f10d 021e 	add.w	r2, sp, #30
 8019092:	9200      	str	r2, [sp, #0]
 8019094:	491b      	ldr	r1, [pc, #108]	; (8019104 <_tzset_unlocked_r+0x330>)
 8019096:	9303      	str	r3, [sp, #12]
 8019098:	aa07      	add	r2, sp, #28
 801909a:	4648      	mov	r0, r9
 801909c:	f000 fd84 	bl	8019ba8 <siscanf>
 80190a0:	42a8      	cmp	r0, r5
 80190a2:	f300 8085 	bgt.w	80191b0 <_tzset_unlocked_r+0x3dc>
 80190a6:	214a      	movs	r1, #74	; 0x4a
 80190a8:	2200      	movs	r2, #0
 80190aa:	2300      	movs	r3, #0
 80190ac:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80190b0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80190b4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80190b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80190bc:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 80190c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80190c4:	7221      	strb	r1, [r4, #8]
 80190c6:	62a5      	str	r5, [r4, #40]	; 0x28
 80190c8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 80190cc:	6525      	str	r5, [r4, #80]	; 0x50
 80190ce:	e6af      	b.n	8018e30 <_tzset_unlocked_r+0x5c>
 80190d0:	0802d09c 	.word	0x0802d09c
 80190d4:	240314e4 	.word	0x240314e4
 80190d8:	240314ec 	.word	0x240314ec
 80190dc:	0802d09f 	.word	0x0802d09f
 80190e0:	240314e8 	.word	0x240314e8
 80190e4:	240001dc 	.word	0x240001dc
 80190e8:	0802d125 	.word	0x0802d125
 80190ec:	240314d8 	.word	0x240314d8
 80190f0:	0802d0a3 	.word	0x0802d0a3
 80190f4:	0802d0d8 	.word	0x0802d0d8
 80190f8:	240314cc 	.word	0x240314cc
 80190fc:	0802d0b6 	.word	0x0802d0b6
 8019100:	0802d0c4 	.word	0x0802d0c4
 8019104:	0802d0d7 	.word	0x0802d0d7
 8019108:	4a3e      	ldr	r2, [pc, #248]	; (8019204 <_tzset_unlocked_r+0x430>)
 801910a:	493f      	ldr	r1, [pc, #252]	; (8019208 <_tzset_unlocked_r+0x434>)
 801910c:	ab0a      	add	r3, sp, #40	; 0x28
 801910e:	4648      	mov	r0, r9
 8019110:	f000 fd4a 	bl	8019ba8 <siscanf>
 8019114:	2800      	cmp	r0, #0
 8019116:	f77f af19 	ble.w	8018f4c <_tzset_unlocked_r+0x178>
 801911a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801911c:	3b03      	subs	r3, #3
 801911e:	2b07      	cmp	r3, #7
 8019120:	f67f af44 	bls.w	8018fac <_tzset_unlocked_r+0x1d8>
 8019124:	e684      	b.n	8018e30 <_tzset_unlocked_r+0x5c>
 8019126:	2b2b      	cmp	r3, #43	; 0x2b
 8019128:	bf08      	it	eq
 801912a:	3501      	addeq	r5, #1
 801912c:	f04f 0901 	mov.w	r9, #1
 8019130:	e747      	b.n	8018fc2 <_tzset_unlocked_r+0x1ee>
 8019132:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8019136:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801913a:	213c      	movs	r1, #60	; 0x3c
 801913c:	fb01 3302 	mla	r3, r1, r2, r3
 8019140:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8019144:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8019148:	fb01 3302 	mla	r3, r1, r2, r3
 801914c:	fb09 f303 	mul.w	r3, r9, r3
 8019150:	e751      	b.n	8018ff6 <_tzset_unlocked_r+0x222>
 8019152:	f04f 0b01 	mov.w	fp, #1
 8019156:	e754      	b.n	8019002 <_tzset_unlocked_r+0x22e>
 8019158:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 801915c:	bf06      	itte	eq
 801915e:	3501      	addeq	r5, #1
 8019160:	464b      	moveq	r3, r9
 8019162:	2344      	movne	r3, #68	; 0x44
 8019164:	220a      	movs	r2, #10
 8019166:	a90b      	add	r1, sp, #44	; 0x2c
 8019168:	4628      	mov	r0, r5
 801916a:	9305      	str	r3, [sp, #20]
 801916c:	f000 fcf6 	bl	8019b5c <strtoul>
 8019170:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8019174:	9b05      	ldr	r3, [sp, #20]
 8019176:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801917a:	45a9      	cmp	r9, r5
 801917c:	d114      	bne.n	80191a8 <_tzset_unlocked_r+0x3d4>
 801917e:	234d      	movs	r3, #77	; 0x4d
 8019180:	f1bb 0f00 	cmp.w	fp, #0
 8019184:	d107      	bne.n	8019196 <_tzset_unlocked_r+0x3c2>
 8019186:	7223      	strb	r3, [r4, #8]
 8019188:	2103      	movs	r1, #3
 801918a:	2302      	movs	r3, #2
 801918c:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8019190:	f8c4 b014 	str.w	fp, [r4, #20]
 8019194:	e769      	b.n	801906a <_tzset_unlocked_r+0x296>
 8019196:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 801919a:	220b      	movs	r2, #11
 801919c:	2301      	movs	r3, #1
 801919e:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 80191a2:	2300      	movs	r3, #0
 80191a4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80191a6:	e760      	b.n	801906a <_tzset_unlocked_r+0x296>
 80191a8:	b280      	uxth	r0, r0
 80191aa:	723b      	strb	r3, [r7, #8]
 80191ac:	6178      	str	r0, [r7, #20]
 80191ae:	e75c      	b.n	801906a <_tzset_unlocked_r+0x296>
 80191b0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80191b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80191b8:	213c      	movs	r1, #60	; 0x3c
 80191ba:	fb01 3302 	mla	r3, r1, r2, r3
 80191be:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80191c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80191c6:	fb01 3302 	mla	r3, r1, r2, r3
 80191ca:	61bb      	str	r3, [r7, #24]
 80191cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80191ce:	3728      	adds	r7, #40	; 0x28
 80191d0:	444d      	add	r5, r9
 80191d2:	f1bb 0f00 	cmp.w	fp, #0
 80191d6:	d0bc      	beq.n	8019152 <_tzset_unlocked_r+0x37e>
 80191d8:	9b04      	ldr	r3, [sp, #16]
 80191da:	6523      	str	r3, [r4, #80]	; 0x50
 80191dc:	4b0b      	ldr	r3, [pc, #44]	; (801920c <_tzset_unlocked_r+0x438>)
 80191de:	f8c8 3000 	str.w	r3, [r8]
 80191e2:	6860      	ldr	r0, [r4, #4]
 80191e4:	4b07      	ldr	r3, [pc, #28]	; (8019204 <_tzset_unlocked_r+0x430>)
 80191e6:	62a6      	str	r6, [r4, #40]	; 0x28
 80191e8:	f8c8 3004 	str.w	r3, [r8, #4]
 80191ec:	f7ff fd3a 	bl	8018c64 <__tzcalc_limits>
 80191f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80191f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80191f4:	f8ca 2000 	str.w	r2, [sl]
 80191f8:	1a9b      	subs	r3, r3, r2
 80191fa:	4a05      	ldr	r2, [pc, #20]	; (8019210 <_tzset_unlocked_r+0x43c>)
 80191fc:	bf18      	it	ne
 80191fe:	2301      	movne	r3, #1
 8019200:	6013      	str	r3, [r2, #0]
 8019202:	e615      	b.n	8018e30 <_tzset_unlocked_r+0x5c>
 8019204:	240314cc 	.word	0x240314cc
 8019208:	0802d0b6 	.word	0x0802d0b6
 801920c:	240314d8 	.word	0x240314d8
 8019210:	240314e8 	.word	0x240314e8

08019214 <_fstat_r>:
 8019214:	b538      	push	{r3, r4, r5, lr}
 8019216:	4d07      	ldr	r5, [pc, #28]	; (8019234 <_fstat_r+0x20>)
 8019218:	2300      	movs	r3, #0
 801921a:	4604      	mov	r4, r0
 801921c:	4608      	mov	r0, r1
 801921e:	4611      	mov	r1, r2
 8019220:	602b      	str	r3, [r5, #0]
 8019222:	f7e9 f8b0 	bl	8002386 <_fstat>
 8019226:	1c43      	adds	r3, r0, #1
 8019228:	d102      	bne.n	8019230 <_fstat_r+0x1c>
 801922a:	682b      	ldr	r3, [r5, #0]
 801922c:	b103      	cbz	r3, 8019230 <_fstat_r+0x1c>
 801922e:	6023      	str	r3, [r4, #0]
 8019230:	bd38      	pop	{r3, r4, r5, pc}
 8019232:	bf00      	nop
 8019234:	240314c4 	.word	0x240314c4

08019238 <_isatty_r>:
 8019238:	b538      	push	{r3, r4, r5, lr}
 801923a:	4d06      	ldr	r5, [pc, #24]	; (8019254 <_isatty_r+0x1c>)
 801923c:	2300      	movs	r3, #0
 801923e:	4604      	mov	r4, r0
 8019240:	4608      	mov	r0, r1
 8019242:	602b      	str	r3, [r5, #0]
 8019244:	f7e9 f8af 	bl	80023a6 <_isatty>
 8019248:	1c43      	adds	r3, r0, #1
 801924a:	d102      	bne.n	8019252 <_isatty_r+0x1a>
 801924c:	682b      	ldr	r3, [r5, #0]
 801924e:	b103      	cbz	r3, 8019252 <_isatty_r+0x1a>
 8019250:	6023      	str	r3, [r4, #0]
 8019252:	bd38      	pop	{r3, r4, r5, pc}
 8019254:	240314c4 	.word	0x240314c4

08019258 <strcpy>:
 8019258:	4603      	mov	r3, r0
 801925a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801925e:	f803 2b01 	strb.w	r2, [r3], #1
 8019262:	2a00      	cmp	r2, #0
 8019264:	d1f9      	bne.n	801925a <strcpy+0x2>
 8019266:	4770      	bx	lr

08019268 <nan>:
 8019268:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019270 <nan+0x8>
 801926c:	4770      	bx	lr
 801926e:	bf00      	nop
 8019270:	00000000 	.word	0x00000000
 8019274:	7ff80000 	.word	0x7ff80000

08019278 <__assert_func>:
 8019278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801927a:	4614      	mov	r4, r2
 801927c:	461a      	mov	r2, r3
 801927e:	4b09      	ldr	r3, [pc, #36]	; (80192a4 <__assert_func+0x2c>)
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	4605      	mov	r5, r0
 8019284:	68d8      	ldr	r0, [r3, #12]
 8019286:	b14c      	cbz	r4, 801929c <__assert_func+0x24>
 8019288:	4b07      	ldr	r3, [pc, #28]	; (80192a8 <__assert_func+0x30>)
 801928a:	9100      	str	r1, [sp, #0]
 801928c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019290:	4906      	ldr	r1, [pc, #24]	; (80192ac <__assert_func+0x34>)
 8019292:	462b      	mov	r3, r5
 8019294:	f000 fc76 	bl	8019b84 <fiprintf>
 8019298:	f000 fd5c 	bl	8019d54 <abort>
 801929c:	4b04      	ldr	r3, [pc, #16]	; (80192b0 <__assert_func+0x38>)
 801929e:	461c      	mov	r4, r3
 80192a0:	e7f3      	b.n	801928a <__assert_func+0x12>
 80192a2:	bf00      	nop
 80192a4:	240001d8 	.word	0x240001d8
 80192a8:	0802d0ea 	.word	0x0802d0ea
 80192ac:	0802d0f7 	.word	0x0802d0f7
 80192b0:	0802d125 	.word	0x0802d125

080192b4 <_calloc_r>:
 80192b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80192b6:	fba1 2402 	umull	r2, r4, r1, r2
 80192ba:	b94c      	cbnz	r4, 80192d0 <_calloc_r+0x1c>
 80192bc:	4611      	mov	r1, r2
 80192be:	9201      	str	r2, [sp, #4]
 80192c0:	f7fb f866 	bl	8014390 <_malloc_r>
 80192c4:	9a01      	ldr	r2, [sp, #4]
 80192c6:	4605      	mov	r5, r0
 80192c8:	b930      	cbnz	r0, 80192d8 <_calloc_r+0x24>
 80192ca:	4628      	mov	r0, r5
 80192cc:	b003      	add	sp, #12
 80192ce:	bd30      	pop	{r4, r5, pc}
 80192d0:	220c      	movs	r2, #12
 80192d2:	6002      	str	r2, [r0, #0]
 80192d4:	2500      	movs	r5, #0
 80192d6:	e7f8      	b.n	80192ca <_calloc_r+0x16>
 80192d8:	4621      	mov	r1, r4
 80192da:	f7fc f981 	bl	80155e0 <memset>
 80192de:	e7f4      	b.n	80192ca <_calloc_r+0x16>

080192e0 <rshift>:
 80192e0:	6903      	ldr	r3, [r0, #16]
 80192e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80192e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 80192ee:	f100 0414 	add.w	r4, r0, #20
 80192f2:	dd45      	ble.n	8019380 <rshift+0xa0>
 80192f4:	f011 011f 	ands.w	r1, r1, #31
 80192f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80192fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019300:	d10c      	bne.n	801931c <rshift+0x3c>
 8019302:	f100 0710 	add.w	r7, r0, #16
 8019306:	4629      	mov	r1, r5
 8019308:	42b1      	cmp	r1, r6
 801930a:	d334      	bcc.n	8019376 <rshift+0x96>
 801930c:	1a9b      	subs	r3, r3, r2
 801930e:	009b      	lsls	r3, r3, #2
 8019310:	1eea      	subs	r2, r5, #3
 8019312:	4296      	cmp	r6, r2
 8019314:	bf38      	it	cc
 8019316:	2300      	movcc	r3, #0
 8019318:	4423      	add	r3, r4
 801931a:	e015      	b.n	8019348 <rshift+0x68>
 801931c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019320:	f1c1 0820 	rsb	r8, r1, #32
 8019324:	40cf      	lsrs	r7, r1
 8019326:	f105 0e04 	add.w	lr, r5, #4
 801932a:	46a1      	mov	r9, r4
 801932c:	4576      	cmp	r6, lr
 801932e:	46f4      	mov	ip, lr
 8019330:	d815      	bhi.n	801935e <rshift+0x7e>
 8019332:	1a9a      	subs	r2, r3, r2
 8019334:	0092      	lsls	r2, r2, #2
 8019336:	3a04      	subs	r2, #4
 8019338:	3501      	adds	r5, #1
 801933a:	42ae      	cmp	r6, r5
 801933c:	bf38      	it	cc
 801933e:	2200      	movcc	r2, #0
 8019340:	18a3      	adds	r3, r4, r2
 8019342:	50a7      	str	r7, [r4, r2]
 8019344:	b107      	cbz	r7, 8019348 <rshift+0x68>
 8019346:	3304      	adds	r3, #4
 8019348:	1b1a      	subs	r2, r3, r4
 801934a:	42a3      	cmp	r3, r4
 801934c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019350:	bf08      	it	eq
 8019352:	2300      	moveq	r3, #0
 8019354:	6102      	str	r2, [r0, #16]
 8019356:	bf08      	it	eq
 8019358:	6143      	streq	r3, [r0, #20]
 801935a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801935e:	f8dc c000 	ldr.w	ip, [ip]
 8019362:	fa0c fc08 	lsl.w	ip, ip, r8
 8019366:	ea4c 0707 	orr.w	r7, ip, r7
 801936a:	f849 7b04 	str.w	r7, [r9], #4
 801936e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019372:	40cf      	lsrs	r7, r1
 8019374:	e7da      	b.n	801932c <rshift+0x4c>
 8019376:	f851 cb04 	ldr.w	ip, [r1], #4
 801937a:	f847 cf04 	str.w	ip, [r7, #4]!
 801937e:	e7c3      	b.n	8019308 <rshift+0x28>
 8019380:	4623      	mov	r3, r4
 8019382:	e7e1      	b.n	8019348 <rshift+0x68>

08019384 <__hexdig_fun>:
 8019384:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019388:	2b09      	cmp	r3, #9
 801938a:	d802      	bhi.n	8019392 <__hexdig_fun+0xe>
 801938c:	3820      	subs	r0, #32
 801938e:	b2c0      	uxtb	r0, r0
 8019390:	4770      	bx	lr
 8019392:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019396:	2b05      	cmp	r3, #5
 8019398:	d801      	bhi.n	801939e <__hexdig_fun+0x1a>
 801939a:	3847      	subs	r0, #71	; 0x47
 801939c:	e7f7      	b.n	801938e <__hexdig_fun+0xa>
 801939e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80193a2:	2b05      	cmp	r3, #5
 80193a4:	d801      	bhi.n	80193aa <__hexdig_fun+0x26>
 80193a6:	3827      	subs	r0, #39	; 0x27
 80193a8:	e7f1      	b.n	801938e <__hexdig_fun+0xa>
 80193aa:	2000      	movs	r0, #0
 80193ac:	4770      	bx	lr
	...

080193b0 <__gethex>:
 80193b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193b4:	4617      	mov	r7, r2
 80193b6:	680a      	ldr	r2, [r1, #0]
 80193b8:	b085      	sub	sp, #20
 80193ba:	f102 0b02 	add.w	fp, r2, #2
 80193be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80193c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80193c6:	4681      	mov	r9, r0
 80193c8:	468a      	mov	sl, r1
 80193ca:	9302      	str	r3, [sp, #8]
 80193cc:	32fe      	adds	r2, #254	; 0xfe
 80193ce:	eb02 030b 	add.w	r3, r2, fp
 80193d2:	46d8      	mov	r8, fp
 80193d4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80193d8:	9301      	str	r3, [sp, #4]
 80193da:	2830      	cmp	r0, #48	; 0x30
 80193dc:	d0f7      	beq.n	80193ce <__gethex+0x1e>
 80193de:	f7ff ffd1 	bl	8019384 <__hexdig_fun>
 80193e2:	4604      	mov	r4, r0
 80193e4:	2800      	cmp	r0, #0
 80193e6:	d138      	bne.n	801945a <__gethex+0xaa>
 80193e8:	49a7      	ldr	r1, [pc, #668]	; (8019688 <__gethex+0x2d8>)
 80193ea:	2201      	movs	r2, #1
 80193ec:	4640      	mov	r0, r8
 80193ee:	f7ff fb15 	bl	8018a1c <strncmp>
 80193f2:	4606      	mov	r6, r0
 80193f4:	2800      	cmp	r0, #0
 80193f6:	d169      	bne.n	80194cc <__gethex+0x11c>
 80193f8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80193fc:	465d      	mov	r5, fp
 80193fe:	f7ff ffc1 	bl	8019384 <__hexdig_fun>
 8019402:	2800      	cmp	r0, #0
 8019404:	d064      	beq.n	80194d0 <__gethex+0x120>
 8019406:	465a      	mov	r2, fp
 8019408:	7810      	ldrb	r0, [r2, #0]
 801940a:	2830      	cmp	r0, #48	; 0x30
 801940c:	4690      	mov	r8, r2
 801940e:	f102 0201 	add.w	r2, r2, #1
 8019412:	d0f9      	beq.n	8019408 <__gethex+0x58>
 8019414:	f7ff ffb6 	bl	8019384 <__hexdig_fun>
 8019418:	2301      	movs	r3, #1
 801941a:	fab0 f480 	clz	r4, r0
 801941e:	0964      	lsrs	r4, r4, #5
 8019420:	465e      	mov	r6, fp
 8019422:	9301      	str	r3, [sp, #4]
 8019424:	4642      	mov	r2, r8
 8019426:	4615      	mov	r5, r2
 8019428:	3201      	adds	r2, #1
 801942a:	7828      	ldrb	r0, [r5, #0]
 801942c:	f7ff ffaa 	bl	8019384 <__hexdig_fun>
 8019430:	2800      	cmp	r0, #0
 8019432:	d1f8      	bne.n	8019426 <__gethex+0x76>
 8019434:	4994      	ldr	r1, [pc, #592]	; (8019688 <__gethex+0x2d8>)
 8019436:	2201      	movs	r2, #1
 8019438:	4628      	mov	r0, r5
 801943a:	f7ff faef 	bl	8018a1c <strncmp>
 801943e:	b978      	cbnz	r0, 8019460 <__gethex+0xb0>
 8019440:	b946      	cbnz	r6, 8019454 <__gethex+0xa4>
 8019442:	1c6e      	adds	r6, r5, #1
 8019444:	4632      	mov	r2, r6
 8019446:	4615      	mov	r5, r2
 8019448:	3201      	adds	r2, #1
 801944a:	7828      	ldrb	r0, [r5, #0]
 801944c:	f7ff ff9a 	bl	8019384 <__hexdig_fun>
 8019450:	2800      	cmp	r0, #0
 8019452:	d1f8      	bne.n	8019446 <__gethex+0x96>
 8019454:	1b73      	subs	r3, r6, r5
 8019456:	009e      	lsls	r6, r3, #2
 8019458:	e004      	b.n	8019464 <__gethex+0xb4>
 801945a:	2400      	movs	r4, #0
 801945c:	4626      	mov	r6, r4
 801945e:	e7e1      	b.n	8019424 <__gethex+0x74>
 8019460:	2e00      	cmp	r6, #0
 8019462:	d1f7      	bne.n	8019454 <__gethex+0xa4>
 8019464:	782b      	ldrb	r3, [r5, #0]
 8019466:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801946a:	2b50      	cmp	r3, #80	; 0x50
 801946c:	d13d      	bne.n	80194ea <__gethex+0x13a>
 801946e:	786b      	ldrb	r3, [r5, #1]
 8019470:	2b2b      	cmp	r3, #43	; 0x2b
 8019472:	d02f      	beq.n	80194d4 <__gethex+0x124>
 8019474:	2b2d      	cmp	r3, #45	; 0x2d
 8019476:	d031      	beq.n	80194dc <__gethex+0x12c>
 8019478:	1c69      	adds	r1, r5, #1
 801947a:	f04f 0b00 	mov.w	fp, #0
 801947e:	7808      	ldrb	r0, [r1, #0]
 8019480:	f7ff ff80 	bl	8019384 <__hexdig_fun>
 8019484:	1e42      	subs	r2, r0, #1
 8019486:	b2d2      	uxtb	r2, r2
 8019488:	2a18      	cmp	r2, #24
 801948a:	d82e      	bhi.n	80194ea <__gethex+0x13a>
 801948c:	f1a0 0210 	sub.w	r2, r0, #16
 8019490:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019494:	f7ff ff76 	bl	8019384 <__hexdig_fun>
 8019498:	f100 3cff 	add.w	ip, r0, #4294967295
 801949c:	fa5f fc8c 	uxtb.w	ip, ip
 80194a0:	f1bc 0f18 	cmp.w	ip, #24
 80194a4:	d91d      	bls.n	80194e2 <__gethex+0x132>
 80194a6:	f1bb 0f00 	cmp.w	fp, #0
 80194aa:	d000      	beq.n	80194ae <__gethex+0xfe>
 80194ac:	4252      	negs	r2, r2
 80194ae:	4416      	add	r6, r2
 80194b0:	f8ca 1000 	str.w	r1, [sl]
 80194b4:	b1dc      	cbz	r4, 80194ee <__gethex+0x13e>
 80194b6:	9b01      	ldr	r3, [sp, #4]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	bf14      	ite	ne
 80194bc:	f04f 0800 	movne.w	r8, #0
 80194c0:	f04f 0806 	moveq.w	r8, #6
 80194c4:	4640      	mov	r0, r8
 80194c6:	b005      	add	sp, #20
 80194c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194cc:	4645      	mov	r5, r8
 80194ce:	4626      	mov	r6, r4
 80194d0:	2401      	movs	r4, #1
 80194d2:	e7c7      	b.n	8019464 <__gethex+0xb4>
 80194d4:	f04f 0b00 	mov.w	fp, #0
 80194d8:	1ca9      	adds	r1, r5, #2
 80194da:	e7d0      	b.n	801947e <__gethex+0xce>
 80194dc:	f04f 0b01 	mov.w	fp, #1
 80194e0:	e7fa      	b.n	80194d8 <__gethex+0x128>
 80194e2:	230a      	movs	r3, #10
 80194e4:	fb03 0002 	mla	r0, r3, r2, r0
 80194e8:	e7d0      	b.n	801948c <__gethex+0xdc>
 80194ea:	4629      	mov	r1, r5
 80194ec:	e7e0      	b.n	80194b0 <__gethex+0x100>
 80194ee:	eba5 0308 	sub.w	r3, r5, r8
 80194f2:	3b01      	subs	r3, #1
 80194f4:	4621      	mov	r1, r4
 80194f6:	2b07      	cmp	r3, #7
 80194f8:	dc0a      	bgt.n	8019510 <__gethex+0x160>
 80194fa:	4648      	mov	r0, r9
 80194fc:	f7fd fb12 	bl	8016b24 <_Balloc>
 8019500:	4604      	mov	r4, r0
 8019502:	b940      	cbnz	r0, 8019516 <__gethex+0x166>
 8019504:	4b61      	ldr	r3, [pc, #388]	; (801968c <__gethex+0x2dc>)
 8019506:	4602      	mov	r2, r0
 8019508:	21e4      	movs	r1, #228	; 0xe4
 801950a:	4861      	ldr	r0, [pc, #388]	; (8019690 <__gethex+0x2e0>)
 801950c:	f7ff feb4 	bl	8019278 <__assert_func>
 8019510:	3101      	adds	r1, #1
 8019512:	105b      	asrs	r3, r3, #1
 8019514:	e7ef      	b.n	80194f6 <__gethex+0x146>
 8019516:	f100 0a14 	add.w	sl, r0, #20
 801951a:	2300      	movs	r3, #0
 801951c:	495a      	ldr	r1, [pc, #360]	; (8019688 <__gethex+0x2d8>)
 801951e:	f8cd a004 	str.w	sl, [sp, #4]
 8019522:	469b      	mov	fp, r3
 8019524:	45a8      	cmp	r8, r5
 8019526:	d342      	bcc.n	80195ae <__gethex+0x1fe>
 8019528:	9801      	ldr	r0, [sp, #4]
 801952a:	f840 bb04 	str.w	fp, [r0], #4
 801952e:	eba0 000a 	sub.w	r0, r0, sl
 8019532:	1080      	asrs	r0, r0, #2
 8019534:	6120      	str	r0, [r4, #16]
 8019536:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801953a:	4658      	mov	r0, fp
 801953c:	f7fd fbe4 	bl	8016d08 <__hi0bits>
 8019540:	683d      	ldr	r5, [r7, #0]
 8019542:	eba8 0000 	sub.w	r0, r8, r0
 8019546:	42a8      	cmp	r0, r5
 8019548:	dd59      	ble.n	80195fe <__gethex+0x24e>
 801954a:	eba0 0805 	sub.w	r8, r0, r5
 801954e:	4641      	mov	r1, r8
 8019550:	4620      	mov	r0, r4
 8019552:	f7fd ff70 	bl	8017436 <__any_on>
 8019556:	4683      	mov	fp, r0
 8019558:	b1b8      	cbz	r0, 801958a <__gethex+0x1da>
 801955a:	f108 33ff 	add.w	r3, r8, #4294967295
 801955e:	1159      	asrs	r1, r3, #5
 8019560:	f003 021f 	and.w	r2, r3, #31
 8019564:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019568:	f04f 0b01 	mov.w	fp, #1
 801956c:	fa0b f202 	lsl.w	r2, fp, r2
 8019570:	420a      	tst	r2, r1
 8019572:	d00a      	beq.n	801958a <__gethex+0x1da>
 8019574:	455b      	cmp	r3, fp
 8019576:	dd06      	ble.n	8019586 <__gethex+0x1d6>
 8019578:	f1a8 0102 	sub.w	r1, r8, #2
 801957c:	4620      	mov	r0, r4
 801957e:	f7fd ff5a 	bl	8017436 <__any_on>
 8019582:	2800      	cmp	r0, #0
 8019584:	d138      	bne.n	80195f8 <__gethex+0x248>
 8019586:	f04f 0b02 	mov.w	fp, #2
 801958a:	4641      	mov	r1, r8
 801958c:	4620      	mov	r0, r4
 801958e:	f7ff fea7 	bl	80192e0 <rshift>
 8019592:	4446      	add	r6, r8
 8019594:	68bb      	ldr	r3, [r7, #8]
 8019596:	42b3      	cmp	r3, r6
 8019598:	da41      	bge.n	801961e <__gethex+0x26e>
 801959a:	4621      	mov	r1, r4
 801959c:	4648      	mov	r0, r9
 801959e:	f7fd fb01 	bl	8016ba4 <_Bfree>
 80195a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80195a4:	2300      	movs	r3, #0
 80195a6:	6013      	str	r3, [r2, #0]
 80195a8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80195ac:	e78a      	b.n	80194c4 <__gethex+0x114>
 80195ae:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80195b2:	2a2e      	cmp	r2, #46	; 0x2e
 80195b4:	d014      	beq.n	80195e0 <__gethex+0x230>
 80195b6:	2b20      	cmp	r3, #32
 80195b8:	d106      	bne.n	80195c8 <__gethex+0x218>
 80195ba:	9b01      	ldr	r3, [sp, #4]
 80195bc:	f843 bb04 	str.w	fp, [r3], #4
 80195c0:	f04f 0b00 	mov.w	fp, #0
 80195c4:	9301      	str	r3, [sp, #4]
 80195c6:	465b      	mov	r3, fp
 80195c8:	7828      	ldrb	r0, [r5, #0]
 80195ca:	9303      	str	r3, [sp, #12]
 80195cc:	f7ff feda 	bl	8019384 <__hexdig_fun>
 80195d0:	9b03      	ldr	r3, [sp, #12]
 80195d2:	f000 000f 	and.w	r0, r0, #15
 80195d6:	4098      	lsls	r0, r3
 80195d8:	ea4b 0b00 	orr.w	fp, fp, r0
 80195dc:	3304      	adds	r3, #4
 80195de:	e7a1      	b.n	8019524 <__gethex+0x174>
 80195e0:	45a8      	cmp	r8, r5
 80195e2:	d8e8      	bhi.n	80195b6 <__gethex+0x206>
 80195e4:	2201      	movs	r2, #1
 80195e6:	4628      	mov	r0, r5
 80195e8:	9303      	str	r3, [sp, #12]
 80195ea:	f7ff fa17 	bl	8018a1c <strncmp>
 80195ee:	4926      	ldr	r1, [pc, #152]	; (8019688 <__gethex+0x2d8>)
 80195f0:	9b03      	ldr	r3, [sp, #12]
 80195f2:	2800      	cmp	r0, #0
 80195f4:	d1df      	bne.n	80195b6 <__gethex+0x206>
 80195f6:	e795      	b.n	8019524 <__gethex+0x174>
 80195f8:	f04f 0b03 	mov.w	fp, #3
 80195fc:	e7c5      	b.n	801958a <__gethex+0x1da>
 80195fe:	da0b      	bge.n	8019618 <__gethex+0x268>
 8019600:	eba5 0800 	sub.w	r8, r5, r0
 8019604:	4621      	mov	r1, r4
 8019606:	4642      	mov	r2, r8
 8019608:	4648      	mov	r0, r9
 801960a:	f7fd fce5 	bl	8016fd8 <__lshift>
 801960e:	eba6 0608 	sub.w	r6, r6, r8
 8019612:	4604      	mov	r4, r0
 8019614:	f100 0a14 	add.w	sl, r0, #20
 8019618:	f04f 0b00 	mov.w	fp, #0
 801961c:	e7ba      	b.n	8019594 <__gethex+0x1e4>
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	42b3      	cmp	r3, r6
 8019622:	dd73      	ble.n	801970c <__gethex+0x35c>
 8019624:	1b9e      	subs	r6, r3, r6
 8019626:	42b5      	cmp	r5, r6
 8019628:	dc34      	bgt.n	8019694 <__gethex+0x2e4>
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	2b02      	cmp	r3, #2
 801962e:	d023      	beq.n	8019678 <__gethex+0x2c8>
 8019630:	2b03      	cmp	r3, #3
 8019632:	d025      	beq.n	8019680 <__gethex+0x2d0>
 8019634:	2b01      	cmp	r3, #1
 8019636:	d115      	bne.n	8019664 <__gethex+0x2b4>
 8019638:	42b5      	cmp	r5, r6
 801963a:	d113      	bne.n	8019664 <__gethex+0x2b4>
 801963c:	2d01      	cmp	r5, #1
 801963e:	d10b      	bne.n	8019658 <__gethex+0x2a8>
 8019640:	9a02      	ldr	r2, [sp, #8]
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	6013      	str	r3, [r2, #0]
 8019646:	2301      	movs	r3, #1
 8019648:	6123      	str	r3, [r4, #16]
 801964a:	f8ca 3000 	str.w	r3, [sl]
 801964e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019650:	f04f 0862 	mov.w	r8, #98	; 0x62
 8019654:	601c      	str	r4, [r3, #0]
 8019656:	e735      	b.n	80194c4 <__gethex+0x114>
 8019658:	1e69      	subs	r1, r5, #1
 801965a:	4620      	mov	r0, r4
 801965c:	f7fd feeb 	bl	8017436 <__any_on>
 8019660:	2800      	cmp	r0, #0
 8019662:	d1ed      	bne.n	8019640 <__gethex+0x290>
 8019664:	4621      	mov	r1, r4
 8019666:	4648      	mov	r0, r9
 8019668:	f7fd fa9c 	bl	8016ba4 <_Bfree>
 801966c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801966e:	2300      	movs	r3, #0
 8019670:	6013      	str	r3, [r2, #0]
 8019672:	f04f 0850 	mov.w	r8, #80	; 0x50
 8019676:	e725      	b.n	80194c4 <__gethex+0x114>
 8019678:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801967a:	2b00      	cmp	r3, #0
 801967c:	d1f2      	bne.n	8019664 <__gethex+0x2b4>
 801967e:	e7df      	b.n	8019640 <__gethex+0x290>
 8019680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019682:	2b00      	cmp	r3, #0
 8019684:	d1dc      	bne.n	8019640 <__gethex+0x290>
 8019686:	e7ed      	b.n	8019664 <__gethex+0x2b4>
 8019688:	0802cad8 	.word	0x0802cad8
 801968c:	0802cd6c 	.word	0x0802cd6c
 8019690:	0802d126 	.word	0x0802d126
 8019694:	f106 38ff 	add.w	r8, r6, #4294967295
 8019698:	f1bb 0f00 	cmp.w	fp, #0
 801969c:	d133      	bne.n	8019706 <__gethex+0x356>
 801969e:	f1b8 0f00 	cmp.w	r8, #0
 80196a2:	d004      	beq.n	80196ae <__gethex+0x2fe>
 80196a4:	4641      	mov	r1, r8
 80196a6:	4620      	mov	r0, r4
 80196a8:	f7fd fec5 	bl	8017436 <__any_on>
 80196ac:	4683      	mov	fp, r0
 80196ae:	ea4f 1268 	mov.w	r2, r8, asr #5
 80196b2:	2301      	movs	r3, #1
 80196b4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80196b8:	f008 081f 	and.w	r8, r8, #31
 80196bc:	fa03 f308 	lsl.w	r3, r3, r8
 80196c0:	4213      	tst	r3, r2
 80196c2:	4631      	mov	r1, r6
 80196c4:	4620      	mov	r0, r4
 80196c6:	bf18      	it	ne
 80196c8:	f04b 0b02 	orrne.w	fp, fp, #2
 80196cc:	1bad      	subs	r5, r5, r6
 80196ce:	f7ff fe07 	bl	80192e0 <rshift>
 80196d2:	687e      	ldr	r6, [r7, #4]
 80196d4:	f04f 0802 	mov.w	r8, #2
 80196d8:	f1bb 0f00 	cmp.w	fp, #0
 80196dc:	d04a      	beq.n	8019774 <__gethex+0x3c4>
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	2b02      	cmp	r3, #2
 80196e2:	d016      	beq.n	8019712 <__gethex+0x362>
 80196e4:	2b03      	cmp	r3, #3
 80196e6:	d018      	beq.n	801971a <__gethex+0x36a>
 80196e8:	2b01      	cmp	r3, #1
 80196ea:	d109      	bne.n	8019700 <__gethex+0x350>
 80196ec:	f01b 0f02 	tst.w	fp, #2
 80196f0:	d006      	beq.n	8019700 <__gethex+0x350>
 80196f2:	f8da 3000 	ldr.w	r3, [sl]
 80196f6:	ea4b 0b03 	orr.w	fp, fp, r3
 80196fa:	f01b 0f01 	tst.w	fp, #1
 80196fe:	d10f      	bne.n	8019720 <__gethex+0x370>
 8019700:	f048 0810 	orr.w	r8, r8, #16
 8019704:	e036      	b.n	8019774 <__gethex+0x3c4>
 8019706:	f04f 0b01 	mov.w	fp, #1
 801970a:	e7d0      	b.n	80196ae <__gethex+0x2fe>
 801970c:	f04f 0801 	mov.w	r8, #1
 8019710:	e7e2      	b.n	80196d8 <__gethex+0x328>
 8019712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019714:	f1c3 0301 	rsb	r3, r3, #1
 8019718:	930f      	str	r3, [sp, #60]	; 0x3c
 801971a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801971c:	2b00      	cmp	r3, #0
 801971e:	d0ef      	beq.n	8019700 <__gethex+0x350>
 8019720:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019724:	f104 0214 	add.w	r2, r4, #20
 8019728:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801972c:	9301      	str	r3, [sp, #4]
 801972e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8019732:	2300      	movs	r3, #0
 8019734:	4694      	mov	ip, r2
 8019736:	f852 1b04 	ldr.w	r1, [r2], #4
 801973a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801973e:	d01e      	beq.n	801977e <__gethex+0x3ce>
 8019740:	3101      	adds	r1, #1
 8019742:	f8cc 1000 	str.w	r1, [ip]
 8019746:	f1b8 0f02 	cmp.w	r8, #2
 801974a:	f104 0214 	add.w	r2, r4, #20
 801974e:	d13d      	bne.n	80197cc <__gethex+0x41c>
 8019750:	683b      	ldr	r3, [r7, #0]
 8019752:	3b01      	subs	r3, #1
 8019754:	42ab      	cmp	r3, r5
 8019756:	d10b      	bne.n	8019770 <__gethex+0x3c0>
 8019758:	1169      	asrs	r1, r5, #5
 801975a:	2301      	movs	r3, #1
 801975c:	f005 051f 	and.w	r5, r5, #31
 8019760:	fa03 f505 	lsl.w	r5, r3, r5
 8019764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019768:	421d      	tst	r5, r3
 801976a:	bf18      	it	ne
 801976c:	f04f 0801 	movne.w	r8, #1
 8019770:	f048 0820 	orr.w	r8, r8, #32
 8019774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019776:	601c      	str	r4, [r3, #0]
 8019778:	9b02      	ldr	r3, [sp, #8]
 801977a:	601e      	str	r6, [r3, #0]
 801977c:	e6a2      	b.n	80194c4 <__gethex+0x114>
 801977e:	4290      	cmp	r0, r2
 8019780:	f842 3c04 	str.w	r3, [r2, #-4]
 8019784:	d8d6      	bhi.n	8019734 <__gethex+0x384>
 8019786:	68a2      	ldr	r2, [r4, #8]
 8019788:	4593      	cmp	fp, r2
 801978a:	db17      	blt.n	80197bc <__gethex+0x40c>
 801978c:	6861      	ldr	r1, [r4, #4]
 801978e:	4648      	mov	r0, r9
 8019790:	3101      	adds	r1, #1
 8019792:	f7fd f9c7 	bl	8016b24 <_Balloc>
 8019796:	4682      	mov	sl, r0
 8019798:	b918      	cbnz	r0, 80197a2 <__gethex+0x3f2>
 801979a:	4b1b      	ldr	r3, [pc, #108]	; (8019808 <__gethex+0x458>)
 801979c:	4602      	mov	r2, r0
 801979e:	2184      	movs	r1, #132	; 0x84
 80197a0:	e6b3      	b.n	801950a <__gethex+0x15a>
 80197a2:	6922      	ldr	r2, [r4, #16]
 80197a4:	3202      	adds	r2, #2
 80197a6:	f104 010c 	add.w	r1, r4, #12
 80197aa:	0092      	lsls	r2, r2, #2
 80197ac:	300c      	adds	r0, #12
 80197ae:	f7fc fb52 	bl	8015e56 <memcpy>
 80197b2:	4621      	mov	r1, r4
 80197b4:	4648      	mov	r0, r9
 80197b6:	f7fd f9f5 	bl	8016ba4 <_Bfree>
 80197ba:	4654      	mov	r4, sl
 80197bc:	6922      	ldr	r2, [r4, #16]
 80197be:	1c51      	adds	r1, r2, #1
 80197c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80197c4:	6121      	str	r1, [r4, #16]
 80197c6:	2101      	movs	r1, #1
 80197c8:	6151      	str	r1, [r2, #20]
 80197ca:	e7bc      	b.n	8019746 <__gethex+0x396>
 80197cc:	6921      	ldr	r1, [r4, #16]
 80197ce:	4559      	cmp	r1, fp
 80197d0:	dd0b      	ble.n	80197ea <__gethex+0x43a>
 80197d2:	2101      	movs	r1, #1
 80197d4:	4620      	mov	r0, r4
 80197d6:	f7ff fd83 	bl	80192e0 <rshift>
 80197da:	68bb      	ldr	r3, [r7, #8]
 80197dc:	3601      	adds	r6, #1
 80197de:	42b3      	cmp	r3, r6
 80197e0:	f6ff aedb 	blt.w	801959a <__gethex+0x1ea>
 80197e4:	f04f 0801 	mov.w	r8, #1
 80197e8:	e7c2      	b.n	8019770 <__gethex+0x3c0>
 80197ea:	f015 051f 	ands.w	r5, r5, #31
 80197ee:	d0f9      	beq.n	80197e4 <__gethex+0x434>
 80197f0:	9b01      	ldr	r3, [sp, #4]
 80197f2:	441a      	add	r2, r3
 80197f4:	f1c5 0520 	rsb	r5, r5, #32
 80197f8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80197fc:	f7fd fa84 	bl	8016d08 <__hi0bits>
 8019800:	42a8      	cmp	r0, r5
 8019802:	dbe6      	blt.n	80197d2 <__gethex+0x422>
 8019804:	e7ee      	b.n	80197e4 <__gethex+0x434>
 8019806:	bf00      	nop
 8019808:	0802cd6c 	.word	0x0802cd6c

0801980c <L_shift>:
 801980c:	f1c2 0208 	rsb	r2, r2, #8
 8019810:	0092      	lsls	r2, r2, #2
 8019812:	b570      	push	{r4, r5, r6, lr}
 8019814:	f1c2 0620 	rsb	r6, r2, #32
 8019818:	6843      	ldr	r3, [r0, #4]
 801981a:	6804      	ldr	r4, [r0, #0]
 801981c:	fa03 f506 	lsl.w	r5, r3, r6
 8019820:	432c      	orrs	r4, r5
 8019822:	40d3      	lsrs	r3, r2
 8019824:	6004      	str	r4, [r0, #0]
 8019826:	f840 3f04 	str.w	r3, [r0, #4]!
 801982a:	4288      	cmp	r0, r1
 801982c:	d3f4      	bcc.n	8019818 <L_shift+0xc>
 801982e:	bd70      	pop	{r4, r5, r6, pc}

08019830 <__match>:
 8019830:	b530      	push	{r4, r5, lr}
 8019832:	6803      	ldr	r3, [r0, #0]
 8019834:	3301      	adds	r3, #1
 8019836:	f811 4b01 	ldrb.w	r4, [r1], #1
 801983a:	b914      	cbnz	r4, 8019842 <__match+0x12>
 801983c:	6003      	str	r3, [r0, #0]
 801983e:	2001      	movs	r0, #1
 8019840:	bd30      	pop	{r4, r5, pc}
 8019842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019846:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801984a:	2d19      	cmp	r5, #25
 801984c:	bf98      	it	ls
 801984e:	3220      	addls	r2, #32
 8019850:	42a2      	cmp	r2, r4
 8019852:	d0f0      	beq.n	8019836 <__match+0x6>
 8019854:	2000      	movs	r0, #0
 8019856:	e7f3      	b.n	8019840 <__match+0x10>

08019858 <__hexnan>:
 8019858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801985c:	680b      	ldr	r3, [r1, #0]
 801985e:	6801      	ldr	r1, [r0, #0]
 8019860:	115e      	asrs	r6, r3, #5
 8019862:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019866:	f013 031f 	ands.w	r3, r3, #31
 801986a:	b087      	sub	sp, #28
 801986c:	bf18      	it	ne
 801986e:	3604      	addne	r6, #4
 8019870:	2500      	movs	r5, #0
 8019872:	1f37      	subs	r7, r6, #4
 8019874:	4682      	mov	sl, r0
 8019876:	4690      	mov	r8, r2
 8019878:	9301      	str	r3, [sp, #4]
 801987a:	f846 5c04 	str.w	r5, [r6, #-4]
 801987e:	46b9      	mov	r9, r7
 8019880:	463c      	mov	r4, r7
 8019882:	9502      	str	r5, [sp, #8]
 8019884:	46ab      	mov	fp, r5
 8019886:	784a      	ldrb	r2, [r1, #1]
 8019888:	1c4b      	adds	r3, r1, #1
 801988a:	9303      	str	r3, [sp, #12]
 801988c:	b342      	cbz	r2, 80198e0 <__hexnan+0x88>
 801988e:	4610      	mov	r0, r2
 8019890:	9105      	str	r1, [sp, #20]
 8019892:	9204      	str	r2, [sp, #16]
 8019894:	f7ff fd76 	bl	8019384 <__hexdig_fun>
 8019898:	2800      	cmp	r0, #0
 801989a:	d14f      	bne.n	801993c <__hexnan+0xe4>
 801989c:	9a04      	ldr	r2, [sp, #16]
 801989e:	9905      	ldr	r1, [sp, #20]
 80198a0:	2a20      	cmp	r2, #32
 80198a2:	d818      	bhi.n	80198d6 <__hexnan+0x7e>
 80198a4:	9b02      	ldr	r3, [sp, #8]
 80198a6:	459b      	cmp	fp, r3
 80198a8:	dd13      	ble.n	80198d2 <__hexnan+0x7a>
 80198aa:	454c      	cmp	r4, r9
 80198ac:	d206      	bcs.n	80198bc <__hexnan+0x64>
 80198ae:	2d07      	cmp	r5, #7
 80198b0:	dc04      	bgt.n	80198bc <__hexnan+0x64>
 80198b2:	462a      	mov	r2, r5
 80198b4:	4649      	mov	r1, r9
 80198b6:	4620      	mov	r0, r4
 80198b8:	f7ff ffa8 	bl	801980c <L_shift>
 80198bc:	4544      	cmp	r4, r8
 80198be:	d950      	bls.n	8019962 <__hexnan+0x10a>
 80198c0:	2300      	movs	r3, #0
 80198c2:	f1a4 0904 	sub.w	r9, r4, #4
 80198c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80198ca:	f8cd b008 	str.w	fp, [sp, #8]
 80198ce:	464c      	mov	r4, r9
 80198d0:	461d      	mov	r5, r3
 80198d2:	9903      	ldr	r1, [sp, #12]
 80198d4:	e7d7      	b.n	8019886 <__hexnan+0x2e>
 80198d6:	2a29      	cmp	r2, #41	; 0x29
 80198d8:	d155      	bne.n	8019986 <__hexnan+0x12e>
 80198da:	3102      	adds	r1, #2
 80198dc:	f8ca 1000 	str.w	r1, [sl]
 80198e0:	f1bb 0f00 	cmp.w	fp, #0
 80198e4:	d04f      	beq.n	8019986 <__hexnan+0x12e>
 80198e6:	454c      	cmp	r4, r9
 80198e8:	d206      	bcs.n	80198f8 <__hexnan+0xa0>
 80198ea:	2d07      	cmp	r5, #7
 80198ec:	dc04      	bgt.n	80198f8 <__hexnan+0xa0>
 80198ee:	462a      	mov	r2, r5
 80198f0:	4649      	mov	r1, r9
 80198f2:	4620      	mov	r0, r4
 80198f4:	f7ff ff8a 	bl	801980c <L_shift>
 80198f8:	4544      	cmp	r4, r8
 80198fa:	d934      	bls.n	8019966 <__hexnan+0x10e>
 80198fc:	f1a8 0204 	sub.w	r2, r8, #4
 8019900:	4623      	mov	r3, r4
 8019902:	f853 1b04 	ldr.w	r1, [r3], #4
 8019906:	f842 1f04 	str.w	r1, [r2, #4]!
 801990a:	429f      	cmp	r7, r3
 801990c:	d2f9      	bcs.n	8019902 <__hexnan+0xaa>
 801990e:	1b3b      	subs	r3, r7, r4
 8019910:	f023 0303 	bic.w	r3, r3, #3
 8019914:	3304      	adds	r3, #4
 8019916:	3e03      	subs	r6, #3
 8019918:	3401      	adds	r4, #1
 801991a:	42a6      	cmp	r6, r4
 801991c:	bf38      	it	cc
 801991e:	2304      	movcc	r3, #4
 8019920:	4443      	add	r3, r8
 8019922:	2200      	movs	r2, #0
 8019924:	f843 2b04 	str.w	r2, [r3], #4
 8019928:	429f      	cmp	r7, r3
 801992a:	d2fb      	bcs.n	8019924 <__hexnan+0xcc>
 801992c:	683b      	ldr	r3, [r7, #0]
 801992e:	b91b      	cbnz	r3, 8019938 <__hexnan+0xe0>
 8019930:	4547      	cmp	r7, r8
 8019932:	d126      	bne.n	8019982 <__hexnan+0x12a>
 8019934:	2301      	movs	r3, #1
 8019936:	603b      	str	r3, [r7, #0]
 8019938:	2005      	movs	r0, #5
 801993a:	e025      	b.n	8019988 <__hexnan+0x130>
 801993c:	3501      	adds	r5, #1
 801993e:	2d08      	cmp	r5, #8
 8019940:	f10b 0b01 	add.w	fp, fp, #1
 8019944:	dd06      	ble.n	8019954 <__hexnan+0xfc>
 8019946:	4544      	cmp	r4, r8
 8019948:	d9c3      	bls.n	80198d2 <__hexnan+0x7a>
 801994a:	2300      	movs	r3, #0
 801994c:	f844 3c04 	str.w	r3, [r4, #-4]
 8019950:	2501      	movs	r5, #1
 8019952:	3c04      	subs	r4, #4
 8019954:	6822      	ldr	r2, [r4, #0]
 8019956:	f000 000f 	and.w	r0, r0, #15
 801995a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801995e:	6020      	str	r0, [r4, #0]
 8019960:	e7b7      	b.n	80198d2 <__hexnan+0x7a>
 8019962:	2508      	movs	r5, #8
 8019964:	e7b5      	b.n	80198d2 <__hexnan+0x7a>
 8019966:	9b01      	ldr	r3, [sp, #4]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d0df      	beq.n	801992c <__hexnan+0xd4>
 801996c:	f1c3 0320 	rsb	r3, r3, #32
 8019970:	f04f 32ff 	mov.w	r2, #4294967295
 8019974:	40da      	lsrs	r2, r3
 8019976:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801997a:	4013      	ands	r3, r2
 801997c:	f846 3c04 	str.w	r3, [r6, #-4]
 8019980:	e7d4      	b.n	801992c <__hexnan+0xd4>
 8019982:	3f04      	subs	r7, #4
 8019984:	e7d2      	b.n	801992c <__hexnan+0xd4>
 8019986:	2004      	movs	r0, #4
 8019988:	b007      	add	sp, #28
 801998a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019990 <_findenv_r>:
 8019990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019994:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8019a04 <_findenv_r+0x74>
 8019998:	4607      	mov	r7, r0
 801999a:	4689      	mov	r9, r1
 801999c:	4616      	mov	r6, r2
 801999e:	f000 f9e1 	bl	8019d64 <__env_lock>
 80199a2:	f8da 4000 	ldr.w	r4, [sl]
 80199a6:	b134      	cbz	r4, 80199b6 <_findenv_r+0x26>
 80199a8:	464b      	mov	r3, r9
 80199aa:	4698      	mov	r8, r3
 80199ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80199b0:	b13a      	cbz	r2, 80199c2 <_findenv_r+0x32>
 80199b2:	2a3d      	cmp	r2, #61	; 0x3d
 80199b4:	d1f9      	bne.n	80199aa <_findenv_r+0x1a>
 80199b6:	4638      	mov	r0, r7
 80199b8:	f000 f9da 	bl	8019d70 <__env_unlock>
 80199bc:	2000      	movs	r0, #0
 80199be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199c2:	eba8 0809 	sub.w	r8, r8, r9
 80199c6:	46a3      	mov	fp, r4
 80199c8:	f854 0b04 	ldr.w	r0, [r4], #4
 80199cc:	2800      	cmp	r0, #0
 80199ce:	d0f2      	beq.n	80199b6 <_findenv_r+0x26>
 80199d0:	4642      	mov	r2, r8
 80199d2:	4649      	mov	r1, r9
 80199d4:	f7ff f822 	bl	8018a1c <strncmp>
 80199d8:	2800      	cmp	r0, #0
 80199da:	d1f4      	bne.n	80199c6 <_findenv_r+0x36>
 80199dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80199e0:	eb03 0508 	add.w	r5, r3, r8
 80199e4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80199e8:	2b3d      	cmp	r3, #61	; 0x3d
 80199ea:	d1ec      	bne.n	80199c6 <_findenv_r+0x36>
 80199ec:	f8da 3000 	ldr.w	r3, [sl]
 80199f0:	ebab 0303 	sub.w	r3, fp, r3
 80199f4:	109b      	asrs	r3, r3, #2
 80199f6:	4638      	mov	r0, r7
 80199f8:	6033      	str	r3, [r6, #0]
 80199fa:	f000 f9b9 	bl	8019d70 <__env_unlock>
 80199fe:	1c68      	adds	r0, r5, #1
 8019a00:	e7dd      	b.n	80199be <_findenv_r+0x2e>
 8019a02:	bf00      	nop
 8019a04:	24000000 	.word	0x24000000

08019a08 <_getenv_r>:
 8019a08:	b507      	push	{r0, r1, r2, lr}
 8019a0a:	aa01      	add	r2, sp, #4
 8019a0c:	f7ff ffc0 	bl	8019990 <_findenv_r>
 8019a10:	b003      	add	sp, #12
 8019a12:	f85d fb04 	ldr.w	pc, [sp], #4

08019a16 <_realloc_r>:
 8019a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a1a:	4680      	mov	r8, r0
 8019a1c:	4614      	mov	r4, r2
 8019a1e:	460e      	mov	r6, r1
 8019a20:	b921      	cbnz	r1, 8019a2c <_realloc_r+0x16>
 8019a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a26:	4611      	mov	r1, r2
 8019a28:	f7fa bcb2 	b.w	8014390 <_malloc_r>
 8019a2c:	b92a      	cbnz	r2, 8019a3a <_realloc_r+0x24>
 8019a2e:	f7fd f81b 	bl	8016a68 <_free_r>
 8019a32:	4625      	mov	r5, r4
 8019a34:	4628      	mov	r0, r5
 8019a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a3a:	f000 f99f 	bl	8019d7c <_malloc_usable_size_r>
 8019a3e:	4284      	cmp	r4, r0
 8019a40:	4607      	mov	r7, r0
 8019a42:	d802      	bhi.n	8019a4a <_realloc_r+0x34>
 8019a44:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019a48:	d812      	bhi.n	8019a70 <_realloc_r+0x5a>
 8019a4a:	4621      	mov	r1, r4
 8019a4c:	4640      	mov	r0, r8
 8019a4e:	f7fa fc9f 	bl	8014390 <_malloc_r>
 8019a52:	4605      	mov	r5, r0
 8019a54:	2800      	cmp	r0, #0
 8019a56:	d0ed      	beq.n	8019a34 <_realloc_r+0x1e>
 8019a58:	42bc      	cmp	r4, r7
 8019a5a:	4622      	mov	r2, r4
 8019a5c:	4631      	mov	r1, r6
 8019a5e:	bf28      	it	cs
 8019a60:	463a      	movcs	r2, r7
 8019a62:	f7fc f9f8 	bl	8015e56 <memcpy>
 8019a66:	4631      	mov	r1, r6
 8019a68:	4640      	mov	r0, r8
 8019a6a:	f7fc fffd 	bl	8016a68 <_free_r>
 8019a6e:	e7e1      	b.n	8019a34 <_realloc_r+0x1e>
 8019a70:	4635      	mov	r5, r6
 8019a72:	e7df      	b.n	8019a34 <_realloc_r+0x1e>

08019a74 <_strtoul_l.constprop.0>:
 8019a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a78:	4f36      	ldr	r7, [pc, #216]	; (8019b54 <_strtoul_l.constprop.0+0xe0>)
 8019a7a:	4686      	mov	lr, r0
 8019a7c:	460d      	mov	r5, r1
 8019a7e:	4628      	mov	r0, r5
 8019a80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a84:	5d3e      	ldrb	r6, [r7, r4]
 8019a86:	f016 0608 	ands.w	r6, r6, #8
 8019a8a:	d1f8      	bne.n	8019a7e <_strtoul_l.constprop.0+0xa>
 8019a8c:	2c2d      	cmp	r4, #45	; 0x2d
 8019a8e:	d130      	bne.n	8019af2 <_strtoul_l.constprop.0+0x7e>
 8019a90:	782c      	ldrb	r4, [r5, #0]
 8019a92:	2601      	movs	r6, #1
 8019a94:	1c85      	adds	r5, r0, #2
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d057      	beq.n	8019b4a <_strtoul_l.constprop.0+0xd6>
 8019a9a:	2b10      	cmp	r3, #16
 8019a9c:	d109      	bne.n	8019ab2 <_strtoul_l.constprop.0+0x3e>
 8019a9e:	2c30      	cmp	r4, #48	; 0x30
 8019aa0:	d107      	bne.n	8019ab2 <_strtoul_l.constprop.0+0x3e>
 8019aa2:	7828      	ldrb	r0, [r5, #0]
 8019aa4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019aa8:	2858      	cmp	r0, #88	; 0x58
 8019aaa:	d149      	bne.n	8019b40 <_strtoul_l.constprop.0+0xcc>
 8019aac:	786c      	ldrb	r4, [r5, #1]
 8019aae:	2310      	movs	r3, #16
 8019ab0:	3502      	adds	r5, #2
 8019ab2:	f04f 38ff 	mov.w	r8, #4294967295
 8019ab6:	2700      	movs	r7, #0
 8019ab8:	fbb8 f8f3 	udiv	r8, r8, r3
 8019abc:	fb03 f908 	mul.w	r9, r3, r8
 8019ac0:	ea6f 0909 	mvn.w	r9, r9
 8019ac4:	4638      	mov	r0, r7
 8019ac6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019aca:	f1bc 0f09 	cmp.w	ip, #9
 8019ace:	d815      	bhi.n	8019afc <_strtoul_l.constprop.0+0x88>
 8019ad0:	4664      	mov	r4, ip
 8019ad2:	42a3      	cmp	r3, r4
 8019ad4:	dd23      	ble.n	8019b1e <_strtoul_l.constprop.0+0xaa>
 8019ad6:	f1b7 3fff 	cmp.w	r7, #4294967295
 8019ada:	d007      	beq.n	8019aec <_strtoul_l.constprop.0+0x78>
 8019adc:	4580      	cmp	r8, r0
 8019ade:	d31b      	bcc.n	8019b18 <_strtoul_l.constprop.0+0xa4>
 8019ae0:	d101      	bne.n	8019ae6 <_strtoul_l.constprop.0+0x72>
 8019ae2:	45a1      	cmp	r9, r4
 8019ae4:	db18      	blt.n	8019b18 <_strtoul_l.constprop.0+0xa4>
 8019ae6:	fb00 4003 	mla	r0, r0, r3, r4
 8019aea:	2701      	movs	r7, #1
 8019aec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019af0:	e7e9      	b.n	8019ac6 <_strtoul_l.constprop.0+0x52>
 8019af2:	2c2b      	cmp	r4, #43	; 0x2b
 8019af4:	bf04      	itt	eq
 8019af6:	782c      	ldrbeq	r4, [r5, #0]
 8019af8:	1c85      	addeq	r5, r0, #2
 8019afa:	e7cc      	b.n	8019a96 <_strtoul_l.constprop.0+0x22>
 8019afc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019b00:	f1bc 0f19 	cmp.w	ip, #25
 8019b04:	d801      	bhi.n	8019b0a <_strtoul_l.constprop.0+0x96>
 8019b06:	3c37      	subs	r4, #55	; 0x37
 8019b08:	e7e3      	b.n	8019ad2 <_strtoul_l.constprop.0+0x5e>
 8019b0a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8019b0e:	f1bc 0f19 	cmp.w	ip, #25
 8019b12:	d804      	bhi.n	8019b1e <_strtoul_l.constprop.0+0xaa>
 8019b14:	3c57      	subs	r4, #87	; 0x57
 8019b16:	e7dc      	b.n	8019ad2 <_strtoul_l.constprop.0+0x5e>
 8019b18:	f04f 37ff 	mov.w	r7, #4294967295
 8019b1c:	e7e6      	b.n	8019aec <_strtoul_l.constprop.0+0x78>
 8019b1e:	1c7b      	adds	r3, r7, #1
 8019b20:	d106      	bne.n	8019b30 <_strtoul_l.constprop.0+0xbc>
 8019b22:	2322      	movs	r3, #34	; 0x22
 8019b24:	f8ce 3000 	str.w	r3, [lr]
 8019b28:	4638      	mov	r0, r7
 8019b2a:	b932      	cbnz	r2, 8019b3a <_strtoul_l.constprop.0+0xc6>
 8019b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b30:	b106      	cbz	r6, 8019b34 <_strtoul_l.constprop.0+0xc0>
 8019b32:	4240      	negs	r0, r0
 8019b34:	2a00      	cmp	r2, #0
 8019b36:	d0f9      	beq.n	8019b2c <_strtoul_l.constprop.0+0xb8>
 8019b38:	b107      	cbz	r7, 8019b3c <_strtoul_l.constprop.0+0xc8>
 8019b3a:	1e69      	subs	r1, r5, #1
 8019b3c:	6011      	str	r1, [r2, #0]
 8019b3e:	e7f5      	b.n	8019b2c <_strtoul_l.constprop.0+0xb8>
 8019b40:	2430      	movs	r4, #48	; 0x30
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d1b5      	bne.n	8019ab2 <_strtoul_l.constprop.0+0x3e>
 8019b46:	2308      	movs	r3, #8
 8019b48:	e7b3      	b.n	8019ab2 <_strtoul_l.constprop.0+0x3e>
 8019b4a:	2c30      	cmp	r4, #48	; 0x30
 8019b4c:	d0a9      	beq.n	8019aa2 <_strtoul_l.constprop.0+0x2e>
 8019b4e:	230a      	movs	r3, #10
 8019b50:	e7af      	b.n	8019ab2 <_strtoul_l.constprop.0+0x3e>
 8019b52:	bf00      	nop
 8019b54:	0802cf29 	.word	0x0802cf29

08019b58 <_strtoul_r>:
 8019b58:	f7ff bf8c 	b.w	8019a74 <_strtoul_l.constprop.0>

08019b5c <strtoul>:
 8019b5c:	4613      	mov	r3, r2
 8019b5e:	460a      	mov	r2, r1
 8019b60:	4601      	mov	r1, r0
 8019b62:	4802      	ldr	r0, [pc, #8]	; (8019b6c <strtoul+0x10>)
 8019b64:	6800      	ldr	r0, [r0, #0]
 8019b66:	f7ff bf85 	b.w	8019a74 <_strtoul_l.constprop.0>
 8019b6a:	bf00      	nop
 8019b6c:	240001d8 	.word	0x240001d8

08019b70 <tolower_l>:
 8019b70:	4b03      	ldr	r3, [pc, #12]	; (8019b80 <tolower_l+0x10>)
 8019b72:	5c1b      	ldrb	r3, [r3, r0]
 8019b74:	f003 0303 	and.w	r3, r3, #3
 8019b78:	2b01      	cmp	r3, #1
 8019b7a:	bf08      	it	eq
 8019b7c:	3020      	addeq	r0, #32
 8019b7e:	4770      	bx	lr
 8019b80:	0802cf29 	.word	0x0802cf29

08019b84 <fiprintf>:
 8019b84:	b40e      	push	{r1, r2, r3}
 8019b86:	b503      	push	{r0, r1, lr}
 8019b88:	4601      	mov	r1, r0
 8019b8a:	ab03      	add	r3, sp, #12
 8019b8c:	4805      	ldr	r0, [pc, #20]	; (8019ba4 <fiprintf+0x20>)
 8019b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b92:	6800      	ldr	r0, [r0, #0]
 8019b94:	9301      	str	r3, [sp, #4]
 8019b96:	f7fe fcfd 	bl	8018594 <_vfiprintf_r>
 8019b9a:	b002      	add	sp, #8
 8019b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ba0:	b003      	add	sp, #12
 8019ba2:	4770      	bx	lr
 8019ba4:	240001d8 	.word	0x240001d8

08019ba8 <siscanf>:
 8019ba8:	b40e      	push	{r1, r2, r3}
 8019baa:	b510      	push	{r4, lr}
 8019bac:	b09f      	sub	sp, #124	; 0x7c
 8019bae:	ac21      	add	r4, sp, #132	; 0x84
 8019bb0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8019bb4:	f854 2b04 	ldr.w	r2, [r4], #4
 8019bb8:	9201      	str	r2, [sp, #4]
 8019bba:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019bbe:	9004      	str	r0, [sp, #16]
 8019bc0:	9008      	str	r0, [sp, #32]
 8019bc2:	f7e6 fc05 	bl	80003d0 <strlen>
 8019bc6:	4b0c      	ldr	r3, [pc, #48]	; (8019bf8 <siscanf+0x50>)
 8019bc8:	9005      	str	r0, [sp, #20]
 8019bca:	9009      	str	r0, [sp, #36]	; 0x24
 8019bcc:	930d      	str	r3, [sp, #52]	; 0x34
 8019bce:	480b      	ldr	r0, [pc, #44]	; (8019bfc <siscanf+0x54>)
 8019bd0:	9a01      	ldr	r2, [sp, #4]
 8019bd2:	6800      	ldr	r0, [r0, #0]
 8019bd4:	9403      	str	r4, [sp, #12]
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	9311      	str	r3, [sp, #68]	; 0x44
 8019bda:	9316      	str	r3, [sp, #88]	; 0x58
 8019bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019be0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019be4:	a904      	add	r1, sp, #16
 8019be6:	4623      	mov	r3, r4
 8019be8:	f000 f92a 	bl	8019e40 <__ssvfiscanf_r>
 8019bec:	b01f      	add	sp, #124	; 0x7c
 8019bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019bf2:	b003      	add	sp, #12
 8019bf4:	4770      	bx	lr
 8019bf6:	bf00      	nop
 8019bf8:	0801544f 	.word	0x0801544f
 8019bfc:	240001d8 	.word	0x240001d8

08019c00 <__gettzinfo>:
 8019c00:	4800      	ldr	r0, [pc, #0]	; (8019c04 <__gettzinfo+0x4>)
 8019c02:	4770      	bx	lr
 8019c04:	240001e8 	.word	0x240001e8

08019c08 <gmtime_r>:
 8019c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c0c:	4a4d      	ldr	r2, [pc, #308]	; (8019d44 <gmtime_r+0x13c>)
 8019c0e:	460c      	mov	r4, r1
 8019c10:	2300      	movs	r3, #0
 8019c12:	e9d0 0100 	ldrd	r0, r1, [r0]
 8019c16:	f7e6 fd9f 	bl	8000758 <__aeabi_ldivmod>
 8019c1a:	2a00      	cmp	r2, #0
 8019c1c:	bfbc      	itt	lt
 8019c1e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8019c22:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8019c26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8019c2a:	f500 202f 	add.w	r0, r0, #716800	; 0xaf000
 8019c2e:	fbb2 f3f1 	udiv	r3, r2, r1
 8019c32:	fb01 2213 	mls	r2, r1, r3, r2
 8019c36:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8019c3a:	bfac      	ite	ge
 8019c3c:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8019c40:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8019c44:	60a3      	str	r3, [r4, #8]
 8019c46:	fbb2 f3f1 	udiv	r3, r2, r1
 8019c4a:	fb01 2213 	mls	r2, r1, r3, r2
 8019c4e:	6063      	str	r3, [r4, #4]
 8019c50:	6022      	str	r2, [r4, #0]
 8019c52:	1cc3      	adds	r3, r0, #3
 8019c54:	2207      	movs	r2, #7
 8019c56:	fb93 f2f2 	sdiv	r2, r3, r2
 8019c5a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8019c5e:	1a9b      	subs	r3, r3, r2
 8019c60:	bf48      	it	mi
 8019c62:	3307      	addmi	r3, #7
 8019c64:	2800      	cmp	r0, #0
 8019c66:	61a3      	str	r3, [r4, #24]
 8019c68:	bfb8      	it	lt
 8019c6a:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8019c6e:	4936      	ldr	r1, [pc, #216]	; (8019d48 <gmtime_r+0x140>)
 8019c70:	bfae      	itee	ge
 8019c72:	fb90 f1f1 	sdivge	r1, r0, r1
 8019c76:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8019c7a:	fb93 f1f1 	sdivlt	r1, r3, r1
 8019c7e:	4b33      	ldr	r3, [pc, #204]	; (8019d4c <gmtime_r+0x144>)
 8019c80:	fb03 0001 	mla	r0, r3, r1, r0
 8019c84:	f648 63ac 	movw	r3, #36524	; 0x8eac
 8019c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8019c8c:	4403      	add	r3, r0
 8019c8e:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8019c92:	fbb0 f2fc 	udiv	r2, r0, ip
 8019c96:	1a9b      	subs	r3, r3, r2
 8019c98:	f240 176d 	movw	r7, #365	; 0x16d
 8019c9c:	4a2c      	ldr	r2, [pc, #176]	; (8019d50 <gmtime_r+0x148>)
 8019c9e:	fbb0 f2f2 	udiv	r2, r0, r2
 8019ca2:	2664      	movs	r6, #100	; 0x64
 8019ca4:	1a9b      	subs	r3, r3, r2
 8019ca6:	fbb3 f2f7 	udiv	r2, r3, r7
 8019caa:	fbb3 f3fc 	udiv	r3, r3, ip
 8019cae:	fbb2 f5f6 	udiv	r5, r2, r6
 8019cb2:	1aeb      	subs	r3, r5, r3
 8019cb4:	4403      	add	r3, r0
 8019cb6:	fb07 3312 	mls	r3, r7, r2, r3
 8019cba:	2099      	movs	r0, #153	; 0x99
 8019cbc:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8019cc0:	3702      	adds	r7, #2
 8019cc2:	f103 0e01 	add.w	lr, r3, #1
 8019cc6:	fbb7 fcf0 	udiv	ip, r7, r0
 8019cca:	fb00 f00c 	mul.w	r0, r0, ip
 8019cce:	3002      	adds	r0, #2
 8019cd0:	f04f 0805 	mov.w	r8, #5
 8019cd4:	fbb0 f0f8 	udiv	r0, r0, r8
 8019cd8:	ebae 0000 	sub.w	r0, lr, r0
 8019cdc:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8019ce0:	4577      	cmp	r7, lr
 8019ce2:	bf94      	ite	ls
 8019ce4:	2702      	movls	r7, #2
 8019ce6:	f06f 0709 	mvnhi.w	r7, #9
 8019cea:	4467      	add	r7, ip
 8019cec:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8019cf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8019cf4:	2f01      	cmp	r7, #1
 8019cf6:	bf98      	it	ls
 8019cf8:	3101      	addls	r1, #1
 8019cfa:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8019cfe:	d30c      	bcc.n	8019d1a <gmtime_r+0x112>
 8019d00:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8019d04:	61e3      	str	r3, [r4, #28]
 8019d06:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8019d0a:	2300      	movs	r3, #0
 8019d0c:	60e0      	str	r0, [r4, #12]
 8019d0e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8019d12:	6223      	str	r3, [r4, #32]
 8019d14:	4620      	mov	r0, r4
 8019d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d1a:	f012 0f03 	tst.w	r2, #3
 8019d1e:	d102      	bne.n	8019d26 <gmtime_r+0x11e>
 8019d20:	fb06 2515 	mls	r5, r6, r5, r2
 8019d24:	b95d      	cbnz	r5, 8019d3e <gmtime_r+0x136>
 8019d26:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8019d2a:	fbb2 f6f5 	udiv	r6, r2, r5
 8019d2e:	fb05 2216 	mls	r2, r5, r6, r2
 8019d32:	fab2 f282 	clz	r2, r2
 8019d36:	0952      	lsrs	r2, r2, #5
 8019d38:	333b      	adds	r3, #59	; 0x3b
 8019d3a:	4413      	add	r3, r2
 8019d3c:	e7e2      	b.n	8019d04 <gmtime_r+0xfc>
 8019d3e:	2201      	movs	r2, #1
 8019d40:	e7fa      	b.n	8019d38 <gmtime_r+0x130>
 8019d42:	bf00      	nop
 8019d44:	00015180 	.word	0x00015180
 8019d48:	00023ab1 	.word	0x00023ab1
 8019d4c:	fffdc54f 	.word	0xfffdc54f
 8019d50:	00023ab0 	.word	0x00023ab0

08019d54 <abort>:
 8019d54:	b508      	push	{r3, lr}
 8019d56:	2006      	movs	r0, #6
 8019d58:	f000 fbd4 	bl	801a504 <raise>
 8019d5c:	2001      	movs	r0, #1
 8019d5e:	f7e8 fac3 	bl	80022e8 <_exit>
	...

08019d64 <__env_lock>:
 8019d64:	4801      	ldr	r0, [pc, #4]	; (8019d6c <__env_lock+0x8>)
 8019d66:	f7fc b873 	b.w	8015e50 <__retarget_lock_acquire_recursive>
 8019d6a:	bf00      	nop
 8019d6c:	240314c8 	.word	0x240314c8

08019d70 <__env_unlock>:
 8019d70:	4801      	ldr	r0, [pc, #4]	; (8019d78 <__env_unlock+0x8>)
 8019d72:	f7fc b86f 	b.w	8015e54 <__retarget_lock_release_recursive>
 8019d76:	bf00      	nop
 8019d78:	240314c8 	.word	0x240314c8

08019d7c <_malloc_usable_size_r>:
 8019d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d80:	1f18      	subs	r0, r3, #4
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	bfbc      	itt	lt
 8019d86:	580b      	ldrlt	r3, [r1, r0]
 8019d88:	18c0      	addlt	r0, r0, r3
 8019d8a:	4770      	bx	lr

08019d8c <_sungetc_r>:
 8019d8c:	b538      	push	{r3, r4, r5, lr}
 8019d8e:	1c4b      	adds	r3, r1, #1
 8019d90:	4614      	mov	r4, r2
 8019d92:	d103      	bne.n	8019d9c <_sungetc_r+0x10>
 8019d94:	f04f 35ff 	mov.w	r5, #4294967295
 8019d98:	4628      	mov	r0, r5
 8019d9a:	bd38      	pop	{r3, r4, r5, pc}
 8019d9c:	8993      	ldrh	r3, [r2, #12]
 8019d9e:	f023 0320 	bic.w	r3, r3, #32
 8019da2:	8193      	strh	r3, [r2, #12]
 8019da4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019da6:	6852      	ldr	r2, [r2, #4]
 8019da8:	b2cd      	uxtb	r5, r1
 8019daa:	b18b      	cbz	r3, 8019dd0 <_sungetc_r+0x44>
 8019dac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019dae:	4293      	cmp	r3, r2
 8019db0:	dd08      	ble.n	8019dc4 <_sungetc_r+0x38>
 8019db2:	6823      	ldr	r3, [r4, #0]
 8019db4:	1e5a      	subs	r2, r3, #1
 8019db6:	6022      	str	r2, [r4, #0]
 8019db8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019dbc:	6863      	ldr	r3, [r4, #4]
 8019dbe:	3301      	adds	r3, #1
 8019dc0:	6063      	str	r3, [r4, #4]
 8019dc2:	e7e9      	b.n	8019d98 <_sungetc_r+0xc>
 8019dc4:	4621      	mov	r1, r4
 8019dc6:	f000 fb3a 	bl	801a43e <__submore>
 8019dca:	2800      	cmp	r0, #0
 8019dcc:	d0f1      	beq.n	8019db2 <_sungetc_r+0x26>
 8019dce:	e7e1      	b.n	8019d94 <_sungetc_r+0x8>
 8019dd0:	6921      	ldr	r1, [r4, #16]
 8019dd2:	6823      	ldr	r3, [r4, #0]
 8019dd4:	b151      	cbz	r1, 8019dec <_sungetc_r+0x60>
 8019dd6:	4299      	cmp	r1, r3
 8019dd8:	d208      	bcs.n	8019dec <_sungetc_r+0x60>
 8019dda:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019dde:	42a9      	cmp	r1, r5
 8019de0:	d104      	bne.n	8019dec <_sungetc_r+0x60>
 8019de2:	3b01      	subs	r3, #1
 8019de4:	3201      	adds	r2, #1
 8019de6:	6023      	str	r3, [r4, #0]
 8019de8:	6062      	str	r2, [r4, #4]
 8019dea:	e7d5      	b.n	8019d98 <_sungetc_r+0xc>
 8019dec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019df4:	6363      	str	r3, [r4, #52]	; 0x34
 8019df6:	2303      	movs	r3, #3
 8019df8:	63a3      	str	r3, [r4, #56]	; 0x38
 8019dfa:	4623      	mov	r3, r4
 8019dfc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019e00:	6023      	str	r3, [r4, #0]
 8019e02:	2301      	movs	r3, #1
 8019e04:	e7dc      	b.n	8019dc0 <_sungetc_r+0x34>

08019e06 <__ssrefill_r>:
 8019e06:	b510      	push	{r4, lr}
 8019e08:	460c      	mov	r4, r1
 8019e0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019e0c:	b169      	cbz	r1, 8019e2a <__ssrefill_r+0x24>
 8019e0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019e12:	4299      	cmp	r1, r3
 8019e14:	d001      	beq.n	8019e1a <__ssrefill_r+0x14>
 8019e16:	f7fc fe27 	bl	8016a68 <_free_r>
 8019e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019e1c:	6063      	str	r3, [r4, #4]
 8019e1e:	2000      	movs	r0, #0
 8019e20:	6360      	str	r0, [r4, #52]	; 0x34
 8019e22:	b113      	cbz	r3, 8019e2a <__ssrefill_r+0x24>
 8019e24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019e26:	6023      	str	r3, [r4, #0]
 8019e28:	bd10      	pop	{r4, pc}
 8019e2a:	6923      	ldr	r3, [r4, #16]
 8019e2c:	6023      	str	r3, [r4, #0]
 8019e2e:	2300      	movs	r3, #0
 8019e30:	6063      	str	r3, [r4, #4]
 8019e32:	89a3      	ldrh	r3, [r4, #12]
 8019e34:	f043 0320 	orr.w	r3, r3, #32
 8019e38:	81a3      	strh	r3, [r4, #12]
 8019e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8019e3e:	e7f3      	b.n	8019e28 <__ssrefill_r+0x22>

08019e40 <__ssvfiscanf_r>:
 8019e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e44:	460c      	mov	r4, r1
 8019e46:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8019e4a:	2100      	movs	r1, #0
 8019e4c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8019e50:	49a6      	ldr	r1, [pc, #664]	; (801a0ec <__ssvfiscanf_r+0x2ac>)
 8019e52:	91a0      	str	r1, [sp, #640]	; 0x280
 8019e54:	f10d 0804 	add.w	r8, sp, #4
 8019e58:	49a5      	ldr	r1, [pc, #660]	; (801a0f0 <__ssvfiscanf_r+0x2b0>)
 8019e5a:	4fa6      	ldr	r7, [pc, #664]	; (801a0f4 <__ssvfiscanf_r+0x2b4>)
 8019e5c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801a0f8 <__ssvfiscanf_r+0x2b8>
 8019e60:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019e64:	4606      	mov	r6, r0
 8019e66:	91a1      	str	r1, [sp, #644]	; 0x284
 8019e68:	9300      	str	r3, [sp, #0]
 8019e6a:	7813      	ldrb	r3, [r2, #0]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	f000 815a 	beq.w	801a126 <__ssvfiscanf_r+0x2e6>
 8019e72:	5cf9      	ldrb	r1, [r7, r3]
 8019e74:	f011 0108 	ands.w	r1, r1, #8
 8019e78:	f102 0501 	add.w	r5, r2, #1
 8019e7c:	d019      	beq.n	8019eb2 <__ssvfiscanf_r+0x72>
 8019e7e:	6863      	ldr	r3, [r4, #4]
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	dd0f      	ble.n	8019ea4 <__ssvfiscanf_r+0x64>
 8019e84:	6823      	ldr	r3, [r4, #0]
 8019e86:	781a      	ldrb	r2, [r3, #0]
 8019e88:	5cba      	ldrb	r2, [r7, r2]
 8019e8a:	0712      	lsls	r2, r2, #28
 8019e8c:	d401      	bmi.n	8019e92 <__ssvfiscanf_r+0x52>
 8019e8e:	462a      	mov	r2, r5
 8019e90:	e7eb      	b.n	8019e6a <__ssvfiscanf_r+0x2a>
 8019e92:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019e94:	3201      	adds	r2, #1
 8019e96:	9245      	str	r2, [sp, #276]	; 0x114
 8019e98:	6862      	ldr	r2, [r4, #4]
 8019e9a:	3301      	adds	r3, #1
 8019e9c:	3a01      	subs	r2, #1
 8019e9e:	6062      	str	r2, [r4, #4]
 8019ea0:	6023      	str	r3, [r4, #0]
 8019ea2:	e7ec      	b.n	8019e7e <__ssvfiscanf_r+0x3e>
 8019ea4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019ea6:	4621      	mov	r1, r4
 8019ea8:	4630      	mov	r0, r6
 8019eaa:	4798      	blx	r3
 8019eac:	2800      	cmp	r0, #0
 8019eae:	d0e9      	beq.n	8019e84 <__ssvfiscanf_r+0x44>
 8019eb0:	e7ed      	b.n	8019e8e <__ssvfiscanf_r+0x4e>
 8019eb2:	2b25      	cmp	r3, #37	; 0x25
 8019eb4:	d012      	beq.n	8019edc <__ssvfiscanf_r+0x9c>
 8019eb6:	469a      	mov	sl, r3
 8019eb8:	6863      	ldr	r3, [r4, #4]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	f340 8091 	ble.w	8019fe2 <__ssvfiscanf_r+0x1a2>
 8019ec0:	6822      	ldr	r2, [r4, #0]
 8019ec2:	7813      	ldrb	r3, [r2, #0]
 8019ec4:	4553      	cmp	r3, sl
 8019ec6:	f040 812e 	bne.w	801a126 <__ssvfiscanf_r+0x2e6>
 8019eca:	6863      	ldr	r3, [r4, #4]
 8019ecc:	3b01      	subs	r3, #1
 8019ece:	6063      	str	r3, [r4, #4]
 8019ed0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019ed2:	3201      	adds	r2, #1
 8019ed4:	3301      	adds	r3, #1
 8019ed6:	6022      	str	r2, [r4, #0]
 8019ed8:	9345      	str	r3, [sp, #276]	; 0x114
 8019eda:	e7d8      	b.n	8019e8e <__ssvfiscanf_r+0x4e>
 8019edc:	9141      	str	r1, [sp, #260]	; 0x104
 8019ede:	9143      	str	r1, [sp, #268]	; 0x10c
 8019ee0:	7853      	ldrb	r3, [r2, #1]
 8019ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8019ee4:	bf02      	ittt	eq
 8019ee6:	2310      	moveq	r3, #16
 8019ee8:	1c95      	addeq	r5, r2, #2
 8019eea:	9341      	streq	r3, [sp, #260]	; 0x104
 8019eec:	220a      	movs	r2, #10
 8019eee:	46aa      	mov	sl, r5
 8019ef0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8019ef4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8019ef8:	2b09      	cmp	r3, #9
 8019efa:	d91c      	bls.n	8019f36 <__ssvfiscanf_r+0xf6>
 8019efc:	487e      	ldr	r0, [pc, #504]	; (801a0f8 <__ssvfiscanf_r+0x2b8>)
 8019efe:	2203      	movs	r2, #3
 8019f00:	f7e6 fa16 	bl	8000330 <memchr>
 8019f04:	b138      	cbz	r0, 8019f16 <__ssvfiscanf_r+0xd6>
 8019f06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019f08:	eba0 0009 	sub.w	r0, r0, r9
 8019f0c:	2301      	movs	r3, #1
 8019f0e:	4083      	lsls	r3, r0
 8019f10:	4313      	orrs	r3, r2
 8019f12:	9341      	str	r3, [sp, #260]	; 0x104
 8019f14:	4655      	mov	r5, sl
 8019f16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019f1a:	2b78      	cmp	r3, #120	; 0x78
 8019f1c:	d806      	bhi.n	8019f2c <__ssvfiscanf_r+0xec>
 8019f1e:	2b57      	cmp	r3, #87	; 0x57
 8019f20:	d810      	bhi.n	8019f44 <__ssvfiscanf_r+0x104>
 8019f22:	2b25      	cmp	r3, #37	; 0x25
 8019f24:	d0c7      	beq.n	8019eb6 <__ssvfiscanf_r+0x76>
 8019f26:	d857      	bhi.n	8019fd8 <__ssvfiscanf_r+0x198>
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d065      	beq.n	8019ff8 <__ssvfiscanf_r+0x1b8>
 8019f2c:	2303      	movs	r3, #3
 8019f2e:	9347      	str	r3, [sp, #284]	; 0x11c
 8019f30:	230a      	movs	r3, #10
 8019f32:	9342      	str	r3, [sp, #264]	; 0x108
 8019f34:	e076      	b.n	801a024 <__ssvfiscanf_r+0x1e4>
 8019f36:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019f38:	fb02 1103 	mla	r1, r2, r3, r1
 8019f3c:	3930      	subs	r1, #48	; 0x30
 8019f3e:	9143      	str	r1, [sp, #268]	; 0x10c
 8019f40:	4655      	mov	r5, sl
 8019f42:	e7d4      	b.n	8019eee <__ssvfiscanf_r+0xae>
 8019f44:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8019f48:	2a20      	cmp	r2, #32
 8019f4a:	d8ef      	bhi.n	8019f2c <__ssvfiscanf_r+0xec>
 8019f4c:	a101      	add	r1, pc, #4	; (adr r1, 8019f54 <__ssvfiscanf_r+0x114>)
 8019f4e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019f52:	bf00      	nop
 8019f54:	0801a007 	.word	0x0801a007
 8019f58:	08019f2d 	.word	0x08019f2d
 8019f5c:	08019f2d 	.word	0x08019f2d
 8019f60:	0801a065 	.word	0x0801a065
 8019f64:	08019f2d 	.word	0x08019f2d
 8019f68:	08019f2d 	.word	0x08019f2d
 8019f6c:	08019f2d 	.word	0x08019f2d
 8019f70:	08019f2d 	.word	0x08019f2d
 8019f74:	08019f2d 	.word	0x08019f2d
 8019f78:	08019f2d 	.word	0x08019f2d
 8019f7c:	08019f2d 	.word	0x08019f2d
 8019f80:	0801a07b 	.word	0x0801a07b
 8019f84:	0801a061 	.word	0x0801a061
 8019f88:	08019fdf 	.word	0x08019fdf
 8019f8c:	08019fdf 	.word	0x08019fdf
 8019f90:	08019fdf 	.word	0x08019fdf
 8019f94:	08019f2d 	.word	0x08019f2d
 8019f98:	0801a01d 	.word	0x0801a01d
 8019f9c:	08019f2d 	.word	0x08019f2d
 8019fa0:	08019f2d 	.word	0x08019f2d
 8019fa4:	08019f2d 	.word	0x08019f2d
 8019fa8:	08019f2d 	.word	0x08019f2d
 8019fac:	0801a08b 	.word	0x0801a08b
 8019fb0:	0801a059 	.word	0x0801a059
 8019fb4:	08019fff 	.word	0x08019fff
 8019fb8:	08019f2d 	.word	0x08019f2d
 8019fbc:	08019f2d 	.word	0x08019f2d
 8019fc0:	0801a087 	.word	0x0801a087
 8019fc4:	08019f2d 	.word	0x08019f2d
 8019fc8:	0801a061 	.word	0x0801a061
 8019fcc:	08019f2d 	.word	0x08019f2d
 8019fd0:	08019f2d 	.word	0x08019f2d
 8019fd4:	0801a007 	.word	0x0801a007
 8019fd8:	3b45      	subs	r3, #69	; 0x45
 8019fda:	2b02      	cmp	r3, #2
 8019fdc:	d8a6      	bhi.n	8019f2c <__ssvfiscanf_r+0xec>
 8019fde:	2305      	movs	r3, #5
 8019fe0:	e01f      	b.n	801a022 <__ssvfiscanf_r+0x1e2>
 8019fe2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019fe4:	4621      	mov	r1, r4
 8019fe6:	4630      	mov	r0, r6
 8019fe8:	4798      	blx	r3
 8019fea:	2800      	cmp	r0, #0
 8019fec:	f43f af68 	beq.w	8019ec0 <__ssvfiscanf_r+0x80>
 8019ff0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019ff2:	2800      	cmp	r0, #0
 8019ff4:	f040 808d 	bne.w	801a112 <__ssvfiscanf_r+0x2d2>
 8019ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8019ffc:	e08f      	b.n	801a11e <__ssvfiscanf_r+0x2de>
 8019ffe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a000:	f042 0220 	orr.w	r2, r2, #32
 801a004:	9241      	str	r2, [sp, #260]	; 0x104
 801a006:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a00c:	9241      	str	r2, [sp, #260]	; 0x104
 801a00e:	2210      	movs	r2, #16
 801a010:	2b6f      	cmp	r3, #111	; 0x6f
 801a012:	9242      	str	r2, [sp, #264]	; 0x108
 801a014:	bf34      	ite	cc
 801a016:	2303      	movcc	r3, #3
 801a018:	2304      	movcs	r3, #4
 801a01a:	e002      	b.n	801a022 <__ssvfiscanf_r+0x1e2>
 801a01c:	2300      	movs	r3, #0
 801a01e:	9342      	str	r3, [sp, #264]	; 0x108
 801a020:	2303      	movs	r3, #3
 801a022:	9347      	str	r3, [sp, #284]	; 0x11c
 801a024:	6863      	ldr	r3, [r4, #4]
 801a026:	2b00      	cmp	r3, #0
 801a028:	dd3d      	ble.n	801a0a6 <__ssvfiscanf_r+0x266>
 801a02a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a02c:	0659      	lsls	r1, r3, #25
 801a02e:	d404      	bmi.n	801a03a <__ssvfiscanf_r+0x1fa>
 801a030:	6823      	ldr	r3, [r4, #0]
 801a032:	781a      	ldrb	r2, [r3, #0]
 801a034:	5cba      	ldrb	r2, [r7, r2]
 801a036:	0712      	lsls	r2, r2, #28
 801a038:	d43c      	bmi.n	801a0b4 <__ssvfiscanf_r+0x274>
 801a03a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801a03c:	2b02      	cmp	r3, #2
 801a03e:	dc4b      	bgt.n	801a0d8 <__ssvfiscanf_r+0x298>
 801a040:	466b      	mov	r3, sp
 801a042:	4622      	mov	r2, r4
 801a044:	a941      	add	r1, sp, #260	; 0x104
 801a046:	4630      	mov	r0, r6
 801a048:	f000 f872 	bl	801a130 <_scanf_chars>
 801a04c:	2801      	cmp	r0, #1
 801a04e:	d06a      	beq.n	801a126 <__ssvfiscanf_r+0x2e6>
 801a050:	2802      	cmp	r0, #2
 801a052:	f47f af1c 	bne.w	8019e8e <__ssvfiscanf_r+0x4e>
 801a056:	e7cb      	b.n	8019ff0 <__ssvfiscanf_r+0x1b0>
 801a058:	2308      	movs	r3, #8
 801a05a:	9342      	str	r3, [sp, #264]	; 0x108
 801a05c:	2304      	movs	r3, #4
 801a05e:	e7e0      	b.n	801a022 <__ssvfiscanf_r+0x1e2>
 801a060:	220a      	movs	r2, #10
 801a062:	e7d5      	b.n	801a010 <__ssvfiscanf_r+0x1d0>
 801a064:	4629      	mov	r1, r5
 801a066:	4640      	mov	r0, r8
 801a068:	f000 f9b0 	bl	801a3cc <__sccl>
 801a06c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a072:	9341      	str	r3, [sp, #260]	; 0x104
 801a074:	4605      	mov	r5, r0
 801a076:	2301      	movs	r3, #1
 801a078:	e7d3      	b.n	801a022 <__ssvfiscanf_r+0x1e2>
 801a07a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a07c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a080:	9341      	str	r3, [sp, #260]	; 0x104
 801a082:	2300      	movs	r3, #0
 801a084:	e7cd      	b.n	801a022 <__ssvfiscanf_r+0x1e2>
 801a086:	2302      	movs	r3, #2
 801a088:	e7cb      	b.n	801a022 <__ssvfiscanf_r+0x1e2>
 801a08a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801a08c:	06c3      	lsls	r3, r0, #27
 801a08e:	f53f aefe 	bmi.w	8019e8e <__ssvfiscanf_r+0x4e>
 801a092:	9b00      	ldr	r3, [sp, #0]
 801a094:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a096:	1d19      	adds	r1, r3, #4
 801a098:	9100      	str	r1, [sp, #0]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	07c0      	lsls	r0, r0, #31
 801a09e:	bf4c      	ite	mi
 801a0a0:	801a      	strhmi	r2, [r3, #0]
 801a0a2:	601a      	strpl	r2, [r3, #0]
 801a0a4:	e6f3      	b.n	8019e8e <__ssvfiscanf_r+0x4e>
 801a0a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a0a8:	4621      	mov	r1, r4
 801a0aa:	4630      	mov	r0, r6
 801a0ac:	4798      	blx	r3
 801a0ae:	2800      	cmp	r0, #0
 801a0b0:	d0bb      	beq.n	801a02a <__ssvfiscanf_r+0x1ea>
 801a0b2:	e79d      	b.n	8019ff0 <__ssvfiscanf_r+0x1b0>
 801a0b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a0b6:	3201      	adds	r2, #1
 801a0b8:	9245      	str	r2, [sp, #276]	; 0x114
 801a0ba:	6862      	ldr	r2, [r4, #4]
 801a0bc:	3a01      	subs	r2, #1
 801a0be:	2a00      	cmp	r2, #0
 801a0c0:	6062      	str	r2, [r4, #4]
 801a0c2:	dd02      	ble.n	801a0ca <__ssvfiscanf_r+0x28a>
 801a0c4:	3301      	adds	r3, #1
 801a0c6:	6023      	str	r3, [r4, #0]
 801a0c8:	e7b2      	b.n	801a030 <__ssvfiscanf_r+0x1f0>
 801a0ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a0cc:	4621      	mov	r1, r4
 801a0ce:	4630      	mov	r0, r6
 801a0d0:	4798      	blx	r3
 801a0d2:	2800      	cmp	r0, #0
 801a0d4:	d0ac      	beq.n	801a030 <__ssvfiscanf_r+0x1f0>
 801a0d6:	e78b      	b.n	8019ff0 <__ssvfiscanf_r+0x1b0>
 801a0d8:	2b04      	cmp	r3, #4
 801a0da:	dc0f      	bgt.n	801a0fc <__ssvfiscanf_r+0x2bc>
 801a0dc:	466b      	mov	r3, sp
 801a0de:	4622      	mov	r2, r4
 801a0e0:	a941      	add	r1, sp, #260	; 0x104
 801a0e2:	4630      	mov	r0, r6
 801a0e4:	f000 f87e 	bl	801a1e4 <_scanf_i>
 801a0e8:	e7b0      	b.n	801a04c <__ssvfiscanf_r+0x20c>
 801a0ea:	bf00      	nop
 801a0ec:	08019d8d 	.word	0x08019d8d
 801a0f0:	08019e07 	.word	0x08019e07
 801a0f4:	0802cf29 	.word	0x0802cf29
 801a0f8:	0802d02f 	.word	0x0802d02f
 801a0fc:	4b0b      	ldr	r3, [pc, #44]	; (801a12c <__ssvfiscanf_r+0x2ec>)
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	f43f aec5 	beq.w	8019e8e <__ssvfiscanf_r+0x4e>
 801a104:	466b      	mov	r3, sp
 801a106:	4622      	mov	r2, r4
 801a108:	a941      	add	r1, sp, #260	; 0x104
 801a10a:	4630      	mov	r0, r6
 801a10c:	f7fa fe06 	bl	8014d1c <_scanf_float>
 801a110:	e79c      	b.n	801a04c <__ssvfiscanf_r+0x20c>
 801a112:	89a3      	ldrh	r3, [r4, #12]
 801a114:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a118:	bf18      	it	ne
 801a11a:	f04f 30ff 	movne.w	r0, #4294967295
 801a11e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801a122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a126:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a128:	e7f9      	b.n	801a11e <__ssvfiscanf_r+0x2de>
 801a12a:	bf00      	nop
 801a12c:	08014d1d 	.word	0x08014d1d

0801a130 <_scanf_chars>:
 801a130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a134:	4615      	mov	r5, r2
 801a136:	688a      	ldr	r2, [r1, #8]
 801a138:	4680      	mov	r8, r0
 801a13a:	460c      	mov	r4, r1
 801a13c:	b932      	cbnz	r2, 801a14c <_scanf_chars+0x1c>
 801a13e:	698a      	ldr	r2, [r1, #24]
 801a140:	2a00      	cmp	r2, #0
 801a142:	bf0c      	ite	eq
 801a144:	2201      	moveq	r2, #1
 801a146:	f04f 32ff 	movne.w	r2, #4294967295
 801a14a:	608a      	str	r2, [r1, #8]
 801a14c:	6822      	ldr	r2, [r4, #0]
 801a14e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801a1e0 <_scanf_chars+0xb0>
 801a152:	06d1      	lsls	r1, r2, #27
 801a154:	bf5f      	itttt	pl
 801a156:	681a      	ldrpl	r2, [r3, #0]
 801a158:	1d11      	addpl	r1, r2, #4
 801a15a:	6019      	strpl	r1, [r3, #0]
 801a15c:	6816      	ldrpl	r6, [r2, #0]
 801a15e:	2700      	movs	r7, #0
 801a160:	69a0      	ldr	r0, [r4, #24]
 801a162:	b188      	cbz	r0, 801a188 <_scanf_chars+0x58>
 801a164:	2801      	cmp	r0, #1
 801a166:	d107      	bne.n	801a178 <_scanf_chars+0x48>
 801a168:	682a      	ldr	r2, [r5, #0]
 801a16a:	7811      	ldrb	r1, [r2, #0]
 801a16c:	6962      	ldr	r2, [r4, #20]
 801a16e:	5c52      	ldrb	r2, [r2, r1]
 801a170:	b952      	cbnz	r2, 801a188 <_scanf_chars+0x58>
 801a172:	2f00      	cmp	r7, #0
 801a174:	d031      	beq.n	801a1da <_scanf_chars+0xaa>
 801a176:	e022      	b.n	801a1be <_scanf_chars+0x8e>
 801a178:	2802      	cmp	r0, #2
 801a17a:	d120      	bne.n	801a1be <_scanf_chars+0x8e>
 801a17c:	682b      	ldr	r3, [r5, #0]
 801a17e:	781b      	ldrb	r3, [r3, #0]
 801a180:	f819 3003 	ldrb.w	r3, [r9, r3]
 801a184:	071b      	lsls	r3, r3, #28
 801a186:	d41a      	bmi.n	801a1be <_scanf_chars+0x8e>
 801a188:	6823      	ldr	r3, [r4, #0]
 801a18a:	06da      	lsls	r2, r3, #27
 801a18c:	bf5e      	ittt	pl
 801a18e:	682b      	ldrpl	r3, [r5, #0]
 801a190:	781b      	ldrbpl	r3, [r3, #0]
 801a192:	f806 3b01 	strbpl.w	r3, [r6], #1
 801a196:	682a      	ldr	r2, [r5, #0]
 801a198:	686b      	ldr	r3, [r5, #4]
 801a19a:	3201      	adds	r2, #1
 801a19c:	602a      	str	r2, [r5, #0]
 801a19e:	68a2      	ldr	r2, [r4, #8]
 801a1a0:	3b01      	subs	r3, #1
 801a1a2:	3a01      	subs	r2, #1
 801a1a4:	606b      	str	r3, [r5, #4]
 801a1a6:	3701      	adds	r7, #1
 801a1a8:	60a2      	str	r2, [r4, #8]
 801a1aa:	b142      	cbz	r2, 801a1be <_scanf_chars+0x8e>
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	dcd7      	bgt.n	801a160 <_scanf_chars+0x30>
 801a1b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a1b4:	4629      	mov	r1, r5
 801a1b6:	4640      	mov	r0, r8
 801a1b8:	4798      	blx	r3
 801a1ba:	2800      	cmp	r0, #0
 801a1bc:	d0d0      	beq.n	801a160 <_scanf_chars+0x30>
 801a1be:	6823      	ldr	r3, [r4, #0]
 801a1c0:	f013 0310 	ands.w	r3, r3, #16
 801a1c4:	d105      	bne.n	801a1d2 <_scanf_chars+0xa2>
 801a1c6:	68e2      	ldr	r2, [r4, #12]
 801a1c8:	3201      	adds	r2, #1
 801a1ca:	60e2      	str	r2, [r4, #12]
 801a1cc:	69a2      	ldr	r2, [r4, #24]
 801a1ce:	b102      	cbz	r2, 801a1d2 <_scanf_chars+0xa2>
 801a1d0:	7033      	strb	r3, [r6, #0]
 801a1d2:	6923      	ldr	r3, [r4, #16]
 801a1d4:	443b      	add	r3, r7
 801a1d6:	6123      	str	r3, [r4, #16]
 801a1d8:	2000      	movs	r0, #0
 801a1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1de:	bf00      	nop
 801a1e0:	0802cf29 	.word	0x0802cf29

0801a1e4 <_scanf_i>:
 801a1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1e8:	4698      	mov	r8, r3
 801a1ea:	4b74      	ldr	r3, [pc, #464]	; (801a3bc <_scanf_i+0x1d8>)
 801a1ec:	460c      	mov	r4, r1
 801a1ee:	4682      	mov	sl, r0
 801a1f0:	4616      	mov	r6, r2
 801a1f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a1f6:	b087      	sub	sp, #28
 801a1f8:	ab03      	add	r3, sp, #12
 801a1fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a1fe:	4b70      	ldr	r3, [pc, #448]	; (801a3c0 <_scanf_i+0x1dc>)
 801a200:	69a1      	ldr	r1, [r4, #24]
 801a202:	4a70      	ldr	r2, [pc, #448]	; (801a3c4 <_scanf_i+0x1e0>)
 801a204:	2903      	cmp	r1, #3
 801a206:	bf18      	it	ne
 801a208:	461a      	movne	r2, r3
 801a20a:	68a3      	ldr	r3, [r4, #8]
 801a20c:	9201      	str	r2, [sp, #4]
 801a20e:	1e5a      	subs	r2, r3, #1
 801a210:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a214:	bf88      	it	hi
 801a216:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a21a:	4627      	mov	r7, r4
 801a21c:	bf82      	ittt	hi
 801a21e:	eb03 0905 	addhi.w	r9, r3, r5
 801a222:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a226:	60a3      	strhi	r3, [r4, #8]
 801a228:	f857 3b1c 	ldr.w	r3, [r7], #28
 801a22c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801a230:	bf98      	it	ls
 801a232:	f04f 0900 	movls.w	r9, #0
 801a236:	6023      	str	r3, [r4, #0]
 801a238:	463d      	mov	r5, r7
 801a23a:	f04f 0b00 	mov.w	fp, #0
 801a23e:	6831      	ldr	r1, [r6, #0]
 801a240:	ab03      	add	r3, sp, #12
 801a242:	7809      	ldrb	r1, [r1, #0]
 801a244:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801a248:	2202      	movs	r2, #2
 801a24a:	f7e6 f871 	bl	8000330 <memchr>
 801a24e:	b328      	cbz	r0, 801a29c <_scanf_i+0xb8>
 801a250:	f1bb 0f01 	cmp.w	fp, #1
 801a254:	d159      	bne.n	801a30a <_scanf_i+0x126>
 801a256:	6862      	ldr	r2, [r4, #4]
 801a258:	b92a      	cbnz	r2, 801a266 <_scanf_i+0x82>
 801a25a:	6822      	ldr	r2, [r4, #0]
 801a25c:	2308      	movs	r3, #8
 801a25e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a262:	6063      	str	r3, [r4, #4]
 801a264:	6022      	str	r2, [r4, #0]
 801a266:	6822      	ldr	r2, [r4, #0]
 801a268:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801a26c:	6022      	str	r2, [r4, #0]
 801a26e:	68a2      	ldr	r2, [r4, #8]
 801a270:	1e51      	subs	r1, r2, #1
 801a272:	60a1      	str	r1, [r4, #8]
 801a274:	b192      	cbz	r2, 801a29c <_scanf_i+0xb8>
 801a276:	6832      	ldr	r2, [r6, #0]
 801a278:	1c51      	adds	r1, r2, #1
 801a27a:	6031      	str	r1, [r6, #0]
 801a27c:	7812      	ldrb	r2, [r2, #0]
 801a27e:	f805 2b01 	strb.w	r2, [r5], #1
 801a282:	6872      	ldr	r2, [r6, #4]
 801a284:	3a01      	subs	r2, #1
 801a286:	2a00      	cmp	r2, #0
 801a288:	6072      	str	r2, [r6, #4]
 801a28a:	dc07      	bgt.n	801a29c <_scanf_i+0xb8>
 801a28c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801a290:	4631      	mov	r1, r6
 801a292:	4650      	mov	r0, sl
 801a294:	4790      	blx	r2
 801a296:	2800      	cmp	r0, #0
 801a298:	f040 8085 	bne.w	801a3a6 <_scanf_i+0x1c2>
 801a29c:	f10b 0b01 	add.w	fp, fp, #1
 801a2a0:	f1bb 0f03 	cmp.w	fp, #3
 801a2a4:	d1cb      	bne.n	801a23e <_scanf_i+0x5a>
 801a2a6:	6863      	ldr	r3, [r4, #4]
 801a2a8:	b90b      	cbnz	r3, 801a2ae <_scanf_i+0xca>
 801a2aa:	230a      	movs	r3, #10
 801a2ac:	6063      	str	r3, [r4, #4]
 801a2ae:	6863      	ldr	r3, [r4, #4]
 801a2b0:	4945      	ldr	r1, [pc, #276]	; (801a3c8 <_scanf_i+0x1e4>)
 801a2b2:	6960      	ldr	r0, [r4, #20]
 801a2b4:	1ac9      	subs	r1, r1, r3
 801a2b6:	f000 f889 	bl	801a3cc <__sccl>
 801a2ba:	f04f 0b00 	mov.w	fp, #0
 801a2be:	68a3      	ldr	r3, [r4, #8]
 801a2c0:	6822      	ldr	r2, [r4, #0]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d03d      	beq.n	801a342 <_scanf_i+0x15e>
 801a2c6:	6831      	ldr	r1, [r6, #0]
 801a2c8:	6960      	ldr	r0, [r4, #20]
 801a2ca:	f891 c000 	ldrb.w	ip, [r1]
 801a2ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 801a2d2:	2800      	cmp	r0, #0
 801a2d4:	d035      	beq.n	801a342 <_scanf_i+0x15e>
 801a2d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801a2da:	d124      	bne.n	801a326 <_scanf_i+0x142>
 801a2dc:	0510      	lsls	r0, r2, #20
 801a2de:	d522      	bpl.n	801a326 <_scanf_i+0x142>
 801a2e0:	f10b 0b01 	add.w	fp, fp, #1
 801a2e4:	f1b9 0f00 	cmp.w	r9, #0
 801a2e8:	d003      	beq.n	801a2f2 <_scanf_i+0x10e>
 801a2ea:	3301      	adds	r3, #1
 801a2ec:	f109 39ff 	add.w	r9, r9, #4294967295
 801a2f0:	60a3      	str	r3, [r4, #8]
 801a2f2:	6873      	ldr	r3, [r6, #4]
 801a2f4:	3b01      	subs	r3, #1
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	6073      	str	r3, [r6, #4]
 801a2fa:	dd1b      	ble.n	801a334 <_scanf_i+0x150>
 801a2fc:	6833      	ldr	r3, [r6, #0]
 801a2fe:	3301      	adds	r3, #1
 801a300:	6033      	str	r3, [r6, #0]
 801a302:	68a3      	ldr	r3, [r4, #8]
 801a304:	3b01      	subs	r3, #1
 801a306:	60a3      	str	r3, [r4, #8]
 801a308:	e7d9      	b.n	801a2be <_scanf_i+0xda>
 801a30a:	f1bb 0f02 	cmp.w	fp, #2
 801a30e:	d1ae      	bne.n	801a26e <_scanf_i+0x8a>
 801a310:	6822      	ldr	r2, [r4, #0]
 801a312:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801a316:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a31a:	d1bf      	bne.n	801a29c <_scanf_i+0xb8>
 801a31c:	2310      	movs	r3, #16
 801a31e:	6063      	str	r3, [r4, #4]
 801a320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a324:	e7a2      	b.n	801a26c <_scanf_i+0x88>
 801a326:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801a32a:	6022      	str	r2, [r4, #0]
 801a32c:	780b      	ldrb	r3, [r1, #0]
 801a32e:	f805 3b01 	strb.w	r3, [r5], #1
 801a332:	e7de      	b.n	801a2f2 <_scanf_i+0x10e>
 801a334:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a338:	4631      	mov	r1, r6
 801a33a:	4650      	mov	r0, sl
 801a33c:	4798      	blx	r3
 801a33e:	2800      	cmp	r0, #0
 801a340:	d0df      	beq.n	801a302 <_scanf_i+0x11e>
 801a342:	6823      	ldr	r3, [r4, #0]
 801a344:	05d9      	lsls	r1, r3, #23
 801a346:	d50d      	bpl.n	801a364 <_scanf_i+0x180>
 801a348:	42bd      	cmp	r5, r7
 801a34a:	d909      	bls.n	801a360 <_scanf_i+0x17c>
 801a34c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a350:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a354:	4632      	mov	r2, r6
 801a356:	4650      	mov	r0, sl
 801a358:	4798      	blx	r3
 801a35a:	f105 39ff 	add.w	r9, r5, #4294967295
 801a35e:	464d      	mov	r5, r9
 801a360:	42bd      	cmp	r5, r7
 801a362:	d028      	beq.n	801a3b6 <_scanf_i+0x1d2>
 801a364:	6822      	ldr	r2, [r4, #0]
 801a366:	f012 0210 	ands.w	r2, r2, #16
 801a36a:	d113      	bne.n	801a394 <_scanf_i+0x1b0>
 801a36c:	702a      	strb	r2, [r5, #0]
 801a36e:	6863      	ldr	r3, [r4, #4]
 801a370:	9e01      	ldr	r6, [sp, #4]
 801a372:	4639      	mov	r1, r7
 801a374:	4650      	mov	r0, sl
 801a376:	47b0      	blx	r6
 801a378:	f8d8 3000 	ldr.w	r3, [r8]
 801a37c:	6821      	ldr	r1, [r4, #0]
 801a37e:	1d1a      	adds	r2, r3, #4
 801a380:	f8c8 2000 	str.w	r2, [r8]
 801a384:	f011 0f20 	tst.w	r1, #32
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	d00f      	beq.n	801a3ac <_scanf_i+0x1c8>
 801a38c:	6018      	str	r0, [r3, #0]
 801a38e:	68e3      	ldr	r3, [r4, #12]
 801a390:	3301      	adds	r3, #1
 801a392:	60e3      	str	r3, [r4, #12]
 801a394:	6923      	ldr	r3, [r4, #16]
 801a396:	1bed      	subs	r5, r5, r7
 801a398:	445d      	add	r5, fp
 801a39a:	442b      	add	r3, r5
 801a39c:	6123      	str	r3, [r4, #16]
 801a39e:	2000      	movs	r0, #0
 801a3a0:	b007      	add	sp, #28
 801a3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3a6:	f04f 0b00 	mov.w	fp, #0
 801a3aa:	e7ca      	b.n	801a342 <_scanf_i+0x15e>
 801a3ac:	07ca      	lsls	r2, r1, #31
 801a3ae:	bf4c      	ite	mi
 801a3b0:	8018      	strhmi	r0, [r3, #0]
 801a3b2:	6018      	strpl	r0, [r3, #0]
 801a3b4:	e7eb      	b.n	801a38e <_scanf_i+0x1aa>
 801a3b6:	2001      	movs	r0, #1
 801a3b8:	e7f2      	b.n	801a3a0 <_scanf_i+0x1bc>
 801a3ba:	bf00      	nop
 801a3bc:	0801a730 	.word	0x0801a730
 801a3c0:	08019b59 	.word	0x08019b59
 801a3c4:	08018125 	.word	0x08018125
 801a3c8:	0802d196 	.word	0x0802d196

0801a3cc <__sccl>:
 801a3cc:	b570      	push	{r4, r5, r6, lr}
 801a3ce:	780b      	ldrb	r3, [r1, #0]
 801a3d0:	4604      	mov	r4, r0
 801a3d2:	2b5e      	cmp	r3, #94	; 0x5e
 801a3d4:	bf0b      	itete	eq
 801a3d6:	784b      	ldrbeq	r3, [r1, #1]
 801a3d8:	1c4a      	addne	r2, r1, #1
 801a3da:	1c8a      	addeq	r2, r1, #2
 801a3dc:	2100      	movne	r1, #0
 801a3de:	bf08      	it	eq
 801a3e0:	2101      	moveq	r1, #1
 801a3e2:	3801      	subs	r0, #1
 801a3e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801a3e8:	f800 1f01 	strb.w	r1, [r0, #1]!
 801a3ec:	42a8      	cmp	r0, r5
 801a3ee:	d1fb      	bne.n	801a3e8 <__sccl+0x1c>
 801a3f0:	b90b      	cbnz	r3, 801a3f6 <__sccl+0x2a>
 801a3f2:	1e50      	subs	r0, r2, #1
 801a3f4:	bd70      	pop	{r4, r5, r6, pc}
 801a3f6:	f081 0101 	eor.w	r1, r1, #1
 801a3fa:	54e1      	strb	r1, [r4, r3]
 801a3fc:	4610      	mov	r0, r2
 801a3fe:	4602      	mov	r2, r0
 801a400:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a404:	2d2d      	cmp	r5, #45	; 0x2d
 801a406:	d005      	beq.n	801a414 <__sccl+0x48>
 801a408:	2d5d      	cmp	r5, #93	; 0x5d
 801a40a:	d016      	beq.n	801a43a <__sccl+0x6e>
 801a40c:	2d00      	cmp	r5, #0
 801a40e:	d0f1      	beq.n	801a3f4 <__sccl+0x28>
 801a410:	462b      	mov	r3, r5
 801a412:	e7f2      	b.n	801a3fa <__sccl+0x2e>
 801a414:	7846      	ldrb	r6, [r0, #1]
 801a416:	2e5d      	cmp	r6, #93	; 0x5d
 801a418:	d0fa      	beq.n	801a410 <__sccl+0x44>
 801a41a:	42b3      	cmp	r3, r6
 801a41c:	dcf8      	bgt.n	801a410 <__sccl+0x44>
 801a41e:	3002      	adds	r0, #2
 801a420:	461a      	mov	r2, r3
 801a422:	3201      	adds	r2, #1
 801a424:	4296      	cmp	r6, r2
 801a426:	54a1      	strb	r1, [r4, r2]
 801a428:	dcfb      	bgt.n	801a422 <__sccl+0x56>
 801a42a:	1af2      	subs	r2, r6, r3
 801a42c:	3a01      	subs	r2, #1
 801a42e:	1c5d      	adds	r5, r3, #1
 801a430:	42b3      	cmp	r3, r6
 801a432:	bfa8      	it	ge
 801a434:	2200      	movge	r2, #0
 801a436:	18ab      	adds	r3, r5, r2
 801a438:	e7e1      	b.n	801a3fe <__sccl+0x32>
 801a43a:	4610      	mov	r0, r2
 801a43c:	e7da      	b.n	801a3f4 <__sccl+0x28>

0801a43e <__submore>:
 801a43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a442:	460c      	mov	r4, r1
 801a444:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a446:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a44a:	4299      	cmp	r1, r3
 801a44c:	d11d      	bne.n	801a48a <__submore+0x4c>
 801a44e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a452:	f7f9 ff9d 	bl	8014390 <_malloc_r>
 801a456:	b918      	cbnz	r0, 801a460 <__submore+0x22>
 801a458:	f04f 30ff 	mov.w	r0, #4294967295
 801a45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a464:	63a3      	str	r3, [r4, #56]	; 0x38
 801a466:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a46a:	6360      	str	r0, [r4, #52]	; 0x34
 801a46c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a470:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a474:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a478:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a47c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a480:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a484:	6020      	str	r0, [r4, #0]
 801a486:	2000      	movs	r0, #0
 801a488:	e7e8      	b.n	801a45c <__submore+0x1e>
 801a48a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a48c:	0077      	lsls	r7, r6, #1
 801a48e:	463a      	mov	r2, r7
 801a490:	f7ff fac1 	bl	8019a16 <_realloc_r>
 801a494:	4605      	mov	r5, r0
 801a496:	2800      	cmp	r0, #0
 801a498:	d0de      	beq.n	801a458 <__submore+0x1a>
 801a49a:	eb00 0806 	add.w	r8, r0, r6
 801a49e:	4601      	mov	r1, r0
 801a4a0:	4632      	mov	r2, r6
 801a4a2:	4640      	mov	r0, r8
 801a4a4:	f7fb fcd7 	bl	8015e56 <memcpy>
 801a4a8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a4ac:	f8c4 8000 	str.w	r8, [r4]
 801a4b0:	e7e9      	b.n	801a486 <__submore+0x48>

0801a4b2 <_raise_r>:
 801a4b2:	291f      	cmp	r1, #31
 801a4b4:	b538      	push	{r3, r4, r5, lr}
 801a4b6:	4604      	mov	r4, r0
 801a4b8:	460d      	mov	r5, r1
 801a4ba:	d904      	bls.n	801a4c6 <_raise_r+0x14>
 801a4bc:	2316      	movs	r3, #22
 801a4be:	6003      	str	r3, [r0, #0]
 801a4c0:	f04f 30ff 	mov.w	r0, #4294967295
 801a4c4:	bd38      	pop	{r3, r4, r5, pc}
 801a4c6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a4c8:	b112      	cbz	r2, 801a4d0 <_raise_r+0x1e>
 801a4ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a4ce:	b94b      	cbnz	r3, 801a4e4 <_raise_r+0x32>
 801a4d0:	4620      	mov	r0, r4
 801a4d2:	f000 f831 	bl	801a538 <_getpid_r>
 801a4d6:	462a      	mov	r2, r5
 801a4d8:	4601      	mov	r1, r0
 801a4da:	4620      	mov	r0, r4
 801a4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a4e0:	f000 b818 	b.w	801a514 <_kill_r>
 801a4e4:	2b01      	cmp	r3, #1
 801a4e6:	d00a      	beq.n	801a4fe <_raise_r+0x4c>
 801a4e8:	1c59      	adds	r1, r3, #1
 801a4ea:	d103      	bne.n	801a4f4 <_raise_r+0x42>
 801a4ec:	2316      	movs	r3, #22
 801a4ee:	6003      	str	r3, [r0, #0]
 801a4f0:	2001      	movs	r0, #1
 801a4f2:	e7e7      	b.n	801a4c4 <_raise_r+0x12>
 801a4f4:	2400      	movs	r4, #0
 801a4f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a4fa:	4628      	mov	r0, r5
 801a4fc:	4798      	blx	r3
 801a4fe:	2000      	movs	r0, #0
 801a500:	e7e0      	b.n	801a4c4 <_raise_r+0x12>
	...

0801a504 <raise>:
 801a504:	4b02      	ldr	r3, [pc, #8]	; (801a510 <raise+0xc>)
 801a506:	4601      	mov	r1, r0
 801a508:	6818      	ldr	r0, [r3, #0]
 801a50a:	f7ff bfd2 	b.w	801a4b2 <_raise_r>
 801a50e:	bf00      	nop
 801a510:	240001d8 	.word	0x240001d8

0801a514 <_kill_r>:
 801a514:	b538      	push	{r3, r4, r5, lr}
 801a516:	4d07      	ldr	r5, [pc, #28]	; (801a534 <_kill_r+0x20>)
 801a518:	2300      	movs	r3, #0
 801a51a:	4604      	mov	r4, r0
 801a51c:	4608      	mov	r0, r1
 801a51e:	4611      	mov	r1, r2
 801a520:	602b      	str	r3, [r5, #0]
 801a522:	f7e7 fed1 	bl	80022c8 <_kill>
 801a526:	1c43      	adds	r3, r0, #1
 801a528:	d102      	bne.n	801a530 <_kill_r+0x1c>
 801a52a:	682b      	ldr	r3, [r5, #0]
 801a52c:	b103      	cbz	r3, 801a530 <_kill_r+0x1c>
 801a52e:	6023      	str	r3, [r4, #0]
 801a530:	bd38      	pop	{r3, r4, r5, pc}
 801a532:	bf00      	nop
 801a534:	240314c4 	.word	0x240314c4

0801a538 <_getpid_r>:
 801a538:	f7e7 bebe 	b.w	80022b8 <_getpid>

0801a53c <sqrtf>:
 801a53c:	b508      	push	{r3, lr}
 801a53e:	ed2d 8b02 	vpush	{d8}
 801a542:	eeb0 8a40 	vmov.f32	s16, s0
 801a546:	f000 f817 	bl	801a578 <__ieee754_sqrtf>
 801a54a:	eeb4 8a48 	vcmp.f32	s16, s16
 801a54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a552:	d60c      	bvs.n	801a56e <sqrtf+0x32>
 801a554:	eddf 8a07 	vldr	s17, [pc, #28]	; 801a574 <sqrtf+0x38>
 801a558:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a560:	d505      	bpl.n	801a56e <sqrtf+0x32>
 801a562:	f7fb fc49 	bl	8015df8 <__errno>
 801a566:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801a56a:	2321      	movs	r3, #33	; 0x21
 801a56c:	6003      	str	r3, [r0, #0]
 801a56e:	ecbd 8b02 	vpop	{d8}
 801a572:	bd08      	pop	{r3, pc}
 801a574:	00000000 	.word	0x00000000

0801a578 <__ieee754_sqrtf>:
 801a578:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a57c:	4770      	bx	lr
	...

0801a580 <_init>:
 801a580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a582:	bf00      	nop
 801a584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a586:	bc08      	pop	{r3}
 801a588:	469e      	mov	lr, r3
 801a58a:	4770      	bx	lr

0801a58c <_fini>:
 801a58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a58e:	bf00      	nop
 801a590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a592:	bc08      	pop	{r3}
 801a594:	469e      	mov	lr, r3
 801a596:	4770      	bx	lr
